// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sim.v
// Device     : SIM
// LiteX sha1 : dd54d77db
// Date       : 2025-05-24 19:23:17
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module sim (
    input  wire    [7:0] serial_sink_data,
    output wire          serial_sink_ready,
    input  wire          serial_sink_valid,
    output wire    [7:0] serial_source_data,
    input  wire          serial_source_ready,
    output wire          serial_source_valid,
    output wire          sim_trace,
    input  wire          sys_clk
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
SimSoC
└─── crg (CRG)
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── rom (SRAM)
└─── sram (SRAM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHYModel)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          bus_error;
reg    [31:0] bus_errors = 32'd0;
reg           bus_errors_re = 1'd0;
wire   [31:0] bus_errors_status;
wire          bus_errors_we;
reg    [19:0] count = 20'd1000000;
wire          cpu_rst;
wire    [5:0] csr_bankarray_adr;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_r;
reg           csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_w;
reg           csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_r;
reg           csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_w;
reg           csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_r;
reg           csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_w;
reg           csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          csr_bankarray_csrbank0_sel;
wire    [1:0] csr_bankarray_csrbank1_ev_enable0_r;
reg           csr_bankarray_csrbank1_ev_enable0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank1_ev_enable0_w;
reg           csr_bankarray_csrbank1_ev_enable0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank1_ev_pending_r;
reg           csr_bankarray_csrbank1_ev_pending_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank1_ev_pending_w;
reg           csr_bankarray_csrbank1_ev_pending_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank1_ev_status_r;
reg           csr_bankarray_csrbank1_ev_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank1_ev_status_w;
reg           csr_bankarray_csrbank1_ev_status_we = 1'd0;
wire          csr_bankarray_csrbank1_rxempty_r;
reg           csr_bankarray_csrbank1_rxempty_re = 1'd0;
wire          csr_bankarray_csrbank1_rxempty_w;
reg           csr_bankarray_csrbank1_rxempty_we = 1'd0;
wire          csr_bankarray_csrbank1_rxfull_r;
reg           csr_bankarray_csrbank1_rxfull_re = 1'd0;
wire          csr_bankarray_csrbank1_rxfull_w;
reg           csr_bankarray_csrbank1_rxfull_we = 1'd0;
wire          csr_bankarray_csrbank1_sel;
wire          csr_bankarray_csrbank1_txempty_r;
reg           csr_bankarray_csrbank1_txempty_re = 1'd0;
wire          csr_bankarray_csrbank1_txempty_w;
reg           csr_bankarray_csrbank1_txempty_we = 1'd0;
wire          csr_bankarray_csrbank1_txfull_r;
reg           csr_bankarray_csrbank1_txfull_re = 1'd0;
wire          csr_bankarray_csrbank1_txfull_w;
reg           csr_bankarray_csrbank1_txfull_we = 1'd0;
wire    [7:0] csr_bankarray_dat_r;
wire   [13:0] csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface0_bank_bus_dat_w;
wire          csr_bankarray_interface0_bank_bus_re;
wire          csr_bankarray_interface0_bank_bus_we;
wire   [13:0] csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface1_bank_bus_dat_w;
wire          csr_bankarray_interface1_bank_bus_re;
wire          csr_bankarray_interface1_bank_bus_we;
wire          csr_bankarray_sel;
reg           csr_bankarray_sel_r = 1'd0;
wire   [13:0] csr_bankarray_sram_bus_adr;
reg    [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_sram_bus_dat_w;
wire          csr_bankarray_sram_bus_re;
wire          csr_bankarray_sram_bus_we;
wire   [13:0] csr_interconnect_adr;
wire   [31:0] csr_interconnect_dat_r;
wire   [31:0] csr_interconnect_dat_w;
wire          csr_interconnect_re;
wire          csr_interconnect_we;
wire          dbus_ack;
wire   [29:0] dbus_adr;
wire    [1:0] dbus_bte;
wire    [2:0] dbus_cti;
wire          dbus_cyc;
wire   [31:0] dbus_dat_r;
wire   [31:0] dbus_dat_w;
wire          dbus_err;
wire    [3:0] dbus_sel;
wire          dbus_stb;
wire          dbus_we;
wire          done;
reg           enable_re = 1'd0;
reg     [1:0] enable_storage = 2'd0;
reg           error = 1'd0;
reg           grant = 1'd0;
wire          ibus_ack;
wire   [29:0] ibus_adr;
wire    [1:0] ibus_bte;
wire    [2:0] ibus_cti;
wire          ibus_cyc;
wire   [31:0] ibus_dat_r;
wire   [31:0] ibus_dat_w;
wire          ibus_err;
wire    [3:0] ibus_sel;
wire          ibus_stb;
wire          ibus_we;
reg           int_rst = 1'd1;
reg           interface0_ack = 1'd0;
wire   [29:0] interface0_adr;
wire    [1:0] interface0_bte;
wire    [2:0] interface0_cti;
wire          interface0_cyc;
reg    [31:0] interface0_dat_r = 32'd0;
wire   [31:0] interface0_dat_w;
reg           interface0_err = 1'd0;
wire    [3:0] interface0_sel;
wire          interface0_stb;
wire          interface0_we;
reg    [13:0] interface1_adr = 14'd0;
wire   [31:0] interface1_dat_r;
reg    [31:0] interface1_dat_w = 32'd0;
reg           interface1_re = 1'd0;
reg           interface1_we = 1'd0;
reg    [31:0] interrupt = 32'd0;
wire          irq;
reg     [2:0] master = 3'd0;
reg           next_state = 1'd0;
reg     [1:0] pending_r = 2'd0;
reg           pending_re = 1'd0;
reg     [1:0] pending_status = 2'd0;
wire          pending_we;
wire          por_clk;
wire   [10:0] ram_adr;
reg           ram_adr_burst = 1'd0;
reg           ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] ram_bus_ram_bus_adr;
wire    [1:0] ram_bus_ram_bus_bte;
wire    [2:0] ram_bus_ram_bus_cti;
wire          ram_bus_ram_bus_cyc;
wire   [31:0] ram_bus_ram_bus_dat_r;
wire   [31:0] ram_bus_ram_bus_dat_w;
reg           ram_bus_ram_bus_err = 1'd0;
wire    [3:0] ram_bus_ram_bus_sel;
wire          ram_bus_ram_bus_stb;
wire          ram_bus_ram_bus_we;
wire   [31:0] ram_dat_r;
wire   [31:0] ram_dat_w;
reg     [3:0] ram_we = 4'd0;
wire    [1:0] request;
wire          reset;
reg           reset_re = 1'd0;
reg     [1:0] reset_storage = 2'd0;
wire          rx0;
wire          rx1;
wire          rx2;
reg           rx_clear = 1'd0;
reg     [3:0] rx_fifo_consume = 4'd0;
wire          rx_fifo_do_read;
wire          rx_fifo_fifo_in_first;
wire          rx_fifo_fifo_in_last;
wire    [7:0] rx_fifo_fifo_in_payload_data;
wire          rx_fifo_fifo_out_first;
wire          rx_fifo_fifo_out_last;
wire    [7:0] rx_fifo_fifo_out_payload_data;
reg     [4:0] rx_fifo_level0 = 5'd0;
wire    [4:0] rx_fifo_level1;
reg     [3:0] rx_fifo_produce = 4'd0;
wire    [3:0] rx_fifo_rdport_adr;
wire    [9:0] rx_fifo_rdport_dat_r;
wire          rx_fifo_rdport_re;
wire          rx_fifo_re;
reg           rx_fifo_readable = 1'd0;
reg           rx_fifo_replace = 1'd0;
wire          rx_fifo_sink_first;
wire          rx_fifo_sink_last;
wire    [7:0] rx_fifo_sink_payload_data;
wire          rx_fifo_sink_ready;
wire          rx_fifo_sink_valid;
wire          rx_fifo_source_first;
wire          rx_fifo_source_last;
wire    [7:0] rx_fifo_source_payload_data;
wire          rx_fifo_source_ready;
wire          rx_fifo_source_valid;
wire    [9:0] rx_fifo_syncfifo_din;
wire    [9:0] rx_fifo_syncfifo_dout;
wire          rx_fifo_syncfifo_re;
wire          rx_fifo_syncfifo_readable;
wire          rx_fifo_syncfifo_we;
wire          rx_fifo_syncfifo_writable;
reg     [3:0] rx_fifo_wrport_adr = 4'd0;
wire    [9:0] rx_fifo_wrport_dat_r;
wire    [9:0] rx_fifo_wrport_dat_w;
wire          rx_fifo_wrport_we;
reg           rx_pending = 1'd0;
wire          rx_status;
wire          rx_trigger;
reg           rx_trigger_d = 1'd0;
reg           rxempty_re = 1'd0;
wire          rxempty_status;
wire          rxempty_we;
reg           rxfull_re = 1'd0;
wire          rxfull_status;
wire          rxfull_we;
wire    [7:0] rxtx_r;
reg           rxtx_re = 1'd0;
wire    [7:0] rxtx_w;
reg           rxtx_we = 1'd0;
reg           scratch_re = 1'd0;
reg    [31:0] scratch_storage = 32'd305419896;
reg    [29:0] self0 = 30'd0;
reg    [31:0] self1 = 32'd0;
reg     [3:0] self2 = 4'd0;
reg           self3 = 1'd0;
reg           self4 = 1'd0;
reg           self5 = 1'd0;
reg     [2:0] self6 = 3'd0;
reg     [1:0] self7 = 2'd0;
reg           shared_ack = 1'd0;
wire   [29:0] shared_adr;
wire    [1:0] shared_bte;
wire    [2:0] shared_cti;
wire          shared_cyc;
reg    [31:0] shared_dat_r = 32'd0;
wire   [31:0] shared_dat_w;
wire          shared_err;
wire    [3:0] shared_sel;
wire          shared_stb;
wire          shared_we;
wire   [14:0] simsoc_adr;
reg           simsoc_adr_burst = 1'd0;
wire   [31:0] simsoc_dat_r;
reg           simsoc_ram_bus_ack = 1'd0;
wire   [29:0] simsoc_ram_bus_adr;
wire    [1:0] simsoc_ram_bus_bte;
wire    [2:0] simsoc_ram_bus_cti;
wire          simsoc_ram_bus_cyc;
wire   [31:0] simsoc_ram_bus_dat_r;
wire   [31:0] simsoc_ram_bus_dat_w;
reg           simsoc_ram_bus_err = 1'd0;
wire    [3:0] simsoc_ram_bus_sel;
wire          simsoc_ram_bus_stb;
wire          simsoc_ram_bus_we;
wire          sink_first;
wire          sink_last;
wire    [7:0] sink_payload_data;
wire          sink_ready;
wire          sink_valid;
reg     [2:0] slaves = 3'd0;
reg           soc_rst = 1'd0;
reg           source_first = 1'd0;
reg           source_last = 1'd0;
wire    [7:0] source_payload_data;
wire          source_ready;
wire          source_valid;
reg           state = 1'd0;
reg           status_re = 1'd0;
reg     [1:0] status_status = 2'd0;
wire          status_we;
wire          sys_clk_1;
wire          sys_rst;
wire          tx0;
wire          tx1;
wire          tx2;
reg           tx_clear = 1'd0;
reg     [3:0] tx_fifo_consume = 4'd0;
wire          tx_fifo_do_read;
wire          tx_fifo_fifo_in_first;
wire          tx_fifo_fifo_in_last;
wire    [7:0] tx_fifo_fifo_in_payload_data;
wire          tx_fifo_fifo_out_first;
wire          tx_fifo_fifo_out_last;
wire    [7:0] tx_fifo_fifo_out_payload_data;
reg     [4:0] tx_fifo_level0 = 5'd0;
wire    [4:0] tx_fifo_level1;
reg     [3:0] tx_fifo_produce = 4'd0;
wire    [3:0] tx_fifo_rdport_adr;
wire    [9:0] tx_fifo_rdport_dat_r;
wire          tx_fifo_rdport_re;
wire          tx_fifo_re;
reg           tx_fifo_readable = 1'd0;
reg           tx_fifo_replace = 1'd0;
reg           tx_fifo_sink_first = 1'd0;
reg           tx_fifo_sink_last = 1'd0;
wire    [7:0] tx_fifo_sink_payload_data;
wire          tx_fifo_sink_ready;
wire          tx_fifo_sink_valid;
wire          tx_fifo_source_first;
wire          tx_fifo_source_last;
wire    [7:0] tx_fifo_source_payload_data;
wire          tx_fifo_source_ready;
wire          tx_fifo_source_valid;
wire    [9:0] tx_fifo_syncfifo_din;
wire    [9:0] tx_fifo_syncfifo_dout;
wire          tx_fifo_syncfifo_re;
wire          tx_fifo_syncfifo_readable;
wire          tx_fifo_syncfifo_we;
wire          tx_fifo_syncfifo_writable;
reg     [3:0] tx_fifo_wrport_adr = 4'd0;
wire    [9:0] tx_fifo_wrport_dat_r;
wire    [9:0] tx_fifo_wrport_dat_w;
wire          tx_fifo_wrport_we;
reg           tx_pending = 1'd0;
wire          tx_status;
wire          tx_trigger;
reg           tx_trigger_d = 1'd0;
reg           txempty_re = 1'd0;
wire          txempty_status;
wire          txempty_we;
reg           txfull_re = 1'd0;
wire          txfull_status;
wire          txfull_we;
wire          uart_sink_first;
wire          uart_sink_last;
wire    [7:0] uart_sink_payload_data;
wire          uart_sink_ready;
wire          uart_sink_valid;
wire          uart_source_first;
wire          uart_source_last;
wire    [7:0] uart_source_payload_data;
wire          uart_source_ready;
wire          uart_source_valid;
reg    [31:0] vexriscv = 32'd0;
wire          wait_1;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign reset = (soc_rst | cpu_rst);
assign sim_trace = 1'd1;
assign bus_error = error;
always @(*) begin
    interrupt <= 32'd0;
    interrupt[0] <= irq;
end
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst = int_rst;
assign shared_adr = self0;
assign shared_dat_w = self1;
assign shared_sel = self2;
assign shared_cyc = self3;
assign shared_stb = self4;
assign shared_we = self5;
assign shared_cti = self6;
assign shared_bte = self7;
assign ibus_dat_r = shared_dat_r;
assign dbus_dat_r = shared_dat_r;
assign ibus_ack = (shared_ack & (grant == 1'd0));
assign dbus_ack = (shared_ack & (grant == 1'd1));
assign ibus_err = (shared_err & (grant == 1'd0));
assign dbus_err = (shared_err & (grant == 1'd1));
assign request = {dbus_cyc, ibus_cyc};
always @(*) begin
    master <= 3'd0;
    master[0] <= (shared_adr[29:15] == 1'd0);
    master[1] <= (shared_adr[29:11] == 16'd32768);
    master[2] <= (shared_adr[29:14] == 16'd61440);
end
assign simsoc_ram_bus_adr = shared_adr;
assign simsoc_ram_bus_dat_w = shared_dat_w;
assign simsoc_ram_bus_sel = shared_sel;
assign simsoc_ram_bus_stb = shared_stb;
assign simsoc_ram_bus_we = shared_we;
assign simsoc_ram_bus_cti = shared_cti;
assign simsoc_ram_bus_bte = shared_bte;
assign ram_bus_ram_bus_adr = shared_adr;
assign ram_bus_ram_bus_dat_w = shared_dat_w;
assign ram_bus_ram_bus_sel = shared_sel;
assign ram_bus_ram_bus_stb = shared_stb;
assign ram_bus_ram_bus_we = shared_we;
assign ram_bus_ram_bus_cti = shared_cti;
assign ram_bus_ram_bus_bte = shared_bte;
assign interface0_adr = shared_adr;
assign interface0_dat_w = shared_dat_w;
assign interface0_sel = shared_sel;
assign interface0_stb = shared_stb;
assign interface0_we = shared_we;
assign interface0_cti = shared_cti;
assign interface0_bte = shared_bte;
assign simsoc_ram_bus_cyc = (shared_cyc & master[0]);
assign ram_bus_ram_bus_cyc = (shared_cyc & master[1]);
assign interface0_cyc = (shared_cyc & master[2]);
always @(*) begin
    shared_ack <= 1'd0;
    shared_ack <= ((simsoc_ram_bus_ack | ram_bus_ram_bus_ack) | interface0_ack);
    if (done) begin
        shared_ack <= 1'd1;
    end
end
assign shared_err = ((simsoc_ram_bus_err | ram_bus_ram_bus_err) | interface0_err);
always @(*) begin
    shared_dat_r <= 32'd0;
    shared_dat_r <= ((({32{slaves[0]}} & simsoc_ram_bus_dat_r) | ({32{slaves[1]}} & ram_bus_ram_bus_dat_r)) | ({32{slaves[2]}} & interface0_dat_r));
    if (done) begin
        shared_dat_r <= 32'd4294967295;
    end
end
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
    error <= 1'd0;
    if (done) begin
        error <= 1'd1;
    end
end
assign done = (count == 1'd0);
assign bus_errors_status = bus_errors;
assign simsoc_adr = simsoc_ram_bus_adr[14:0];
assign simsoc_ram_bus_dat_r = simsoc_dat_r;
always @(*) begin
    ram_we <= 4'd0;
    ram_we[0] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[0]);
    ram_we[1] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[1]);
    ram_we[2] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[2]);
    ram_we[3] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[3]);
end
assign ram_adr = ram_bus_ram_bus_adr[10:0];
assign ram_bus_ram_bus_dat_r = ram_dat_r;
assign ram_dat_w = ram_bus_ram_bus_dat_w;
assign serial_source_valid = sink_valid;
assign serial_source_data = sink_payload_data;
assign sink_ready = serial_source_ready;
assign source_valid = serial_sink_valid;
assign source_payload_data = serial_sink_data;
assign serial_sink_ready = source_ready;
assign uart_sink_valid = source_valid;
assign source_ready = uart_sink_ready;
assign uart_sink_first = source_first;
assign uart_sink_last = source_last;
assign uart_sink_payload_data = source_payload_data;
assign sink_valid = uart_source_valid;
assign uart_source_ready = sink_ready;
assign sink_first = uart_source_first;
assign sink_last = uart_source_last;
assign sink_payload_data = uart_source_payload_data;
assign tx_fifo_sink_valid = rxtx_re;
assign tx_fifo_sink_payload_data = rxtx_r;
assign uart_source_valid = tx_fifo_source_valid;
assign tx_fifo_source_ready = uart_source_ready;
assign uart_source_first = tx_fifo_source_first;
assign uart_source_last = tx_fifo_source_last;
assign uart_source_payload_data = tx_fifo_source_payload_data;
assign txfull_status = (~tx_fifo_sink_ready);
assign txempty_status = (~tx_fifo_source_valid);
assign tx_trigger = tx_fifo_sink_ready;
assign rx_fifo_sink_valid = uart_sink_valid;
assign uart_sink_ready = rx_fifo_sink_ready;
assign rx_fifo_sink_first = uart_sink_first;
assign rx_fifo_sink_last = uart_sink_last;
assign rx_fifo_sink_payload_data = uart_sink_payload_data;
assign rxtx_w = rx_fifo_source_payload_data;
assign rx_fifo_source_ready = (rx_clear | (1'd0 & rxtx_we));
assign rxempty_status = (~rx_fifo_source_valid);
assign rxfull_status = (~rx_fifo_sink_ready);
assign rx_trigger = rx_fifo_source_valid;
assign tx0 = tx_status;
assign tx1 = tx_pending;
always @(*) begin
    tx_clear <= 1'd0;
    if ((pending_re & pending_r[0])) begin
        tx_clear <= 1'd1;
    end
end
assign rx0 = rx_status;
assign rx1 = rx_pending;
always @(*) begin
    rx_clear <= 1'd0;
    if ((pending_re & pending_r[1])) begin
        rx_clear <= 1'd1;
    end
end
assign irq = ((pending_status[0] & enable_storage[0]) | (pending_status[1] & enable_storage[1]));
assign tx_status = tx_trigger;
assign rx_status = rx_trigger;
assign tx_fifo_syncfifo_din = {tx_fifo_fifo_in_last, tx_fifo_fifo_in_first, tx_fifo_fifo_in_payload_data};
assign {tx_fifo_fifo_out_last, tx_fifo_fifo_out_first, tx_fifo_fifo_out_payload_data} = tx_fifo_syncfifo_dout;
assign {tx_fifo_fifo_out_last, tx_fifo_fifo_out_first, tx_fifo_fifo_out_payload_data} = tx_fifo_syncfifo_dout;
assign {tx_fifo_fifo_out_last, tx_fifo_fifo_out_first, tx_fifo_fifo_out_payload_data} = tx_fifo_syncfifo_dout;
assign tx_fifo_sink_ready = tx_fifo_syncfifo_writable;
assign tx_fifo_syncfifo_we = tx_fifo_sink_valid;
assign tx_fifo_fifo_in_first = tx_fifo_sink_first;
assign tx_fifo_fifo_in_last = tx_fifo_sink_last;
assign tx_fifo_fifo_in_payload_data = tx_fifo_sink_payload_data;
assign tx_fifo_source_valid = tx_fifo_readable;
assign tx_fifo_source_first = tx_fifo_fifo_out_first;
assign tx_fifo_source_last = tx_fifo_fifo_out_last;
assign tx_fifo_source_payload_data = tx_fifo_fifo_out_payload_data;
assign tx_fifo_re = tx_fifo_source_ready;
assign tx_fifo_syncfifo_re = (tx_fifo_syncfifo_readable & ((~tx_fifo_readable) | tx_fifo_re));
assign tx_fifo_level1 = (tx_fifo_level0 + tx_fifo_readable);
always @(*) begin
    tx_fifo_wrport_adr <= 4'd0;
    if (tx_fifo_replace) begin
        tx_fifo_wrport_adr <= (tx_fifo_produce - 1'd1);
    end else begin
        tx_fifo_wrport_adr <= tx_fifo_produce;
    end
end
assign tx_fifo_wrport_dat_w = tx_fifo_syncfifo_din;
assign tx_fifo_wrport_we = (tx_fifo_syncfifo_we & (tx_fifo_syncfifo_writable | tx_fifo_replace));
assign tx_fifo_do_read = (tx_fifo_syncfifo_readable & tx_fifo_syncfifo_re);
assign tx_fifo_rdport_adr = tx_fifo_consume;
assign tx_fifo_syncfifo_dout = tx_fifo_rdport_dat_r;
assign tx_fifo_rdport_re = tx_fifo_do_read;
assign tx_fifo_syncfifo_writable = (tx_fifo_level0 != 5'd16);
assign tx_fifo_syncfifo_readable = (tx_fifo_level0 != 1'd0);
assign rx_fifo_syncfifo_din = {rx_fifo_fifo_in_last, rx_fifo_fifo_in_first, rx_fifo_fifo_in_payload_data};
assign {rx_fifo_fifo_out_last, rx_fifo_fifo_out_first, rx_fifo_fifo_out_payload_data} = rx_fifo_syncfifo_dout;
assign {rx_fifo_fifo_out_last, rx_fifo_fifo_out_first, rx_fifo_fifo_out_payload_data} = rx_fifo_syncfifo_dout;
assign {rx_fifo_fifo_out_last, rx_fifo_fifo_out_first, rx_fifo_fifo_out_payload_data} = rx_fifo_syncfifo_dout;
assign rx_fifo_sink_ready = rx_fifo_syncfifo_writable;
assign rx_fifo_syncfifo_we = rx_fifo_sink_valid;
assign rx_fifo_fifo_in_first = rx_fifo_sink_first;
assign rx_fifo_fifo_in_last = rx_fifo_sink_last;
assign rx_fifo_fifo_in_payload_data = rx_fifo_sink_payload_data;
assign rx_fifo_source_valid = rx_fifo_readable;
assign rx_fifo_source_first = rx_fifo_fifo_out_first;
assign rx_fifo_source_last = rx_fifo_fifo_out_last;
assign rx_fifo_source_payload_data = rx_fifo_fifo_out_payload_data;
assign rx_fifo_re = rx_fifo_source_ready;
assign rx_fifo_syncfifo_re = (rx_fifo_syncfifo_readable & ((~rx_fifo_readable) | rx_fifo_re));
assign rx_fifo_level1 = (rx_fifo_level0 + rx_fifo_readable);
always @(*) begin
    rx_fifo_wrport_adr <= 4'd0;
    if (rx_fifo_replace) begin
        rx_fifo_wrport_adr <= (rx_fifo_produce - 1'd1);
    end else begin
        rx_fifo_wrport_adr <= rx_fifo_produce;
    end
end
assign rx_fifo_wrport_dat_w = rx_fifo_syncfifo_din;
assign rx_fifo_wrport_we = (rx_fifo_syncfifo_we & (rx_fifo_syncfifo_writable | rx_fifo_replace));
assign rx_fifo_do_read = (rx_fifo_syncfifo_readable & rx_fifo_syncfifo_re);
assign rx_fifo_rdport_adr = rx_fifo_consume;
assign rx_fifo_syncfifo_dout = rx_fifo_rdport_dat_r;
assign rx_fifo_rdport_re = rx_fifo_do_read;
assign rx_fifo_syncfifo_writable = (rx_fifo_level0 != 5'd16);
assign rx_fifo_syncfifo_readable = (rx_fifo_level0 != 1'd0);
always @(*) begin
    next_state <= 1'd0;
    next_state <= state;
    case (state)
        1'd1: begin
            next_state <= 1'd0;
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    interface1_re <= 1'd0;
    case (state)
        1'd1: begin
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                interface1_re <= ((~interface0_we) & (interface0_sel != 1'd0));
            end
        end
    endcase
end
always @(*) begin
    interface1_we <= 1'd0;
    case (state)
        1'd1: begin
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                interface1_we <= (interface0_we & (interface0_sel != 1'd0));
            end
        end
    endcase
end
always @(*) begin
    interface1_dat_w <= 32'd0;
    case (state)
        1'd1: begin
        end
        default: begin
            interface1_dat_w <= interface0_dat_w;
        end
    endcase
end
always @(*) begin
    interface0_dat_r <= 32'd0;
    case (state)
        1'd1: begin
            interface0_dat_r <= interface1_dat_r;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    interface0_ack <= 1'd0;
    case (state)
        1'd1: begin
            interface0_ack <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    interface1_adr <= 14'd0;
    case (state)
        1'd1: begin
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                interface1_adr <= interface0_adr;
            end
        end
    endcase
end
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign csr_bankarray_csrbank0_reset0_r = csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_reset0_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    csr_bankarray_csrbank0_reset0_re <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_reset0_re <= csr_bankarray_interface0_bank_bus_we;
    end
end
assign csr_bankarray_csrbank0_scratch0_r = csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_scratch0_re <= csr_bankarray_interface0_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_scratch0_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
assign csr_bankarray_csrbank0_bus_errors_r = csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank0_bus_errors_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank0_bus_errors_re <= csr_bankarray_interface0_bank_bus_we;
    end
end
always @(*) begin
    soc_rst <= 1'd0;
    if (reset_re) begin
        soc_rst <= reset_storage[0];
    end
end
assign cpu_rst = reset_storage[1];
assign csr_bankarray_csrbank0_reset0_w = reset_storage;
assign csr_bankarray_csrbank0_scratch0_w = scratch_storage;
assign csr_bankarray_csrbank0_bus_errors_w = bus_errors_status;
assign bus_errors_we = csr_bankarray_csrbank0_bus_errors_we;
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (csr_bankarray_sel_r) begin
        csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
    end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[5:0];
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign rxtx_r = csr_bankarray_interface1_bank_bus_dat_w[7:0];
always @(*) begin
    rxtx_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        rxtx_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
always @(*) begin
    rxtx_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        rxtx_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_txfull_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_txfull_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank1_txfull_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank1_txfull_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank1_txfull_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_rxempty_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_rxempty_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank1_rxempty_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank1_rxempty_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank1_rxempty_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_ev_status_r = csr_bankarray_interface1_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank1_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank1_ev_status_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
always @(*) begin
    csr_bankarray_csrbank1_ev_status_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank1_ev_status_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
assign csr_bankarray_csrbank1_ev_pending_r = csr_bankarray_interface1_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank1_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank1_ev_pending_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
always @(*) begin
    csr_bankarray_csrbank1_ev_pending_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank1_ev_pending_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
assign csr_bankarray_csrbank1_ev_enable0_r = csr_bankarray_interface1_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank1_ev_enable0_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank1_ev_enable0_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank1_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank1_ev_enable0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_txempty_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_txempty_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank1_txempty_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
always @(*) begin
    csr_bankarray_csrbank1_txempty_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank1_txempty_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
assign csr_bankarray_csrbank1_rxfull_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_rxfull_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank1_rxfull_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
always @(*) begin
    csr_bankarray_csrbank1_rxfull_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank1_rxfull_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
assign csr_bankarray_csrbank1_txfull_w = txfull_status;
assign txfull_we = csr_bankarray_csrbank1_txfull_we;
assign csr_bankarray_csrbank1_rxempty_w = rxempty_status;
assign rxempty_we = csr_bankarray_csrbank1_rxempty_we;
always @(*) begin
    status_status <= 2'd0;
    status_status[0] <= tx0;
    status_status[1] <= rx0;
end
assign csr_bankarray_csrbank1_ev_status_w = status_status;
assign status_we = csr_bankarray_csrbank1_ev_status_we;
always @(*) begin
    pending_status <= 2'd0;
    pending_status[0] <= tx1;
    pending_status[1] <= rx1;
end
assign csr_bankarray_csrbank1_ev_pending_w = pending_status;
assign pending_we = csr_bankarray_csrbank1_ev_pending_we;
assign tx2 = enable_storage[0];
assign rx2 = enable_storage[1];
assign csr_bankarray_csrbank1_ev_enable0_w = enable_storage;
assign csr_bankarray_csrbank1_txempty_w = txempty_status;
assign txempty_we = csr_bankarray_csrbank1_txempty_we;
assign csr_bankarray_csrbank1_rxfull_w = rxfull_status;
assign rxfull_we = csr_bankarray_csrbank1_rxfull_we;
assign csr_interconnect_adr = interface1_adr;
assign csr_interconnect_re = interface1_re;
assign csr_interconnect_we = interface1_we;
assign csr_interconnect_dat_w = interface1_dat_w;
assign interface1_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface1_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_sram_bus_re = csr_interconnect_re;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = ((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
always @(*) begin
    self0 <= 30'd0;
    case (grant)
        1'd0: begin
            self0 <= ibus_adr;
        end
        default: begin
            self0 <= dbus_adr;
        end
    endcase
end
always @(*) begin
    self1 <= 32'd0;
    case (grant)
        1'd0: begin
            self1 <= ibus_dat_w;
        end
        default: begin
            self1 <= dbus_dat_w;
        end
    endcase
end
always @(*) begin
    self2 <= 4'd0;
    case (grant)
        1'd0: begin
            self2 <= ibus_sel;
        end
        default: begin
            self2 <= dbus_sel;
        end
    endcase
end
always @(*) begin
    self3 <= 1'd0;
    case (grant)
        1'd0: begin
            self3 <= ibus_cyc;
        end
        default: begin
            self3 <= dbus_cyc;
        end
    endcase
end
always @(*) begin
    self4 <= 1'd0;
    case (grant)
        1'd0: begin
            self4 <= ibus_stb;
        end
        default: begin
            self4 <= dbus_stb;
        end
    endcase
end
always @(*) begin
    self5 <= 1'd0;
    case (grant)
        1'd0: begin
            self5 <= ibus_we;
        end
        default: begin
            self5 <= dbus_we;
        end
    endcase
end
always @(*) begin
    self6 <= 3'd0;
    case (grant)
        1'd0: begin
            self6 <= ibus_cti;
        end
        default: begin
            self6 <= dbus_cti;
        end
    endcase
end
always @(*) begin
    self7 <= 2'd0;
    case (grant)
        1'd0: begin
            self7 <= ibus_bte;
        end
        default: begin
            self7 <= dbus_bte;
        end
    endcase
end


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    int_rst <= 1'd0;
end

always @(posedge sys_clk_1) begin
    case (grant)
        1'd0: begin
            if ((~request[0])) begin
                if (request[1]) begin
                    grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~request[1])) begin
                if (request[0]) begin
                    grant <= 1'd0;
                end
            end
        end
    endcase
    slaves <= master;
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 20'd1000000;
    end
    if ((bus_errors != 32'd4294967295)) begin
        if (bus_error) begin
            bus_errors <= (bus_errors + 1'd1);
        end
    end
    simsoc_ram_bus_ack <= 1'd0;
    if (((simsoc_ram_bus_cyc & simsoc_ram_bus_stb) & ((~simsoc_ram_bus_ack) | simsoc_adr_burst))) begin
        simsoc_ram_bus_ack <= 1'd1;
    end
    ram_bus_ram_bus_ack <= 1'd0;
    if (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ((~ram_bus_ram_bus_ack) | ram_adr_burst))) begin
        ram_bus_ram_bus_ack <= 1'd1;
    end
    if (tx_clear) begin
        tx_pending <= 1'd0;
    end
    tx_trigger_d <= tx_trigger;
    if ((tx_trigger & (~tx_trigger_d))) begin
        tx_pending <= 1'd1;
    end
    if (rx_clear) begin
        rx_pending <= 1'd0;
    end
    rx_trigger_d <= rx_trigger;
    if ((rx_trigger & (~rx_trigger_d))) begin
        rx_pending <= 1'd1;
    end
    if (tx_fifo_syncfifo_re) begin
        tx_fifo_readable <= 1'd1;
    end else begin
        if (tx_fifo_re) begin
            tx_fifo_readable <= 1'd0;
        end
    end
    if (((tx_fifo_syncfifo_we & tx_fifo_syncfifo_writable) & (~tx_fifo_replace))) begin
        tx_fifo_produce <= (tx_fifo_produce + 1'd1);
    end
    if (tx_fifo_do_read) begin
        tx_fifo_consume <= (tx_fifo_consume + 1'd1);
    end
    if (((tx_fifo_syncfifo_we & tx_fifo_syncfifo_writable) & (~tx_fifo_replace))) begin
        if ((~tx_fifo_do_read)) begin
            tx_fifo_level0 <= (tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (tx_fifo_do_read) begin
            tx_fifo_level0 <= (tx_fifo_level0 - 1'd1);
        end
    end
    if (rx_fifo_syncfifo_re) begin
        rx_fifo_readable <= 1'd1;
    end else begin
        if (rx_fifo_re) begin
            rx_fifo_readable <= 1'd0;
        end
    end
    if (((rx_fifo_syncfifo_we & rx_fifo_syncfifo_writable) & (~rx_fifo_replace))) begin
        rx_fifo_produce <= (rx_fifo_produce + 1'd1);
    end
    if (rx_fifo_do_read) begin
        rx_fifo_consume <= (rx_fifo_consume + 1'd1);
    end
    if (((rx_fifo_syncfifo_we & rx_fifo_syncfifo_writable) & (~rx_fifo_replace))) begin
        if ((~rx_fifo_do_read)) begin
            rx_fifo_level0 <= (rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (rx_fifo_do_read) begin
            rx_fifo_level0 <= (rx_fifo_level0 - 1'd1);
        end
    end
    state <= next_state;
    csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank0_sel) begin
        case (csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank0_reset0_re) begin
        reset_storage <= csr_bankarray_csrbank0_reset0_r;
    end
    reset_re <= csr_bankarray_csrbank0_reset0_re;
    if (csr_bankarray_csrbank0_scratch0_re) begin
        scratch_storage <= csr_bankarray_csrbank0_scratch0_r;
    end
    scratch_re <= csr_bankarray_csrbank0_scratch0_re;
    bus_errors_re <= csr_bankarray_csrbank0_bus_errors_re;
    csr_bankarray_sel_r <= csr_bankarray_sel;
    csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank1_sel) begin
        case (csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface1_bank_bus_dat_r <= rxtx_w;
            end
            1'd1: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_txfull_w;
            end
            2'd2: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_rxempty_w;
            end
            2'd3: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_ev_status_w;
            end
            3'd4: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_ev_pending_w;
            end
            3'd5: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_ev_enable0_w;
            end
            3'd6: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_txempty_w;
            end
            3'd7: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_rxfull_w;
            end
        endcase
    end
    txfull_re <= csr_bankarray_csrbank1_txfull_re;
    rxempty_re <= csr_bankarray_csrbank1_rxempty_re;
    status_re <= csr_bankarray_csrbank1_ev_status_re;
    if (csr_bankarray_csrbank1_ev_pending_re) begin
        pending_r <= csr_bankarray_csrbank1_ev_pending_r;
    end
    pending_re <= csr_bankarray_csrbank1_ev_pending_re;
    if (csr_bankarray_csrbank1_ev_enable0_re) begin
        enable_storage <= csr_bankarray_csrbank1_ev_enable0_r;
    end
    enable_re <= csr_bankarray_csrbank1_ev_enable0_re;
    txempty_re <= csr_bankarray_csrbank1_txempty_re;
    rxfull_re <= csr_bankarray_csrbank1_rxfull_re;
    if (sys_rst) begin
        reset_storage <= 2'd0;
        reset_re <= 1'd0;
        scratch_storage <= 32'd305419896;
        scratch_re <= 1'd0;
        bus_errors_re <= 1'd0;
        bus_errors <= 32'd0;
        simsoc_ram_bus_ack <= 1'd0;
        ram_bus_ram_bus_ack <= 1'd0;
        txfull_re <= 1'd0;
        rxempty_re <= 1'd0;
        tx_pending <= 1'd0;
        tx_trigger_d <= 1'd0;
        rx_pending <= 1'd0;
        rx_trigger_d <= 1'd0;
        status_re <= 1'd0;
        pending_re <= 1'd0;
        pending_r <= 2'd0;
        enable_storage <= 2'd0;
        enable_re <= 1'd0;
        txempty_re <= 1'd0;
        rxfull_re <= 1'd0;
        tx_fifo_readable <= 1'd0;
        tx_fifo_level0 <= 5'd0;
        tx_fifo_produce <= 4'd0;
        tx_fifo_consume <= 4'd0;
        rx_fifo_readable <= 1'd0;
        rx_fifo_level0 <= 5'd0;
        rx_fifo_produce <= 4'd0;
        rx_fifo_consume <= 4'd0;
        grant <= 1'd0;
        slaves <= 3'd0;
        count <= 20'd1000000;
        csr_bankarray_sel_r <= 1'd0;
        state <= 1'd0;
    end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 32768-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:32767];
initial begin
	$readmemh("sim_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk_1) begin
	rom_dat0 <= rom[simsoc_adr];
end
assign simsoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("sim_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk_1) begin
	if (ram_we[0])
		sram[ram_adr][7:0] <= ram_dat_w[7:0];
	if (ram_we[1])
		sram[ram_adr][15:8] <= ram_dat_w[15:8];
	if (ram_we[2])
		sram[ram_adr][23:16] <= ram_dat_w[23:16];
	if (ram_we[3])
		sram[ram_adr][31:24] <= ram_dat_w[31:24];
	sram_adr0 <= ram_adr;
end
assign ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 37-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:36];
initial begin
	$readmemh("sim_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk_1) begin
	mem_adr0 <= csr_bankarray_adr;
end
assign csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk_1) begin
	if (tx_fifo_wrport_we)
		storage[tx_fifo_wrport_adr] <= tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[tx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (tx_fifo_rdport_re)
		storage_dat1 <= storage[tx_fifo_rdport_adr];
end
assign tx_fifo_wrport_dat_r = storage_dat0;
assign tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk_1) begin
	if (rx_fifo_wrport_we)
		storage_1[rx_fifo_wrport_adr] <= rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[rx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[rx_fifo_rdport_adr];
end
assign rx_fifo_wrport_dat_r = storage_1_dat0;
assign rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk_1),
	.dBusWishbone_ACK       (dbus_ack),
	.dBusWishbone_DAT_MISO  (dbus_dat_r),
	.dBusWishbone_ERR       (dbus_err),
	.externalInterruptArray (interrupt),
	.externalResetVector    (vexriscv),
	.iBusWishbone_ACK       (ibus_ack),
	.iBusWishbone_DAT_MISO  (ibus_dat_r),
	.iBusWishbone_ERR       (ibus_err),
	.reset                  ((sys_rst | reset)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (dbus_adr),
	.dBusWishbone_BTE       (dbus_bte),
	.dBusWishbone_CTI       (dbus_cti),
	.dBusWishbone_CYC       (dbus_cyc),
	.dBusWishbone_DAT_MOSI  (dbus_dat_w),
	.dBusWishbone_SEL       (dbus_sel),
	.dBusWishbone_STB       (dbus_stb),
	.dBusWishbone_WE        (dbus_we),
	.iBusWishbone_ADR       (ibus_adr),
	.iBusWishbone_BTE       (ibus_bte),
	.iBusWishbone_CTI       (ibus_cti),
	.iBusWishbone_CYC       (ibus_cyc),
	.iBusWishbone_DAT_MOSI  (ibus_dat_w),
	.iBusWishbone_SEL       (ibus_sel),
	.iBusWishbone_STB       (ibus_stb),
	.iBusWishbone_WE        (ibus_we)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-05-24 19:23:17.
//------------------------------------------------------------------------------
