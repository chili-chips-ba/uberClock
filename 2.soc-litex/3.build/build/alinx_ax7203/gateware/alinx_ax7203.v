// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : alinx_ax7203.v
// Device     : xc7a200tfbg484-2
// LiteX sha1 : dd54d77db
// Date       : 2025-05-27 13:34:45
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module alinx_ax7203 (
    input  wire          clk200_n,
    (* dont_touch = "true" *)
    input  wire          clk200_p,
    output wire          da1_clk,
    output wire   [13:0] da1_data,
    output wire          da1_wrt,
    output wire          da2_clk,
    output wire   [13:0] da2_data,
    output wire          da2_wrt,
    output wire   [14:0] ddram_a,
    output wire    [2:0] ddram_ba,
    output wire          ddram_cas_n,
    output wire          ddram_cke,
    output wire          ddram_clk_n,
    output wire          ddram_clk_p,
    output wire          ddram_cs_n,
    output wire    [3:0] ddram_dm,
    inout  wire   [31:0] ddram_dq,
    inout  wire    [3:0] ddram_dqs_n,
    inout  wire    [3:0] ddram_dqs_p,
    output wire          ddram_odt,
    output wire          ddram_ras_n,
    output wire          ddram_reset_n,
    output wire          ddram_we_n,
    input  wire          eth_clocks_rx,
    output wire          eth_clocks_tx,
    output wire          eth_mdc,
    inout  wire          eth_mdio,
    output wire          eth_rst_n,
    input  wire          eth_rx_ctl,
    input  wire    [3:0] eth_rx_data,
    output wire          eth_tx_ctl,
    output wire    [3:0] eth_tx_data,
    input  wire          serial_rx,
    output reg           serial_tx
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (S7PLL)
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [PLLE2_ADV]
│    │    └─── [BUFG]
│    │    └─── [BUFG]
│    │    └─── [BUFG]
│    │    └─── [BUFG]
│    └─── idelayctrl (S7IDELAYCTRL)
│    │    └─── [IDELAYCTRL]
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── rom (SRAM)
└─── sram (SRAM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── ddrphy (A7DDRPHY)
│    └─── tappeddelayline_0* (TappedDelayLine)
│    └─── dqspattern_0* (DQSPattern)
│    └─── bitslip_0* (BitSlip)
│    └─── bitslip_1* (BitSlip)
│    └─── bitslip_2* (BitSlip)
│    └─── bitslip_3* (BitSlip)
│    └─── bitslip_4* (BitSlip)
│    └─── bitslip_5* (BitSlip)
│    └─── bitslip_6* (BitSlip)
│    └─── bitslip_7* (BitSlip)
│    └─── tappeddelayline_1* (TappedDelayLine)
│    └─── bitslip_8* (BitSlip)
│    └─── bitslip_9* (BitSlip)
│    └─── bitslip_10* (BitSlip)
│    └─── bitslip_11* (BitSlip)
│    └─── bitslip_12* (BitSlip)
│    └─── bitslip_13* (BitSlip)
│    └─── bitslip_14* (BitSlip)
│    └─── bitslip_15* (BitSlip)
│    └─── bitslip_16* (BitSlip)
│    └─── bitslip_17* (BitSlip)
│    └─── bitslip_18* (BitSlip)
│    └─── bitslip_19* (BitSlip)
│    └─── bitslip_20* (BitSlip)
│    └─── bitslip_21* (BitSlip)
│    └─── bitslip_22* (BitSlip)
│    └─── bitslip_23* (BitSlip)
│    └─── bitslip_24* (BitSlip)
│    └─── bitslip_25* (BitSlip)
│    └─── bitslip_26* (BitSlip)
│    └─── bitslip_27* (BitSlip)
│    └─── bitslip_28* (BitSlip)
│    └─── bitslip_29* (BitSlip)
│    └─── bitslip_30* (BitSlip)
│    └─── bitslip_31* (BitSlip)
│    └─── bitslip_32* (BitSlip)
│    └─── bitslip_33* (BitSlip)
│    └─── bitslip_34* (BitSlip)
│    └─── bitslip_35* (BitSlip)
│    └─── bitslip_36* (BitSlip)
│    └─── bitslip_37* (BitSlip)
│    └─── bitslip_38* (BitSlip)
│    └─── bitslip_39* (BitSlip)
│    └─── bitslip_40* (BitSlip)
│    └─── bitslip_41* (BitSlip)
│    └─── bitslip_42* (BitSlip)
│    └─── bitslip_43* (BitSlip)
│    └─── bitslip_44* (BitSlip)
│    └─── bitslip_45* (BitSlip)
│    └─── bitslip_46* (BitSlip)
│    └─── bitslip_47* (BitSlip)
│    └─── bitslip_48* (BitSlip)
│    └─── bitslip_49* (BitSlip)
│    └─── bitslip_50* (BitSlip)
│    └─── bitslip_51* (BitSlip)
│    └─── bitslip_52* (BitSlip)
│    └─── bitslip_53* (BitSlip)
│    └─── bitslip_54* (BitSlip)
│    └─── bitslip_55* (BitSlip)
│    └─── bitslip_56* (BitSlip)
│    └─── bitslip_57* (BitSlip)
│    └─── bitslip_58* (BitSlip)
│    └─── bitslip_59* (BitSlip)
│    └─── bitslip_60* (BitSlip)
│    └─── bitslip_61* (BitSlip)
│    └─── bitslip_62* (BitSlip)
│    └─── bitslip_63* (BitSlip)
│    └─── bitslip_64* (BitSlip)
│    └─── bitslip_65* (BitSlip)
│    └─── bitslip_66* (BitSlip)
│    └─── bitslip_67* (BitSlip)
│    └─── bitslip_68* (BitSlip)
│    └─── bitslip_69* (BitSlip)
│    └─── bitslip_70* (BitSlip)
│    └─── bitslip_71* (BitSlip)
│    └─── tappeddelayline_2* (TappedDelayLine)
│    └─── tappeddelayline_3* (TappedDelayLine)
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OBUFDS]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [IOBUFDS]
│    └─── [OSERDESE2]
│    └─── [IOBUFDS]
│    └─── [OSERDESE2]
│    └─── [IOBUFDS]
│    └─── [OSERDESE2]
│    └─── [IOBUFDS]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
└─── sdram (LiteDRAMCore)
│    └─── dfii (DFIInjector)
│    │    └─── pi0 (PhaseInjector)
│    │    └─── pi1 (PhaseInjector)
│    │    └─── pi2 (PhaseInjector)
│    │    └─── pi3 (PhaseInjector)
│    └─── controller (LiteDRAMController)
│    │    └─── refresher (Refresher)
│    │    │    └─── timer (RefreshTimer)
│    │    │    └─── postponer (RefreshPostponer)
│    │    │    └─── sequencer (RefreshSequencer)
│    │    │    │    └─── refreshexecuter_0* (RefreshExecuter)
│    │    │    └─── zqcs_timer (RefreshTimer)
│    │    │    └─── zqs_executer (ZQCSExecuter)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_0* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_1* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_2* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_3* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_4* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_5* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_6* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_7* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── multiplexer (Multiplexer)
│    │    │    └─── choose_cmd (_CommandChooser)
│    │    │    │    └─── roundrobin_0* (RoundRobin)
│    │    │    └─── choose_req (_CommandChooser)
│    │    │    │    └─── roundrobin_0* (RoundRobin)
│    │    │    └─── _steerer_0* (_Steerer)
│    │    │    └─── trrdcon (tXXDController)
│    │    │    └─── tfawcon (tFAWController)
│    │    │    └─── tccdcon (tXXDController)
│    │    │    └─── twtrcon (tXXDController)
│    │    │    └─── fsm (FSM)
│    └─── crossbar (LiteDRAMCrossbar)
│    │    └─── roundrobin_0* (RoundRobin)
│    │    └─── roundrobin_1* (RoundRobin)
│    │    └─── roundrobin_2* (RoundRobin)
│    │    └─── roundrobin_3* (RoundRobin)
│    │    └─── roundrobin_4* (RoundRobin)
│    │    └─── roundrobin_5* (RoundRobin)
│    │    └─── roundrobin_6* (RoundRobin)
│    │    └─── roundrobin_7* (RoundRobin)
└─── l2_cache (Cache)
│    └─── fsm (FSM)
└─── wishbone_bridge (LiteDRAMWishbone2Native)
│    └─── fsm (FSM)
└─── ethphy (LiteEthPHYRGMII)
│    └─── crg (LiteEthPHYRGMIICRG)
│    │    └─── pll (S7PLL)
│    │    │    └─── [FDCE]
│    │    │    └─── [FDCE]
│    │    │    └─── [FDCE]
│    │    │    └─── [FDCE]
│    │    │    └─── [FDCE]
│    │    │    └─── [FDCE]
│    │    │    └─── [FDCE]
│    │    │    └─── [FDCE]
│    │    │    └─── [PLLE2_ADV]
│    │    │    └─── [BUFG]
│    │    │    └─── [BUFG]
│    │    └─── hw_reset (LiteEthPHYHWReset)
│    │    └─── [IBUF]
│    │    └─── [BUFG]
│    │    └─── [ODDR]
│    │    └─── [OBUF]
│    └─── tx (LiteEthPHYRGMIITX)
│    │    └─── [ODDR]
│    │    └─── [OBUF]
│    │    └─── [ODDR]
│    │    └─── [OBUF]
│    │    └─── [ODDR]
│    │    └─── [OBUF]
│    │    └─── [ODDR]
│    │    └─── [OBUF]
│    │    └─── [ODDR]
│    │    └─── [OBUF]
│    └─── rx (LiteEthPHYRGMIIRX)
│    │    └─── [IBUF]
│    │    └─── [IDELAYE2]
│    │    └─── [IDDR]
│    │    └─── [IBUF]
│    │    └─── [IDELAYE2]
│    │    └─── [IDDR]
│    │    └─── [IBUF]
│    │    └─── [IDELAYE2]
│    │    └─── [IDDR]
│    │    └─── [IBUF]
│    │    └─── [IDELAYE2]
│    │    └─── [IDDR]
│    │    └─── [IBUF]
│    │    └─── [IDELAYE2]
│    │    └─── [IDDR]
│    └─── mdio (LiteEthPHYMDIO)
└─── ethcore_etherbone (LiteEthUDPIPCore)
│    └─── mac (LiteEthMAC)
│    │    └─── core (LiteEthMACCore)
│    │    │    └─── tx_datapath (TXDatapath)
│    │    │    │    └─── clockdomaincrossing_0* (ClockDomainCrossing)
│    │    │    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    │    │    └─── fifo (AsyncFIFOBuffered)
│    │    │    │    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    │    │    └─── liteethmacpaddinginserter_0* (LiteEthMACPaddingInserter)
│    │    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── liteethmaccrc32inserter_0* (LiteEthMACCRC32Inserter)
│    │    │    │    │    └─── crc (LiteEthMACCRC32)
│    │    │    │    │    │    └─── liteethmaccrcengine_0* (LiteEthMACCRCEngine)
│    │    │    │    │    └─── fsm (FSM)
│    │    │    │    │    └─── buffer_0* (Buffer)
│    │    │    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    │    │    └─── pipeline (Pipeline)
│    │    │    │    └─── liteethmacpreambleinserter_0* (LiteEthMACPreambleInserter)
│    │    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── liteethmacgap_0* (LiteEthMACGap)
│    │    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── pipeline_0* (Pipeline)
│    │    │    └─── rx_datapath (RXDatapath)
│    │    │    │    └─── liteethmacpreamblechecker_0* (LiteEthMACPreambleChecker)
│    │    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── pulsesynchronizer_0* (PulseSynchronizer)
│    │    │    │    └─── liteethmaccrc32checker_0* (LiteEthMACCRC32Checker)
│    │    │    │    │    └─── crc (LiteEthMACCRC32)
│    │    │    │    │    │    └─── liteethmaccrcengine_0* (LiteEthMACCRCEngine)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    │    │    └─── fsm (FSM)
│    │    │    │    │    └─── buffer_0* (Buffer)
│    │    │    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    │    │    └─── pipeline (Pipeline)
│    │    │    │    └─── pulsesynchronizer_1* (PulseSynchronizer)
│    │    │    │    └─── liteethmacpaddingchecker_0* (LiteEthMACPaddingChecker)
│    │    │    │    └─── clockdomaincrossing_0* (ClockDomainCrossing)
│    │    │    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    │    │    └─── fifo (AsyncFIFOBuffered)
│    │    │    │    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    │    │    └─── pipeline_0* (Pipeline)
│    │    └─── crossbar (LiteEthMACCrossbar)
│    │    │    └─── arbiter (Arbiter)
│    │    │    │    └─── rr (RoundRobin)
│    │    │    │    └─── status_0* (Status)
│    │    │    │    └─── status_1* (Status)
│    │    │    └─── dispatcher (Dispatcher)
│    │    │    │    └─── status_0* (Status)
│    │    └─── packetizer (LiteEthMACPacketizer)
│    │    │    └─── fsm (FSM)
│    │    │    └─── last_be_fsm (FSM)
│    │    └─── depacketizer (LiteEthMACDepacketizer)
│    │    │    └─── fsm (FSM)
│    │    │    └─── last_be_fsm (FSM)
│    └─── arp (LiteEthARP)
│    │    └─── tx (LiteEthARPTX)
│    │    │    └─── packetizer (LiteEthARPPacketizer)
│    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── last_be_fsm (FSM)
│    │    │    └─── fsm (FSM)
│    │    └─── rx (LiteEthARPRX)
│    │    │    └─── depacketizer (LiteEthARPDepacketizer)
│    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── last_be_fsm (FSM)
│    │    │    └─── fsm (FSM)
│    │    └─── table (LiteEthARPTable)
│    │    │    └─── request_timer (WaitTimer)
│    │    │    └─── cache (LiteEthARPCache)
│    │    │    │    └─── clear_timer (WaitTimer)
│    │    │    │    └─── fsm (FSM)
│    │    │    └─── fsm (FSM)
│    └─── ip (LiteEthIP)
│    │    └─── tx (LiteEthIPTX)
│    │    │    └─── buffer (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── checksum (LiteEthIPV4Checksum)
│    │    │    └─── packetizer (LiteEthIPV4Packetizer)
│    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── last_be_fsm (FSM)
│    │    │    └─── fsm (FSM)
│    │    └─── rx (LiteEthIPRX)
│    │    │    └─── depacketizer (LiteEthIPV4Depacketizer)
│    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── last_be_fsm (FSM)
│    │    │    └─── checksum (LiteEthIPV4Checksum)
│    │    │    └─── fsm (FSM)
│    │    └─── crossbar (LiteEthIPV4Crossbar)
│    │    │    └─── arbiter (Arbiter)
│    │    │    │    └─── rr (RoundRobin)
│    │    │    │    └─── status_0* (Status)
│    │    │    │    └─── status_1* (Status)
│    │    │    └─── dispatcher (Dispatcher)
│    │    │    │    └─── status_0* (Status)
│    └─── icmp (LiteEthICMP)
│    │    └─── tx (LiteEthICMPTX)
│    │    │    └─── packetizer (LiteEthICMPPacketizer)
│    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── last_be_fsm (FSM)
│    │    │    └─── fsm (FSM)
│    │    └─── rx (LiteEthICMPRX)
│    │    │    └─── depacketizer (LiteEthICMPDepacketizer)
│    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── last_be_fsm (FSM)
│    │    │    └─── fsm (FSM)
│    │    └─── echo (LiteEthICMPEcho)
│    │    │    └─── buffer (PacketFIFO)
│    │    │    │    └─── payload_fifo (SyncFIFO)
│    │    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    │    └─── param_fifo (SyncFIFO)
│    │    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    │    └─── fifo (SyncFIFO)
│    └─── udp (LiteEthUDP)
│    │    └─── tx (LiteEthUDPTX)
│    │    │    └─── packetizer (LiteEthUDPPacketizer)
│    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── last_be_fsm (FSM)
│    │    │    └─── fsm (FSM)
│    │    └─── rx (LiteEthUDPRX)
│    │    │    └─── depacketizer (LiteEthUDPDepacketizer)
│    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── last_be_fsm (FSM)
│    │    │    └─── fsm (FSM)
│    │    └─── crossbar (LiteEthUDPCrossbar)
│    │    │    └─── tx_cdc (ClockDomainCrossing)
│    │    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    │    └─── tx_converter (StrideConverter)
│    │    │    │    └─── converter_0* (Converter)
│    │    │    │    │    └─── _downconverter_0* (_DownConverter)
│    │    │    └─── rx_converter (StrideConverter)
│    │    │    │    └─── converter_0* (Converter)
│    │    │    │    │    └─── _upconverter_0* (_UpConverter)
│    │    │    └─── rx_cdc (ClockDomainCrossing)
│    │    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    │    └─── arbiter (Arbiter)
│    │    │    └─── dispatcher (Dispatcher)
│    │    │    │    └─── status_0* (Status)
└─── etherbone (LiteEthEtherbone)
│    └─── packet (LiteEthEtherbonePacket)
│    │    └─── tx (LiteEthEtherbonePacketTX)
│    │    │    └─── packetizer (LiteEthEtherbonePacketPacketizer)
│    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── last_be_fsm (FSM)
│    │    │    └─── fsm (FSM)
│    │    └─── rx (LiteEthEtherbonePacketRX)
│    │    │    └─── depacketizer (LiteEthEtherbonePacketDepacketizer)
│    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── last_be_fsm (FSM)
│    │    │    └─── fsm (FSM)
│    └─── probe (LiteEthEtherboneProbe)
│    │    └─── fifo (PacketFIFO)
│    │    │    └─── payload_fifo (SyncFIFO)
│    │    │    │    └─── buffer_0* (Buffer)
│    │    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── param_fifo (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    └─── fsm (FSM)
│    └─── record (LiteEthEtherboneRecord)
│    │    └─── depacketizer (LiteEthEtherboneRecordDepacketizer)
│    │    │    └─── fsm (FSM)
│    │    │    └─── last_be_fsm (FSM)
│    │    └─── receiver (LiteEthEtherboneRecordReceiver)
│    │    │    └─── fifo (PacketFIFO)
│    │    │    │    └─── payload_fifo (SyncFIFO)
│    │    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    │    └─── param_fifo (SyncFIFO)
│    │    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── fsm (FSM)
│    │    └─── sender (LiteEthEtherboneRecordSender)
│    │    │    └─── fifo (PacketFIFO)
│    │    │    │    └─── payload_fifo (SyncFIFO)
│    │    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    │    └─── param_fifo (SyncFIFO)
│    │    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── fsm (FSM)
│    │    └─── packetizer (LiteEthEtherboneRecordPacketizer)
│    │    │    └─── fsm (FSM)
│    │    │    └─── last_be_fsm (FSM)
│    └─── dispatcher_0* (Dispatcher)
│    │    └─── status_0* (Status)
│    └─── arbiter_0* (Arbiter)
│    │    └─── rr (RoundRobin)
│    │    └─── status_0* (Status)
│    │    └─── status_1* (Status)
│    └─── wishbone (LiteEthEtherboneWishboneMaster)
│    │    └─── fsm (FSM)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── main (LiteXModule)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstorage_5* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstorage_5* (CSRStorage)
│    │    └─── csrstorage_6* (CSRStorage)
│    │    └─── csrstorage_7* (CSRStorage)
│    │    └─── csrstorage_8* (CSRStorage)
│    │    └─── csrstorage_9* (CSRStorage)
│    │    └─── csrstorage_10* (CSRStorage)
│    │    └─── csrstorage_11* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_12* (CSRStorage)
│    │    └─── csrstorage_13* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstorage_14* (CSRStorage)
│    │    └─── csrstorage_15* (CSRStorage)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_16* (CSRStorage)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_17* (CSRStorage)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_5* (CSRStorage)
│    │    └─── csrstorage_6* (CSRStorage)
│    │    └─── csrstorage_7* (CSRStorage)
│    │    └─── csrstorage_8* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstorage_9* (CSRStorage)
│    │    └─── csrstorage_10* (CSRStorage)
│    │    └─── csrstorage_11* (CSRStorage)
│    │    └─── csrstorage_12* (CSRStorage)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_13* (CSRStorage)
│    │    └─── csrstorage_14* (CSRStorage)
│    │    └─── csrstorage_15* (CSRStorage)
│    │    └─── csrstorage_16* (CSRStorage)
│    │    └─── csrstatus_3* (CSRStatus)
│    └─── csrbank_5* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_6* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [IBUFDS]
└─── [cordic_dac]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg     [2:0] builder_bankmachine0_next_state = 3'd0;
reg     [2:0] builder_bankmachine0_state = 3'd0;
reg     [2:0] builder_bankmachine1_next_state = 3'd0;
reg     [2:0] builder_bankmachine1_state = 3'd0;
reg     [2:0] builder_bankmachine2_next_state = 3'd0;
reg     [2:0] builder_bankmachine2_state = 3'd0;
reg     [2:0] builder_bankmachine3_next_state = 3'd0;
reg     [2:0] builder_bankmachine3_state = 3'd0;
reg     [2:0] builder_bankmachine4_next_state = 3'd0;
reg     [2:0] builder_bankmachine4_state = 3'd0;
reg     [2:0] builder_bankmachine5_next_state = 3'd0;
reg     [2:0] builder_bankmachine5_state = 3'd0;
reg     [2:0] builder_bankmachine6_next_state = 3'd0;
reg     [2:0] builder_bankmachine6_state = 3'd0;
reg     [2:0] builder_bankmachine7_next_state = 3'd0;
reg     [2:0] builder_bankmachine7_state = 3'd0;
reg    [19:0] builder_count = 20'd1000000;
wire          builder_crg_pll_fb;
wire          builder_crg_reset0;
wire          builder_crg_reset1;
wire          builder_crg_reset2;
wire          builder_crg_reset3;
wire          builder_crg_reset4;
wire          builder_crg_reset5;
wire          builder_crg_reset6;
wire          builder_crg_reset7;
wire    [5:0] builder_csr_bankarray_adr;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg           builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
reg           builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg           builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg           builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg           builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg           builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          builder_csr_bankarray_csrbank0_sel;
wire    [3:0] builder_csr_bankarray_csrbank1_dly_sel0_r;
reg           builder_csr_bankarray_csrbank1_dly_sel0_re = 1'd0;
wire    [3:0] builder_csr_bankarray_csrbank1_dly_sel0_w;
reg           builder_csr_bankarray_csrbank1_dly_sel0_we = 1'd0;
wire    [4:0] builder_csr_bankarray_csrbank1_half_sys8x_taps0_r;
reg           builder_csr_bankarray_csrbank1_half_sys8x_taps0_re = 1'd0;
wire    [4:0] builder_csr_bankarray_csrbank1_half_sys8x_taps0_w;
reg           builder_csr_bankarray_csrbank1_half_sys8x_taps0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank1_rdphase0_r;
reg           builder_csr_bankarray_csrbank1_rdphase0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank1_rdphase0_w;
reg           builder_csr_bankarray_csrbank1_rdphase0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_rst0_r;
reg           builder_csr_bankarray_csrbank1_rst0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_rst0_w;
reg           builder_csr_bankarray_csrbank1_rst0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sel;
wire          builder_csr_bankarray_csrbank1_wlevel_en0_r;
reg           builder_csr_bankarray_csrbank1_wlevel_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_wlevel_en0_w;
reg           builder_csr_bankarray_csrbank1_wlevel_en0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank1_wrphase0_r;
reg           builder_csr_bankarray_csrbank1_wrphase0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank1_wrphase0_w;
reg           builder_csr_bankarray_csrbank1_wrphase0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_crg_reset0_r;
reg           builder_csr_bankarray_csrbank2_crg_reset0_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_crg_reset0_w;
reg           builder_csr_bankarray_csrbank2_crg_reset0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_mdio_r_r;
reg           builder_csr_bankarray_csrbank2_mdio_r_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_mdio_r_w;
reg           builder_csr_bankarray_csrbank2_mdio_r_we = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank2_mdio_w0_r;
reg           builder_csr_bankarray_csrbank2_mdio_w0_re = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank2_mdio_w0_w;
reg           builder_csr_bankarray_csrbank2_mdio_w0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sel;
wire          builder_csr_bankarray_csrbank3_bypass_en0_r;
reg           builder_csr_bankarray_csrbank3_bypass_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_bypass_en0_w;
reg           builder_csr_bankarray_csrbank3_bypass_en0_we = 1'd0;
wire   [18:0] builder_csr_bankarray_csrbank3_cordic_rx_phase0_r;
reg           builder_csr_bankarray_csrbank3_cordic_rx_phase0_re = 1'd0;
wire   [18:0] builder_csr_bankarray_csrbank3_cordic_rx_phase0_w;
reg           builder_csr_bankarray_csrbank3_cordic_rx_phase0_we = 1'd0;
wire   [18:0] builder_csr_bankarray_csrbank3_cordic_tx_phase0_r;
reg           builder_csr_bankarray_csrbank3_cordic_tx_phase0_re = 1'd0;
wire   [18:0] builder_csr_bankarray_csrbank3_cordic_tx_phase0_w;
reg           builder_csr_bankarray_csrbank3_cordic_tx_phase0_we = 1'd0;
wire    [3:0] builder_csr_bankarray_csrbank3_downsample_factor0_r;
reg           builder_csr_bankarray_csrbank3_downsample_factor0_re = 1'd0;
wire    [3:0] builder_csr_bankarray_csrbank3_downsample_factor0_w;
reg           builder_csr_bankarray_csrbank3_downsample_factor0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank3_gain_rx0_r;
reg           builder_csr_bankarray_csrbank3_gain_rx0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank3_gain_rx0_w;
reg           builder_csr_bankarray_csrbank3_gain_rx0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank3_gain_tx0_r;
reg           builder_csr_bankarray_csrbank3_gain_tx0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank3_gain_tx0_w;
reg           builder_csr_bankarray_csrbank3_gain_tx0_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank3_hs_dbg_addr0_r;
reg           builder_csr_bankarray_csrbank3_hs_dbg_addr0_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank3_hs_dbg_addr0_w;
reg           builder_csr_bankarray_csrbank3_hs_dbg_addr0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_hs_dbg_rdata_r;
reg           builder_csr_bankarray_csrbank3_hs_dbg_rdata_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_hs_dbg_rdata_w;
reg           builder_csr_bankarray_csrbank3_hs_dbg_rdata_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_hs_dbg_wdata0_r;
reg           builder_csr_bankarray_csrbank3_hs_dbg_wdata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_hs_dbg_wdata0_w;
reg           builder_csr_bankarray_csrbank3_hs_dbg_wdata0_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank3_ls_dbg_addr0_r;
reg           builder_csr_bankarray_csrbank3_ls_dbg_addr0_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank3_ls_dbg_addr0_w;
reg           builder_csr_bankarray_csrbank3_ls_dbg_addr0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_ls_dbg_rdata_r;
reg           builder_csr_bankarray_csrbank3_ls_dbg_rdata_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_ls_dbg_rdata_w;
reg           builder_csr_bankarray_csrbank3_ls_dbg_rdata_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_ls_dbg_wdata0_r;
reg           builder_csr_bankarray_csrbank3_ls_dbg_wdata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_ls_dbg_wdata0_w;
reg           builder_csr_bankarray_csrbank3_ls_dbg_wdata0_we = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank3_method_sel0_r;
reg           builder_csr_bankarray_csrbank3_method_sel0_re = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank3_method_sel0_w;
reg           builder_csr_bankarray_csrbank3_method_sel0_we = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank3_mux_sel0_r;
reg           builder_csr_bankarray_csrbank3_mux_sel0_re = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank3_mux_sel0_w;
reg           builder_csr_bankarray_csrbank3_mux_sel0_we = 1'd0;
wire   [18:0] builder_csr_bankarray_csrbank3_phase_inc0_r;
reg           builder_csr_bankarray_csrbank3_phase_inc0_re = 1'd0;
wire   [18:0] builder_csr_bankarray_csrbank3_phase_inc0_w;
reg           builder_csr_bankarray_csrbank3_phase_inc0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_physics_busy_r;
reg           builder_csr_bankarray_csrbank3_physics_busy_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_physics_busy_w;
reg           builder_csr_bankarray_csrbank3_physics_busy_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_physics_run0_r;
reg           builder_csr_bankarray_csrbank3_physics_run0_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_physics_run0_w;
reg           builder_csr_bankarray_csrbank3_physics_run0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank3_rx_lpf_cutoff0_r;
reg           builder_csr_bankarray_csrbank3_rx_lpf_cutoff0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank3_rx_lpf_cutoff0_w;
reg           builder_csr_bankarray_csrbank3_rx_lpf_cutoff0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank3_sd_cmd0_r;
reg           builder_csr_bankarray_csrbank3_sd_cmd0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank3_sd_cmd0_w;
reg           builder_csr_bankarray_csrbank3_sd_cmd0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank3_sd_status_r;
reg           builder_csr_bankarray_csrbank3_sd_status_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank3_sd_status_w;
reg           builder_csr_bankarray_csrbank3_sd_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_sel;
wire    [7:0] builder_csr_bankarray_csrbank3_tx_lpf_cutoff0_r;
reg           builder_csr_bankarray_csrbank3_tx_lpf_cutoff0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank3_tx_lpf_cutoff0_w;
reg           builder_csr_bankarray_csrbank3_tx_lpf_cutoff0_we = 1'd0;
wire    [3:0] builder_csr_bankarray_csrbank3_upsample_factor0_r;
reg           builder_csr_bankarray_csrbank3_upsample_factor0_re = 1'd0;
wire    [3:0] builder_csr_bankarray_csrbank3_upsample_factor0_w;
reg           builder_csr_bankarray_csrbank3_upsample_factor0_we = 1'd0;
wire    [3:0] builder_csr_bankarray_csrbank4_dfii_control0_r;
reg           builder_csr_bankarray_csrbank4_dfii_control0_re = 1'd0;
wire    [3:0] builder_csr_bankarray_csrbank4_dfii_control0_w;
reg           builder_csr_bankarray_csrbank4_dfii_control0_we = 1'd0;
wire   [14:0] builder_csr_bankarray_csrbank4_dfii_pi0_address0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi0_address0_re = 1'd0;
wire   [14:0] builder_csr_bankarray_csrbank4_dfii_pi0_address0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi0_address0_we = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank4_dfii_pi0_baddress0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi0_baddress0_re = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank4_dfii_pi0_baddress0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi0_baddress0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank4_dfii_pi0_command0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi0_command0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank4_dfii_pi0_command0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi0_command0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi0_rddata0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi0_rddata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi0_rddata0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi0_rddata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi0_rddata1_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi0_rddata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi0_rddata1_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi0_rddata1_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi0_wrdata0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi0_wrdata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi0_wrdata0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi0_wrdata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi0_wrdata1_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi0_wrdata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi0_wrdata1_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi0_wrdata1_we = 1'd0;
wire   [14:0] builder_csr_bankarray_csrbank4_dfii_pi1_address0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi1_address0_re = 1'd0;
wire   [14:0] builder_csr_bankarray_csrbank4_dfii_pi1_address0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi1_address0_we = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank4_dfii_pi1_baddress0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi1_baddress0_re = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank4_dfii_pi1_baddress0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi1_baddress0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank4_dfii_pi1_command0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi1_command0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank4_dfii_pi1_command0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi1_command0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi1_rddata0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi1_rddata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi1_rddata0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi1_rddata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi1_rddata1_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi1_rddata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi1_rddata1_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi1_rddata1_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi1_wrdata0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi1_wrdata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi1_wrdata0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi1_wrdata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi1_wrdata1_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi1_wrdata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi1_wrdata1_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi1_wrdata1_we = 1'd0;
wire   [14:0] builder_csr_bankarray_csrbank4_dfii_pi2_address0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi2_address0_re = 1'd0;
wire   [14:0] builder_csr_bankarray_csrbank4_dfii_pi2_address0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi2_address0_we = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank4_dfii_pi2_baddress0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi2_baddress0_re = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank4_dfii_pi2_baddress0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi2_baddress0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank4_dfii_pi2_command0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi2_command0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank4_dfii_pi2_command0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi2_command0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi2_rddata0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi2_rddata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi2_rddata0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi2_rddata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi2_rddata1_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi2_rddata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi2_rddata1_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi2_rddata1_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi2_wrdata0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi2_wrdata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi2_wrdata0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi2_wrdata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi2_wrdata1_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi2_wrdata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi2_wrdata1_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi2_wrdata1_we = 1'd0;
wire   [14:0] builder_csr_bankarray_csrbank4_dfii_pi3_address0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi3_address0_re = 1'd0;
wire   [14:0] builder_csr_bankarray_csrbank4_dfii_pi3_address0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi3_address0_we = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank4_dfii_pi3_baddress0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi3_baddress0_re = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank4_dfii_pi3_baddress0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi3_baddress0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank4_dfii_pi3_command0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi3_command0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank4_dfii_pi3_command0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi3_command0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi3_rddata0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi3_rddata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi3_rddata0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi3_rddata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi3_rddata1_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi3_rddata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi3_rddata1_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi3_rddata1_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi3_wrdata0_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi3_wrdata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi3_wrdata0_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi3_wrdata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi3_wrdata1_r;
reg           builder_csr_bankarray_csrbank4_dfii_pi3_wrdata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_dfii_pi3_wrdata1_w;
reg           builder_csr_bankarray_csrbank4_dfii_pi3_wrdata1_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_sel;
wire          builder_csr_bankarray_csrbank5_en0_r;
reg           builder_csr_bankarray_csrbank5_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_en0_w;
reg           builder_csr_bankarray_csrbank5_en0_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_ev_enable0_r;
reg           builder_csr_bankarray_csrbank5_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_ev_enable0_w;
reg           builder_csr_bankarray_csrbank5_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_ev_pending_r;
reg           builder_csr_bankarray_csrbank5_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_ev_pending_w;
reg           builder_csr_bankarray_csrbank5_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_ev_status_r;
reg           builder_csr_bankarray_csrbank5_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_ev_status_w;
reg           builder_csr_bankarray_csrbank5_ev_status_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_load0_r;
reg           builder_csr_bankarray_csrbank5_load0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_load0_w;
reg           builder_csr_bankarray_csrbank5_load0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_reload0_r;
reg           builder_csr_bankarray_csrbank5_reload0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_reload0_w;
reg           builder_csr_bankarray_csrbank5_reload0_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_sel;
wire          builder_csr_bankarray_csrbank5_update_value0_r;
reg           builder_csr_bankarray_csrbank5_update_value0_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_update_value0_w;
reg           builder_csr_bankarray_csrbank5_update_value0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_value_r;
reg           builder_csr_bankarray_csrbank5_value_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_value_w;
reg           builder_csr_bankarray_csrbank5_value_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_ev_enable0_r;
reg           builder_csr_bankarray_csrbank6_ev_enable0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_ev_enable0_w;
reg           builder_csr_bankarray_csrbank6_ev_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_ev_pending_r;
reg           builder_csr_bankarray_csrbank6_ev_pending_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_ev_pending_w;
reg           builder_csr_bankarray_csrbank6_ev_pending_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_ev_status_r;
reg           builder_csr_bankarray_csrbank6_ev_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_ev_status_w;
reg           builder_csr_bankarray_csrbank6_ev_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank6_rxempty_r;
reg           builder_csr_bankarray_csrbank6_rxempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank6_rxempty_w;
reg           builder_csr_bankarray_csrbank6_rxempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank6_rxfull_r;
reg           builder_csr_bankarray_csrbank6_rxfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank6_rxfull_w;
reg           builder_csr_bankarray_csrbank6_rxfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank6_sel;
wire          builder_csr_bankarray_csrbank6_txempty_r;
reg           builder_csr_bankarray_csrbank6_txempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank6_txempty_w;
reg           builder_csr_bankarray_csrbank6_txempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank6_txfull_r;
reg           builder_csr_bankarray_csrbank6_txfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank6_txfull_w;
reg           builder_csr_bankarray_csrbank6_txfull_we = 1'd0;
wire    [7:0] builder_csr_bankarray_dat_r;
wire   [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
wire          builder_csr_bankarray_interface0_bank_bus_re;
wire          builder_csr_bankarray_interface0_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
wire          builder_csr_bankarray_interface1_bank_bus_re;
wire          builder_csr_bankarray_interface1_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
wire          builder_csr_bankarray_interface2_bank_bus_re;
wire          builder_csr_bankarray_interface2_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
wire          builder_csr_bankarray_interface3_bank_bus_re;
wire          builder_csr_bankarray_interface3_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface4_bank_bus_dat_w;
wire          builder_csr_bankarray_interface4_bank_bus_re;
wire          builder_csr_bankarray_interface4_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface5_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface5_bank_bus_dat_w;
wire          builder_csr_bankarray_interface5_bank_bus_re;
wire          builder_csr_bankarray_interface5_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface6_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface6_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface6_bank_bus_dat_w;
wire          builder_csr_bankarray_interface6_bank_bus_re;
wire          builder_csr_bankarray_interface6_bank_bus_we;
wire          builder_csr_bankarray_sel;
reg           builder_csr_bankarray_sel_r = 1'd0;
wire   [13:0] builder_csr_bankarray_sram_bus_adr;
reg    [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_sram_bus_dat_w;
wire          builder_csr_bankarray_sram_bus_re;
wire          builder_csr_bankarray_sram_bus_we;
wire   [13:0] builder_csr_interconnect_adr;
wire   [31:0] builder_csr_interconnect_dat_r;
wire   [31:0] builder_csr_interconnect_dat_w;
wire          builder_csr_interconnect_re;
wire          builder_csr_interconnect_we;
wire          builder_done;
reg           builder_error = 1'd0;
reg     [1:0] builder_fsm0_next_state0 = 2'd0;
reg     [1:0] builder_fsm0_next_state1 = 2'd0;
reg     [1:0] builder_fsm0_state0 = 2'd0;
reg     [1:0] builder_fsm0_state1 = 2'd0;
reg           builder_fsm1_next_state0 = 1'd0;
reg           builder_fsm1_next_state1 = 1'd0;
reg           builder_fsm1_state0 = 1'd0;
reg           builder_fsm1_state1 = 1'd0;
reg     [2:0] builder_fsm_next_state = 3'd0;
reg     [2:0] builder_fsm_state = 3'd0;
reg     [1:0] builder_fullmemorywe_next_state = 2'd0;
reg     [1:0] builder_fullmemorywe_state = 2'd0;
reg     [1:0] builder_grant = 2'd0;
reg           builder_interface0_ack = 1'd0;
wire   [29:0] builder_interface0_adr;
wire    [1:0] builder_interface0_bte;
wire    [2:0] builder_interface0_cti;
wire          builder_interface0_cyc;
reg    [31:0] builder_interface0_dat_r = 32'd0;
wire   [31:0] builder_interface0_dat_w;
reg           builder_interface0_err = 1'd0;
wire    [3:0] builder_interface0_sel;
wire          builder_interface0_stb;
wire          builder_interface0_we;
reg    [13:0] builder_interface1_adr = 14'd0;
reg    [13:0] builder_interface1_adr_wishbone2csr_next_value1 = 14'd0;
reg           builder_interface1_adr_wishbone2csr_next_value_ce1 = 1'd0;
wire   [31:0] builder_interface1_dat_r;
reg    [31:0] builder_interface1_dat_w = 32'd0;
reg    [31:0] builder_interface1_dat_w_wishbone2csr_next_value0 = 32'd0;
reg           builder_interface1_dat_w_wishbone2csr_next_value_ce0 = 1'd0;
reg           builder_interface1_re = 1'd0;
reg           builder_interface1_re_wishbone2csr_next_value2 = 1'd0;
reg           builder_interface1_re_wishbone2csr_next_value_ce2 = 1'd0;
reg           builder_interface1_we = 1'd0;
reg           builder_interface1_we_wishbone2csr_next_value3 = 1'd0;
reg           builder_interface1_we_wishbone2csr_next_value_ce3 = 1'd0;
reg     [1:0] builder_litedramwishbone2native_next_state = 2'd0;
reg     [1:0] builder_litedramwishbone2native_state = 2'd0;
reg     [2:0] builder_liteetharpcache_next_state = 3'd0;
reg     [2:0] builder_liteetharpcache_state = 3'd0;
reg     [1:0] builder_liteetharprx_fsm0_next_state = 2'd0;
reg     [1:0] builder_liteetharprx_fsm0_state = 2'd0;
reg           builder_liteetharprx_fsm1_next_state = 1'd0;
reg           builder_liteetharprx_fsm1_state = 1'd0;
reg     [1:0] builder_liteetharprx_next_state = 2'd0;
reg     [1:0] builder_liteetharprx_state = 2'd0;
reg     [1:0] builder_liteetharptx_fsm0_next_state = 2'd0;
reg     [1:0] builder_liteetharptx_fsm0_state = 2'd0;
reg           builder_liteetharptx_fsm1_next_state = 1'd0;
reg           builder_liteetharptx_fsm1_state = 1'd0;
reg           builder_liteetharptx_next_state = 1'd0;
reg           builder_liteetharptx_state = 1'd0;
reg     [1:0] builder_liteethetherbonepacketrx_fsm0_next_state = 2'd0;
reg     [1:0] builder_liteethetherbonepacketrx_fsm0_state = 2'd0;
reg           builder_liteethetherbonepacketrx_fsm1_next_state = 1'd0;
reg           builder_liteethetherbonepacketrx_fsm1_state = 1'd0;
reg     [1:0] builder_liteethetherbonepacketrx_next_state = 2'd0;
reg     [1:0] builder_liteethetherbonepacketrx_state = 2'd0;
reg     [1:0] builder_liteethetherbonepackettx_fsm0_next_state = 2'd0;
reg     [1:0] builder_liteethetherbonepackettx_fsm0_state = 2'd0;
reg           builder_liteethetherbonepackettx_fsm1_next_state = 1'd0;
reg           builder_liteethetherbonepackettx_fsm1_state = 1'd0;
reg           builder_liteethetherbonepackettx_next_state = 1'd0;
reg           builder_liteethetherbonepackettx_state = 1'd0;
reg           builder_liteethetherboneprobe_next_state = 1'd0;
reg           builder_liteethetherboneprobe_state = 1'd0;
reg     [1:0] builder_liteethetherbonerecordreceiver_next_state = 2'd0;
reg     [1:0] builder_liteethetherbonerecordreceiver_state = 2'd0;
reg     [1:0] builder_liteethetherbonerecordsender_next_state = 2'd0;
reg     [1:0] builder_liteethetherbonerecordsender_state = 2'd0;
reg     [1:0] builder_liteethetherbonewishbonemaster_next_state = 2'd0;
reg     [1:0] builder_liteethetherbonewishbonemaster_state = 2'd0;
reg     [1:0] builder_liteethicmprx_fsm0_next_state = 2'd0;
reg     [1:0] builder_liteethicmprx_fsm0_state = 2'd0;
reg           builder_liteethicmprx_fsm1_next_state = 1'd0;
reg           builder_liteethicmprx_fsm1_state = 1'd0;
reg     [1:0] builder_liteethicmprx_next_state = 2'd0;
reg     [1:0] builder_liteethicmprx_state = 2'd0;
reg     [1:0] builder_liteethicmptx_fsm0_next_state = 2'd0;
reg     [1:0] builder_liteethicmptx_fsm0_state = 2'd0;
reg           builder_liteethicmptx_fsm1_next_state = 1'd0;
reg           builder_liteethicmptx_fsm1_state = 1'd0;
reg           builder_liteethicmptx_next_state = 1'd0;
reg           builder_liteethicmptx_state = 1'd0;
reg           builder_liteethip_first = 1'd1;
reg           builder_liteethip_grant = 1'd0;
wire          builder_liteethip_last;
reg     [1:0] builder_liteethip_liteethiprx_fsm0_next_state = 2'd0;
reg     [1:0] builder_liteethip_liteethiprx_fsm0_state = 2'd0;
reg           builder_liteethip_liteethiprx_fsm1_next_state = 1'd0;
reg           builder_liteethip_liteethiprx_fsm1_state = 1'd0;
reg     [1:0] builder_liteethip_liteethiprx_next_state = 2'd0;
reg     [1:0] builder_liteethip_liteethiprx_state = 2'd0;
reg     [1:0] builder_liteethip_liteethiptx_fsm0_next_state = 2'd0;
reg     [1:0] builder_liteethip_liteethiptx_fsm0_state = 2'd0;
reg           builder_liteethip_liteethiptx_fsm1_next_state = 1'd0;
reg           builder_liteethip_liteethiptx_fsm1_state = 1'd0;
reg     [2:0] builder_liteethip_liteethiptx_next_state = 3'd0;
reg     [2:0] builder_liteethip_liteethiptx_state = 3'd0;
wire          builder_liteethip_ongoing0;
reg           builder_liteethip_ongoing1 = 1'd0;
reg     [1:0] builder_liteethip_request = 2'd0;
reg     [1:0] builder_liteethip_sel0 = 2'd0;
reg     [1:0] builder_liteethip_sel1 = 2'd0;
reg     [1:0] builder_liteethip_sel_ongoing = 2'd0;
reg           builder_liteethip_status0_first = 1'd1;
wire          builder_liteethip_status0_last;
wire          builder_liteethip_status0_ongoing0;
reg           builder_liteethip_status0_ongoing1 = 1'd0;
reg           builder_liteethip_status1_first = 1'd1;
wire          builder_liteethip_status1_last;
wire          builder_liteethip_status1_ongoing0;
reg           builder_liteethip_status1_ongoing1 = 1'd0;
reg           builder_liteethmac_first = 1'd1;
reg     [1:0] builder_liteethmac_fsm0_next_state0 = 2'd0;
reg     [1:0] builder_liteethmac_fsm0_next_state1 = 2'd0;
reg     [1:0] builder_liteethmac_fsm0_state0 = 2'd0;
reg     [1:0] builder_liteethmac_fsm0_state1 = 2'd0;
reg           builder_liteethmac_fsm1_next_state0 = 1'd0;
reg           builder_liteethmac_fsm1_next_state1 = 1'd0;
reg           builder_liteethmac_fsm1_state0 = 1'd0;
reg           builder_liteethmac_fsm1_state1 = 1'd0;
reg           builder_liteethmac_grant = 1'd0;
wire          builder_liteethmac_last;
wire          builder_liteethmac_ongoing0;
reg           builder_liteethmac_ongoing1 = 1'd0;
reg     [1:0] builder_liteethmac_request = 2'd0;
reg     [1:0] builder_liteethmac_rxdatapath_bufferizeendpoints_next_state = 2'd0;
reg     [1:0] builder_liteethmac_rxdatapath_bufferizeendpoints_state = 2'd0;
reg           builder_liteethmac_rxdatapath_liteethmacpreamblechecker_next_state = 1'd0;
reg           builder_liteethmac_rxdatapath_liteethmacpreamblechecker_state = 1'd0;
reg     [1:0] builder_liteethmac_sel0 = 2'd0;
reg     [1:0] builder_liteethmac_sel1 = 2'd0;
reg     [1:0] builder_liteethmac_sel_ongoing = 2'd0;
reg           builder_liteethmac_status0_first = 1'd1;
wire          builder_liteethmac_status0_last;
wire          builder_liteethmac_status0_ongoing0;
reg           builder_liteethmac_status0_ongoing1 = 1'd0;
reg           builder_liteethmac_status1_first = 1'd1;
wire          builder_liteethmac_status1_last;
wire          builder_liteethmac_status1_ongoing0;
reg           builder_liteethmac_status1_ongoing1 = 1'd0;
reg     [1:0] builder_liteethmac_txdatapath_bufferizeendpoints_next_state = 2'd0;
reg     [1:0] builder_liteethmac_txdatapath_bufferizeendpoints_state = 2'd0;
reg           builder_liteethmac_txdatapath_liteethmacgap_next_state = 1'd0;
reg           builder_liteethmac_txdatapath_liteethmacgap_state = 1'd0;
reg           builder_liteethmac_txdatapath_liteethmacpaddinginserter_next_state = 1'd0;
reg           builder_liteethmac_txdatapath_liteethmacpaddinginserter_state = 1'd0;
reg     [1:0] builder_liteethmac_txdatapath_liteethmacpreambleinserter_next_state = 2'd0;
reg     [1:0] builder_liteethmac_txdatapath_liteethmacpreambleinserter_state = 2'd0;
wire          builder_liteethphyrgmii_pll_fb;
wire          builder_liteethphyrgmii_reset0;
wire          builder_liteethphyrgmii_reset1;
wire          builder_liteethphyrgmii_reset2;
wire          builder_liteethphyrgmii_reset3;
wire          builder_liteethphyrgmii_reset4;
wire          builder_liteethphyrgmii_reset5;
wire          builder_liteethphyrgmii_reset6;
wire          builder_liteethphyrgmii_reset7;
reg           builder_liteethudp_first = 1'd1;
wire          builder_liteethudp_last;
reg     [1:0] builder_liteethudp_liteethudprx_fsm0_next_state = 2'd0;
reg     [1:0] builder_liteethudp_liteethudprx_fsm0_state = 2'd0;
reg           builder_liteethudp_liteethudprx_fsm1_next_state = 1'd0;
reg           builder_liteethudp_liteethudprx_fsm1_state = 1'd0;
reg     [1:0] builder_liteethudp_liteethudprx_next_state = 2'd0;
reg     [1:0] builder_liteethudp_liteethudprx_state = 2'd0;
reg     [1:0] builder_liteethudp_liteethudptx_fsm0_next_state = 2'd0;
reg     [1:0] builder_liteethudp_liteethudptx_fsm0_state = 2'd0;
reg           builder_liteethudp_liteethudptx_fsm1_next_state = 1'd0;
reg           builder_liteethudp_liteethudptx_fsm1_state = 1'd0;
reg           builder_liteethudp_liteethudptx_next_state = 1'd0;
reg           builder_liteethudp_liteethudptx_state = 1'd0;
wire          builder_liteethudp_ongoing0;
reg           builder_liteethudp_ongoing1 = 1'd0;
reg           builder_liteethudp_sel0 = 1'd0;
reg           builder_liteethudp_sel1 = 1'd0;
reg           builder_liteethudp_sel_ongoing = 1'd0;
reg           builder_locked0 = 1'd0;
reg           builder_locked1 = 1'd0;
reg           builder_locked2 = 1'd0;
reg           builder_locked3 = 1'd0;
reg           builder_locked4 = 1'd0;
reg           builder_locked5 = 1'd0;
reg           builder_locked6 = 1'd0;
reg           builder_locked7 = 1'd0;
reg     [3:0] builder_master = 4'd0;
reg     [3:0] builder_multiplexer_next_state = 4'd0;
reg     [3:0] builder_multiplexer_state = 4'd0;
reg           builder_new_master_rdata_valid0 = 1'd0;
reg           builder_new_master_rdata_valid1 = 1'd0;
reg           builder_new_master_rdata_valid2 = 1'd0;
reg           builder_new_master_rdata_valid3 = 1'd0;
reg           builder_new_master_rdata_valid4 = 1'd0;
reg           builder_new_master_rdata_valid5 = 1'd0;
reg           builder_new_master_rdata_valid6 = 1'd0;
reg           builder_new_master_rdata_valid7 = 1'd0;
reg           builder_new_master_rdata_valid8 = 1'd0;
reg           builder_new_master_wdata_ready0 = 1'd0;
reg           builder_new_master_wdata_ready1 = 1'd0;
reg     [1:0] builder_refresher_next_state = 2'd0;
reg     [1:0] builder_refresher_state = 2'd0;
wire    [2:0] builder_request;
reg    [29:0] builder_rhs_self0 = 30'd0;
reg    [31:0] builder_rhs_self1 = 32'd0;
reg     [2:0] builder_rhs_self10 = 3'd0;
reg           builder_rhs_self11 = 1'd0;
reg           builder_rhs_self12 = 1'd0;
reg           builder_rhs_self13 = 1'd0;
reg           builder_rhs_self14 = 1'd0;
reg    [14:0] builder_rhs_self15 = 15'd0;
reg     [2:0] builder_rhs_self16 = 3'd0;
reg           builder_rhs_self17 = 1'd0;
reg           builder_rhs_self18 = 1'd0;
reg           builder_rhs_self19 = 1'd0;
reg     [3:0] builder_rhs_self2 = 4'd0;
reg    [21:0] builder_rhs_self20 = 22'd0;
reg           builder_rhs_self21 = 1'd0;
reg           builder_rhs_self22 = 1'd0;
reg    [21:0] builder_rhs_self23 = 22'd0;
reg           builder_rhs_self24 = 1'd0;
reg           builder_rhs_self25 = 1'd0;
reg    [21:0] builder_rhs_self26 = 22'd0;
reg           builder_rhs_self27 = 1'd0;
reg           builder_rhs_self28 = 1'd0;
reg    [21:0] builder_rhs_self29 = 22'd0;
reg           builder_rhs_self3 = 1'd0;
reg           builder_rhs_self30 = 1'd0;
reg           builder_rhs_self31 = 1'd0;
reg    [21:0] builder_rhs_self32 = 22'd0;
reg           builder_rhs_self33 = 1'd0;
reg           builder_rhs_self34 = 1'd0;
reg    [21:0] builder_rhs_self35 = 22'd0;
reg           builder_rhs_self36 = 1'd0;
reg           builder_rhs_self37 = 1'd0;
reg    [21:0] builder_rhs_self38 = 22'd0;
reg           builder_rhs_self39 = 1'd0;
reg           builder_rhs_self4 = 1'd0;
reg           builder_rhs_self40 = 1'd0;
reg    [21:0] builder_rhs_self41 = 22'd0;
reg           builder_rhs_self42 = 1'd0;
reg           builder_rhs_self43 = 1'd0;
reg           builder_rhs_self5 = 1'd0;
reg     [2:0] builder_rhs_self6 = 3'd0;
reg     [1:0] builder_rhs_self7 = 2'd0;
reg           builder_rhs_self8 = 1'd0;
reg    [14:0] builder_rhs_self9 = 15'd0;
wire          builder_roundrobin0_ce;
wire          builder_roundrobin0_grant;
wire          builder_roundrobin0_request;
wire          builder_roundrobin1_ce;
wire          builder_roundrobin1_grant;
wire          builder_roundrobin1_request;
wire          builder_roundrobin2_ce;
wire          builder_roundrobin2_grant;
wire          builder_roundrobin2_request;
wire          builder_roundrobin3_ce;
wire          builder_roundrobin3_grant;
wire          builder_roundrobin3_request;
wire          builder_roundrobin4_ce;
wire          builder_roundrobin4_grant;
wire          builder_roundrobin4_request;
wire          builder_roundrobin5_ce;
wire          builder_roundrobin5_grant;
wire          builder_roundrobin5_request;
wire          builder_roundrobin6_ce;
wire          builder_roundrobin6_grant;
wire          builder_roundrobin6_request;
wire          builder_roundrobin7_ce;
wire          builder_roundrobin7_grant;
wire          builder_roundrobin7_request;
reg           builder_rs232phyrx_next_state = 1'd0;
reg           builder_rs232phyrx_state = 1'd0;
reg           builder_rs232phytx_next_state = 1'd0;
reg           builder_rs232phytx_state = 1'd0;
reg     [2:0] builder_self0 = 3'd0;
reg    [14:0] builder_self1 = 15'd0;
reg           builder_self10 = 1'd0;
reg           builder_self11 = 1'd0;
reg           builder_self12 = 1'd0;
reg           builder_self13 = 1'd0;
reg     [2:0] builder_self14 = 3'd0;
reg    [14:0] builder_self15 = 15'd0;
reg           builder_self16 = 1'd0;
reg           builder_self17 = 1'd0;
reg           builder_self18 = 1'd0;
reg           builder_self19 = 1'd0;
reg           builder_self2 = 1'd0;
reg           builder_self20 = 1'd0;
reg     [2:0] builder_self21 = 3'd0;
reg    [14:0] builder_self22 = 15'd0;
reg           builder_self23 = 1'd0;
reg           builder_self24 = 1'd0;
reg           builder_self25 = 1'd0;
reg           builder_self26 = 1'd0;
reg           builder_self27 = 1'd0;
reg           builder_self3 = 1'd0;
reg           builder_self4 = 1'd0;
reg           builder_self5 = 1'd0;
reg           builder_self6 = 1'd0;
reg     [2:0] builder_self7 = 3'd0;
reg    [14:0] builder_self8 = 15'd0;
reg           builder_self9 = 1'd0;
reg           builder_shared_ack = 1'd0;
wire   [29:0] builder_shared_adr;
wire    [1:0] builder_shared_bte;
wire    [2:0] builder_shared_cti;
wire          builder_shared_cyc;
reg    [31:0] builder_shared_dat_r = 32'd0;
wire   [31:0] builder_shared_dat_w;
wire          builder_shared_err;
wire    [3:0] builder_shared_sel;
wire          builder_shared_stb;
wire          builder_shared_we;
reg     [3:0] builder_slaves = 4'd0;
reg           builder_t_self0 = 1'd0;
reg           builder_t_self1 = 1'd0;
reg           builder_t_self2 = 1'd0;
reg           builder_t_self3 = 1'd0;
reg           builder_t_self4 = 1'd0;
reg           builder_t_self5 = 1'd0;
wire          builder_wait;
reg     [1:0] builder_wishbone2csr_next_state = 2'd0;
reg     [1:0] builder_wishbone2csr_state = 2'd0;
wire          builder_xilinxasyncresetsynchronizerimpl0;
wire          builder_xilinxasyncresetsynchronizerimpl0_rst_meta;
wire          builder_xilinxasyncresetsynchronizerimpl1;
wire          builder_xilinxasyncresetsynchronizerimpl1_rst_meta;
wire          builder_xilinxasyncresetsynchronizerimpl2;
wire          builder_xilinxasyncresetsynchronizerimpl2_rst_meta;
wire          builder_xilinxasyncresetsynchronizerimpl3;
wire          builder_xilinxasyncresetsynchronizerimpl3_rst_meta;
wire          builder_xilinxasyncresetsynchronizerimpl4;
wire          builder_xilinxasyncresetsynchronizerimpl4_expr;
wire          builder_xilinxasyncresetsynchronizerimpl4_rst_meta;
wire          builder_xilinxasyncresetsynchronizerimpl5_rst_meta;
wire          builder_xilinxasyncresetsynchronizerimpl6_rst_meta;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl0_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl0_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] builder_xilinxmultiregimpl10_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] builder_xilinxmultiregimpl10_regs1 = 3'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] builder_xilinxmultiregimpl11_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] builder_xilinxmultiregimpl11_regs1 = 3'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl1_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl1_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl2_regs0 = 6'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl2_regs1 = 6'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl3_regs0 = 6'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl3_regs1 = 6'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl4_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl4_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl5_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl5_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl6_regs0 = 6'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl6_regs1 = 6'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl7_regs0 = 6'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl7_regs1 = 6'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] builder_xilinxmultiregimpl8_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] builder_xilinxmultiregimpl8_regs1 = 3'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] builder_xilinxmultiregimpl9_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] builder_xilinxmultiregimpl9_regs1 = 3'd0;
(* dont_touch = "true" *)
wire          eth_rx_clk;
wire          eth_rx_rst;
(* dont_touch = "true" *)
wire          eth_tx_clk;
wire          eth_tx_delayed_clk;
wire          eth_tx_rst;
wire          etherbone_clk;
wire          etherbone_rst;
wire          idelay_clk;
wire          idelay_rst;
wire          main_a7ddrphy0;
wire          main_a7ddrphy1;
wire          main_a7ddrphy2;
wire          main_a7ddrphy3;
reg     [7:0] main_a7ddrphy_bitslip00 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip01 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip02 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip03;
reg     [7:0] main_a7ddrphy_bitslip04 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip0_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip0_r1 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip0_r2 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip0_r3 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip0_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip0_value1 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip0_value2 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip0_value3 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip10 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip100 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip101;
reg     [7:0] main_a7ddrphy_bitslip102 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip10_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip10_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip10_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip10_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip11 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip110 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip111;
reg     [7:0] main_a7ddrphy_bitslip112 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip11_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip11_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip11_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip11_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip12 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip120 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip121;
reg     [7:0] main_a7ddrphy_bitslip122 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip12_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip12_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip12_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip12_value1 = 3'd7;
wire    [7:0] main_a7ddrphy_bitslip13;
reg     [7:0] main_a7ddrphy_bitslip130 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip131;
reg     [7:0] main_a7ddrphy_bitslip132 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip13_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip13_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip13_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip13_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip14 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip140 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip141;
reg     [7:0] main_a7ddrphy_bitslip142 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip14_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip14_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip14_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip14_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip150 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip151;
reg     [7:0] main_a7ddrphy_bitslip152 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip15_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip15_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip15_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip15_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip160 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip161;
reg     [7:0] main_a7ddrphy_bitslip162 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip16_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip16_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip16_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip16_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip170 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip171;
reg     [7:0] main_a7ddrphy_bitslip172 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip17_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip17_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip17_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip17_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip180 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip181;
reg     [7:0] main_a7ddrphy_bitslip182 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip18_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip18_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip18_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip18_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip190 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip191;
reg     [7:0] main_a7ddrphy_bitslip192 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip19_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip19_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip19_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip19_value1 = 3'd7;
reg    [15:0] main_a7ddrphy_bitslip1_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip1_r1 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip1_r2 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip1_r3 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip1_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip1_value1 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip1_value2 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip1_value3 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip20 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip200 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip201;
reg     [7:0] main_a7ddrphy_bitslip202 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip20_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip20_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip20_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip20_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip21 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip210 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip211;
reg     [7:0] main_a7ddrphy_bitslip212 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip21_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip21_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip21_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip21_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip22 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip220 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip221;
reg     [7:0] main_a7ddrphy_bitslip222 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip22_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip22_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip22_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip22_value1 = 3'd7;
wire    [7:0] main_a7ddrphy_bitslip23;
reg     [7:0] main_a7ddrphy_bitslip230 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip231;
reg     [7:0] main_a7ddrphy_bitslip232 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip23_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip23_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip23_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip23_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip24 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip240 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip241;
reg     [7:0] main_a7ddrphy_bitslip242 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip24_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip24_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip24_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip24_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip250 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip251;
reg     [7:0] main_a7ddrphy_bitslip252 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip25_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip25_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip25_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip25_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip260 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip261;
reg     [7:0] main_a7ddrphy_bitslip262 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip26_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip26_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip26_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip26_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip270 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip271;
reg     [7:0] main_a7ddrphy_bitslip272 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip27_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip27_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip27_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip27_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip280 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip281;
reg     [7:0] main_a7ddrphy_bitslip282 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip28_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip28_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip28_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip28_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip290 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip291;
reg     [7:0] main_a7ddrphy_bitslip292 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip29_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip29_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip29_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip29_value1 = 3'd7;
reg    [15:0] main_a7ddrphy_bitslip2_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip2_r1 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip2_r2 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip2_r3 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip2_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip2_value1 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip2_value2 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip2_value3 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip30 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip300 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip301;
reg     [7:0] main_a7ddrphy_bitslip302 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip30_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip30_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip30_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip30_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip31 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip310 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip311;
reg     [7:0] main_a7ddrphy_bitslip312 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip31_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip31_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip31_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip31_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip32 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip33;
reg     [7:0] main_a7ddrphy_bitslip34 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip3_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip3_r1 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip3_r2 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip3_r3 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip3_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip3_value1 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip3_value2 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip3_value3 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip40 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip41;
reg     [7:0] main_a7ddrphy_bitslip42 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip4_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip4_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip4_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip4_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip50 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip51;
reg     [7:0] main_a7ddrphy_bitslip52 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip5_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip5_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip5_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip5_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip60 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip61;
reg     [7:0] main_a7ddrphy_bitslip62 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip6_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip6_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip6_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip6_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip70 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip71;
reg     [7:0] main_a7ddrphy_bitslip72 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip7_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip7_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip7_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip7_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip80 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip81;
reg     [7:0] main_a7ddrphy_bitslip82 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip8_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip8_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip8_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip8_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip90 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip91;
reg     [7:0] main_a7ddrphy_bitslip92 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip9_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip9_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip9_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip9_value1 = 3'd7;
reg           main_a7ddrphy_cmd_latency_tappeddelayline0 = 1'd0;
reg           main_a7ddrphy_cmd_latency_tappeddelayline1 = 1'd0;
reg           main_a7ddrphy_cmd_latency_tappeddelayline2 = 1'd0;
reg           main_a7ddrphy_cmd_latency_tappeddelayline3 = 1'd0;
reg           main_a7ddrphy_cmd_latency_tappeddelayline4 = 1'd0;
reg           main_a7ddrphy_cmd_latency_tappeddelayline5 = 1'd0;
reg           main_a7ddrphy_cmd_latency_tappeddelayline6 = 1'd0;
reg           main_a7ddrphy_cmd_latency_tappeddelayline7 = 1'd0;
wire          main_a7ddrphy_dfi_p0_act_n;
wire   [14:0] main_a7ddrphy_dfi_p0_address;
wire    [2:0] main_a7ddrphy_dfi_p0_bank;
wire          main_a7ddrphy_dfi_p0_cas_n;
wire          main_a7ddrphy_dfi_p0_cke;
wire          main_a7ddrphy_dfi_p0_cs_n;
wire          main_a7ddrphy_dfi_p0_odt;
wire          main_a7ddrphy_dfi_p0_ras_n;
reg    [63:0] main_a7ddrphy_dfi_p0_rddata = 64'd0;
wire          main_a7ddrphy_dfi_p0_rddata_en;
wire          main_a7ddrphy_dfi_p0_rddata_valid;
wire          main_a7ddrphy_dfi_p0_reset_n;
wire          main_a7ddrphy_dfi_p0_we_n;
wire   [63:0] main_a7ddrphy_dfi_p0_wrdata;
wire          main_a7ddrphy_dfi_p0_wrdata_en;
wire    [7:0] main_a7ddrphy_dfi_p0_wrdata_mask;
wire          main_a7ddrphy_dfi_p1_act_n;
wire   [14:0] main_a7ddrphy_dfi_p1_address;
wire    [2:0] main_a7ddrphy_dfi_p1_bank;
wire          main_a7ddrphy_dfi_p1_cas_n;
wire          main_a7ddrphy_dfi_p1_cke;
wire          main_a7ddrphy_dfi_p1_cs_n;
wire          main_a7ddrphy_dfi_p1_odt;
wire          main_a7ddrphy_dfi_p1_ras_n;
reg    [63:0] main_a7ddrphy_dfi_p1_rddata = 64'd0;
wire          main_a7ddrphy_dfi_p1_rddata_en;
wire          main_a7ddrphy_dfi_p1_rddata_valid;
wire          main_a7ddrphy_dfi_p1_reset_n;
wire          main_a7ddrphy_dfi_p1_we_n;
wire   [63:0] main_a7ddrphy_dfi_p1_wrdata;
wire          main_a7ddrphy_dfi_p1_wrdata_en;
wire    [7:0] main_a7ddrphy_dfi_p1_wrdata_mask;
wire          main_a7ddrphy_dfi_p2_act_n;
wire   [14:0] main_a7ddrphy_dfi_p2_address;
wire    [2:0] main_a7ddrphy_dfi_p2_bank;
wire          main_a7ddrphy_dfi_p2_cas_n;
wire          main_a7ddrphy_dfi_p2_cke;
wire          main_a7ddrphy_dfi_p2_cs_n;
wire          main_a7ddrphy_dfi_p2_odt;
wire          main_a7ddrphy_dfi_p2_ras_n;
reg    [63:0] main_a7ddrphy_dfi_p2_rddata = 64'd0;
wire          main_a7ddrphy_dfi_p2_rddata_en;
wire          main_a7ddrphy_dfi_p2_rddata_valid;
wire          main_a7ddrphy_dfi_p2_reset_n;
wire          main_a7ddrphy_dfi_p2_we_n;
wire   [63:0] main_a7ddrphy_dfi_p2_wrdata;
wire          main_a7ddrphy_dfi_p2_wrdata_en;
wire    [7:0] main_a7ddrphy_dfi_p2_wrdata_mask;
wire          main_a7ddrphy_dfi_p3_act_n;
wire   [14:0] main_a7ddrphy_dfi_p3_address;
wire    [2:0] main_a7ddrphy_dfi_p3_bank;
wire          main_a7ddrphy_dfi_p3_cas_n;
wire          main_a7ddrphy_dfi_p3_cke;
wire          main_a7ddrphy_dfi_p3_cs_n;
wire          main_a7ddrphy_dfi_p3_odt;
wire          main_a7ddrphy_dfi_p3_ras_n;
reg    [63:0] main_a7ddrphy_dfi_p3_rddata = 64'd0;
wire          main_a7ddrphy_dfi_p3_rddata_en;
wire          main_a7ddrphy_dfi_p3_rddata_valid;
wire          main_a7ddrphy_dfi_p3_reset_n;
wire          main_a7ddrphy_dfi_p3_we_n;
wire   [63:0] main_a7ddrphy_dfi_p3_wrdata;
wire          main_a7ddrphy_dfi_p3_wrdata_en;
wire    [7:0] main_a7ddrphy_dfi_p3_wrdata_mask;
reg           main_a7ddrphy_dly_sel_re = 1'd0;
reg     [3:0] main_a7ddrphy_dly_sel_storage = 4'd0;
wire          main_a7ddrphy_dq_i_delayed0;
wire          main_a7ddrphy_dq_i_delayed1;
wire          main_a7ddrphy_dq_i_delayed10;
wire          main_a7ddrphy_dq_i_delayed11;
wire          main_a7ddrphy_dq_i_delayed12;
wire          main_a7ddrphy_dq_i_delayed13;
wire          main_a7ddrphy_dq_i_delayed14;
wire          main_a7ddrphy_dq_i_delayed15;
wire          main_a7ddrphy_dq_i_delayed16;
wire          main_a7ddrphy_dq_i_delayed17;
wire          main_a7ddrphy_dq_i_delayed18;
wire          main_a7ddrphy_dq_i_delayed19;
wire          main_a7ddrphy_dq_i_delayed2;
wire          main_a7ddrphy_dq_i_delayed20;
wire          main_a7ddrphy_dq_i_delayed21;
wire          main_a7ddrphy_dq_i_delayed22;
wire          main_a7ddrphy_dq_i_delayed23;
wire          main_a7ddrphy_dq_i_delayed24;
wire          main_a7ddrphy_dq_i_delayed25;
wire          main_a7ddrphy_dq_i_delayed26;
wire          main_a7ddrphy_dq_i_delayed27;
wire          main_a7ddrphy_dq_i_delayed28;
wire          main_a7ddrphy_dq_i_delayed29;
wire          main_a7ddrphy_dq_i_delayed3;
wire          main_a7ddrphy_dq_i_delayed30;
wire          main_a7ddrphy_dq_i_delayed31;
wire          main_a7ddrphy_dq_i_delayed4;
wire          main_a7ddrphy_dq_i_delayed5;
wire          main_a7ddrphy_dq_i_delayed6;
wire          main_a7ddrphy_dq_i_delayed7;
wire          main_a7ddrphy_dq_i_delayed8;
wire          main_a7ddrphy_dq_i_delayed9;
wire          main_a7ddrphy_dq_i_nodelay0;
wire          main_a7ddrphy_dq_i_nodelay1;
wire          main_a7ddrphy_dq_i_nodelay10;
wire          main_a7ddrphy_dq_i_nodelay11;
wire          main_a7ddrphy_dq_i_nodelay12;
wire          main_a7ddrphy_dq_i_nodelay13;
wire          main_a7ddrphy_dq_i_nodelay14;
wire          main_a7ddrphy_dq_i_nodelay15;
wire          main_a7ddrphy_dq_i_nodelay16;
wire          main_a7ddrphy_dq_i_nodelay17;
wire          main_a7ddrphy_dq_i_nodelay18;
wire          main_a7ddrphy_dq_i_nodelay19;
wire          main_a7ddrphy_dq_i_nodelay2;
wire          main_a7ddrphy_dq_i_nodelay20;
wire          main_a7ddrphy_dq_i_nodelay21;
wire          main_a7ddrphy_dq_i_nodelay22;
wire          main_a7ddrphy_dq_i_nodelay23;
wire          main_a7ddrphy_dq_i_nodelay24;
wire          main_a7ddrphy_dq_i_nodelay25;
wire          main_a7ddrphy_dq_i_nodelay26;
wire          main_a7ddrphy_dq_i_nodelay27;
wire          main_a7ddrphy_dq_i_nodelay28;
wire          main_a7ddrphy_dq_i_nodelay29;
wire          main_a7ddrphy_dq_i_nodelay3;
wire          main_a7ddrphy_dq_i_nodelay30;
wire          main_a7ddrphy_dq_i_nodelay31;
wire          main_a7ddrphy_dq_i_nodelay4;
wire          main_a7ddrphy_dq_i_nodelay5;
wire          main_a7ddrphy_dq_i_nodelay6;
wire          main_a7ddrphy_dq_i_nodelay7;
wire          main_a7ddrphy_dq_i_nodelay8;
wire          main_a7ddrphy_dq_i_nodelay9;
wire          main_a7ddrphy_dq_o_nodelay0;
wire          main_a7ddrphy_dq_o_nodelay1;
wire          main_a7ddrphy_dq_o_nodelay10;
wire          main_a7ddrphy_dq_o_nodelay11;
wire          main_a7ddrphy_dq_o_nodelay12;
wire          main_a7ddrphy_dq_o_nodelay13;
wire          main_a7ddrphy_dq_o_nodelay14;
wire          main_a7ddrphy_dq_o_nodelay15;
wire          main_a7ddrphy_dq_o_nodelay16;
wire          main_a7ddrphy_dq_o_nodelay17;
wire          main_a7ddrphy_dq_o_nodelay18;
wire          main_a7ddrphy_dq_o_nodelay19;
wire          main_a7ddrphy_dq_o_nodelay2;
wire          main_a7ddrphy_dq_o_nodelay20;
wire          main_a7ddrphy_dq_o_nodelay21;
wire          main_a7ddrphy_dq_o_nodelay22;
wire          main_a7ddrphy_dq_o_nodelay23;
wire          main_a7ddrphy_dq_o_nodelay24;
wire          main_a7ddrphy_dq_o_nodelay25;
wire          main_a7ddrphy_dq_o_nodelay26;
wire          main_a7ddrphy_dq_o_nodelay27;
wire          main_a7ddrphy_dq_o_nodelay28;
wire          main_a7ddrphy_dq_o_nodelay29;
wire          main_a7ddrphy_dq_o_nodelay3;
wire          main_a7ddrphy_dq_o_nodelay30;
wire          main_a7ddrphy_dq_o_nodelay31;
wire          main_a7ddrphy_dq_o_nodelay4;
wire          main_a7ddrphy_dq_o_nodelay5;
wire          main_a7ddrphy_dq_o_nodelay6;
wire          main_a7ddrphy_dq_o_nodelay7;
wire          main_a7ddrphy_dq_o_nodelay8;
wire          main_a7ddrphy_dq_o_nodelay9;
wire          main_a7ddrphy_dq_oe;
wire          main_a7ddrphy_dq_oe_delay_tappeddelayline;
reg           main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0 = 1'd0;
reg           main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1 = 1'd0;
wire          main_a7ddrphy_dq_t0;
wire          main_a7ddrphy_dq_t1;
wire          main_a7ddrphy_dq_t10;
wire          main_a7ddrphy_dq_t11;
wire          main_a7ddrphy_dq_t12;
wire          main_a7ddrphy_dq_t13;
wire          main_a7ddrphy_dq_t14;
wire          main_a7ddrphy_dq_t15;
wire          main_a7ddrphy_dq_t16;
wire          main_a7ddrphy_dq_t17;
wire          main_a7ddrphy_dq_t18;
wire          main_a7ddrphy_dq_t19;
wire          main_a7ddrphy_dq_t2;
wire          main_a7ddrphy_dq_t20;
wire          main_a7ddrphy_dq_t21;
wire          main_a7ddrphy_dq_t22;
wire          main_a7ddrphy_dq_t23;
wire          main_a7ddrphy_dq_t24;
wire          main_a7ddrphy_dq_t25;
wire          main_a7ddrphy_dq_t26;
wire          main_a7ddrphy_dq_t27;
wire          main_a7ddrphy_dq_t28;
wire          main_a7ddrphy_dq_t29;
wire          main_a7ddrphy_dq_t3;
wire          main_a7ddrphy_dq_t30;
wire          main_a7ddrphy_dq_t31;
wire          main_a7ddrphy_dq_t4;
wire          main_a7ddrphy_dq_t5;
wire          main_a7ddrphy_dq_t6;
wire          main_a7ddrphy_dq_t7;
wire          main_a7ddrphy_dq_t8;
wire          main_a7ddrphy_dq_t9;
wire          main_a7ddrphy_dqs_o_no_delay0;
wire          main_a7ddrphy_dqs_o_no_delay1;
wire          main_a7ddrphy_dqs_o_no_delay2;
wire          main_a7ddrphy_dqs_o_no_delay3;
reg           main_a7ddrphy_dqs_oe = 1'd0;
wire          main_a7ddrphy_dqs_oe_delay_tappeddelayline;
reg           main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0 = 1'd0;
reg           main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1 = 1'd0;
wire          main_a7ddrphy_dqs_postamble;
wire          main_a7ddrphy_dqs_preamble;
wire          main_a7ddrphy_dqs_t0;
wire          main_a7ddrphy_dqs_t1;
wire          main_a7ddrphy_dqs_t2;
wire          main_a7ddrphy_dqs_t3;
reg           main_a7ddrphy_dqspattern0 = 1'd0;
reg           main_a7ddrphy_dqspattern1 = 1'd0;
reg     [7:0] main_a7ddrphy_dqspattern_o0 = 8'd0;
reg     [7:0] main_a7ddrphy_dqspattern_o1 = 8'd0;
reg           main_a7ddrphy_half_sys8x_taps_re = 1'd0;
reg     [4:0] main_a7ddrphy_half_sys8x_taps_storage = 5'd16;
wire    [2:0] main_a7ddrphy_pads_ba;
wire          main_a7ddrphy_rdly_dq_bitslip_r;
reg           main_a7ddrphy_rdly_dq_bitslip_re = 1'd0;
wire          main_a7ddrphy_rdly_dq_bitslip_rst_r;
reg           main_a7ddrphy_rdly_dq_bitslip_rst_re = 1'd0;
reg           main_a7ddrphy_rdly_dq_bitslip_rst_w = 1'd0;
reg           main_a7ddrphy_rdly_dq_bitslip_rst_we = 1'd0;
reg           main_a7ddrphy_rdly_dq_bitslip_w = 1'd0;
reg           main_a7ddrphy_rdly_dq_bitslip_we = 1'd0;
wire          main_a7ddrphy_rdly_dq_inc_r;
reg           main_a7ddrphy_rdly_dq_inc_re = 1'd0;
reg           main_a7ddrphy_rdly_dq_inc_w = 1'd0;
reg           main_a7ddrphy_rdly_dq_inc_we = 1'd0;
wire          main_a7ddrphy_rdly_dq_rst_r;
reg           main_a7ddrphy_rdly_dq_rst_re = 1'd0;
reg           main_a7ddrphy_rdly_dq_rst_w = 1'd0;
reg           main_a7ddrphy_rdly_dq_rst_we = 1'd0;
reg           main_a7ddrphy_rdphase_re = 1'd0;
reg     [1:0] main_a7ddrphy_rdphase_storage = 2'd2;
reg           main_a7ddrphy_rst_re = 1'd0;
reg           main_a7ddrphy_rst_storage = 1'd0;
wire          main_a7ddrphy_sd_clk_se_nodelay;
wire          main_a7ddrphy_wdly_dq_bitslip_r;
reg           main_a7ddrphy_wdly_dq_bitslip_re = 1'd0;
wire          main_a7ddrphy_wdly_dq_bitslip_rst_r;
reg           main_a7ddrphy_wdly_dq_bitslip_rst_re = 1'd0;
reg           main_a7ddrphy_wdly_dq_bitslip_rst_w = 1'd0;
reg           main_a7ddrphy_wdly_dq_bitslip_rst_we = 1'd0;
reg           main_a7ddrphy_wdly_dq_bitslip_w = 1'd0;
reg           main_a7ddrphy_wdly_dq_bitslip_we = 1'd0;
reg           main_a7ddrphy_wlevel_en_re = 1'd0;
reg           main_a7ddrphy_wlevel_en_storage = 1'd0;
wire          main_a7ddrphy_wlevel_strobe_r;
reg           main_a7ddrphy_wlevel_strobe_re = 1'd0;
reg           main_a7ddrphy_wlevel_strobe_w = 1'd0;
reg           main_a7ddrphy_wlevel_strobe_we = 1'd0;
reg           main_a7ddrphy_wrdata_en_tappeddelayline0 = 1'd0;
reg           main_a7ddrphy_wrdata_en_tappeddelayline1 = 1'd0;
reg           main_a7ddrphy_wrdata_en_tappeddelayline2 = 1'd0;
reg           main_a7ddrphy_wrphase_re = 1'd0;
reg     [1:0] main_a7ddrphy_wrphase_storage = 2'd3;
reg           main_basesoc_aborted = 1'd0;
reg           main_basesoc_aborted_litedramwishbone2native_next_value = 1'd0;
reg           main_basesoc_aborted_litedramwishbone2native_next_value_ce = 1'd0;
reg     [2:0] main_basesoc_adr_offset_r = 3'd0;
wire   [14:0] main_basesoc_basesoc_basesoc_adr;
reg           main_basesoc_basesoc_basesoc_adr_burst = 1'd0;
wire   [31:0] main_basesoc_basesoc_basesoc_dat_r;
reg           main_basesoc_basesoc_basesoc_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_basesoc_basesoc_ram_bus_adr;
wire    [1:0] main_basesoc_basesoc_basesoc_ram_bus_bte;
wire    [2:0] main_basesoc_basesoc_basesoc_ram_bus_cti;
wire          main_basesoc_basesoc_basesoc_ram_bus_cyc;
wire   [31:0] main_basesoc_basesoc_basesoc_ram_bus_dat_r;
wire   [31:0] main_basesoc_basesoc_basesoc_ram_bus_dat_w;
reg           main_basesoc_basesoc_basesoc_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_basesoc_basesoc_ram_bus_sel;
wire          main_basesoc_basesoc_basesoc_ram_bus_stb;
wire          main_basesoc_basesoc_basesoc_ram_bus_we;
wire          main_basesoc_basesoc_bus_error;
reg    [31:0] main_basesoc_basesoc_bus_errors = 32'd0;
reg           main_basesoc_basesoc_bus_errors_re = 1'd0;
wire   [31:0] main_basesoc_basesoc_bus_errors_status;
wire          main_basesoc_basesoc_bus_errors_we;
wire          main_basesoc_basesoc_cpu_rst;
wire          main_basesoc_basesoc_dbus_ack;
wire   [29:0] main_basesoc_basesoc_dbus_adr;
wire    [1:0] main_basesoc_basesoc_dbus_bte;
wire    [2:0] main_basesoc_basesoc_dbus_cti;
wire          main_basesoc_basesoc_dbus_cyc;
wire   [31:0] main_basesoc_basesoc_dbus_dat_r;
wire   [31:0] main_basesoc_basesoc_dbus_dat_w;
wire          main_basesoc_basesoc_dbus_err;
wire    [3:0] main_basesoc_basesoc_dbus_sel;
wire          main_basesoc_basesoc_dbus_stb;
wire          main_basesoc_basesoc_dbus_we;
wire          main_basesoc_basesoc_ibus_ack;
wire   [29:0] main_basesoc_basesoc_ibus_adr;
wire    [1:0] main_basesoc_basesoc_ibus_bte;
wire    [2:0] main_basesoc_basesoc_ibus_cti;
wire          main_basesoc_basesoc_ibus_cyc;
wire   [31:0] main_basesoc_basesoc_ibus_dat_r;
wire   [31:0] main_basesoc_basesoc_ibus_dat_w;
wire          main_basesoc_basesoc_ibus_err;
wire    [3:0] main_basesoc_basesoc_ibus_sel;
wire          main_basesoc_basesoc_ibus_stb;
wire          main_basesoc_basesoc_ibus_we;
reg    [31:0] main_basesoc_basesoc_interrupt = 32'd0;
wire   [10:0] main_basesoc_basesoc_ram_adr;
reg           main_basesoc_basesoc_ram_adr_burst = 1'd0;
reg           main_basesoc_basesoc_ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_basesoc_ram_bus_ram_bus_adr;
wire    [1:0] main_basesoc_basesoc_ram_bus_ram_bus_bte;
wire    [2:0] main_basesoc_basesoc_ram_bus_ram_bus_cti;
wire          main_basesoc_basesoc_ram_bus_ram_bus_cyc;
wire   [31:0] main_basesoc_basesoc_ram_bus_ram_bus_dat_r;
wire   [31:0] main_basesoc_basesoc_ram_bus_ram_bus_dat_w;
reg           main_basesoc_basesoc_ram_bus_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_basesoc_ram_bus_ram_bus_sel;
wire          main_basesoc_basesoc_ram_bus_ram_bus_stb;
wire          main_basesoc_basesoc_ram_bus_ram_bus_we;
wire   [31:0] main_basesoc_basesoc_ram_dat_r;
wire   [31:0] main_basesoc_basesoc_ram_dat_w;
reg     [3:0] main_basesoc_basesoc_ram_we = 4'd0;
wire          main_basesoc_basesoc_reset;
reg           main_basesoc_basesoc_reset_re = 1'd0;
reg     [1:0] main_basesoc_basesoc_reset_storage = 2'd0;
reg     [3:0] main_basesoc_basesoc_rx_count = 4'd0;
reg     [3:0] main_basesoc_basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           main_basesoc_basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_basesoc_rx_data = 8'd0;
reg     [7:0] main_basesoc_basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           main_basesoc_basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           main_basesoc_basesoc_rx_enable = 1'd0;
reg    [31:0] main_basesoc_basesoc_rx_phase = 32'd0;
wire          main_basesoc_basesoc_rx_rx;
reg           main_basesoc_basesoc_rx_rx_d = 1'd0;
reg           main_basesoc_basesoc_rx_source_first = 1'd0;
reg           main_basesoc_basesoc_rx_source_last = 1'd0;
reg     [7:0] main_basesoc_basesoc_rx_source_payload_data = 8'd0;
wire          main_basesoc_basesoc_rx_source_ready;
reg           main_basesoc_basesoc_rx_source_valid = 1'd0;
reg           main_basesoc_basesoc_rx_tick = 1'd0;
reg           main_basesoc_basesoc_scratch_re = 1'd0;
reg    [31:0] main_basesoc_basesoc_scratch_storage = 32'd305419896;
reg           main_basesoc_basesoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           main_basesoc_basesoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           main_basesoc_basesoc_soc_rst = 1'd0;
reg           main_basesoc_basesoc_timer_en_re = 1'd0;
reg           main_basesoc_basesoc_timer_en_storage = 1'd0;
reg           main_basesoc_basesoc_timer_enable_re = 1'd0;
reg           main_basesoc_basesoc_timer_enable_storage = 1'd0;
wire          main_basesoc_basesoc_timer_irq;
reg           main_basesoc_basesoc_timer_load_re = 1'd0;
reg    [31:0] main_basesoc_basesoc_timer_load_storage = 32'd0;
reg           main_basesoc_basesoc_timer_pending_r = 1'd0;
reg           main_basesoc_basesoc_timer_pending_re = 1'd0;
wire          main_basesoc_basesoc_timer_pending_status;
wire          main_basesoc_basesoc_timer_pending_we;
reg           main_basesoc_basesoc_timer_reload_re = 1'd0;
reg    [31:0] main_basesoc_basesoc_timer_reload_storage = 32'd0;
reg           main_basesoc_basesoc_timer_status_re = 1'd0;
wire          main_basesoc_basesoc_timer_status_status;
wire          main_basesoc_basesoc_timer_status_we;
reg           main_basesoc_basesoc_timer_update_value_re = 1'd0;
reg           main_basesoc_basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] main_basesoc_basesoc_timer_value = 32'd0;
reg           main_basesoc_basesoc_timer_value_re = 1'd0;
reg    [31:0] main_basesoc_basesoc_timer_value_status = 32'd0;
wire          main_basesoc_basesoc_timer_value_we;
wire          main_basesoc_basesoc_timer_zero0;
wire          main_basesoc_basesoc_timer_zero1;
wire          main_basesoc_basesoc_timer_zero2;
reg           main_basesoc_basesoc_timer_zero_clear = 1'd0;
reg           main_basesoc_basesoc_timer_zero_pending = 1'd0;
wire          main_basesoc_basesoc_timer_zero_status;
wire          main_basesoc_basesoc_timer_zero_trigger;
reg           main_basesoc_basesoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] main_basesoc_basesoc_tx_count = 4'd0;
reg     [3:0] main_basesoc_basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           main_basesoc_basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_basesoc_tx_data = 8'd0;
reg     [7:0] main_basesoc_basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           main_basesoc_basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           main_basesoc_basesoc_tx_enable = 1'd0;
reg    [31:0] main_basesoc_basesoc_tx_phase = 32'd0;
wire          main_basesoc_basesoc_tx_sink_first;
wire          main_basesoc_basesoc_tx_sink_last;
wire    [7:0] main_basesoc_basesoc_tx_sink_payload_data;
reg           main_basesoc_basesoc_tx_sink_ready = 1'd0;
wire          main_basesoc_basesoc_tx_sink_valid;
reg           main_basesoc_basesoc_tx_tick = 1'd0;
reg           main_basesoc_basesoc_uart_enable_re = 1'd0;
reg     [1:0] main_basesoc_basesoc_uart_enable_storage = 2'd0;
wire          main_basesoc_basesoc_uart_irq;
reg     [1:0] main_basesoc_basesoc_uart_pending_r = 2'd0;
reg           main_basesoc_basesoc_uart_pending_re = 1'd0;
reg     [1:0] main_basesoc_basesoc_uart_pending_status = 2'd0;
wire          main_basesoc_basesoc_uart_pending_we;
wire          main_basesoc_basesoc_uart_rx0;
wire          main_basesoc_basesoc_uart_rx1;
wire          main_basesoc_basesoc_uart_rx2;
reg           main_basesoc_basesoc_uart_rx_clear = 1'd0;
reg     [3:0] main_basesoc_basesoc_uart_rx_fifo_consume = 4'd0;
wire          main_basesoc_basesoc_uart_rx_fifo_do_read;
wire          main_basesoc_basesoc_uart_rx_fifo_fifo_in_first;
wire          main_basesoc_basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          main_basesoc_basesoc_uart_rx_fifo_fifo_out_first;
wire          main_basesoc_basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_basesoc_uart_rx_fifo_level1;
reg     [3:0] main_basesoc_basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] main_basesoc_basesoc_uart_rx_fifo_rdport_dat_r;
wire          main_basesoc_basesoc_uart_rx_fifo_rdport_re;
wire          main_basesoc_basesoc_uart_rx_fifo_re;
reg           main_basesoc_basesoc_uart_rx_fifo_readable = 1'd0;
reg           main_basesoc_basesoc_uart_rx_fifo_replace = 1'd0;
wire          main_basesoc_basesoc_uart_rx_fifo_sink_first;
wire          main_basesoc_basesoc_uart_rx_fifo_sink_last;
wire    [7:0] main_basesoc_basesoc_uart_rx_fifo_sink_payload_data;
wire          main_basesoc_basesoc_uart_rx_fifo_sink_ready;
wire          main_basesoc_basesoc_uart_rx_fifo_sink_valid;
wire          main_basesoc_basesoc_uart_rx_fifo_source_first;
wire          main_basesoc_basesoc_uart_rx_fifo_source_last;
wire    [7:0] main_basesoc_basesoc_uart_rx_fifo_source_payload_data;
wire          main_basesoc_basesoc_uart_rx_fifo_source_ready;
wire          main_basesoc_basesoc_uart_rx_fifo_source_valid;
wire    [9:0] main_basesoc_basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_basesoc_uart_rx_fifo_syncfifo_dout;
wire          main_basesoc_basesoc_uart_rx_fifo_syncfifo_re;
wire          main_basesoc_basesoc_uart_rx_fifo_syncfifo_readable;
wire          main_basesoc_basesoc_uart_rx_fifo_syncfifo_we;
wire          main_basesoc_basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_basesoc_uart_rx_fifo_wrport_dat_w;
wire          main_basesoc_basesoc_uart_rx_fifo_wrport_we;
reg           main_basesoc_basesoc_uart_rx_pending = 1'd0;
wire          main_basesoc_basesoc_uart_rx_status;
wire          main_basesoc_basesoc_uart_rx_trigger;
reg           main_basesoc_basesoc_uart_rx_trigger_d = 1'd0;
reg           main_basesoc_basesoc_uart_rxempty_re = 1'd0;
wire          main_basesoc_basesoc_uart_rxempty_status;
wire          main_basesoc_basesoc_uart_rxempty_we;
reg           main_basesoc_basesoc_uart_rxfull_re = 1'd0;
wire          main_basesoc_basesoc_uart_rxfull_status;
wire          main_basesoc_basesoc_uart_rxfull_we;
wire    [7:0] main_basesoc_basesoc_uart_rxtx_r;
reg           main_basesoc_basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] main_basesoc_basesoc_uart_rxtx_w;
reg           main_basesoc_basesoc_uart_rxtx_we = 1'd0;
reg           main_basesoc_basesoc_uart_status_re = 1'd0;
reg     [1:0] main_basesoc_basesoc_uart_status_status = 2'd0;
wire          main_basesoc_basesoc_uart_status_we;
wire          main_basesoc_basesoc_uart_tx0;
wire          main_basesoc_basesoc_uart_tx1;
wire          main_basesoc_basesoc_uart_tx2;
reg           main_basesoc_basesoc_uart_tx_clear = 1'd0;
reg     [3:0] main_basesoc_basesoc_uart_tx_fifo_consume = 4'd0;
wire          main_basesoc_basesoc_uart_tx_fifo_do_read;
wire          main_basesoc_basesoc_uart_tx_fifo_fifo_in_first;
wire          main_basesoc_basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          main_basesoc_basesoc_uart_tx_fifo_fifo_out_first;
wire          main_basesoc_basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_basesoc_uart_tx_fifo_level1;
reg     [3:0] main_basesoc_basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] main_basesoc_basesoc_uart_tx_fifo_rdport_dat_r;
wire          main_basesoc_basesoc_uart_tx_fifo_rdport_re;
wire          main_basesoc_basesoc_uart_tx_fifo_re;
reg           main_basesoc_basesoc_uart_tx_fifo_readable = 1'd0;
reg           main_basesoc_basesoc_uart_tx_fifo_replace = 1'd0;
reg           main_basesoc_basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           main_basesoc_basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] main_basesoc_basesoc_uart_tx_fifo_sink_payload_data;
wire          main_basesoc_basesoc_uart_tx_fifo_sink_ready;
wire          main_basesoc_basesoc_uart_tx_fifo_sink_valid;
wire          main_basesoc_basesoc_uart_tx_fifo_source_first;
wire          main_basesoc_basesoc_uart_tx_fifo_source_last;
wire    [7:0] main_basesoc_basesoc_uart_tx_fifo_source_payload_data;
wire          main_basesoc_basesoc_uart_tx_fifo_source_ready;
wire          main_basesoc_basesoc_uart_tx_fifo_source_valid;
wire    [9:0] main_basesoc_basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_basesoc_uart_tx_fifo_syncfifo_dout;
wire          main_basesoc_basesoc_uart_tx_fifo_syncfifo_re;
wire          main_basesoc_basesoc_uart_tx_fifo_syncfifo_readable;
wire          main_basesoc_basesoc_uart_tx_fifo_syncfifo_we;
wire          main_basesoc_basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_basesoc_uart_tx_fifo_wrport_dat_w;
wire          main_basesoc_basesoc_uart_tx_fifo_wrport_we;
reg           main_basesoc_basesoc_uart_tx_pending = 1'd0;
wire          main_basesoc_basesoc_uart_tx_status;
wire          main_basesoc_basesoc_uart_tx_trigger;
reg           main_basesoc_basesoc_uart_tx_trigger_d = 1'd0;
reg           main_basesoc_basesoc_uart_txempty_re = 1'd0;
wire          main_basesoc_basesoc_uart_txempty_status;
wire          main_basesoc_basesoc_uart_txempty_we;
reg           main_basesoc_basesoc_uart_txfull_re = 1'd0;
wire          main_basesoc_basesoc_uart_txfull_status;
wire          main_basesoc_basesoc_uart_txfull_we;
wire          main_basesoc_basesoc_uart_uart_sink_first;
wire          main_basesoc_basesoc_uart_uart_sink_last;
wire    [7:0] main_basesoc_basesoc_uart_uart_sink_payload_data;
wire          main_basesoc_basesoc_uart_uart_sink_ready;
wire          main_basesoc_basesoc_uart_uart_sink_valid;
wire          main_basesoc_basesoc_uart_uart_source_first;
wire          main_basesoc_basesoc_uart_uart_source_last;
wire    [7:0] main_basesoc_basesoc_uart_uart_source_payload_data;
wire          main_basesoc_basesoc_uart_uart_source_ready;
wire          main_basesoc_basesoc_uart_uart_source_valid;
reg    [31:0] main_basesoc_basesoc_vexriscv = 32'd0;
wire    [7:0] main_basesoc_data_port_adr;
wire  [255:0] main_basesoc_data_port_dat_r;
reg   [255:0] main_basesoc_data_port_dat_w = 256'd0;
reg    [31:0] main_basesoc_data_port_we = 32'd0;
wire          main_basesoc_ethcore_arp_mac_port_sink_first;
wire          main_basesoc_ethcore_arp_mac_port_sink_last;
wire    [7:0] main_basesoc_ethcore_arp_mac_port_sink_payload_data;
wire          main_basesoc_ethcore_arp_mac_port_sink_payload_error;
wire   [15:0] main_basesoc_ethcore_arp_mac_port_sink_payload_ethernet_type;
wire          main_basesoc_ethcore_arp_mac_port_sink_payload_last_be;
wire   [47:0] main_basesoc_ethcore_arp_mac_port_sink_payload_sender_mac;
wire   [47:0] main_basesoc_ethcore_arp_mac_port_sink_payload_target_mac;
reg           main_basesoc_ethcore_arp_mac_port_sink_ready = 1'd0;
wire          main_basesoc_ethcore_arp_mac_port_sink_valid;
reg           main_basesoc_ethcore_arp_mac_port_source_first = 1'd0;
reg           main_basesoc_ethcore_arp_mac_port_source_last = 1'd0;
reg     [7:0] main_basesoc_ethcore_arp_mac_port_source_payload_data = 8'd0;
reg           main_basesoc_ethcore_arp_mac_port_source_payload_error = 1'd0;
reg    [15:0] main_basesoc_ethcore_arp_mac_port_source_payload_ethernet_type = 16'd0;
reg           main_basesoc_ethcore_arp_mac_port_source_payload_last_be = 1'd0;
reg    [47:0] main_basesoc_ethcore_arp_mac_port_source_payload_sender_mac = 48'd0;
reg    [47:0] main_basesoc_ethcore_arp_mac_port_source_payload_target_mac = 48'd0;
wire          main_basesoc_ethcore_arp_mac_port_source_ready;
reg           main_basesoc_ethcore_arp_mac_port_source_valid = 1'd0;
reg     [4:0] main_basesoc_ethcore_arp_rx_depacketizer_count = 5'd0;
reg     [4:0] main_basesoc_ethcore_arp_rx_depacketizer_count_liteetharp_fsm0_next_value2 = 5'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_count_liteetharp_fsm0_next_value_ce2 = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_delayed_last_be = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_delayed_last_be_liteetharp_fsm1_next_value1 = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_delayed_last_be_liteetharp_fsm1_next_value_ce1 = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_fsm_from_idle = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_fsm0_next_value3 = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_fsm0_next_value_ce3 = 1'd0;
wire  [223:0] main_basesoc_ethcore_arp_rx_depacketizer_header;
wire          main_basesoc_ethcore_arp_rx_depacketizer_is_in_copy;
reg           main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing0 = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing1 = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing2 = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing3 = 1'd0;
wire          main_basesoc_ethcore_arp_rx_depacketizer_new_last_be;
reg           main_basesoc_ethcore_arp_rx_depacketizer_sink_d_last = 1'd0;
wire          main_basesoc_ethcore_arp_rx_depacketizer_sink_first;
wire          main_basesoc_ethcore_arp_rx_depacketizer_sink_last;
wire    [7:0] main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_data;
wire          main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_error;
wire   [15:0] main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_ethernet_type;
wire          main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_last_be;
wire   [47:0] main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_sender_mac;
wire   [47:0] main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_target_mac;
reg           main_basesoc_ethcore_arp_rx_depacketizer_sink_ready = 1'd0;
wire          main_basesoc_ethcore_arp_rx_depacketizer_sink_valid;
wire          main_basesoc_ethcore_arp_rx_depacketizer_source_description;
reg           main_basesoc_ethcore_arp_rx_depacketizer_source_last = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_source_last_a = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_source_last_b = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_source_last_s = 1'd0;
wire    [7:0] main_basesoc_ethcore_arp_rx_depacketizer_source_param_hwsize;
wire   [15:0] main_basesoc_ethcore_arp_rx_depacketizer_source_param_hwtype;
wire   [15:0] main_basesoc_ethcore_arp_rx_depacketizer_source_param_opcode;
wire   [15:0] main_basesoc_ethcore_arp_rx_depacketizer_source_param_proto;
wire    [7:0] main_basesoc_ethcore_arp_rx_depacketizer_source_param_protosize;
wire   [31:0] main_basesoc_ethcore_arp_rx_depacketizer_source_param_sender_ip;
wire   [47:0] main_basesoc_ethcore_arp_rx_depacketizer_source_param_sender_mac;
wire   [31:0] main_basesoc_ethcore_arp_rx_depacketizer_source_param_target_ip;
wire   [47:0] main_basesoc_ethcore_arp_rx_depacketizer_source_param_target_mac;
reg     [7:0] main_basesoc_ethcore_arp_rx_depacketizer_source_payload_data = 8'd0;
wire          main_basesoc_ethcore_arp_rx_depacketizer_source_payload_error;
reg           main_basesoc_ethcore_arp_rx_depacketizer_source_payload_last_be = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_source_ready = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_source_valid = 1'd0;
reg   [223:0] main_basesoc_ethcore_arp_rx_depacketizer_sr = 224'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_sr_shift = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_sr_shift_leftover = 1'd0;
reg           main_basesoc_ethcore_arp_rx_depacketizer_was_in_copy = 1'd0;
reg           main_basesoc_ethcore_arp_rx_reply = 1'd0;
reg           main_basesoc_ethcore_arp_rx_request = 1'd0;
wire          main_basesoc_ethcore_arp_rx_sink_sink_first;
wire          main_basesoc_ethcore_arp_rx_sink_sink_last;
wire    [7:0] main_basesoc_ethcore_arp_rx_sink_sink_payload_data;
wire          main_basesoc_ethcore_arp_rx_sink_sink_payload_error;
wire   [15:0] main_basesoc_ethcore_arp_rx_sink_sink_payload_ethernet_type;
wire          main_basesoc_ethcore_arp_rx_sink_sink_payload_last_be;
wire   [47:0] main_basesoc_ethcore_arp_rx_sink_sink_payload_sender_mac;
wire   [47:0] main_basesoc_ethcore_arp_rx_sink_sink_payload_target_mac;
wire          main_basesoc_ethcore_arp_rx_sink_sink_ready;
wire          main_basesoc_ethcore_arp_rx_sink_sink_valid;
reg           main_basesoc_ethcore_arp_rx_source_source_first = 1'd0;
reg           main_basesoc_ethcore_arp_rx_source_source_last = 1'd0;
wire   [31:0] main_basesoc_ethcore_arp_rx_source_source_payload_ip_address;
wire   [47:0] main_basesoc_ethcore_arp_rx_source_source_payload_mac_address;
reg           main_basesoc_ethcore_arp_rx_source_source_payload_reply = 1'd0;
reg           main_basesoc_ethcore_arp_rx_source_source_payload_request = 1'd0;
wire          main_basesoc_ethcore_arp_rx_source_source_ready;
reg           main_basesoc_ethcore_arp_rx_source_source_valid = 1'd0;
reg           main_basesoc_ethcore_arp_rx_valid = 1'd0;
reg           main_basesoc_ethcore_arp_table_cache_clear_enable = 1'd1;
reg    [25:0] main_basesoc_ethcore_arp_table_cache_count = 26'd50000000;
wire          main_basesoc_ethcore_arp_table_cache_done;
reg           main_basesoc_ethcore_arp_table_cache_enable = 1'd1;
reg           main_basesoc_ethcore_arp_table_cache_error = 1'd0;
reg           main_basesoc_ethcore_arp_table_cache_error_liteetharp_liteetharpcache_next_value2 = 1'd0;
reg           main_basesoc_ethcore_arp_table_cache_error_liteetharp_liteetharpcache_next_value_ce2 = 1'd0;
reg           main_basesoc_ethcore_arp_table_cache_mem_rd_port_adr = 1'd0;
wire   [80:0] main_basesoc_ethcore_arp_table_cache_mem_rd_port_dat_r;
wire   [31:0] main_basesoc_ethcore_arp_table_cache_mem_rd_port_ip_address;
wire   [47:0] main_basesoc_ethcore_arp_table_cache_mem_rd_port_mac_address;
wire          main_basesoc_ethcore_arp_table_cache_mem_rd_port_valid;
reg           main_basesoc_ethcore_arp_table_cache_mem_wr_port_adr = 1'd0;
wire   [80:0] main_basesoc_ethcore_arp_table_cache_mem_wr_port_dat_r;
reg    [80:0] main_basesoc_ethcore_arp_table_cache_mem_wr_port_dat_w = 81'd0;
reg    [31:0] main_basesoc_ethcore_arp_table_cache_mem_wr_port_ip_address = 32'd0;
reg    [47:0] main_basesoc_ethcore_arp_table_cache_mem_wr_port_mac_address = 48'd0;
reg           main_basesoc_ethcore_arp_table_cache_mem_wr_port_valid = 1'd0;
reg           main_basesoc_ethcore_arp_table_cache_mem_wr_port_we = 1'd0;
reg    [31:0] main_basesoc_ethcore_arp_table_cache_request_payload_ip_address = 32'd0;
reg           main_basesoc_ethcore_arp_table_cache_request_ready = 1'd0;
reg           main_basesoc_ethcore_arp_table_cache_request_valid = 1'd0;
reg           main_basesoc_ethcore_arp_table_cache_response_payload_error = 1'd0;
reg    [47:0] main_basesoc_ethcore_arp_table_cache_response_payload_mac_address = 48'd0;
reg           main_basesoc_ethcore_arp_table_cache_response_valid = 1'd0;
reg           main_basesoc_ethcore_arp_table_cache_search_count = 1'd0;
reg           main_basesoc_ethcore_arp_table_cache_search_count_liteetharp_liteetharpcache_next_value1 = 1'd0;
reg           main_basesoc_ethcore_arp_table_cache_search_count_liteetharp_liteetharpcache_next_value_ce1 = 1'd0;
reg           main_basesoc_ethcore_arp_table_cache_update_count = 1'd0;
reg           main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value0 = 1'd0;
reg           main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value_ce0 = 1'd0;
reg    [31:0] main_basesoc_ethcore_arp_table_cache_update_payload_ip_address = 32'd0;
reg    [47:0] main_basesoc_ethcore_arp_table_cache_update_payload_mac_address = 48'd0;
reg           main_basesoc_ethcore_arp_table_cache_update_ready = 1'd0;
reg           main_basesoc_ethcore_arp_table_cache_update_valid = 1'd0;
reg           main_basesoc_ethcore_arp_table_cache_wait = 1'd0;
reg     [2:0] main_basesoc_ethcore_arp_table_request_counter = 3'd0;
reg     [2:0] main_basesoc_ethcore_arp_table_request_counter_liteetharp_fsm_next_value3 = 3'd0;
reg           main_basesoc_ethcore_arp_table_request_counter_liteetharp_fsm_next_value_ce3 = 1'd0;
reg    [31:0] main_basesoc_ethcore_arp_table_request_ip_address = 32'd0;
reg    [31:0] main_basesoc_ethcore_arp_table_request_ip_address_liteetharp_fsm_next_value4 = 32'd0;
reg           main_basesoc_ethcore_arp_table_request_ip_address_liteetharp_fsm_next_value_ce4 = 1'd0;
reg           main_basesoc_ethcore_arp_table_request_pending = 1'd0;
reg           main_basesoc_ethcore_arp_table_request_pending_liteetharp_fsm_next_value0 = 1'd0;
reg           main_basesoc_ethcore_arp_table_request_pending_liteetharp_fsm_next_value_ce0 = 1'd0;
wire   [31:0] main_basesoc_ethcore_arp_table_request_request_payload_ip_address;
reg           main_basesoc_ethcore_arp_table_request_request_ready = 1'd0;
reg           main_basesoc_ethcore_arp_table_request_request_valid = 1'd0;
reg    [22:0] main_basesoc_ethcore_arp_table_request_timer_count = 23'd5000000;
wire          main_basesoc_ethcore_arp_table_request_timer_done;
wire          main_basesoc_ethcore_arp_table_request_timer_wait;
reg           main_basesoc_ethcore_arp_table_response_response_payload_failed = 1'd0;
reg           main_basesoc_ethcore_arp_table_response_response_payload_failed_liteetharp_fsm_next_value2 = 1'd0;
reg           main_basesoc_ethcore_arp_table_response_response_payload_failed_liteetharp_fsm_next_value_ce2 = 1'd0;
reg    [47:0] main_basesoc_ethcore_arp_table_response_response_payload_mac_address = 48'd0;
reg    [47:0] main_basesoc_ethcore_arp_table_response_response_payload_mac_address_liteetharp_fsm_next_value1 = 48'd0;
reg           main_basesoc_ethcore_arp_table_response_response_payload_mac_address_liteetharp_fsm_next_value_ce1 = 1'd0;
reg           main_basesoc_ethcore_arp_table_response_response_ready = 1'd0;
reg           main_basesoc_ethcore_arp_table_response_response_valid = 1'd0;
wire          main_basesoc_ethcore_arp_table_sink_first;
wire          main_basesoc_ethcore_arp_table_sink_last;
wire   [31:0] main_basesoc_ethcore_arp_table_sink_payload_ip_address;
wire   [47:0] main_basesoc_ethcore_arp_table_sink_payload_mac_address;
wire          main_basesoc_ethcore_arp_table_sink_payload_reply;
wire          main_basesoc_ethcore_arp_table_sink_payload_request;
reg           main_basesoc_ethcore_arp_table_sink_ready = 1'd0;
wire          main_basesoc_ethcore_arp_table_sink_valid;
reg           main_basesoc_ethcore_arp_table_source_first = 1'd0;
reg           main_basesoc_ethcore_arp_table_source_last = 1'd0;
reg    [31:0] main_basesoc_ethcore_arp_table_source_payload_ip_address = 32'd0;
reg    [47:0] main_basesoc_ethcore_arp_table_source_payload_mac_address = 48'd0;
reg           main_basesoc_ethcore_arp_table_source_payload_reply = 1'd0;
reg           main_basesoc_ethcore_arp_table_source_payload_request = 1'd0;
wire          main_basesoc_ethcore_arp_table_source_ready;
reg           main_basesoc_ethcore_arp_table_source_valid = 1'd0;
reg     [5:0] main_basesoc_ethcore_arp_tx_counter = 6'd0;
reg     [5:0] main_basesoc_ethcore_arp_tx_counter_liteetharp_next_value = 6'd0;
reg           main_basesoc_ethcore_arp_tx_counter_liteetharp_next_value_ce = 1'd0;
reg     [4:0] main_basesoc_ethcore_arp_tx_packetizer_count = 5'd0;
reg     [4:0] main_basesoc_ethcore_arp_tx_packetizer_count_liteetharp_fsm0_next_value0 = 5'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_count_liteetharp_fsm0_next_value_ce0 = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_delayed_last_be = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_delayed_last_be_liteetharp_fsm1_next_value0 = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_delayed_last_be_liteetharp_fsm1_next_value_ce0 = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_fsm_from_idle = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_fsm0_next_value1 = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_fsm0_next_value_ce1 = 1'd0;
reg   [223:0] main_basesoc_ethcore_arp_tx_packetizer_header = 224'd0;
wire          main_basesoc_ethcore_arp_tx_packetizer_in_data_copy;
reg           main_basesoc_ethcore_arp_tx_packetizer_is_ongoing0 = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_is_ongoing1 = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_is_ongoing2 = 1'd0;
wire          main_basesoc_ethcore_arp_tx_packetizer_new_last_be;
wire          main_basesoc_ethcore_arp_tx_packetizer_sink_last;
wire    [7:0] main_basesoc_ethcore_arp_tx_packetizer_sink_param_hwsize;
wire   [15:0] main_basesoc_ethcore_arp_tx_packetizer_sink_param_hwtype;
reg    [15:0] main_basesoc_ethcore_arp_tx_packetizer_sink_param_opcode = 16'd0;
wire   [15:0] main_basesoc_ethcore_arp_tx_packetizer_sink_param_proto;
wire    [7:0] main_basesoc_ethcore_arp_tx_packetizer_sink_param_protosize;
wire   [31:0] main_basesoc_ethcore_arp_tx_packetizer_sink_param_sender_ip;
wire   [47:0] main_basesoc_ethcore_arp_tx_packetizer_sink_param_sender_mac;
wire   [31:0] main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_ip;
reg    [47:0] main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_mac = 48'd0;
reg     [7:0] main_basesoc_ethcore_arp_tx_packetizer_sink_payload_data = 8'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_sink_payload_error = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_sink_payload_last_be = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_sink_ready = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_sink_valid = 1'd0;
wire          main_basesoc_ethcore_arp_tx_packetizer_source_description;
reg           main_basesoc_ethcore_arp_tx_packetizer_source_first = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_source_last = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_source_last_a = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_source_last_b = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_source_last_s = 1'd0;
reg     [7:0] main_basesoc_ethcore_arp_tx_packetizer_source_payload_data = 8'd0;
wire          main_basesoc_ethcore_arp_tx_packetizer_source_payload_error;
reg    [15:0] main_basesoc_ethcore_arp_tx_packetizer_source_payload_ethernet_type = 16'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_source_payload_last_be = 1'd0;
reg    [47:0] main_basesoc_ethcore_arp_tx_packetizer_source_payload_sender_mac = 48'd0;
reg    [47:0] main_basesoc_ethcore_arp_tx_packetizer_source_payload_target_mac = 48'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_source_ready = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_source_valid = 1'd0;
reg   [223:0] main_basesoc_ethcore_arp_tx_packetizer_sr = 224'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_sr_load = 1'd0;
reg           main_basesoc_ethcore_arp_tx_packetizer_sr_shift = 1'd0;
wire          main_basesoc_ethcore_arp_tx_sink_sink_first;
wire          main_basesoc_ethcore_arp_tx_sink_sink_last;
wire   [31:0] main_basesoc_ethcore_arp_tx_sink_sink_payload_ip_address;
wire   [47:0] main_basesoc_ethcore_arp_tx_sink_sink_payload_mac_address;
wire          main_basesoc_ethcore_arp_tx_sink_sink_payload_reply;
wire          main_basesoc_ethcore_arp_tx_sink_sink_payload_request;
reg           main_basesoc_ethcore_arp_tx_sink_sink_ready = 1'd0;
wire          main_basesoc_ethcore_arp_tx_sink_sink_valid;
wire          main_basesoc_ethcore_arp_tx_source_source_first;
wire          main_basesoc_ethcore_arp_tx_source_source_last;
wire    [7:0] main_basesoc_ethcore_arp_tx_source_source_payload_data;
wire          main_basesoc_ethcore_arp_tx_source_source_payload_error;
reg    [15:0] main_basesoc_ethcore_arp_tx_source_source_payload_ethernet_type = 16'd0;
wire          main_basesoc_ethcore_arp_tx_source_source_payload_last_be;
reg    [47:0] main_basesoc_ethcore_arp_tx_source_source_payload_sender_mac = 48'd0;
reg    [47:0] main_basesoc_ethcore_arp_tx_source_source_payload_target_mac = 48'd0;
wire          main_basesoc_ethcore_arp_tx_source_source_ready;
reg           main_basesoc_ethcore_arp_tx_source_source_valid = 1'd0;
wire          main_basesoc_ethcore_crossbar_sink_first;
wire          main_basesoc_ethcore_crossbar_sink_last;
wire   [15:0] main_basesoc_ethcore_crossbar_sink_param_dst_port;
wire   [31:0] main_basesoc_ethcore_crossbar_sink_param_ip_address;
wire   [15:0] main_basesoc_ethcore_crossbar_sink_param_length;
wire   [15:0] main_basesoc_ethcore_crossbar_sink_param_src_port;
wire    [7:0] main_basesoc_ethcore_crossbar_sink_payload_data;
wire          main_basesoc_ethcore_crossbar_sink_payload_error;
wire          main_basesoc_ethcore_crossbar_sink_payload_last_be;
reg           main_basesoc_ethcore_crossbar_sink_ready = 1'd0;
wire          main_basesoc_ethcore_crossbar_sink_valid;
wire          main_basesoc_ethcore_crossbar_source_first;
wire          main_basesoc_ethcore_crossbar_source_last;
wire   [15:0] main_basesoc_ethcore_crossbar_source_param_dst_port;
wire   [31:0] main_basesoc_ethcore_crossbar_source_param_ip_address;
wire   [15:0] main_basesoc_ethcore_crossbar_source_param_length;
wire   [15:0] main_basesoc_ethcore_crossbar_source_param_src_port;
wire    [7:0] main_basesoc_ethcore_crossbar_source_payload_data;
wire          main_basesoc_ethcore_crossbar_source_payload_error;
wire          main_basesoc_ethcore_crossbar_source_payload_last_be;
wire          main_basesoc_ethcore_crossbar_source_ready;
wire          main_basesoc_ethcore_crossbar_source_valid;
reg           main_basesoc_ethcore_icmp_echo_param_fifo_consume = 1'd0;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_do_read;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_first;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_last;
wire   [15:0] main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_checksum;
wire    [7:0] main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_code;
wire   [31:0] main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_ip_address;
wire   [15:0] main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_length;
wire    [7:0] main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_msgtype;
wire   [31:0] main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_quench;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_first;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_last;
wire   [15:0] main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_checksum;
wire    [7:0] main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_code;
wire   [31:0] main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_ip_address;
wire   [15:0] main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_length;
wire    [7:0] main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_msgtype;
wire   [31:0] main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_quench;
reg     [1:0] main_basesoc_ethcore_icmp_echo_param_fifo_level0 = 2'd0;
wire    [1:0] main_basesoc_ethcore_icmp_echo_param_fifo_level1;
reg           main_basesoc_ethcore_icmp_echo_param_fifo_produce = 1'd0;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_rdport_adr;
wire  [113:0] main_basesoc_ethcore_icmp_echo_param_fifo_rdport_dat_r;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_rdport_re;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_re;
reg           main_basesoc_ethcore_icmp_echo_param_fifo_readable = 1'd0;
reg           main_basesoc_ethcore_icmp_echo_param_fifo_replace = 1'd0;
reg           main_basesoc_ethcore_icmp_echo_param_fifo_sink_first = 1'd0;
reg           main_basesoc_ethcore_icmp_echo_param_fifo_sink_last = 1'd0;
wire   [15:0] main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_checksum;
wire    [7:0] main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_code;
wire   [31:0] main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_ip_address;
wire   [15:0] main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_length;
wire    [7:0] main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_msgtype;
wire   [31:0] main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_quench;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_sink_ready;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_sink_valid;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_source_first;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_source_last;
wire   [15:0] main_basesoc_ethcore_icmp_echo_param_fifo_source_param_checksum;
wire    [7:0] main_basesoc_ethcore_icmp_echo_param_fifo_source_param_code;
wire   [31:0] main_basesoc_ethcore_icmp_echo_param_fifo_source_param_ip_address;
wire   [15:0] main_basesoc_ethcore_icmp_echo_param_fifo_source_param_length;
wire    [7:0] main_basesoc_ethcore_icmp_echo_param_fifo_source_param_msgtype;
wire   [31:0] main_basesoc_ethcore_icmp_echo_param_fifo_source_param_quench;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_source_ready;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_source_valid;
wire  [113:0] main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_din;
wire  [113:0] main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_dout;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_re;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_readable;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_we;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_writable;
reg           main_basesoc_ethcore_icmp_echo_param_fifo_wrport_adr = 1'd0;
wire  [113:0] main_basesoc_ethcore_icmp_echo_param_fifo_wrport_dat_r;
wire  [113:0] main_basesoc_ethcore_icmp_echo_param_fifo_wrport_dat_w;
wire          main_basesoc_ethcore_icmp_echo_param_fifo_wrport_we;
reg     [6:0] main_basesoc_ethcore_icmp_echo_payload_fifo_consume = 7'd0;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_do_read;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_in_first;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_in_last;
wire    [7:0] main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_in_payload_data;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_in_payload_error;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_in_payload_last_be;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_out_first;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_out_last;
wire    [7:0] main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_out_payload_data;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_out_payload_error;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_out_payload_last_be;
reg     [7:0] main_basesoc_ethcore_icmp_echo_payload_fifo_level0 = 8'd0;
wire    [7:0] main_basesoc_ethcore_icmp_echo_payload_fifo_level1;
reg     [6:0] main_basesoc_ethcore_icmp_echo_payload_fifo_produce = 7'd0;
wire    [6:0] main_basesoc_ethcore_icmp_echo_payload_fifo_rdport_adr;
wire   [11:0] main_basesoc_ethcore_icmp_echo_payload_fifo_rdport_dat_r;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_rdport_re;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_re;
reg           main_basesoc_ethcore_icmp_echo_payload_fifo_readable = 1'd0;
reg           main_basesoc_ethcore_icmp_echo_payload_fifo_replace = 1'd0;
reg           main_basesoc_ethcore_icmp_echo_payload_fifo_sink_first = 1'd0;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_sink_last;
wire    [7:0] main_basesoc_ethcore_icmp_echo_payload_fifo_sink_payload_data;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_sink_payload_error;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_sink_payload_last_be;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_sink_ready;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_sink_valid;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_source_first;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_source_last;
wire    [7:0] main_basesoc_ethcore_icmp_echo_payload_fifo_source_payload_data;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_source_payload_error;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_source_payload_last_be;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_source_ready;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_source_valid;
wire   [11:0] main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_din;
wire   [11:0] main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_dout;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_re;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_readable;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_we;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_writable;
reg     [6:0] main_basesoc_ethcore_icmp_echo_payload_fifo_wrport_adr = 7'd0;
wire   [11:0] main_basesoc_ethcore_icmp_echo_payload_fifo_wrport_dat_r;
wire   [11:0] main_basesoc_ethcore_icmp_echo_payload_fifo_wrport_dat_w;
wire          main_basesoc_ethcore_icmp_echo_payload_fifo_wrport_we;
wire          main_basesoc_ethcore_icmp_echo_sink_first;
wire          main_basesoc_ethcore_icmp_echo_sink_last;
wire   [15:0] main_basesoc_ethcore_icmp_echo_sink_param_checksum;
wire    [7:0] main_basesoc_ethcore_icmp_echo_sink_param_code;
wire   [31:0] main_basesoc_ethcore_icmp_echo_sink_param_ip_address;
wire   [15:0] main_basesoc_ethcore_icmp_echo_sink_param_length;
wire    [7:0] main_basesoc_ethcore_icmp_echo_sink_param_msgtype;
wire   [31:0] main_basesoc_ethcore_icmp_echo_sink_param_quench;
wire    [7:0] main_basesoc_ethcore_icmp_echo_sink_payload_data;
wire          main_basesoc_ethcore_icmp_echo_sink_payload_error;
wire          main_basesoc_ethcore_icmp_echo_sink_payload_last_be;
reg           main_basesoc_ethcore_icmp_echo_sink_ready = 1'd0;
reg           main_basesoc_ethcore_icmp_echo_sink_sink_first = 1'd0;
reg           main_basesoc_ethcore_icmp_echo_sink_sink_last = 1'd0;
reg    [15:0] main_basesoc_ethcore_icmp_echo_sink_sink_param_checksum = 16'd0;
reg     [7:0] main_basesoc_ethcore_icmp_echo_sink_sink_param_code = 8'd0;
reg    [31:0] main_basesoc_ethcore_icmp_echo_sink_sink_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_ethcore_icmp_echo_sink_sink_param_length = 16'd0;
reg     [7:0] main_basesoc_ethcore_icmp_echo_sink_sink_param_msgtype = 8'd0;
reg    [31:0] main_basesoc_ethcore_icmp_echo_sink_sink_param_quench = 32'd0;
reg     [7:0] main_basesoc_ethcore_icmp_echo_sink_sink_payload_data = 8'd0;
reg           main_basesoc_ethcore_icmp_echo_sink_sink_payload_error = 1'd0;
reg           main_basesoc_ethcore_icmp_echo_sink_sink_payload_last_be = 1'd0;
wire          main_basesoc_ethcore_icmp_echo_sink_sink_ready;
reg           main_basesoc_ethcore_icmp_echo_sink_sink_valid = 1'd0;
wire          main_basesoc_ethcore_icmp_echo_sink_valid;
wire          main_basesoc_ethcore_icmp_echo_source_first;
wire          main_basesoc_ethcore_icmp_echo_source_last;
wire   [15:0] main_basesoc_ethcore_icmp_echo_source_param_checksum;
wire    [7:0] main_basesoc_ethcore_icmp_echo_source_param_code;
wire   [31:0] main_basesoc_ethcore_icmp_echo_source_param_ip_address;
wire   [15:0] main_basesoc_ethcore_icmp_echo_source_param_length;
reg     [7:0] main_basesoc_ethcore_icmp_echo_source_param_msgtype = 8'd0;
wire   [31:0] main_basesoc_ethcore_icmp_echo_source_param_quench;
wire    [7:0] main_basesoc_ethcore_icmp_echo_source_payload_data;
wire          main_basesoc_ethcore_icmp_echo_source_payload_error;
wire          main_basesoc_ethcore_icmp_echo_source_payload_last_be;
wire          main_basesoc_ethcore_icmp_echo_source_ready;
reg           main_basesoc_ethcore_icmp_echo_source_source_first = 1'd0;
wire          main_basesoc_ethcore_icmp_echo_source_source_last;
wire   [15:0] main_basesoc_ethcore_icmp_echo_source_source_param_checksum;
wire    [7:0] main_basesoc_ethcore_icmp_echo_source_source_param_code;
wire   [31:0] main_basesoc_ethcore_icmp_echo_source_source_param_ip_address;
wire   [15:0] main_basesoc_ethcore_icmp_echo_source_source_param_length;
wire    [7:0] main_basesoc_ethcore_icmp_echo_source_source_param_msgtype;
wire   [31:0] main_basesoc_ethcore_icmp_echo_source_source_param_quench;
wire    [7:0] main_basesoc_ethcore_icmp_echo_source_source_payload_data;
wire          main_basesoc_ethcore_icmp_echo_source_source_payload_error;
wire          main_basesoc_ethcore_icmp_echo_source_source_payload_last_be;
wire          main_basesoc_ethcore_icmp_echo_source_source_ready;
wire          main_basesoc_ethcore_icmp_echo_source_source_valid;
wire          main_basesoc_ethcore_icmp_echo_source_valid;
wire          main_basesoc_ethcore_icmp_ip_port_sink_first;
wire          main_basesoc_ethcore_icmp_ip_port_sink_last;
wire   [31:0] main_basesoc_ethcore_icmp_ip_port_sink_param_ip_address;
wire   [15:0] main_basesoc_ethcore_icmp_ip_port_sink_param_length;
wire    [7:0] main_basesoc_ethcore_icmp_ip_port_sink_param_protocol;
wire    [7:0] main_basesoc_ethcore_icmp_ip_port_sink_payload_data;
wire          main_basesoc_ethcore_icmp_ip_port_sink_payload_error;
wire          main_basesoc_ethcore_icmp_ip_port_sink_payload_last_be;
reg           main_basesoc_ethcore_icmp_ip_port_sink_ready = 1'd0;
wire          main_basesoc_ethcore_icmp_ip_port_sink_valid;
reg           main_basesoc_ethcore_icmp_ip_port_source_first = 1'd0;
reg           main_basesoc_ethcore_icmp_ip_port_source_last = 1'd0;
reg    [31:0] main_basesoc_ethcore_icmp_ip_port_source_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_ethcore_icmp_ip_port_source_param_length = 16'd0;
reg     [7:0] main_basesoc_ethcore_icmp_ip_port_source_param_protocol = 8'd0;
reg     [7:0] main_basesoc_ethcore_icmp_ip_port_source_payload_data = 8'd0;
reg           main_basesoc_ethcore_icmp_ip_port_source_payload_error = 1'd0;
reg           main_basesoc_ethcore_icmp_ip_port_source_payload_last_be = 1'd0;
wire          main_basesoc_ethcore_icmp_ip_port_source_ready;
reg           main_basesoc_ethcore_icmp_ip_port_source_valid = 1'd0;
reg     [2:0] main_basesoc_ethcore_icmp_rx_depacketizer_count = 3'd0;
reg     [2:0] main_basesoc_ethcore_icmp_rx_depacketizer_count_fsm0_next_value2 = 3'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_count_fsm0_next_value_ce2 = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_delayed_last_be = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_delayed_last_be_fsm1_next_value1 = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_delayed_last_be_fsm1_next_value_ce1 = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_fsm_from_idle = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_fsm_from_idle_fsm0_next_value3 = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_fsm_from_idle_fsm0_next_value_ce3 = 1'd0;
wire   [63:0] main_basesoc_ethcore_icmp_rx_depacketizer_header;
wire          main_basesoc_ethcore_icmp_rx_depacketizer_is_in_copy;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing0 = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing1 = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing2 = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing3 = 1'd0;
wire          main_basesoc_ethcore_icmp_rx_depacketizer_new_last_be;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_sink_d_last = 1'd0;
wire          main_basesoc_ethcore_icmp_rx_depacketizer_sink_first;
wire          main_basesoc_ethcore_icmp_rx_depacketizer_sink_last;
wire   [31:0] main_basesoc_ethcore_icmp_rx_depacketizer_sink_param_ip_address;
wire   [15:0] main_basesoc_ethcore_icmp_rx_depacketizer_sink_param_length;
wire    [7:0] main_basesoc_ethcore_icmp_rx_depacketizer_sink_param_protocol;
wire    [7:0] main_basesoc_ethcore_icmp_rx_depacketizer_sink_payload_data;
wire          main_basesoc_ethcore_icmp_rx_depacketizer_sink_payload_error;
wire          main_basesoc_ethcore_icmp_rx_depacketizer_sink_payload_last_be;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_sink_ready = 1'd0;
wire          main_basesoc_ethcore_icmp_rx_depacketizer_sink_valid;
wire          main_basesoc_ethcore_icmp_rx_depacketizer_source_description;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_source_last = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_source_last_a = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_source_last_b = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_source_last_s = 1'd0;
wire   [15:0] main_basesoc_ethcore_icmp_rx_depacketizer_source_param_checksum;
wire    [7:0] main_basesoc_ethcore_icmp_rx_depacketizer_source_param_code;
wire    [7:0] main_basesoc_ethcore_icmp_rx_depacketizer_source_param_msgtype;
wire   [31:0] main_basesoc_ethcore_icmp_rx_depacketizer_source_param_quench;
reg     [7:0] main_basesoc_ethcore_icmp_rx_depacketizer_source_payload_data = 8'd0;
wire          main_basesoc_ethcore_icmp_rx_depacketizer_source_payload_error;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_source_payload_last_be = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_source_ready = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_source_valid = 1'd0;
reg    [63:0] main_basesoc_ethcore_icmp_rx_depacketizer_sr = 64'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_sr_shift = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_sr_shift_leftover = 1'd0;
reg           main_basesoc_ethcore_icmp_rx_depacketizer_was_in_copy = 1'd0;
wire          main_basesoc_ethcore_icmp_rx_sink_sink_first;
wire          main_basesoc_ethcore_icmp_rx_sink_sink_last;
wire   [31:0] main_basesoc_ethcore_icmp_rx_sink_sink_param_ip_address;
wire   [15:0] main_basesoc_ethcore_icmp_rx_sink_sink_param_length;
wire    [7:0] main_basesoc_ethcore_icmp_rx_sink_sink_param_protocol;
wire    [7:0] main_basesoc_ethcore_icmp_rx_sink_sink_payload_data;
wire          main_basesoc_ethcore_icmp_rx_sink_sink_payload_error;
wire          main_basesoc_ethcore_icmp_rx_sink_sink_payload_last_be;
wire          main_basesoc_ethcore_icmp_rx_sink_sink_ready;
wire          main_basesoc_ethcore_icmp_rx_sink_sink_valid;
reg           main_basesoc_ethcore_icmp_rx_source_source_first = 1'd0;
wire          main_basesoc_ethcore_icmp_rx_source_source_last;
wire   [15:0] main_basesoc_ethcore_icmp_rx_source_source_param_checksum;
wire    [7:0] main_basesoc_ethcore_icmp_rx_source_source_param_code;
wire   [31:0] main_basesoc_ethcore_icmp_rx_source_source_param_ip_address;
wire   [15:0] main_basesoc_ethcore_icmp_rx_source_source_param_length;
wire    [7:0] main_basesoc_ethcore_icmp_rx_source_source_param_msgtype;
wire   [31:0] main_basesoc_ethcore_icmp_rx_source_source_param_quench;
wire    [7:0] main_basesoc_ethcore_icmp_rx_source_source_payload_data;
wire          main_basesoc_ethcore_icmp_rx_source_source_payload_error;
wire          main_basesoc_ethcore_icmp_rx_source_source_payload_last_be;
wire          main_basesoc_ethcore_icmp_rx_source_source_ready;
reg           main_basesoc_ethcore_icmp_rx_source_source_valid = 1'd0;
reg     [2:0] main_basesoc_ethcore_icmp_tx_packetizer_count = 3'd0;
reg     [2:0] main_basesoc_ethcore_icmp_tx_packetizer_count_fsm0_next_value0 = 3'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_count_fsm0_next_value_ce0 = 1'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_delayed_last_be = 1'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_delayed_last_be_fsm1_next_value0 = 1'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_delayed_last_be_fsm1_next_value_ce0 = 1'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_fsm_from_idle = 1'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_fsm_from_idle_fsm0_next_value1 = 1'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_fsm_from_idle_fsm0_next_value_ce1 = 1'd0;
reg    [63:0] main_basesoc_ethcore_icmp_tx_packetizer_header = 64'd0;
wire          main_basesoc_ethcore_icmp_tx_packetizer_in_data_copy;
reg           main_basesoc_ethcore_icmp_tx_packetizer_is_ongoing0 = 1'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_is_ongoing1 = 1'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_is_ongoing2 = 1'd0;
wire          main_basesoc_ethcore_icmp_tx_packetizer_new_last_be;
wire          main_basesoc_ethcore_icmp_tx_packetizer_sink_last;
wire   [15:0] main_basesoc_ethcore_icmp_tx_packetizer_sink_param_checksum;
wire    [7:0] main_basesoc_ethcore_icmp_tx_packetizer_sink_param_code;
wire    [7:0] main_basesoc_ethcore_icmp_tx_packetizer_sink_param_msgtype;
wire   [31:0] main_basesoc_ethcore_icmp_tx_packetizer_sink_param_quench;
wire    [7:0] main_basesoc_ethcore_icmp_tx_packetizer_sink_payload_data;
reg           main_basesoc_ethcore_icmp_tx_packetizer_sink_payload_error = 1'd0;
wire          main_basesoc_ethcore_icmp_tx_packetizer_sink_payload_last_be;
reg           main_basesoc_ethcore_icmp_tx_packetizer_sink_ready = 1'd0;
wire          main_basesoc_ethcore_icmp_tx_packetizer_sink_valid;
wire          main_basesoc_ethcore_icmp_tx_packetizer_source_description;
reg           main_basesoc_ethcore_icmp_tx_packetizer_source_first = 1'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_source_last = 1'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_source_last_a = 1'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_source_last_b = 1'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_source_last_s = 1'd0;
reg    [31:0] main_basesoc_ethcore_icmp_tx_packetizer_source_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_ethcore_icmp_tx_packetizer_source_param_length = 16'd0;
reg     [7:0] main_basesoc_ethcore_icmp_tx_packetizer_source_param_protocol = 8'd0;
reg     [7:0] main_basesoc_ethcore_icmp_tx_packetizer_source_payload_data = 8'd0;
wire          main_basesoc_ethcore_icmp_tx_packetizer_source_payload_error;
reg           main_basesoc_ethcore_icmp_tx_packetizer_source_payload_last_be = 1'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_source_ready = 1'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_source_valid = 1'd0;
reg    [63:0] main_basesoc_ethcore_icmp_tx_packetizer_sr = 64'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_sr_load = 1'd0;
reg           main_basesoc_ethcore_icmp_tx_packetizer_sr_shift = 1'd0;
wire          main_basesoc_ethcore_icmp_tx_sink_sink_first;
wire          main_basesoc_ethcore_icmp_tx_sink_sink_last;
wire   [15:0] main_basesoc_ethcore_icmp_tx_sink_sink_param_checksum;
wire    [7:0] main_basesoc_ethcore_icmp_tx_sink_sink_param_code;
wire   [31:0] main_basesoc_ethcore_icmp_tx_sink_sink_param_ip_address;
wire   [15:0] main_basesoc_ethcore_icmp_tx_sink_sink_param_length;
wire    [7:0] main_basesoc_ethcore_icmp_tx_sink_sink_param_msgtype;
wire   [31:0] main_basesoc_ethcore_icmp_tx_sink_sink_param_quench;
wire    [7:0] main_basesoc_ethcore_icmp_tx_sink_sink_payload_data;
wire          main_basesoc_ethcore_icmp_tx_sink_sink_payload_error;
wire          main_basesoc_ethcore_icmp_tx_sink_sink_payload_last_be;
wire          main_basesoc_ethcore_icmp_tx_sink_sink_ready;
wire          main_basesoc_ethcore_icmp_tx_sink_sink_valid;
wire          main_basesoc_ethcore_icmp_tx_source_source_first;
wire          main_basesoc_ethcore_icmp_tx_source_source_last;
reg    [31:0] main_basesoc_ethcore_icmp_tx_source_source_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_ethcore_icmp_tx_source_source_param_length = 16'd0;
reg     [7:0] main_basesoc_ethcore_icmp_tx_source_source_param_protocol = 8'd0;
wire    [7:0] main_basesoc_ethcore_icmp_tx_source_source_payload_data;
wire          main_basesoc_ethcore_icmp_tx_source_source_payload_error;
wire          main_basesoc_ethcore_icmp_tx_source_source_payload_last_be;
wire          main_basesoc_ethcore_icmp_tx_source_source_ready;
reg           main_basesoc_ethcore_icmp_tx_source_source_valid = 1'd0;
wire          main_basesoc_ethcore_ip_crossbar_sink_first;
wire          main_basesoc_ethcore_ip_crossbar_sink_last;
wire   [31:0] main_basesoc_ethcore_ip_crossbar_sink_param_ip_address;
wire   [15:0] main_basesoc_ethcore_ip_crossbar_sink_param_length;
wire    [7:0] main_basesoc_ethcore_ip_crossbar_sink_param_protocol;
wire    [7:0] main_basesoc_ethcore_ip_crossbar_sink_payload_data;
wire          main_basesoc_ethcore_ip_crossbar_sink_payload_error;
wire          main_basesoc_ethcore_ip_crossbar_sink_payload_last_be;
reg           main_basesoc_ethcore_ip_crossbar_sink_ready = 1'd0;
wire          main_basesoc_ethcore_ip_crossbar_sink_valid;
reg           main_basesoc_ethcore_ip_crossbar_source_first = 1'd0;
reg           main_basesoc_ethcore_ip_crossbar_source_last = 1'd0;
reg    [31:0] main_basesoc_ethcore_ip_crossbar_source_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_ethcore_ip_crossbar_source_param_length = 16'd0;
reg     [7:0] main_basesoc_ethcore_ip_crossbar_source_param_protocol = 8'd0;
reg     [7:0] main_basesoc_ethcore_ip_crossbar_source_payload_data = 8'd0;
reg           main_basesoc_ethcore_ip_crossbar_source_payload_error = 1'd0;
reg           main_basesoc_ethcore_ip_crossbar_source_payload_last_be = 1'd0;
wire          main_basesoc_ethcore_ip_crossbar_source_ready;
reg           main_basesoc_ethcore_ip_crossbar_source_valid = 1'd0;
wire          main_basesoc_ethcore_ip_mac_port_sink_first;
wire          main_basesoc_ethcore_ip_mac_port_sink_last;
wire    [7:0] main_basesoc_ethcore_ip_mac_port_sink_payload_data;
wire          main_basesoc_ethcore_ip_mac_port_sink_payload_error;
wire   [15:0] main_basesoc_ethcore_ip_mac_port_sink_payload_ethernet_type;
wire          main_basesoc_ethcore_ip_mac_port_sink_payload_last_be;
wire   [47:0] main_basesoc_ethcore_ip_mac_port_sink_payload_sender_mac;
wire   [47:0] main_basesoc_ethcore_ip_mac_port_sink_payload_target_mac;
reg           main_basesoc_ethcore_ip_mac_port_sink_ready = 1'd0;
wire          main_basesoc_ethcore_ip_mac_port_sink_valid;
reg           main_basesoc_ethcore_ip_mac_port_source_first = 1'd0;
reg           main_basesoc_ethcore_ip_mac_port_source_last = 1'd0;
reg     [7:0] main_basesoc_ethcore_ip_mac_port_source_payload_data = 8'd0;
reg           main_basesoc_ethcore_ip_mac_port_source_payload_error = 1'd0;
reg    [15:0] main_basesoc_ethcore_ip_mac_port_source_payload_ethernet_type = 16'd0;
reg           main_basesoc_ethcore_ip_mac_port_source_payload_last_be = 1'd0;
reg    [47:0] main_basesoc_ethcore_ip_mac_port_source_payload_sender_mac = 48'd0;
reg    [47:0] main_basesoc_ethcore_ip_mac_port_source_payload_target_mac = 48'd0;
wire          main_basesoc_ethcore_ip_mac_port_source_ready;
reg           main_basesoc_ethcore_ip_mac_port_source_valid = 1'd0;
wire          main_basesoc_ethcore_ip_port_sink_first;
wire          main_basesoc_ethcore_ip_port_sink_last;
wire   [31:0] main_basesoc_ethcore_ip_port_sink_param_ip_address;
wire   [15:0] main_basesoc_ethcore_ip_port_sink_param_length;
wire    [7:0] main_basesoc_ethcore_ip_port_sink_param_protocol;
wire    [7:0] main_basesoc_ethcore_ip_port_sink_payload_data;
wire          main_basesoc_ethcore_ip_port_sink_payload_error;
wire          main_basesoc_ethcore_ip_port_sink_payload_last_be;
reg           main_basesoc_ethcore_ip_port_sink_ready = 1'd0;
wire          main_basesoc_ethcore_ip_port_sink_valid;
reg           main_basesoc_ethcore_ip_port_source_first = 1'd0;
reg           main_basesoc_ethcore_ip_port_source_last = 1'd0;
reg    [31:0] main_basesoc_ethcore_ip_port_source_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_ethcore_ip_port_source_param_length = 16'd0;
reg     [7:0] main_basesoc_ethcore_ip_port_source_param_protocol = 8'd0;
reg     [7:0] main_basesoc_ethcore_ip_port_source_payload_data = 8'd0;
reg           main_basesoc_ethcore_ip_port_source_payload_error = 1'd0;
reg           main_basesoc_ethcore_ip_port_source_payload_last_be = 1'd0;
wire          main_basesoc_ethcore_ip_port_source_ready;
reg           main_basesoc_ethcore_ip_port_source_valid = 1'd0;
wire          main_basesoc_ethcore_ip_rx_ce;
reg     [4:0] main_basesoc_ethcore_ip_rx_depacketizer_count = 5'd0;
reg     [4:0] main_basesoc_ethcore_ip_rx_depacketizer_count_liteethip_fsm0_next_value2 = 5'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_count_liteethip_fsm0_next_value_ce2 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_delayed_last_be = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_delayed_last_be_liteethip_fsm1_next_value1 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_delayed_last_be_liteethip_fsm1_next_value_ce1 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_fsm_from_idle = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_fsm0_next_value3 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_fsm0_next_value_ce3 = 1'd0;
wire  [159:0] main_basesoc_ethcore_ip_rx_depacketizer_header;
wire          main_basesoc_ethcore_ip_rx_depacketizer_is_in_copy;
reg           main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing0 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing1 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing2 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing3 = 1'd0;
wire          main_basesoc_ethcore_ip_rx_depacketizer_new_last_be;
reg           main_basesoc_ethcore_ip_rx_depacketizer_sink_d_last = 1'd0;
wire          main_basesoc_ethcore_ip_rx_depacketizer_sink_first;
wire          main_basesoc_ethcore_ip_rx_depacketizer_sink_last;
wire    [7:0] main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_data;
wire          main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_error;
wire   [15:0] main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_ethernet_type;
wire          main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_last_be;
wire   [47:0] main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_sender_mac;
wire   [47:0] main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_target_mac;
reg           main_basesoc_ethcore_ip_rx_depacketizer_sink_ready = 1'd0;
wire          main_basesoc_ethcore_ip_rx_depacketizer_sink_valid;
wire          main_basesoc_ethcore_ip_rx_depacketizer_source_description;
reg           main_basesoc_ethcore_ip_rx_depacketizer_source_last = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_source_last_a = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_source_last_b = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_source_last_s = 1'd0;
wire   [15:0] main_basesoc_ethcore_ip_rx_depacketizer_source_param_checksum;
wire   [15:0] main_basesoc_ethcore_ip_rx_depacketizer_source_param_identification;
wire    [3:0] main_basesoc_ethcore_ip_rx_depacketizer_source_param_ihl;
wire    [7:0] main_basesoc_ethcore_ip_rx_depacketizer_source_param_protocol;
wire   [31:0] main_basesoc_ethcore_ip_rx_depacketizer_source_param_sender_ip;
wire   [31:0] main_basesoc_ethcore_ip_rx_depacketizer_source_param_target_ip;
wire   [15:0] main_basesoc_ethcore_ip_rx_depacketizer_source_param_total_length;
wire    [7:0] main_basesoc_ethcore_ip_rx_depacketizer_source_param_ttl;
wire    [3:0] main_basesoc_ethcore_ip_rx_depacketizer_source_param_version;
reg     [7:0] main_basesoc_ethcore_ip_rx_depacketizer_source_payload_data = 8'd0;
wire          main_basesoc_ethcore_ip_rx_depacketizer_source_payload_error;
reg           main_basesoc_ethcore_ip_rx_depacketizer_source_payload_last_be = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_source_ready = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_source_valid = 1'd0;
reg   [159:0] main_basesoc_ethcore_ip_rx_depacketizer_sr = 160'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_sr_shift = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_sr_shift_leftover = 1'd0;
reg           main_basesoc_ethcore_ip_rx_depacketizer_was_in_copy = 1'd0;
reg           main_basesoc_ethcore_ip_rx_liteethipv4checksum0 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_liteethipv4checksum1 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_liteethipv4checksum2 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_liteethipv4checksum3 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_liteethipv4checksum4 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_liteethipv4checksum5 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_liteethipv4checksum6 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_liteethipv4checksum7 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_liteethipv4checksum8 = 1'd0;
reg           main_basesoc_ethcore_ip_rx_liteethipv4checksum9 = 1'd0;
reg     [3:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_counter = 4'd0;
wire          main_basesoc_ethcore_ip_rx_liteethipv4checksum_counter_ce;
wire          main_basesoc_ethcore_ip_rx_liteethipv4checksum_done;
wire  [159:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_header;
reg    [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_r = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next0 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next1 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next2 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next3 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next4 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next5 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next6 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next7 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next8 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next9 = 17'd0;
wire   [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next0;
wire   [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next1;
wire   [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next2;
wire   [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next3;
wire   [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next4;
wire   [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next5;
wire   [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next6;
wire   [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next7;
wire   [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next8;
wire   [16:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next9;
wire   [15:0] main_basesoc_ethcore_ip_rx_liteethipv4checksum_value;
wire          main_basesoc_ethcore_ip_rx_reset;
wire          main_basesoc_ethcore_ip_rx_sink_sink_first;
wire          main_basesoc_ethcore_ip_rx_sink_sink_last;
wire    [7:0] main_basesoc_ethcore_ip_rx_sink_sink_payload_data;
wire          main_basesoc_ethcore_ip_rx_sink_sink_payload_error;
wire   [15:0] main_basesoc_ethcore_ip_rx_sink_sink_payload_ethernet_type;
wire          main_basesoc_ethcore_ip_rx_sink_sink_payload_last_be;
wire   [47:0] main_basesoc_ethcore_ip_rx_sink_sink_payload_sender_mac;
wire   [47:0] main_basesoc_ethcore_ip_rx_sink_sink_payload_target_mac;
wire          main_basesoc_ethcore_ip_rx_sink_sink_ready;
wire          main_basesoc_ethcore_ip_rx_sink_sink_valid;
reg           main_basesoc_ethcore_ip_rx_source_source_first = 1'd0;
wire          main_basesoc_ethcore_ip_rx_source_source_last;
wire   [31:0] main_basesoc_ethcore_ip_rx_source_source_param_ip_address;
wire   [15:0] main_basesoc_ethcore_ip_rx_source_source_param_length;
wire    [7:0] main_basesoc_ethcore_ip_rx_source_source_param_protocol;
wire    [7:0] main_basesoc_ethcore_ip_rx_source_source_payload_data;
wire          main_basesoc_ethcore_ip_rx_source_source_payload_error;
wire          main_basesoc_ethcore_ip_rx_source_source_payload_last_be;
wire          main_basesoc_ethcore_ip_rx_source_source_ready;
reg           main_basesoc_ethcore_ip_rx_source_source_valid = 1'd0;
wire          main_basesoc_ethcore_ip_tx_ce;
reg           main_basesoc_ethcore_ip_tx_liteethipv4checksum0 = 1'd0;
reg           main_basesoc_ethcore_ip_tx_liteethipv4checksum1 = 1'd0;
reg           main_basesoc_ethcore_ip_tx_liteethipv4checksum2 = 1'd0;
reg           main_basesoc_ethcore_ip_tx_liteethipv4checksum3 = 1'd0;
reg           main_basesoc_ethcore_ip_tx_liteethipv4checksum4 = 1'd0;
reg           main_basesoc_ethcore_ip_tx_liteethipv4checksum5 = 1'd0;
reg           main_basesoc_ethcore_ip_tx_liteethipv4checksum6 = 1'd0;
reg           main_basesoc_ethcore_ip_tx_liteethipv4checksum7 = 1'd0;
reg           main_basesoc_ethcore_ip_tx_liteethipv4checksum8 = 1'd0;
reg     [3:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_counter = 4'd0;
wire          main_basesoc_ethcore_ip_tx_liteethipv4checksum_counter_ce;
wire          main_basesoc_ethcore_ip_tx_liteethipv4checksum_done;
wire  [159:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_header;
reg    [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_r = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next0 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next1 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next2 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next3 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next4 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next5 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next6 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next7 = 17'd0;
reg    [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next8 = 17'd0;
wire   [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next0;
wire   [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next1;
wire   [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next2;
wire   [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next3;
wire   [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next4;
wire   [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next5;
wire   [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next6;
wire   [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next7;
wire   [16:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next8;
wire   [15:0] main_basesoc_ethcore_ip_tx_liteethipv4checksum_value;
reg     [4:0] main_basesoc_ethcore_ip_tx_packetizer_count = 5'd0;
reg     [4:0] main_basesoc_ethcore_ip_tx_packetizer_count_liteethip_fsm0_next_value0 = 5'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_count_liteethip_fsm0_next_value_ce0 = 1'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_delayed_last_be = 1'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_delayed_last_be_liteethip_fsm1_next_value0 = 1'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_delayed_last_be_liteethip_fsm1_next_value_ce0 = 1'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_fsm_from_idle = 1'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_fsm0_next_value1 = 1'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_fsm0_next_value_ce1 = 1'd0;
reg   [159:0] main_basesoc_ethcore_ip_tx_packetizer_header = 160'd0;
wire          main_basesoc_ethcore_ip_tx_packetizer_in_data_copy;
reg           main_basesoc_ethcore_ip_tx_packetizer_is_ongoing0 = 1'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_is_ongoing1 = 1'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_is_ongoing2 = 1'd0;
wire          main_basesoc_ethcore_ip_tx_packetizer_new_last_be;
wire          main_basesoc_ethcore_ip_tx_packetizer_sink_last;
wire   [15:0] main_basesoc_ethcore_ip_tx_packetizer_sink_param_checksum;
wire   [15:0] main_basesoc_ethcore_ip_tx_packetizer_sink_param_identification;
wire    [3:0] main_basesoc_ethcore_ip_tx_packetizer_sink_param_ihl;
wire    [7:0] main_basesoc_ethcore_ip_tx_packetizer_sink_param_protocol;
wire   [31:0] main_basesoc_ethcore_ip_tx_packetizer_sink_param_sender_ip;
wire   [31:0] main_basesoc_ethcore_ip_tx_packetizer_sink_param_target_ip;
wire   [15:0] main_basesoc_ethcore_ip_tx_packetizer_sink_param_total_length;
wire    [7:0] main_basesoc_ethcore_ip_tx_packetizer_sink_param_ttl;
wire    [3:0] main_basesoc_ethcore_ip_tx_packetizer_sink_param_version;
wire    [7:0] main_basesoc_ethcore_ip_tx_packetizer_sink_payload_data;
reg           main_basesoc_ethcore_ip_tx_packetizer_sink_payload_error = 1'd0;
wire          main_basesoc_ethcore_ip_tx_packetizer_sink_payload_last_be;
reg           main_basesoc_ethcore_ip_tx_packetizer_sink_ready = 1'd0;
wire          main_basesoc_ethcore_ip_tx_packetizer_sink_valid;
wire          main_basesoc_ethcore_ip_tx_packetizer_source_description;
reg           main_basesoc_ethcore_ip_tx_packetizer_source_first = 1'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_source_last = 1'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_source_last_a = 1'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_source_last_b = 1'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_source_last_s = 1'd0;
reg     [7:0] main_basesoc_ethcore_ip_tx_packetizer_source_payload_data = 8'd0;
wire          main_basesoc_ethcore_ip_tx_packetizer_source_payload_error;
reg    [15:0] main_basesoc_ethcore_ip_tx_packetizer_source_payload_ethernet_type = 16'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_source_payload_last_be = 1'd0;
reg    [47:0] main_basesoc_ethcore_ip_tx_packetizer_source_payload_sender_mac = 48'd0;
reg    [47:0] main_basesoc_ethcore_ip_tx_packetizer_source_payload_target_mac = 48'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_source_ready = 1'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_source_valid = 1'd0;
reg   [159:0] main_basesoc_ethcore_ip_tx_packetizer_sr = 160'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_sr_load = 1'd0;
reg           main_basesoc_ethcore_ip_tx_packetizer_sr_shift = 1'd0;
wire          main_basesoc_ethcore_ip_tx_pipe_valid_sink_first;
wire          main_basesoc_ethcore_ip_tx_pipe_valid_sink_last;
wire   [31:0] main_basesoc_ethcore_ip_tx_pipe_valid_sink_param_ip_address;
wire   [15:0] main_basesoc_ethcore_ip_tx_pipe_valid_sink_param_length;
wire    [7:0] main_basesoc_ethcore_ip_tx_pipe_valid_sink_param_protocol;
wire    [7:0] main_basesoc_ethcore_ip_tx_pipe_valid_sink_payload_data;
wire          main_basesoc_ethcore_ip_tx_pipe_valid_sink_payload_error;
wire          main_basesoc_ethcore_ip_tx_pipe_valid_sink_payload_last_be;
wire          main_basesoc_ethcore_ip_tx_pipe_valid_sink_ready;
wire          main_basesoc_ethcore_ip_tx_pipe_valid_sink_valid;
reg           main_basesoc_ethcore_ip_tx_pipe_valid_source_first = 1'd0;
reg           main_basesoc_ethcore_ip_tx_pipe_valid_source_last = 1'd0;
reg    [31:0] main_basesoc_ethcore_ip_tx_pipe_valid_source_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_ethcore_ip_tx_pipe_valid_source_param_length = 16'd0;
reg     [7:0] main_basesoc_ethcore_ip_tx_pipe_valid_source_param_protocol = 8'd0;
reg     [7:0] main_basesoc_ethcore_ip_tx_pipe_valid_source_payload_data = 8'd0;
reg           main_basesoc_ethcore_ip_tx_pipe_valid_source_payload_error = 1'd0;
reg           main_basesoc_ethcore_ip_tx_pipe_valid_source_payload_last_be = 1'd0;
wire          main_basesoc_ethcore_ip_tx_pipe_valid_source_ready;
reg           main_basesoc_ethcore_ip_tx_pipe_valid_source_valid = 1'd0;
wire          main_basesoc_ethcore_ip_tx_reset;
wire          main_basesoc_ethcore_ip_tx_sink_sink_first0;
wire          main_basesoc_ethcore_ip_tx_sink_sink_first1;
wire          main_basesoc_ethcore_ip_tx_sink_sink_last0;
wire          main_basesoc_ethcore_ip_tx_sink_sink_last1;
wire   [31:0] main_basesoc_ethcore_ip_tx_sink_sink_param_ip_address0;
wire   [31:0] main_basesoc_ethcore_ip_tx_sink_sink_param_ip_address1;
wire   [15:0] main_basesoc_ethcore_ip_tx_sink_sink_param_length0;
wire   [15:0] main_basesoc_ethcore_ip_tx_sink_sink_param_length1;
wire    [7:0] main_basesoc_ethcore_ip_tx_sink_sink_param_protocol0;
wire    [7:0] main_basesoc_ethcore_ip_tx_sink_sink_param_protocol1;
wire    [7:0] main_basesoc_ethcore_ip_tx_sink_sink_payload_data0;
wire    [7:0] main_basesoc_ethcore_ip_tx_sink_sink_payload_data1;
wire          main_basesoc_ethcore_ip_tx_sink_sink_payload_error0;
wire          main_basesoc_ethcore_ip_tx_sink_sink_payload_error1;
wire          main_basesoc_ethcore_ip_tx_sink_sink_payload_last_be0;
wire          main_basesoc_ethcore_ip_tx_sink_sink_payload_last_be1;
wire          main_basesoc_ethcore_ip_tx_sink_sink_ready0;
wire          main_basesoc_ethcore_ip_tx_sink_sink_ready1;
wire          main_basesoc_ethcore_ip_tx_sink_sink_valid0;
wire          main_basesoc_ethcore_ip_tx_sink_sink_valid1;
reg           main_basesoc_ethcore_ip_tx_source_source_first0 = 1'd0;
wire          main_basesoc_ethcore_ip_tx_source_source_first1;
reg           main_basesoc_ethcore_ip_tx_source_source_last0 = 1'd0;
wire          main_basesoc_ethcore_ip_tx_source_source_last1;
wire   [31:0] main_basesoc_ethcore_ip_tx_source_source_param_ip_address;
wire   [15:0] main_basesoc_ethcore_ip_tx_source_source_param_length;
wire    [7:0] main_basesoc_ethcore_ip_tx_source_source_param_protocol;
reg     [7:0] main_basesoc_ethcore_ip_tx_source_source_payload_data0 = 8'd0;
wire    [7:0] main_basesoc_ethcore_ip_tx_source_source_payload_data1;
reg           main_basesoc_ethcore_ip_tx_source_source_payload_error0 = 1'd0;
wire          main_basesoc_ethcore_ip_tx_source_source_payload_error1;
reg    [15:0] main_basesoc_ethcore_ip_tx_source_source_payload_ethernet_type = 16'd0;
reg           main_basesoc_ethcore_ip_tx_source_source_payload_last_be0 = 1'd0;
wire          main_basesoc_ethcore_ip_tx_source_source_payload_last_be1;
reg    [47:0] main_basesoc_ethcore_ip_tx_source_source_payload_sender_mac = 48'd0;
reg    [47:0] main_basesoc_ethcore_ip_tx_source_source_payload_target_mac = 48'd0;
wire          main_basesoc_ethcore_ip_tx_source_source_ready0;
wire          main_basesoc_ethcore_ip_tx_source_source_ready1;
reg           main_basesoc_ethcore_ip_tx_source_source_valid0 = 1'd0;
wire          main_basesoc_ethcore_ip_tx_source_source_valid1;
reg    [47:0] main_basesoc_ethcore_ip_tx_target_mac = 48'd0;
reg    [47:0] main_basesoc_ethcore_ip_tx_target_mac_liteethip_next_value = 48'd0;
reg           main_basesoc_ethcore_ip_tx_target_mac_liteethip_next_value_ce = 1'd0;
reg           main_basesoc_ethcore_ip_tx_target_unreachable = 1'd0;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_first;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_payload_last_be;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_ready;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_valid;
reg           main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_first = 1'd0;
reg           main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_last = 1'd0;
reg     [7:0] main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_payload_data = 8'd0;
reg           main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_payload_error = 1'd0;
reg           main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_payload_last_be = 1'd0;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_ready;
reg           main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_valid = 1'd0;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_first;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_payload_last_be;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_ready;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_valid;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_first;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_last;
wire    [7:0] main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_payload_data;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_payload_error;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_payload_last_be;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_ready;
wire          main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_valid;
wire   [11:0] main_basesoc_ethcore_mac_core_cdc_asyncfifo_din;
wire   [11:0] main_basesoc_ethcore_mac_core_cdc_asyncfifo_dout;
wire          main_basesoc_ethcore_mac_core_cdc_asyncfifo_re;
wire          main_basesoc_ethcore_mac_core_cdc_asyncfifo_readable;
wire          main_basesoc_ethcore_mac_core_cdc_asyncfifo_we;
wire          main_basesoc_ethcore_mac_core_cdc_asyncfifo_writable;
wire    [5:0] main_basesoc_ethcore_mac_core_cdc_consume_wdomain;
reg    [11:0] main_basesoc_ethcore_mac_core_cdc_dout = 12'd0;
wire          main_basesoc_ethcore_mac_core_cdc_fifo_in_first;
wire          main_basesoc_ethcore_mac_core_cdc_fifo_in_last;
wire    [7:0] main_basesoc_ethcore_mac_core_cdc_fifo_in_payload_data;
wire          main_basesoc_ethcore_mac_core_cdc_fifo_in_payload_error;
wire          main_basesoc_ethcore_mac_core_cdc_fifo_in_payload_last_be;
wire          main_basesoc_ethcore_mac_core_cdc_fifo_out_first;
wire          main_basesoc_ethcore_mac_core_cdc_fifo_out_last;
wire    [7:0] main_basesoc_ethcore_mac_core_cdc_fifo_out_payload_data;
wire          main_basesoc_ethcore_mac_core_cdc_fifo_out_payload_error;
wire          main_basesoc_ethcore_mac_core_cdc_fifo_out_payload_last_be;
wire          main_basesoc_ethcore_mac_core_cdc_graycounter0_ce;
(* dont_touch = "true" *)
reg     [5:0] main_basesoc_ethcore_mac_core_cdc_graycounter0_q = 6'd0;
reg     [5:0] main_basesoc_ethcore_mac_core_cdc_graycounter0_q_binary = 6'd0;
wire    [5:0] main_basesoc_ethcore_mac_core_cdc_graycounter0_q_next;
reg     [5:0] main_basesoc_ethcore_mac_core_cdc_graycounter0_q_next_binary = 6'd0;
wire          main_basesoc_ethcore_mac_core_cdc_graycounter1_ce;
(* dont_touch = "true" *)
reg     [5:0] main_basesoc_ethcore_mac_core_cdc_graycounter1_q = 6'd0;
reg     [5:0] main_basesoc_ethcore_mac_core_cdc_graycounter1_q_binary = 6'd0;
wire    [5:0] main_basesoc_ethcore_mac_core_cdc_graycounter1_q_next;
reg     [5:0] main_basesoc_ethcore_mac_core_cdc_graycounter1_q_next_binary = 6'd0;
wire    [5:0] main_basesoc_ethcore_mac_core_cdc_produce_rdomain;
wire    [4:0] main_basesoc_ethcore_mac_core_cdc_rdport_adr;
wire   [11:0] main_basesoc_ethcore_mac_core_cdc_rdport_dat_r;
wire          main_basesoc_ethcore_mac_core_cdc_re;
reg           main_basesoc_ethcore_mac_core_cdc_readable = 1'd0;
wire          main_basesoc_ethcore_mac_core_cdc_sink_first;
wire          main_basesoc_ethcore_mac_core_cdc_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_cdc_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_cdc_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_cdc_sink_payload_last_be;
wire          main_basesoc_ethcore_mac_core_cdc_sink_ready;
wire          main_basesoc_ethcore_mac_core_cdc_sink_valid;
wire          main_basesoc_ethcore_mac_core_cdc_source_first;
wire          main_basesoc_ethcore_mac_core_cdc_source_last;
wire    [7:0] main_basesoc_ethcore_mac_core_cdc_source_payload_data;
wire          main_basesoc_ethcore_mac_core_cdc_source_payload_error;
wire          main_basesoc_ethcore_mac_core_cdc_source_payload_last_be;
wire          main_basesoc_ethcore_mac_core_cdc_source_ready;
wire          main_basesoc_ethcore_mac_core_cdc_source_valid;
wire    [4:0] main_basesoc_ethcore_mac_core_cdc_wrport_adr;
wire   [11:0] main_basesoc_ethcore_mac_core_cdc_wrport_dat_r;
wire   [11:0] main_basesoc_ethcore_mac_core_cdc_wrport_dat_w;
wire          main_basesoc_ethcore_mac_core_cdc_wrport_we;
reg    [31:0] main_basesoc_ethcore_mac_core_crc_errors_status = 32'd0;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_be;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_ce = 1'd0;
reg    [31:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next = 32'd0;
wire   [31:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev;
wire    [7:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data0;
wire    [7:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error0 = 1'd0;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error1 = 1'd0;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error1_liteethmac_next_value1 = 1'd0;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error1_liteethmac_next_value_ce1 = 1'd0;
reg    [31:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_reg = 32'd4294967295;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_reset = 1'd0;
reg    [31:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_value = 32'd0;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_error = 1'd0;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_full;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_in;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_out;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_reset = 1'd0;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_last_be = 1'd0;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_last_be_liteethmac_next_value0 = 1'd0;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_last_be_liteethmac_next_value_ce0 = 1'd0;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_first;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_last_be;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_ready = 1'd0;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_valid;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_first;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_last = 1'd0;
wire    [7:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_payload_data;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_payload_error = 1'd0;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_payload_last_be = 1'd0;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_ready;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_valid = 1'd0;
reg     [2:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_consume = 3'd0;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_do_read;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_in_first;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_in_last;
wire    [7:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_data;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_error;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_last_be;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_out_first;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_out_last;
wire    [7:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_data;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_error;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_last_be;
reg     [2:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_level = 3'd0;
reg     [2:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_produce = 3'd0;
wire    [2:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_rdport_adr;
wire   [11:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_rdport_dat_r;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_replace = 1'd0;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_first;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_payload_last_be;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_ready;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_valid = 1'd0;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_first;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_last;
wire    [7:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_payload_data;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_payload_error;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_payload_last_be;
reg           main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_ready = 1'd0;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_valid;
wire   [11:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_din;
wire   [11:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_dout;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_re;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_readable;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_we;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_writable;
reg     [2:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_wrport_adr = 3'd0;
wire   [11:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_wrport_dat_r;
wire   [11:0] main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_wrport_dat_w;
wire          main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_wrport_we;
reg    [31:0] main_basesoc_ethcore_mac_core_preamble_errors_status = 32'd0;
wire          main_basesoc_ethcore_mac_core_pulsesynchronizer0_i;
wire          main_basesoc_ethcore_mac_core_pulsesynchronizer0_o;
reg           main_basesoc_ethcore_mac_core_pulsesynchronizer0_toggle_i = 1'd0;
wire          main_basesoc_ethcore_mac_core_pulsesynchronizer0_toggle_o;
reg           main_basesoc_ethcore_mac_core_pulsesynchronizer0_toggle_o_r = 1'd0;
wire          main_basesoc_ethcore_mac_core_pulsesynchronizer1_i;
wire          main_basesoc_ethcore_mac_core_pulsesynchronizer1_o;
reg           main_basesoc_ethcore_mac_core_pulsesynchronizer1_toggle_i = 1'd0;
wire          main_basesoc_ethcore_mac_core_pulsesynchronizer1_toggle_o;
reg           main_basesoc_ethcore_mac_core_pulsesynchronizer1_toggle_o_r = 1'd0;
wire          main_basesoc_ethcore_mac_core_rx_padding_sink_first;
wire          main_basesoc_ethcore_mac_core_rx_padding_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_rx_padding_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_rx_padding_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_rx_padding_sink_payload_last_be;
wire          main_basesoc_ethcore_mac_core_rx_padding_sink_ready;
wire          main_basesoc_ethcore_mac_core_rx_padding_sink_valid;
wire          main_basesoc_ethcore_mac_core_rx_padding_source_first;
wire          main_basesoc_ethcore_mac_core_rx_padding_source_last;
wire    [7:0] main_basesoc_ethcore_mac_core_rx_padding_source_payload_data;
wire          main_basesoc_ethcore_mac_core_rx_padding_source_payload_error;
wire          main_basesoc_ethcore_mac_core_rx_padding_source_payload_last_be;
wire          main_basesoc_ethcore_mac_core_rx_padding_source_ready;
wire          main_basesoc_ethcore_mac_core_rx_padding_source_valid;
reg           main_basesoc_ethcore_mac_core_rx_preamble_error = 1'd0;
reg    [63:0] main_basesoc_ethcore_mac_core_rx_preamble_preamble = 64'd15372286728091293013;
wire          main_basesoc_ethcore_mac_core_rx_preamble_sink_first;
wire          main_basesoc_ethcore_mac_core_rx_preamble_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_rx_preamble_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_rx_preamble_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_rx_preamble_sink_payload_last_be;
reg           main_basesoc_ethcore_mac_core_rx_preamble_sink_ready = 1'd0;
wire          main_basesoc_ethcore_mac_core_rx_preamble_sink_valid;
reg           main_basesoc_ethcore_mac_core_rx_preamble_source_first = 1'd0;
reg           main_basesoc_ethcore_mac_core_rx_preamble_source_last = 1'd0;
wire    [7:0] main_basesoc_ethcore_mac_core_rx_preamble_source_payload_data;
reg           main_basesoc_ethcore_mac_core_rx_preamble_source_payload_error = 1'd0;
wire          main_basesoc_ethcore_mac_core_rx_preamble_source_payload_last_be;
wire          main_basesoc_ethcore_mac_core_rx_preamble_source_ready;
reg           main_basesoc_ethcore_mac_core_rx_preamble_source_valid = 1'd0;
wire          main_basesoc_ethcore_mac_core_sink_first;
wire          main_basesoc_ethcore_mac_core_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_sink_payload_last_be;
wire          main_basesoc_ethcore_mac_core_sink_ready;
wire          main_basesoc_ethcore_mac_core_sink_sink_first;
wire          main_basesoc_ethcore_mac_core_sink_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_sink_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_sink_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_sink_sink_payload_last_be;
wire          main_basesoc_ethcore_mac_core_sink_sink_ready;
wire          main_basesoc_ethcore_mac_core_sink_sink_valid;
wire          main_basesoc_ethcore_mac_core_sink_valid;
wire          main_basesoc_ethcore_mac_core_source_first;
wire          main_basesoc_ethcore_mac_core_source_last;
wire    [7:0] main_basesoc_ethcore_mac_core_source_payload_data;
wire          main_basesoc_ethcore_mac_core_source_payload_error;
wire          main_basesoc_ethcore_mac_core_source_payload_last_be;
wire          main_basesoc_ethcore_mac_core_source_ready;
wire          main_basesoc_ethcore_mac_core_source_source_first;
wire          main_basesoc_ethcore_mac_core_source_source_last;
wire    [7:0] main_basesoc_ethcore_mac_core_source_source_payload_data;
wire          main_basesoc_ethcore_mac_core_source_source_payload_error;
wire          main_basesoc_ethcore_mac_core_source_source_payload_last_be;
wire          main_basesoc_ethcore_mac_core_source_source_ready;
wire          main_basesoc_ethcore_mac_core_source_source_valid;
wire          main_basesoc_ethcore_mac_core_source_valid;
wire   [11:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_din;
wire   [11:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_dout;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_re;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_readable;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_we;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_writable;
wire    [5:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_consume_wdomain;
reg    [11:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_dout = 12'd0;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_in_first;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_in_last;
wire    [7:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_in_payload_data;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_in_payload_error;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_in_payload_last_be;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_out_first;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_out_last;
wire    [7:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_out_payload_data;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_out_payload_error;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_out_payload_last_be;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_ce;
(* dont_touch = "true" *)
reg     [5:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q = 6'd0;
reg     [5:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_binary = 6'd0;
wire    [5:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_next;
reg     [5:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_next_binary = 6'd0;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_ce;
(* dont_touch = "true" *)
reg     [5:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q = 6'd0;
reg     [5:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_binary = 6'd0;
wire    [5:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_next;
reg     [5:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_next_binary = 6'd0;
wire    [5:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_produce_rdomain;
wire    [4:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_rdport_adr;
wire   [11:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_rdport_dat_r;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_re;
reg           main_basesoc_ethcore_mac_core_tx_cdc_cdc_readable = 1'd0;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_first;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_payload_last_be;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_ready;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_valid;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_first;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_last;
wire    [7:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_payload_data;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_payload_error;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_payload_last_be;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_ready;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_valid;
wire    [4:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_wrport_adr;
wire   [11:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_wrport_dat_r;
wire   [11:0] main_basesoc_ethcore_mac_core_tx_cdc_cdc_wrport_dat_w;
wire          main_basesoc_ethcore_mac_core_tx_cdc_cdc_wrport_we;
wire          main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_first;
wire          main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_payload_last_be;
wire          main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_ready;
wire          main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_valid;
wire          main_basesoc_ethcore_mac_core_tx_cdc_source_source_first;
wire          main_basesoc_ethcore_mac_core_tx_cdc_source_source_last;
wire    [7:0] main_basesoc_ethcore_mac_core_tx_cdc_source_source_payload_data;
wire          main_basesoc_ethcore_mac_core_tx_cdc_source_source_payload_error;
wire          main_basesoc_ethcore_mac_core_tx_cdc_source_source_payload_last_be;
wire          main_basesoc_ethcore_mac_core_tx_cdc_source_source_ready;
wire          main_basesoc_ethcore_mac_core_tx_cdc_source_source_valid;
wire          main_basesoc_ethcore_mac_core_tx_crc_be;
reg           main_basesoc_ethcore_mac_core_tx_crc_ce = 1'd0;
reg     [1:0] main_basesoc_ethcore_mac_core_tx_crc_cnt = 2'd3;
wire          main_basesoc_ethcore_mac_core_tx_crc_cnt_done;
reg    [31:0] main_basesoc_ethcore_mac_core_tx_crc_crc_next = 32'd0;
wire   [31:0] main_basesoc_ethcore_mac_core_tx_crc_crc_prev;
wire    [7:0] main_basesoc_ethcore_mac_core_tx_crc_data0;
wire    [7:0] main_basesoc_ethcore_mac_core_tx_crc_data1;
reg    [31:0] main_basesoc_ethcore_mac_core_tx_crc_description = 32'd0;
reg    [31:0] main_basesoc_ethcore_mac_core_tx_crc_description_liteethmac_clockdomainsrenamer1_next_value0 = 32'd0;
reg           main_basesoc_ethcore_mac_core_tx_crc_description_liteethmac_clockdomainsrenamer1_next_value_ce0 = 1'd0;
reg           main_basesoc_ethcore_mac_core_tx_crc_error = 1'd0;
reg           main_basesoc_ethcore_mac_core_tx_crc_fsm0 = 1'd0;
reg           main_basesoc_ethcore_mac_core_tx_crc_fsm0_liteethmac_clockdomainsrenamer1_next_value1 = 1'd0;
reg           main_basesoc_ethcore_mac_core_tx_crc_fsm0_liteethmac_clockdomainsrenamer1_next_value_ce1 = 1'd0;
reg           main_basesoc_ethcore_mac_core_tx_crc_is_ongoing0 = 1'd0;
reg           main_basesoc_ethcore_mac_core_tx_crc_is_ongoing1 = 1'd0;
wire          main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_first;
wire          main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_payload_last_be;
wire          main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_ready;
wire          main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_valid;
reg           main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_first = 1'd0;
reg           main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_last = 1'd0;
reg     [7:0] main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_payload_data = 8'd0;
reg           main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_payload_error = 1'd0;
reg           main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_payload_last_be = 1'd0;
wire          main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_ready;
reg           main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_valid = 1'd0;
reg    [31:0] main_basesoc_ethcore_mac_core_tx_crc_reg = 32'd4294967295;
reg           main_basesoc_ethcore_mac_core_tx_crc_reset = 1'd0;
wire          main_basesoc_ethcore_mac_core_tx_crc_sink_first;
wire          main_basesoc_ethcore_mac_core_tx_crc_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_tx_crc_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_tx_crc_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_tx_crc_sink_payload_last_be;
reg           main_basesoc_ethcore_mac_core_tx_crc_sink_ready = 1'd0;
wire          main_basesoc_ethcore_mac_core_tx_crc_sink_sink_first;
wire          main_basesoc_ethcore_mac_core_tx_crc_sink_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_tx_crc_sink_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_tx_crc_sink_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_tx_crc_sink_sink_payload_last_be;
wire          main_basesoc_ethcore_mac_core_tx_crc_sink_sink_ready;
wire          main_basesoc_ethcore_mac_core_tx_crc_sink_sink_valid;
wire          main_basesoc_ethcore_mac_core_tx_crc_sink_valid;
reg           main_basesoc_ethcore_mac_core_tx_crc_source_first = 1'd0;
reg           main_basesoc_ethcore_mac_core_tx_crc_source_last = 1'd0;
reg     [7:0] main_basesoc_ethcore_mac_core_tx_crc_source_payload_data = 8'd0;
reg           main_basesoc_ethcore_mac_core_tx_crc_source_payload_error = 1'd0;
reg           main_basesoc_ethcore_mac_core_tx_crc_source_payload_last_be = 1'd0;
wire          main_basesoc_ethcore_mac_core_tx_crc_source_ready;
wire          main_basesoc_ethcore_mac_core_tx_crc_source_source_first;
wire          main_basesoc_ethcore_mac_core_tx_crc_source_source_last;
wire    [7:0] main_basesoc_ethcore_mac_core_tx_crc_source_source_payload_data;
wire          main_basesoc_ethcore_mac_core_tx_crc_source_source_payload_error;
wire          main_basesoc_ethcore_mac_core_tx_crc_source_source_payload_last_be;
wire          main_basesoc_ethcore_mac_core_tx_crc_source_source_ready;
wire          main_basesoc_ethcore_mac_core_tx_crc_source_source_valid;
reg           main_basesoc_ethcore_mac_core_tx_crc_source_valid = 1'd0;
reg    [31:0] main_basesoc_ethcore_mac_core_tx_crc_value = 32'd0;
reg     [3:0] main_basesoc_ethcore_mac_core_tx_gap_counter = 4'd0;
reg     [3:0] main_basesoc_ethcore_mac_core_tx_gap_counter_liteethmac_clockdomainsrenamer3_next_value = 4'd0;
reg           main_basesoc_ethcore_mac_core_tx_gap_counter_liteethmac_clockdomainsrenamer3_next_value_ce = 1'd0;
wire          main_basesoc_ethcore_mac_core_tx_gap_sink_first;
wire          main_basesoc_ethcore_mac_core_tx_gap_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_tx_gap_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_tx_gap_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_tx_gap_sink_payload_last_be;
reg           main_basesoc_ethcore_mac_core_tx_gap_sink_ready = 1'd0;
wire          main_basesoc_ethcore_mac_core_tx_gap_sink_valid;
reg           main_basesoc_ethcore_mac_core_tx_gap_source_first = 1'd0;
reg           main_basesoc_ethcore_mac_core_tx_gap_source_last = 1'd0;
reg     [7:0] main_basesoc_ethcore_mac_core_tx_gap_source_payload_data = 8'd0;
reg           main_basesoc_ethcore_mac_core_tx_gap_source_payload_error = 1'd0;
reg           main_basesoc_ethcore_mac_core_tx_gap_source_payload_last_be = 1'd0;
wire          main_basesoc_ethcore_mac_core_tx_gap_source_ready;
reg           main_basesoc_ethcore_mac_core_tx_gap_source_valid = 1'd0;
reg    [15:0] main_basesoc_ethcore_mac_core_tx_padding_counter = 16'd0;
wire          main_basesoc_ethcore_mac_core_tx_padding_counter_done;
reg    [15:0] main_basesoc_ethcore_mac_core_tx_padding_counter_liteethmac_clockdomainsrenamer0_next_value = 16'd0;
reg           main_basesoc_ethcore_mac_core_tx_padding_counter_liteethmac_clockdomainsrenamer0_next_value_ce = 1'd0;
wire          main_basesoc_ethcore_mac_core_tx_padding_sink_first;
wire          main_basesoc_ethcore_mac_core_tx_padding_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_tx_padding_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_tx_padding_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_tx_padding_sink_payload_last_be;
reg           main_basesoc_ethcore_mac_core_tx_padding_sink_ready = 1'd0;
wire          main_basesoc_ethcore_mac_core_tx_padding_sink_valid;
reg           main_basesoc_ethcore_mac_core_tx_padding_source_first = 1'd0;
reg           main_basesoc_ethcore_mac_core_tx_padding_source_last = 1'd0;
reg     [7:0] main_basesoc_ethcore_mac_core_tx_padding_source_payload_data = 8'd0;
reg           main_basesoc_ethcore_mac_core_tx_padding_source_payload_error = 1'd0;
reg           main_basesoc_ethcore_mac_core_tx_padding_source_payload_last_be = 1'd0;
wire          main_basesoc_ethcore_mac_core_tx_padding_source_ready;
reg           main_basesoc_ethcore_mac_core_tx_padding_source_valid = 1'd0;
reg     [2:0] main_basesoc_ethcore_mac_core_tx_preamble_count = 3'd0;
reg     [2:0] main_basesoc_ethcore_mac_core_tx_preamble_count_liteethmac_clockdomainsrenamer2_next_value = 3'd0;
reg           main_basesoc_ethcore_mac_core_tx_preamble_count_liteethmac_clockdomainsrenamer2_next_value_ce = 1'd0;
reg    [63:0] main_basesoc_ethcore_mac_core_tx_preamble_preamble = 64'd15372286728091293013;
wire          main_basesoc_ethcore_mac_core_tx_preamble_sink_first;
wire          main_basesoc_ethcore_mac_core_tx_preamble_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_core_tx_preamble_sink_payload_data;
wire          main_basesoc_ethcore_mac_core_tx_preamble_sink_payload_error;
wire          main_basesoc_ethcore_mac_core_tx_preamble_sink_payload_last_be;
reg           main_basesoc_ethcore_mac_core_tx_preamble_sink_ready = 1'd0;
wire          main_basesoc_ethcore_mac_core_tx_preamble_sink_valid;
reg           main_basesoc_ethcore_mac_core_tx_preamble_source_first = 1'd0;
reg           main_basesoc_ethcore_mac_core_tx_preamble_source_last = 1'd0;
reg     [7:0] main_basesoc_ethcore_mac_core_tx_preamble_source_payload_data = 8'd0;
reg           main_basesoc_ethcore_mac_core_tx_preamble_source_payload_error = 1'd0;
wire          main_basesoc_ethcore_mac_core_tx_preamble_source_payload_last_be;
wire          main_basesoc_ethcore_mac_core_tx_preamble_source_ready;
reg           main_basesoc_ethcore_mac_core_tx_preamble_source_valid = 1'd0;
wire          main_basesoc_ethcore_mac_crossbar_sink_first;
wire          main_basesoc_ethcore_mac_crossbar_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_crossbar_sink_payload_data;
wire          main_basesoc_ethcore_mac_crossbar_sink_payload_error;
wire   [15:0] main_basesoc_ethcore_mac_crossbar_sink_payload_ethernet_type;
wire          main_basesoc_ethcore_mac_crossbar_sink_payload_last_be;
wire   [47:0] main_basesoc_ethcore_mac_crossbar_sink_payload_sender_mac;
wire   [47:0] main_basesoc_ethcore_mac_crossbar_sink_payload_target_mac;
reg           main_basesoc_ethcore_mac_crossbar_sink_ready = 1'd0;
wire          main_basesoc_ethcore_mac_crossbar_sink_valid;
reg           main_basesoc_ethcore_mac_crossbar_source_first = 1'd0;
reg           main_basesoc_ethcore_mac_crossbar_source_last = 1'd0;
reg     [7:0] main_basesoc_ethcore_mac_crossbar_source_payload_data = 8'd0;
reg           main_basesoc_ethcore_mac_crossbar_source_payload_error = 1'd0;
reg    [15:0] main_basesoc_ethcore_mac_crossbar_source_payload_ethernet_type = 16'd0;
reg           main_basesoc_ethcore_mac_crossbar_source_payload_last_be = 1'd0;
reg    [47:0] main_basesoc_ethcore_mac_crossbar_source_payload_sender_mac = 48'd0;
reg    [47:0] main_basesoc_ethcore_mac_crossbar_source_payload_target_mac = 48'd0;
wire          main_basesoc_ethcore_mac_crossbar_source_ready;
reg           main_basesoc_ethcore_mac_crossbar_source_valid = 1'd0;
reg     [3:0] main_basesoc_ethcore_mac_depacketizer_count = 4'd0;
reg     [3:0] main_basesoc_ethcore_mac_depacketizer_count_liteethmac_fsm0_next_value2 = 4'd0;
reg           main_basesoc_ethcore_mac_depacketizer_count_liteethmac_fsm0_next_value_ce2 = 1'd0;
reg           main_basesoc_ethcore_mac_depacketizer_delayed_last_be = 1'd0;
reg           main_basesoc_ethcore_mac_depacketizer_delayed_last_be_liteethmac_fsm1_next_value1 = 1'd0;
reg           main_basesoc_ethcore_mac_depacketizer_delayed_last_be_liteethmac_fsm1_next_value_ce1 = 1'd0;
reg           main_basesoc_ethcore_mac_depacketizer_fsm_from_idle = 1'd0;
reg           main_basesoc_ethcore_mac_depacketizer_fsm_from_idle_liteethmac_fsm0_next_value3 = 1'd0;
reg           main_basesoc_ethcore_mac_depacketizer_fsm_from_idle_liteethmac_fsm0_next_value_ce3 = 1'd0;
wire  [111:0] main_basesoc_ethcore_mac_depacketizer_header;
wire          main_basesoc_ethcore_mac_depacketizer_is_in_copy;
reg           main_basesoc_ethcore_mac_depacketizer_is_ongoing0 = 1'd0;
reg           main_basesoc_ethcore_mac_depacketizer_is_ongoing1 = 1'd0;
reg           main_basesoc_ethcore_mac_depacketizer_is_ongoing2 = 1'd0;
reg           main_basesoc_ethcore_mac_depacketizer_is_ongoing3 = 1'd0;
wire          main_basesoc_ethcore_mac_depacketizer_new_last_be;
reg           main_basesoc_ethcore_mac_depacketizer_sink_d_last = 1'd0;
wire          main_basesoc_ethcore_mac_depacketizer_sink_first;
wire          main_basesoc_ethcore_mac_depacketizer_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_depacketizer_sink_payload_data;
wire          main_basesoc_ethcore_mac_depacketizer_sink_payload_error;
wire          main_basesoc_ethcore_mac_depacketizer_sink_payload_last_be;
reg           main_basesoc_ethcore_mac_depacketizer_sink_ready = 1'd0;
wire          main_basesoc_ethcore_mac_depacketizer_sink_valid;
wire          main_basesoc_ethcore_mac_depacketizer_source_description;
reg           main_basesoc_ethcore_mac_depacketizer_source_first = 1'd0;
reg           main_basesoc_ethcore_mac_depacketizer_source_last = 1'd0;
reg           main_basesoc_ethcore_mac_depacketizer_source_last_a = 1'd0;
reg           main_basesoc_ethcore_mac_depacketizer_source_last_b = 1'd0;
reg           main_basesoc_ethcore_mac_depacketizer_source_last_s = 1'd0;
reg     [7:0] main_basesoc_ethcore_mac_depacketizer_source_payload_data = 8'd0;
wire          main_basesoc_ethcore_mac_depacketizer_source_payload_error;
wire   [15:0] main_basesoc_ethcore_mac_depacketizer_source_payload_ethernet_type;
reg           main_basesoc_ethcore_mac_depacketizer_source_payload_last_be = 1'd0;
wire   [47:0] main_basesoc_ethcore_mac_depacketizer_source_payload_sender_mac;
wire   [47:0] main_basesoc_ethcore_mac_depacketizer_source_payload_target_mac;
wire          main_basesoc_ethcore_mac_depacketizer_source_ready;
reg           main_basesoc_ethcore_mac_depacketizer_source_valid = 1'd0;
reg   [111:0] main_basesoc_ethcore_mac_depacketizer_sr = 112'd0;
reg           main_basesoc_ethcore_mac_depacketizer_sr_shift = 1'd0;
reg           main_basesoc_ethcore_mac_depacketizer_sr_shift_leftover = 1'd0;
reg           main_basesoc_ethcore_mac_depacketizer_was_in_copy = 1'd0;
reg     [3:0] main_basesoc_ethcore_mac_packetizer_count = 4'd0;
reg     [3:0] main_basesoc_ethcore_mac_packetizer_count_liteethmac_fsm0_next_value0 = 4'd0;
reg           main_basesoc_ethcore_mac_packetizer_count_liteethmac_fsm0_next_value_ce0 = 1'd0;
reg           main_basesoc_ethcore_mac_packetizer_delayed_last_be = 1'd0;
reg           main_basesoc_ethcore_mac_packetizer_delayed_last_be_liteethmac_fsm1_next_value0 = 1'd0;
reg           main_basesoc_ethcore_mac_packetizer_delayed_last_be_liteethmac_fsm1_next_value_ce0 = 1'd0;
reg           main_basesoc_ethcore_mac_packetizer_fsm_from_idle = 1'd0;
reg           main_basesoc_ethcore_mac_packetizer_fsm_from_idle_liteethmac_fsm0_next_value1 = 1'd0;
reg           main_basesoc_ethcore_mac_packetizer_fsm_from_idle_liteethmac_fsm0_next_value_ce1 = 1'd0;
reg   [111:0] main_basesoc_ethcore_mac_packetizer_header = 112'd0;
wire          main_basesoc_ethcore_mac_packetizer_in_data_copy;
reg           main_basesoc_ethcore_mac_packetizer_is_ongoing0 = 1'd0;
reg           main_basesoc_ethcore_mac_packetizer_is_ongoing1 = 1'd0;
reg           main_basesoc_ethcore_mac_packetizer_is_ongoing2 = 1'd0;
wire          main_basesoc_ethcore_mac_packetizer_new_last_be;
wire          main_basesoc_ethcore_mac_packetizer_sink_first;
wire          main_basesoc_ethcore_mac_packetizer_sink_last;
wire    [7:0] main_basesoc_ethcore_mac_packetizer_sink_payload_data;
wire          main_basesoc_ethcore_mac_packetizer_sink_payload_error;
wire   [15:0] main_basesoc_ethcore_mac_packetizer_sink_payload_ethernet_type;
wire          main_basesoc_ethcore_mac_packetizer_sink_payload_last_be;
wire   [47:0] main_basesoc_ethcore_mac_packetizer_sink_payload_sender_mac;
wire   [47:0] main_basesoc_ethcore_mac_packetizer_sink_payload_target_mac;
reg           main_basesoc_ethcore_mac_packetizer_sink_ready = 1'd0;
wire          main_basesoc_ethcore_mac_packetizer_sink_valid;
wire          main_basesoc_ethcore_mac_packetizer_source_description;
reg           main_basesoc_ethcore_mac_packetizer_source_first = 1'd0;
reg           main_basesoc_ethcore_mac_packetizer_source_last = 1'd0;
reg           main_basesoc_ethcore_mac_packetizer_source_last_a = 1'd0;
reg           main_basesoc_ethcore_mac_packetizer_source_last_b = 1'd0;
reg           main_basesoc_ethcore_mac_packetizer_source_last_s = 1'd0;
reg     [7:0] main_basesoc_ethcore_mac_packetizer_source_payload_data = 8'd0;
wire          main_basesoc_ethcore_mac_packetizer_source_payload_error;
reg           main_basesoc_ethcore_mac_packetizer_source_payload_last_be = 1'd0;
wire          main_basesoc_ethcore_mac_packetizer_source_ready;
reg           main_basesoc_ethcore_mac_packetizer_source_valid = 1'd0;
reg   [111:0] main_basesoc_ethcore_mac_packetizer_sr = 112'd0;
reg           main_basesoc_ethcore_mac_packetizer_sr_load = 1'd0;
reg           main_basesoc_ethcore_mac_packetizer_sr_shift = 1'd0;
reg    [15:0] main_basesoc_ethcore_rx_count = 16'd0;
reg    [15:0] main_basesoc_ethcore_rx_count_liteethudp_next_value = 16'd0;
reg           main_basesoc_ethcore_rx_count_liteethudp_next_value_ce = 1'd0;
reg     [2:0] main_basesoc_ethcore_rx_depacketizer_count = 3'd0;
reg     [2:0] main_basesoc_ethcore_rx_depacketizer_count_liteethudp_fsm0_next_value2 = 3'd0;
reg           main_basesoc_ethcore_rx_depacketizer_count_liteethudp_fsm0_next_value_ce2 = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_delayed_last_be = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_delayed_last_be_liteethudp_fsm1_next_value1 = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_delayed_last_be_liteethudp_fsm1_next_value_ce1 = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_fsm_from_idle = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_fsm_from_idle_liteethudp_fsm0_next_value3 = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_fsm_from_idle_liteethudp_fsm0_next_value_ce3 = 1'd0;
wire   [63:0] main_basesoc_ethcore_rx_depacketizer_header;
wire          main_basesoc_ethcore_rx_depacketizer_is_in_copy;
reg           main_basesoc_ethcore_rx_depacketizer_is_ongoing0 = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_is_ongoing1 = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_is_ongoing2 = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_is_ongoing3 = 1'd0;
wire          main_basesoc_ethcore_rx_depacketizer_new_last_be;
reg           main_basesoc_ethcore_rx_depacketizer_sink_d_last = 1'd0;
wire          main_basesoc_ethcore_rx_depacketizer_sink_first;
wire          main_basesoc_ethcore_rx_depacketizer_sink_last;
wire   [31:0] main_basesoc_ethcore_rx_depacketizer_sink_param_ip_address;
wire   [15:0] main_basesoc_ethcore_rx_depacketizer_sink_param_length;
wire    [7:0] main_basesoc_ethcore_rx_depacketizer_sink_param_protocol;
wire    [7:0] main_basesoc_ethcore_rx_depacketizer_sink_payload_data;
wire          main_basesoc_ethcore_rx_depacketizer_sink_payload_error;
wire          main_basesoc_ethcore_rx_depacketizer_sink_payload_last_be;
reg           main_basesoc_ethcore_rx_depacketizer_sink_ready = 1'd0;
wire          main_basesoc_ethcore_rx_depacketizer_sink_valid;
wire          main_basesoc_ethcore_rx_depacketizer_source_description;
reg           main_basesoc_ethcore_rx_depacketizer_source_last = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_source_last_a = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_source_last_b = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_source_last_s = 1'd0;
wire   [15:0] main_basesoc_ethcore_rx_depacketizer_source_param_checksum;
wire   [15:0] main_basesoc_ethcore_rx_depacketizer_source_param_dst_port;
wire   [15:0] main_basesoc_ethcore_rx_depacketizer_source_param_length;
wire   [15:0] main_basesoc_ethcore_rx_depacketizer_source_param_src_port;
reg     [7:0] main_basesoc_ethcore_rx_depacketizer_source_payload_data = 8'd0;
wire          main_basesoc_ethcore_rx_depacketizer_source_payload_error;
reg           main_basesoc_ethcore_rx_depacketizer_source_payload_last_be = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_source_ready = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_source_valid = 1'd0;
reg    [63:0] main_basesoc_ethcore_rx_depacketizer_sr = 64'd0;
reg           main_basesoc_ethcore_rx_depacketizer_sr_shift = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_sr_shift_leftover = 1'd0;
reg           main_basesoc_ethcore_rx_depacketizer_was_in_copy = 1'd0;
wire          main_basesoc_ethcore_rx_sink_sink_first;
wire          main_basesoc_ethcore_rx_sink_sink_last;
wire   [31:0] main_basesoc_ethcore_rx_sink_sink_param_ip_address;
wire   [15:0] main_basesoc_ethcore_rx_sink_sink_param_length;
wire    [7:0] main_basesoc_ethcore_rx_sink_sink_param_protocol;
wire    [7:0] main_basesoc_ethcore_rx_sink_sink_payload_data;
wire          main_basesoc_ethcore_rx_sink_sink_payload_error;
wire          main_basesoc_ethcore_rx_sink_sink_payload_last_be;
wire          main_basesoc_ethcore_rx_sink_sink_ready;
wire          main_basesoc_ethcore_rx_sink_sink_valid;
reg           main_basesoc_ethcore_rx_source_source_first = 1'd0;
reg           main_basesoc_ethcore_rx_source_source_last = 1'd0;
wire   [15:0] main_basesoc_ethcore_rx_source_source_param_dst_port;
wire   [31:0] main_basesoc_ethcore_rx_source_source_param_ip_address;
wire   [15:0] main_basesoc_ethcore_rx_source_source_param_length;
wire   [15:0] main_basesoc_ethcore_rx_source_source_param_src_port;
wire    [7:0] main_basesoc_ethcore_rx_source_source_payload_data;
wire          main_basesoc_ethcore_rx_source_source_payload_error;
reg           main_basesoc_ethcore_rx_source_source_payload_last_be = 1'd0;
wire          main_basesoc_ethcore_rx_source_source_ready;
reg           main_basesoc_ethcore_rx_source_source_valid = 1'd0;
reg     [2:0] main_basesoc_ethcore_tx_packetizer_count = 3'd0;
reg     [2:0] main_basesoc_ethcore_tx_packetizer_count_liteethudp_fsm0_next_value0 = 3'd0;
reg           main_basesoc_ethcore_tx_packetizer_count_liteethudp_fsm0_next_value_ce0 = 1'd0;
reg           main_basesoc_ethcore_tx_packetizer_delayed_last_be = 1'd0;
reg           main_basesoc_ethcore_tx_packetizer_delayed_last_be_liteethudp_fsm1_next_value0 = 1'd0;
reg           main_basesoc_ethcore_tx_packetizer_delayed_last_be_liteethudp_fsm1_next_value_ce0 = 1'd0;
reg           main_basesoc_ethcore_tx_packetizer_fsm_from_idle = 1'd0;
reg           main_basesoc_ethcore_tx_packetizer_fsm_from_idle_liteethudp_fsm0_next_value1 = 1'd0;
reg           main_basesoc_ethcore_tx_packetizer_fsm_from_idle_liteethudp_fsm0_next_value_ce1 = 1'd0;
reg    [63:0] main_basesoc_ethcore_tx_packetizer_header = 64'd0;
wire          main_basesoc_ethcore_tx_packetizer_in_data_copy;
reg           main_basesoc_ethcore_tx_packetizer_is_ongoing0 = 1'd0;
reg           main_basesoc_ethcore_tx_packetizer_is_ongoing1 = 1'd0;
reg           main_basesoc_ethcore_tx_packetizer_is_ongoing2 = 1'd0;
wire          main_basesoc_ethcore_tx_packetizer_new_last_be;
wire          main_basesoc_ethcore_tx_packetizer_sink_last;
wire   [15:0] main_basesoc_ethcore_tx_packetizer_sink_param_checksum;
wire   [15:0] main_basesoc_ethcore_tx_packetizer_sink_param_dst_port;
wire   [15:0] main_basesoc_ethcore_tx_packetizer_sink_param_length;
wire   [15:0] main_basesoc_ethcore_tx_packetizer_sink_param_src_port;
wire    [7:0] main_basesoc_ethcore_tx_packetizer_sink_payload_data;
reg           main_basesoc_ethcore_tx_packetizer_sink_payload_error = 1'd0;
wire          main_basesoc_ethcore_tx_packetizer_sink_payload_last_be;
reg           main_basesoc_ethcore_tx_packetizer_sink_ready = 1'd0;
wire          main_basesoc_ethcore_tx_packetizer_sink_valid;
wire          main_basesoc_ethcore_tx_packetizer_source_description;
reg           main_basesoc_ethcore_tx_packetizer_source_first = 1'd0;
reg           main_basesoc_ethcore_tx_packetizer_source_last = 1'd0;
reg           main_basesoc_ethcore_tx_packetizer_source_last_a = 1'd0;
reg           main_basesoc_ethcore_tx_packetizer_source_last_b = 1'd0;
reg           main_basesoc_ethcore_tx_packetizer_source_last_s = 1'd0;
reg    [31:0] main_basesoc_ethcore_tx_packetizer_source_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_ethcore_tx_packetizer_source_param_length = 16'd0;
reg     [7:0] main_basesoc_ethcore_tx_packetizer_source_param_protocol = 8'd0;
reg     [7:0] main_basesoc_ethcore_tx_packetizer_source_payload_data = 8'd0;
wire          main_basesoc_ethcore_tx_packetizer_source_payload_error;
reg           main_basesoc_ethcore_tx_packetizer_source_payload_last_be = 1'd0;
reg           main_basesoc_ethcore_tx_packetizer_source_ready = 1'd0;
reg           main_basesoc_ethcore_tx_packetizer_source_valid = 1'd0;
reg    [63:0] main_basesoc_ethcore_tx_packetizer_sr = 64'd0;
reg           main_basesoc_ethcore_tx_packetizer_sr_load = 1'd0;
reg           main_basesoc_ethcore_tx_packetizer_sr_shift = 1'd0;
wire          main_basesoc_ethcore_tx_sink_sink_first;
wire          main_basesoc_ethcore_tx_sink_sink_last;
wire   [15:0] main_basesoc_ethcore_tx_sink_sink_param_dst_port;
wire   [31:0] main_basesoc_ethcore_tx_sink_sink_param_ip_address;
wire   [15:0] main_basesoc_ethcore_tx_sink_sink_param_length;
wire   [15:0] main_basesoc_ethcore_tx_sink_sink_param_src_port;
wire    [7:0] main_basesoc_ethcore_tx_sink_sink_payload_data;
wire          main_basesoc_ethcore_tx_sink_sink_payload_error;
wire          main_basesoc_ethcore_tx_sink_sink_payload_last_be;
wire          main_basesoc_ethcore_tx_sink_sink_ready;
wire          main_basesoc_ethcore_tx_sink_sink_valid;
reg           main_basesoc_ethcore_tx_source_source_first = 1'd0;
reg           main_basesoc_ethcore_tx_source_source_last = 1'd0;
reg    [31:0] main_basesoc_ethcore_tx_source_source_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_ethcore_tx_source_source_param_length = 16'd0;
reg     [7:0] main_basesoc_ethcore_tx_source_source_param_protocol = 8'd0;
reg     [7:0] main_basesoc_ethcore_tx_source_source_payload_data = 8'd0;
reg           main_basesoc_ethcore_tx_source_source_payload_error = 1'd0;
reg           main_basesoc_ethcore_tx_source_source_payload_last_be = 1'd0;
wire          main_basesoc_ethcore_tx_source_source_ready;
reg           main_basesoc_ethcore_tx_source_source_valid = 1'd0;
reg           main_basesoc_etherbone_dispatcher_first = 1'd1;
wire          main_basesoc_etherbone_dispatcher_last;
wire          main_basesoc_etherbone_dispatcher_ongoing0;
reg           main_basesoc_etherbone_dispatcher_ongoing1 = 1'd0;
wire          main_basesoc_etherbone_dispatcher_sel0;
reg           main_basesoc_etherbone_dispatcher_sel1 = 1'd0;
reg           main_basesoc_etherbone_dispatcher_sel_ongoing = 1'd0;
reg           main_basesoc_etherbone_grant = 1'd0;
wire          main_basesoc_etherbone_internal_port_sink_first;
wire          main_basesoc_etherbone_internal_port_sink_last;
wire   [15:0] main_basesoc_etherbone_internal_port_sink_param_dst_port;
wire   [31:0] main_basesoc_etherbone_internal_port_sink_param_ip_address;
wire   [15:0] main_basesoc_etherbone_internal_port_sink_param_length;
wire   [15:0] main_basesoc_etherbone_internal_port_sink_param_src_port;
wire    [7:0] main_basesoc_etherbone_internal_port_sink_payload_data;
wire          main_basesoc_etherbone_internal_port_sink_payload_error;
wire          main_basesoc_etherbone_internal_port_sink_payload_last_be;
wire          main_basesoc_etherbone_internal_port_sink_ready;
wire          main_basesoc_etherbone_internal_port_sink_valid;
reg           main_basesoc_etherbone_internal_port_source_first = 1'd0;
reg           main_basesoc_etherbone_internal_port_source_last = 1'd0;
reg    [15:0] main_basesoc_etherbone_internal_port_source_param_dst_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_internal_port_source_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_etherbone_internal_port_source_param_length = 16'd0;
reg    [15:0] main_basesoc_etherbone_internal_port_source_param_src_port = 16'd0;
reg     [7:0] main_basesoc_etherbone_internal_port_source_payload_data = 8'd0;
reg           main_basesoc_etherbone_internal_port_source_payload_error = 1'd0;
reg           main_basesoc_etherbone_internal_port_source_payload_last_be = 1'd0;
wire          main_basesoc_etherbone_internal_port_source_ready;
reg           main_basesoc_etherbone_internal_port_source_valid = 1'd0;
wire          main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_ack;
reg    [29:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_adr = 30'd0;
reg     [1:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_bte = 2'd0;
reg     [2:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_cti = 3'd0;
reg           main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_cyc = 1'd0;
wire   [31:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_dat_r;
reg    [31:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_dat_w = 32'd0;
wire          main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_err;
reg     [3:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_sel = 4'd0;
reg           main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_stb = 1'd0;
reg           main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_we = 1'd0;
reg           main_basesoc_etherbone_liteethetherbonewishbonemaster_data_update = 1'd0;
wire          main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_first;
wire          main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_last;
wire   [31:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_param_base_addr;
wire    [3:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_param_be;
wire    [7:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_param_count;
wire          main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_param_we;
wire   [31:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_payload_addr;
wire   [31:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_payload_last_be;
reg           main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_ready = 1'd0;
wire          main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_valid;
reg           main_basesoc_etherbone_liteethetherbonewishbonemaster_source_first = 1'd0;
reg           main_basesoc_etherbone_liteethetherbonewishbonemaster_source_last = 1'd0;
reg    [31:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_source_param_base_addr = 32'd0;
reg     [3:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_source_param_be = 4'd0;
reg     [7:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_source_param_count = 8'd0;
reg           main_basesoc_etherbone_liteethetherbonewishbonemaster_source_param_we = 1'd0;
reg    [31:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_source_payload_addr = 32'd0;
reg    [31:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_source_payload_data = 32'd0;
reg     [3:0] main_basesoc_etherbone_liteethetherbonewishbonemaster_source_payload_last_be = 4'd0;
wire          main_basesoc_etherbone_liteethetherbonewishbonemaster_source_ready;
reg           main_basesoc_etherbone_liteethetherbonewishbonemaster_source_valid = 1'd0;
reg           main_basesoc_etherbone_probe_param_fifo_consume = 1'd0;
wire          main_basesoc_etherbone_probe_param_fifo_do_read;
wire          main_basesoc_etherbone_probe_param_fifo_fifo_in_first;
wire          main_basesoc_etherbone_probe_param_fifo_fifo_in_last;
wire    [3:0] main_basesoc_etherbone_probe_param_fifo_fifo_in_param_addr_size;
wire   [15:0] main_basesoc_etherbone_probe_param_fifo_fifo_in_param_dst_port;
wire   [31:0] main_basesoc_etherbone_probe_param_fifo_fifo_in_param_ip_address;
wire   [15:0] main_basesoc_etherbone_probe_param_fifo_fifo_in_param_length;
wire          main_basesoc_etherbone_probe_param_fifo_fifo_in_param_nr;
wire          main_basesoc_etherbone_probe_param_fifo_fifo_in_param_pf;
wire    [3:0] main_basesoc_etherbone_probe_param_fifo_fifo_in_param_port_size;
wire          main_basesoc_etherbone_probe_param_fifo_fifo_in_param_pr;
wire   [15:0] main_basesoc_etherbone_probe_param_fifo_fifo_in_param_src_port;
wire          main_basesoc_etherbone_probe_param_fifo_fifo_out_first;
wire          main_basesoc_etherbone_probe_param_fifo_fifo_out_last;
wire    [3:0] main_basesoc_etherbone_probe_param_fifo_fifo_out_param_addr_size;
wire   [15:0] main_basesoc_etherbone_probe_param_fifo_fifo_out_param_dst_port;
wire   [31:0] main_basesoc_etherbone_probe_param_fifo_fifo_out_param_ip_address;
wire   [15:0] main_basesoc_etherbone_probe_param_fifo_fifo_out_param_length;
wire          main_basesoc_etherbone_probe_param_fifo_fifo_out_param_nr;
wire          main_basesoc_etherbone_probe_param_fifo_fifo_out_param_pf;
wire    [3:0] main_basesoc_etherbone_probe_param_fifo_fifo_out_param_port_size;
wire          main_basesoc_etherbone_probe_param_fifo_fifo_out_param_pr;
wire   [15:0] main_basesoc_etherbone_probe_param_fifo_fifo_out_param_src_port;
reg     [1:0] main_basesoc_etherbone_probe_param_fifo_level = 2'd0;
reg           main_basesoc_etherbone_probe_param_fifo_produce = 1'd0;
wire          main_basesoc_etherbone_probe_param_fifo_rdport_adr;
wire   [92:0] main_basesoc_etherbone_probe_param_fifo_rdport_dat_r;
reg           main_basesoc_etherbone_probe_param_fifo_replace = 1'd0;
reg           main_basesoc_etherbone_probe_param_fifo_sink_first = 1'd0;
reg           main_basesoc_etherbone_probe_param_fifo_sink_last = 1'd0;
wire    [3:0] main_basesoc_etherbone_probe_param_fifo_sink_param_addr_size;
wire   [15:0] main_basesoc_etherbone_probe_param_fifo_sink_param_dst_port;
wire   [31:0] main_basesoc_etherbone_probe_param_fifo_sink_param_ip_address;
wire   [15:0] main_basesoc_etherbone_probe_param_fifo_sink_param_length;
wire          main_basesoc_etherbone_probe_param_fifo_sink_param_nr;
wire          main_basesoc_etherbone_probe_param_fifo_sink_param_pf;
wire    [3:0] main_basesoc_etherbone_probe_param_fifo_sink_param_port_size;
wire          main_basesoc_etherbone_probe_param_fifo_sink_param_pr;
wire   [15:0] main_basesoc_etherbone_probe_param_fifo_sink_param_src_port;
wire          main_basesoc_etherbone_probe_param_fifo_sink_ready;
wire          main_basesoc_etherbone_probe_param_fifo_sink_valid;
wire          main_basesoc_etherbone_probe_param_fifo_source_first;
wire          main_basesoc_etherbone_probe_param_fifo_source_last;
wire    [3:0] main_basesoc_etherbone_probe_param_fifo_source_param_addr_size;
wire   [15:0] main_basesoc_etherbone_probe_param_fifo_source_param_dst_port;
wire   [31:0] main_basesoc_etherbone_probe_param_fifo_source_param_ip_address;
wire   [15:0] main_basesoc_etherbone_probe_param_fifo_source_param_length;
wire          main_basesoc_etherbone_probe_param_fifo_source_param_nr;
wire          main_basesoc_etherbone_probe_param_fifo_source_param_pf;
wire    [3:0] main_basesoc_etherbone_probe_param_fifo_source_param_port_size;
wire          main_basesoc_etherbone_probe_param_fifo_source_param_pr;
wire   [15:0] main_basesoc_etherbone_probe_param_fifo_source_param_src_port;
wire          main_basesoc_etherbone_probe_param_fifo_source_ready;
wire          main_basesoc_etherbone_probe_param_fifo_source_valid;
wire   [92:0] main_basesoc_etherbone_probe_param_fifo_syncfifo_din;
wire   [92:0] main_basesoc_etherbone_probe_param_fifo_syncfifo_dout;
wire          main_basesoc_etherbone_probe_param_fifo_syncfifo_re;
wire          main_basesoc_etherbone_probe_param_fifo_syncfifo_readable;
wire          main_basesoc_etherbone_probe_param_fifo_syncfifo_we;
wire          main_basesoc_etherbone_probe_param_fifo_syncfifo_writable;
reg           main_basesoc_etherbone_probe_param_fifo_wrport_adr = 1'd0;
wire   [92:0] main_basesoc_etherbone_probe_param_fifo_wrport_dat_r;
wire   [92:0] main_basesoc_etherbone_probe_param_fifo_wrport_dat_w;
wire          main_basesoc_etherbone_probe_param_fifo_wrport_we;
wire          main_basesoc_etherbone_probe_pipe_valid_sink_first;
wire          main_basesoc_etherbone_probe_pipe_valid_sink_last;
wire   [31:0] main_basesoc_etherbone_probe_pipe_valid_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_probe_pipe_valid_sink_payload_error;
wire    [3:0] main_basesoc_etherbone_probe_pipe_valid_sink_payload_last_be;
wire          main_basesoc_etherbone_probe_pipe_valid_sink_ready;
wire          main_basesoc_etherbone_probe_pipe_valid_sink_valid;
reg           main_basesoc_etherbone_probe_pipe_valid_source_first = 1'd0;
reg           main_basesoc_etherbone_probe_pipe_valid_source_last = 1'd0;
reg    [31:0] main_basesoc_etherbone_probe_pipe_valid_source_payload_data = 32'd0;
reg     [3:0] main_basesoc_etherbone_probe_pipe_valid_source_payload_error = 4'd0;
reg     [3:0] main_basesoc_etherbone_probe_pipe_valid_source_payload_last_be = 4'd0;
wire          main_basesoc_etherbone_probe_pipe_valid_source_ready;
reg           main_basesoc_etherbone_probe_pipe_valid_source_valid = 1'd0;
reg           main_basesoc_etherbone_probe_sink_first = 1'd0;
reg           main_basesoc_etherbone_probe_sink_last = 1'd0;
reg     [3:0] main_basesoc_etherbone_probe_sink_param_addr_size = 4'd0;
reg    [15:0] main_basesoc_etherbone_probe_sink_param_dst_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_probe_sink_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_etherbone_probe_sink_param_length = 16'd0;
reg           main_basesoc_etherbone_probe_sink_param_nr = 1'd0;
reg           main_basesoc_etherbone_probe_sink_param_pf = 1'd0;
reg     [3:0] main_basesoc_etherbone_probe_sink_param_port_size = 4'd0;
reg           main_basesoc_etherbone_probe_sink_param_pr = 1'd0;
reg    [15:0] main_basesoc_etherbone_probe_sink_param_src_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_probe_sink_payload_data = 32'd0;
reg     [3:0] main_basesoc_etherbone_probe_sink_payload_error = 4'd0;
reg     [3:0] main_basesoc_etherbone_probe_sink_payload_last_be = 4'd0;
wire          main_basesoc_etherbone_probe_sink_ready;
wire          main_basesoc_etherbone_probe_sink_sink_first0;
reg           main_basesoc_etherbone_probe_sink_sink_first1 = 1'd0;
wire          main_basesoc_etherbone_probe_sink_sink_last0;
wire          main_basesoc_etherbone_probe_sink_sink_last1;
wire    [3:0] main_basesoc_etherbone_probe_sink_sink_param_addr_size;
wire   [15:0] main_basesoc_etherbone_probe_sink_sink_param_dst_port;
wire   [31:0] main_basesoc_etherbone_probe_sink_sink_param_ip_address;
wire   [15:0] main_basesoc_etherbone_probe_sink_sink_param_length;
wire          main_basesoc_etherbone_probe_sink_sink_param_nr;
wire          main_basesoc_etherbone_probe_sink_sink_param_pf;
wire    [3:0] main_basesoc_etherbone_probe_sink_sink_param_port_size;
wire          main_basesoc_etherbone_probe_sink_sink_param_pr;
wire   [15:0] main_basesoc_etherbone_probe_sink_sink_param_src_port;
wire   [31:0] main_basesoc_etherbone_probe_sink_sink_payload_data0;
wire   [31:0] main_basesoc_etherbone_probe_sink_sink_payload_data1;
wire    [3:0] main_basesoc_etherbone_probe_sink_sink_payload_error0;
wire    [3:0] main_basesoc_etherbone_probe_sink_sink_payload_error1;
wire    [3:0] main_basesoc_etherbone_probe_sink_sink_payload_last_be0;
wire    [3:0] main_basesoc_etherbone_probe_sink_sink_payload_last_be1;
wire          main_basesoc_etherbone_probe_sink_sink_ready0;
wire          main_basesoc_etherbone_probe_sink_sink_ready1;
wire          main_basesoc_etherbone_probe_sink_sink_valid0;
wire          main_basesoc_etherbone_probe_sink_sink_valid1;
reg           main_basesoc_etherbone_probe_sink_valid = 1'd0;
reg           main_basesoc_etherbone_probe_source_first = 1'd0;
reg           main_basesoc_etherbone_probe_source_last = 1'd0;
reg     [3:0] main_basesoc_etherbone_probe_source_param_addr_size = 4'd0;
reg    [15:0] main_basesoc_etherbone_probe_source_param_dst_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_probe_source_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_etherbone_probe_source_param_length = 16'd0;
reg           main_basesoc_etherbone_probe_source_param_nr = 1'd0;
reg           main_basesoc_etherbone_probe_source_param_pf = 1'd0;
reg     [3:0] main_basesoc_etherbone_probe_source_param_port_size = 4'd0;
reg           main_basesoc_etherbone_probe_source_param_pr = 1'd0;
reg    [15:0] main_basesoc_etherbone_probe_source_param_src_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_probe_source_payload_data = 32'd0;
reg     [3:0] main_basesoc_etherbone_probe_source_payload_error = 4'd0;
reg     [3:0] main_basesoc_etherbone_probe_source_payload_last_be = 4'd0;
reg           main_basesoc_etherbone_probe_source_ready = 1'd0;
reg           main_basesoc_etherbone_probe_source_source_first0 = 1'd0;
wire          main_basesoc_etherbone_probe_source_source_first1;
wire          main_basesoc_etherbone_probe_source_source_last0;
wire          main_basesoc_etherbone_probe_source_source_last1;
wire    [3:0] main_basesoc_etherbone_probe_source_source_param_addr_size;
wire   [15:0] main_basesoc_etherbone_probe_source_source_param_dst_port;
wire   [31:0] main_basesoc_etherbone_probe_source_source_param_ip_address;
wire   [15:0] main_basesoc_etherbone_probe_source_source_param_length;
wire          main_basesoc_etherbone_probe_source_source_param_nr;
wire          main_basesoc_etherbone_probe_source_source_param_pf;
wire    [3:0] main_basesoc_etherbone_probe_source_source_param_port_size;
wire          main_basesoc_etherbone_probe_source_source_param_pr;
wire   [15:0] main_basesoc_etherbone_probe_source_source_param_src_port;
wire   [31:0] main_basesoc_etherbone_probe_source_source_payload_data0;
wire   [31:0] main_basesoc_etherbone_probe_source_source_payload_data1;
wire    [3:0] main_basesoc_etherbone_probe_source_source_payload_error0;
wire    [3:0] main_basesoc_etherbone_probe_source_source_payload_error1;
wire    [3:0] main_basesoc_etherbone_probe_source_source_payload_last_be0;
wire    [3:0] main_basesoc_etherbone_probe_source_source_payload_last_be1;
reg           main_basesoc_etherbone_probe_source_source_ready0 = 1'd0;
wire          main_basesoc_etherbone_probe_source_source_ready1;
wire          main_basesoc_etherbone_probe_source_source_valid0;
wire          main_basesoc_etherbone_probe_source_source_valid1;
reg           main_basesoc_etherbone_probe_source_valid = 1'd0;
reg           main_basesoc_etherbone_record_depacketizer_count = 1'd0;
reg           main_basesoc_etherbone_record_depacketizer_count_liteethetherbone_fsm0_next_value4 = 1'd0;
reg           main_basesoc_etherbone_record_depacketizer_count_liteethetherbone_fsm0_next_value_ce4 = 1'd0;
reg     [3:0] main_basesoc_etherbone_record_depacketizer_delayed_last_be = 4'd0;
reg     [3:0] main_basesoc_etherbone_record_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value2 = 4'd0;
reg           main_basesoc_etherbone_record_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce2 = 1'd0;
reg           main_basesoc_etherbone_record_depacketizer_fsm_from_idle = 1'd0;
reg           main_basesoc_etherbone_record_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value5 = 1'd0;
reg           main_basesoc_etherbone_record_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce5 = 1'd0;
wire   [31:0] main_basesoc_etherbone_record_depacketizer_header;
wire          main_basesoc_etherbone_record_depacketizer_is_in_copy;
reg           main_basesoc_etherbone_record_depacketizer_is_ongoing0 = 1'd0;
reg           main_basesoc_etherbone_record_depacketizer_is_ongoing1 = 1'd0;
reg           main_basesoc_etherbone_record_depacketizer_is_ongoing2 = 1'd0;
reg           main_basesoc_etherbone_record_depacketizer_is_ongoing3 = 1'd0;
wire    [3:0] main_basesoc_etherbone_record_depacketizer_new_last_be;
reg           main_basesoc_etherbone_record_depacketizer_sink_d_last = 1'd0;
wire          main_basesoc_etherbone_record_depacketizer_sink_first;
wire          main_basesoc_etherbone_record_depacketizer_sink_last;
wire    [3:0] main_basesoc_etherbone_record_depacketizer_sink_param_addr_size;
wire   [15:0] main_basesoc_etherbone_record_depacketizer_sink_param_dst_port;
wire   [31:0] main_basesoc_etherbone_record_depacketizer_sink_param_ip_address;
wire   [15:0] main_basesoc_etherbone_record_depacketizer_sink_param_length;
wire          main_basesoc_etherbone_record_depacketizer_sink_param_nr;
wire          main_basesoc_etherbone_record_depacketizer_sink_param_pf;
wire    [3:0] main_basesoc_etherbone_record_depacketizer_sink_param_port_size;
wire          main_basesoc_etherbone_record_depacketizer_sink_param_pr;
wire   [15:0] main_basesoc_etherbone_record_depacketizer_sink_param_src_port;
wire   [31:0] main_basesoc_etherbone_record_depacketizer_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_record_depacketizer_sink_payload_error;
wire    [3:0] main_basesoc_etherbone_record_depacketizer_sink_payload_last_be;
reg           main_basesoc_etherbone_record_depacketizer_sink_ready = 1'd0;
wire          main_basesoc_etherbone_record_depacketizer_sink_valid;
reg           main_basesoc_etherbone_record_depacketizer_source_first = 1'd0;
reg           main_basesoc_etherbone_record_depacketizer_source_last = 1'd0;
reg           main_basesoc_etherbone_record_depacketizer_source_last_a = 1'd0;
reg           main_basesoc_etherbone_record_depacketizer_source_last_b = 1'd0;
reg           main_basesoc_etherbone_record_depacketizer_source_last_s = 1'd0;
wire          main_basesoc_etherbone_record_depacketizer_source_param_bca;
wire    [7:0] main_basesoc_etherbone_record_depacketizer_source_param_byte_enable;
wire          main_basesoc_etherbone_record_depacketizer_source_param_cyc;
wire          main_basesoc_etherbone_record_depacketizer_source_param_rca;
wire    [7:0] main_basesoc_etherbone_record_depacketizer_source_param_rcount;
wire          main_basesoc_etherbone_record_depacketizer_source_param_rff;
wire          main_basesoc_etherbone_record_depacketizer_source_param_wca;
wire    [7:0] main_basesoc_etherbone_record_depacketizer_source_param_wcount;
wire          main_basesoc_etherbone_record_depacketizer_source_param_wff;
reg    [31:0] main_basesoc_etherbone_record_depacketizer_source_payload_data = 32'd0;
wire    [3:0] main_basesoc_etherbone_record_depacketizer_source_payload_error;
reg     [3:0] main_basesoc_etherbone_record_depacketizer_source_payload_last_be = 4'd0;
wire          main_basesoc_etherbone_record_depacketizer_source_ready;
reg           main_basesoc_etherbone_record_depacketizer_source_valid = 1'd0;
reg    [31:0] main_basesoc_etherbone_record_depacketizer_sr = 32'd0;
reg           main_basesoc_etherbone_record_depacketizer_sr_shift = 1'd0;
reg           main_basesoc_etherbone_record_depacketizer_was_in_copy = 1'd0;
reg           main_basesoc_etherbone_record_first = 1'd1;
reg    [31:0] main_basesoc_etherbone_record_last_ip_address = 32'd0;
reg           main_basesoc_etherbone_record_packetizer_count = 1'd0;
reg           main_basesoc_etherbone_record_packetizer_count_liteethetherbone_fsm0_next_value6 = 1'd0;
reg           main_basesoc_etherbone_record_packetizer_count_liteethetherbone_fsm0_next_value_ce6 = 1'd0;
reg     [3:0] main_basesoc_etherbone_record_packetizer_delayed_last_be = 4'd0;
reg     [3:0] main_basesoc_etherbone_record_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value3 = 4'd0;
reg           main_basesoc_etherbone_record_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce3 = 1'd0;
reg           main_basesoc_etherbone_record_packetizer_fsm_from_idle = 1'd0;
reg           main_basesoc_etherbone_record_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value7 = 1'd0;
reg           main_basesoc_etherbone_record_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce7 = 1'd0;
reg    [31:0] main_basesoc_etherbone_record_packetizer_header = 32'd0;
wire          main_basesoc_etherbone_record_packetizer_in_data_copy;
reg           main_basesoc_etherbone_record_packetizer_is_ongoing0 = 1'd0;
reg           main_basesoc_etherbone_record_packetizer_is_ongoing1 = 1'd0;
reg           main_basesoc_etherbone_record_packetizer_is_ongoing2 = 1'd0;
wire    [3:0] main_basesoc_etherbone_record_packetizer_new_last_be;
wire          main_basesoc_etherbone_record_packetizer_sink_first;
wire          main_basesoc_etherbone_record_packetizer_sink_last;
wire          main_basesoc_etherbone_record_packetizer_sink_param_bca;
wire    [7:0] main_basesoc_etherbone_record_packetizer_sink_param_byte_enable;
wire          main_basesoc_etherbone_record_packetizer_sink_param_cyc;
wire          main_basesoc_etherbone_record_packetizer_sink_param_rca;
wire    [7:0] main_basesoc_etherbone_record_packetizer_sink_param_rcount;
wire          main_basesoc_etherbone_record_packetizer_sink_param_rff;
wire          main_basesoc_etherbone_record_packetizer_sink_param_wca;
wire    [7:0] main_basesoc_etherbone_record_packetizer_sink_param_wcount;
wire          main_basesoc_etherbone_record_packetizer_sink_param_wff;
reg    [31:0] main_basesoc_etherbone_record_packetizer_sink_payload_data = 32'd0;
wire    [3:0] main_basesoc_etherbone_record_packetizer_sink_payload_error;
wire    [3:0] main_basesoc_etherbone_record_packetizer_sink_payload_last_be;
reg           main_basesoc_etherbone_record_packetizer_sink_ready = 1'd0;
wire          main_basesoc_etherbone_record_packetizer_sink_valid;
reg           main_basesoc_etherbone_record_packetizer_source_first = 1'd0;
reg           main_basesoc_etherbone_record_packetizer_source_last = 1'd0;
reg           main_basesoc_etherbone_record_packetizer_source_last_a = 1'd0;
reg           main_basesoc_etherbone_record_packetizer_source_last_b = 1'd0;
reg           main_basesoc_etherbone_record_packetizer_source_last_s = 1'd0;
reg     [3:0] main_basesoc_etherbone_record_packetizer_source_param_addr_size = 4'd0;
reg    [15:0] main_basesoc_etherbone_record_packetizer_source_param_dst_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_record_packetizer_source_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_etherbone_record_packetizer_source_param_length = 16'd0;
reg           main_basesoc_etherbone_record_packetizer_source_param_nr = 1'd0;
reg           main_basesoc_etherbone_record_packetizer_source_param_pf = 1'd0;
reg     [3:0] main_basesoc_etherbone_record_packetizer_source_param_port_size = 4'd0;
reg           main_basesoc_etherbone_record_packetizer_source_param_pr = 1'd0;
reg    [15:0] main_basesoc_etherbone_record_packetizer_source_param_src_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_record_packetizer_source_payload_data = 32'd0;
wire    [3:0] main_basesoc_etherbone_record_packetizer_source_payload_error;
reg     [3:0] main_basesoc_etherbone_record_packetizer_source_payload_last_be = 4'd0;
wire          main_basesoc_etherbone_record_packetizer_source_ready;
reg           main_basesoc_etherbone_record_packetizer_source_valid = 1'd0;
reg    [31:0] main_basesoc_etherbone_record_packetizer_sr = 32'd0;
reg           main_basesoc_etherbone_record_packetizer_sr_load = 1'd0;
reg           main_basesoc_etherbone_record_packetizer_sr_shift = 1'd0;
reg    [31:0] main_basesoc_etherbone_record_receiver_base_addr = 32'd0;
reg           main_basesoc_etherbone_record_receiver_base_addr_update = 1'd0;
reg     [8:0] main_basesoc_etherbone_record_receiver_count = 9'd0;
reg     [8:0] main_basesoc_etherbone_record_receiver_count_liteethetherbone_next_value = 9'd0;
reg           main_basesoc_etherbone_record_receiver_count_liteethetherbone_next_value_ce = 1'd0;
reg           main_basesoc_etherbone_record_receiver_param_fifo_consume = 1'd0;
wire          main_basesoc_etherbone_record_receiver_param_fifo_do_read;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_first;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_last;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_bca;
wire    [7:0] main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_byte_enable;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_cyc;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_rca;
wire    [7:0] main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_rcount;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_rff;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_wca;
wire    [7:0] main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_wcount;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_wff;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_first;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_last;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_bca;
wire    [7:0] main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_byte_enable;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_cyc;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_rca;
wire    [7:0] main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_rcount;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_rff;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_wca;
wire    [7:0] main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_wcount;
wire          main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_wff;
reg     [1:0] main_basesoc_etherbone_record_receiver_param_fifo_level0 = 2'd0;
wire    [1:0] main_basesoc_etherbone_record_receiver_param_fifo_level1;
reg           main_basesoc_etherbone_record_receiver_param_fifo_produce = 1'd0;
wire          main_basesoc_etherbone_record_receiver_param_fifo_rdport_adr;
wire   [31:0] main_basesoc_etherbone_record_receiver_param_fifo_rdport_dat_r;
wire          main_basesoc_etherbone_record_receiver_param_fifo_rdport_re;
wire          main_basesoc_etherbone_record_receiver_param_fifo_re;
reg           main_basesoc_etherbone_record_receiver_param_fifo_readable = 1'd0;
reg           main_basesoc_etherbone_record_receiver_param_fifo_replace = 1'd0;
reg           main_basesoc_etherbone_record_receiver_param_fifo_sink_first = 1'd0;
reg           main_basesoc_etherbone_record_receiver_param_fifo_sink_last = 1'd0;
wire          main_basesoc_etherbone_record_receiver_param_fifo_sink_param_bca;
wire    [7:0] main_basesoc_etherbone_record_receiver_param_fifo_sink_param_byte_enable;
wire          main_basesoc_etherbone_record_receiver_param_fifo_sink_param_cyc;
wire          main_basesoc_etherbone_record_receiver_param_fifo_sink_param_rca;
wire    [7:0] main_basesoc_etherbone_record_receiver_param_fifo_sink_param_rcount;
wire          main_basesoc_etherbone_record_receiver_param_fifo_sink_param_rff;
wire          main_basesoc_etherbone_record_receiver_param_fifo_sink_param_wca;
wire    [7:0] main_basesoc_etherbone_record_receiver_param_fifo_sink_param_wcount;
wire          main_basesoc_etherbone_record_receiver_param_fifo_sink_param_wff;
wire          main_basesoc_etherbone_record_receiver_param_fifo_sink_ready;
wire          main_basesoc_etherbone_record_receiver_param_fifo_sink_valid;
wire          main_basesoc_etherbone_record_receiver_param_fifo_source_first;
wire          main_basesoc_etherbone_record_receiver_param_fifo_source_last;
wire          main_basesoc_etherbone_record_receiver_param_fifo_source_param_bca;
wire    [7:0] main_basesoc_etherbone_record_receiver_param_fifo_source_param_byte_enable;
wire          main_basesoc_etherbone_record_receiver_param_fifo_source_param_cyc;
wire          main_basesoc_etherbone_record_receiver_param_fifo_source_param_rca;
wire    [7:0] main_basesoc_etherbone_record_receiver_param_fifo_source_param_rcount;
wire          main_basesoc_etherbone_record_receiver_param_fifo_source_param_rff;
wire          main_basesoc_etherbone_record_receiver_param_fifo_source_param_wca;
wire    [7:0] main_basesoc_etherbone_record_receiver_param_fifo_source_param_wcount;
wire          main_basesoc_etherbone_record_receiver_param_fifo_source_param_wff;
wire          main_basesoc_etherbone_record_receiver_param_fifo_source_ready;
wire          main_basesoc_etherbone_record_receiver_param_fifo_source_valid;
wire   [31:0] main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_din;
wire   [31:0] main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_dout;
wire          main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_re;
wire          main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_readable;
wire          main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_we;
wire          main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_writable;
reg           main_basesoc_etherbone_record_receiver_param_fifo_wrport_adr = 1'd0;
wire   [31:0] main_basesoc_etherbone_record_receiver_param_fifo_wrport_dat_r;
wire   [31:0] main_basesoc_etherbone_record_receiver_param_fifo_wrport_dat_w;
wire          main_basesoc_etherbone_record_receiver_param_fifo_wrport_we;
reg     [3:0] main_basesoc_etherbone_record_receiver_payload_fifo_consume = 4'd0;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_do_read;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_fifo_in_first;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_fifo_in_last;
wire   [31:0] main_basesoc_etherbone_record_receiver_payload_fifo_fifo_in_payload_data;
wire    [3:0] main_basesoc_etherbone_record_receiver_payload_fifo_fifo_in_payload_error;
wire    [3:0] main_basesoc_etherbone_record_receiver_payload_fifo_fifo_in_payload_last_be;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_fifo_out_first;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_fifo_out_last;
wire   [31:0] main_basesoc_etherbone_record_receiver_payload_fifo_fifo_out_payload_data;
wire    [3:0] main_basesoc_etherbone_record_receiver_payload_fifo_fifo_out_payload_error;
wire    [3:0] main_basesoc_etherbone_record_receiver_payload_fifo_fifo_out_payload_last_be;
reg     [4:0] main_basesoc_etherbone_record_receiver_payload_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_etherbone_record_receiver_payload_fifo_level1;
reg     [3:0] main_basesoc_etherbone_record_receiver_payload_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_etherbone_record_receiver_payload_fifo_rdport_adr;
wire   [41:0] main_basesoc_etherbone_record_receiver_payload_fifo_rdport_dat_r;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_rdport_re;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_re;
reg           main_basesoc_etherbone_record_receiver_payload_fifo_readable = 1'd0;
reg           main_basesoc_etherbone_record_receiver_payload_fifo_replace = 1'd0;
reg           main_basesoc_etherbone_record_receiver_payload_fifo_sink_first = 1'd0;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_sink_last;
wire   [31:0] main_basesoc_etherbone_record_receiver_payload_fifo_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_record_receiver_payload_fifo_sink_payload_error;
wire    [3:0] main_basesoc_etherbone_record_receiver_payload_fifo_sink_payload_last_be;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_sink_ready;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_sink_valid;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_source_first;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_source_last;
wire   [31:0] main_basesoc_etherbone_record_receiver_payload_fifo_source_payload_data;
wire    [3:0] main_basesoc_etherbone_record_receiver_payload_fifo_source_payload_error;
wire    [3:0] main_basesoc_etherbone_record_receiver_payload_fifo_source_payload_last_be;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_source_ready;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_source_valid;
wire   [41:0] main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_din;
wire   [41:0] main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_dout;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_re;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_readable;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_we;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_etherbone_record_receiver_payload_fifo_wrport_adr = 4'd0;
wire   [41:0] main_basesoc_etherbone_record_receiver_payload_fifo_wrport_dat_r;
wire   [41:0] main_basesoc_etherbone_record_receiver_payload_fifo_wrport_dat_w;
wire          main_basesoc_etherbone_record_receiver_payload_fifo_wrport_we;
wire          main_basesoc_etherbone_record_receiver_sink_first;
wire          main_basesoc_etherbone_record_receiver_sink_last;
wire          main_basesoc_etherbone_record_receiver_sink_param_bca;
wire    [7:0] main_basesoc_etherbone_record_receiver_sink_param_byte_enable;
wire          main_basesoc_etherbone_record_receiver_sink_param_cyc;
wire          main_basesoc_etherbone_record_receiver_sink_param_rca;
wire    [7:0] main_basesoc_etherbone_record_receiver_sink_param_rcount;
wire          main_basesoc_etherbone_record_receiver_sink_param_rff;
wire          main_basesoc_etherbone_record_receiver_sink_param_wca;
wire    [7:0] main_basesoc_etherbone_record_receiver_sink_param_wcount;
wire          main_basesoc_etherbone_record_receiver_sink_param_wff;
reg    [31:0] main_basesoc_etherbone_record_receiver_sink_payload_data = 32'd0;
wire    [3:0] main_basesoc_etherbone_record_receiver_sink_payload_error;
wire    [3:0] main_basesoc_etherbone_record_receiver_sink_payload_last_be;
wire          main_basesoc_etherbone_record_receiver_sink_ready;
wire          main_basesoc_etherbone_record_receiver_sink_sink_first;
wire          main_basesoc_etherbone_record_receiver_sink_sink_last;
wire          main_basesoc_etherbone_record_receiver_sink_sink_param_bca;
wire    [7:0] main_basesoc_etherbone_record_receiver_sink_sink_param_byte_enable;
wire          main_basesoc_etherbone_record_receiver_sink_sink_param_cyc;
wire          main_basesoc_etherbone_record_receiver_sink_sink_param_rca;
wire    [7:0] main_basesoc_etherbone_record_receiver_sink_sink_param_rcount;
wire          main_basesoc_etherbone_record_receiver_sink_sink_param_rff;
wire          main_basesoc_etherbone_record_receiver_sink_sink_param_wca;
wire    [7:0] main_basesoc_etherbone_record_receiver_sink_sink_param_wcount;
wire          main_basesoc_etherbone_record_receiver_sink_sink_param_wff;
wire   [31:0] main_basesoc_etherbone_record_receiver_sink_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_record_receiver_sink_sink_payload_error;
wire    [3:0] main_basesoc_etherbone_record_receiver_sink_sink_payload_last_be;
wire          main_basesoc_etherbone_record_receiver_sink_sink_ready;
wire          main_basesoc_etherbone_record_receiver_sink_sink_valid;
wire          main_basesoc_etherbone_record_receiver_sink_valid;
reg           main_basesoc_etherbone_record_receiver_source_first = 1'd0;
reg           main_basesoc_etherbone_record_receiver_source_last = 1'd0;
reg    [31:0] main_basesoc_etherbone_record_receiver_source_param_base_addr = 32'd0;
reg     [3:0] main_basesoc_etherbone_record_receiver_source_param_be = 4'd0;
reg     [7:0] main_basesoc_etherbone_record_receiver_source_param_count = 8'd0;
reg           main_basesoc_etherbone_record_receiver_source_param_we = 1'd0;
reg    [31:0] main_basesoc_etherbone_record_receiver_source_payload_addr = 32'd0;
reg    [31:0] main_basesoc_etherbone_record_receiver_source_payload_data = 32'd0;
reg     [3:0] main_basesoc_etherbone_record_receiver_source_payload_last_be = 4'd0;
wire          main_basesoc_etherbone_record_receiver_source_ready;
reg           main_basesoc_etherbone_record_receiver_source_source_first = 1'd0;
wire          main_basesoc_etherbone_record_receiver_source_source_last;
wire          main_basesoc_etherbone_record_receiver_source_source_param_bca;
wire    [7:0] main_basesoc_etherbone_record_receiver_source_source_param_byte_enable;
wire          main_basesoc_etherbone_record_receiver_source_source_param_cyc;
wire          main_basesoc_etherbone_record_receiver_source_source_param_rca;
wire    [7:0] main_basesoc_etherbone_record_receiver_source_source_param_rcount;
wire          main_basesoc_etherbone_record_receiver_source_source_param_rff;
wire          main_basesoc_etherbone_record_receiver_source_source_param_wca;
wire    [7:0] main_basesoc_etherbone_record_receiver_source_source_param_wcount;
wire          main_basesoc_etherbone_record_receiver_source_source_param_wff;
wire   [31:0] main_basesoc_etherbone_record_receiver_source_source_payload_data;
wire    [3:0] main_basesoc_etherbone_record_receiver_source_source_payload_error;
wire    [3:0] main_basesoc_etherbone_record_receiver_source_source_payload_last_be;
reg           main_basesoc_etherbone_record_receiver_source_source_ready = 1'd0;
wire          main_basesoc_etherbone_record_receiver_source_source_valid;
reg           main_basesoc_etherbone_record_receiver_source_valid = 1'd0;
reg           main_basesoc_etherbone_record_sender_param_fifo_consume = 1'd0;
wire          main_basesoc_etherbone_record_sender_param_fifo_do_read;
wire          main_basesoc_etherbone_record_sender_param_fifo_fifo_in_first;
wire          main_basesoc_etherbone_record_sender_param_fifo_fifo_in_last;
wire   [31:0] main_basesoc_etherbone_record_sender_param_fifo_fifo_in_param_base_addr;
wire    [3:0] main_basesoc_etherbone_record_sender_param_fifo_fifo_in_param_be;
wire    [7:0] main_basesoc_etherbone_record_sender_param_fifo_fifo_in_param_count;
wire          main_basesoc_etherbone_record_sender_param_fifo_fifo_in_param_we;
wire          main_basesoc_etherbone_record_sender_param_fifo_fifo_out_first;
wire          main_basesoc_etherbone_record_sender_param_fifo_fifo_out_last;
wire   [31:0] main_basesoc_etherbone_record_sender_param_fifo_fifo_out_param_base_addr;
wire    [3:0] main_basesoc_etherbone_record_sender_param_fifo_fifo_out_param_be;
wire    [7:0] main_basesoc_etherbone_record_sender_param_fifo_fifo_out_param_count;
wire          main_basesoc_etherbone_record_sender_param_fifo_fifo_out_param_we;
reg     [1:0] main_basesoc_etherbone_record_sender_param_fifo_level0 = 2'd0;
wire    [1:0] main_basesoc_etherbone_record_sender_param_fifo_level1;
reg           main_basesoc_etherbone_record_sender_param_fifo_produce = 1'd0;
wire          main_basesoc_etherbone_record_sender_param_fifo_rdport_adr;
wire   [46:0] main_basesoc_etherbone_record_sender_param_fifo_rdport_dat_r;
wire          main_basesoc_etherbone_record_sender_param_fifo_rdport_re;
wire          main_basesoc_etherbone_record_sender_param_fifo_re;
reg           main_basesoc_etherbone_record_sender_param_fifo_readable = 1'd0;
reg           main_basesoc_etherbone_record_sender_param_fifo_replace = 1'd0;
reg           main_basesoc_etherbone_record_sender_param_fifo_sink_first = 1'd0;
reg           main_basesoc_etherbone_record_sender_param_fifo_sink_last = 1'd0;
wire   [31:0] main_basesoc_etherbone_record_sender_param_fifo_sink_param_base_addr;
wire    [3:0] main_basesoc_etherbone_record_sender_param_fifo_sink_param_be;
wire    [7:0] main_basesoc_etherbone_record_sender_param_fifo_sink_param_count;
wire          main_basesoc_etherbone_record_sender_param_fifo_sink_param_we;
wire          main_basesoc_etherbone_record_sender_param_fifo_sink_ready;
wire          main_basesoc_etherbone_record_sender_param_fifo_sink_valid;
wire          main_basesoc_etherbone_record_sender_param_fifo_source_first;
wire          main_basesoc_etherbone_record_sender_param_fifo_source_last;
wire   [31:0] main_basesoc_etherbone_record_sender_param_fifo_source_param_base_addr;
wire    [3:0] main_basesoc_etherbone_record_sender_param_fifo_source_param_be;
wire    [7:0] main_basesoc_etherbone_record_sender_param_fifo_source_param_count;
wire          main_basesoc_etherbone_record_sender_param_fifo_source_param_we;
wire          main_basesoc_etherbone_record_sender_param_fifo_source_ready;
wire          main_basesoc_etherbone_record_sender_param_fifo_source_valid;
wire   [46:0] main_basesoc_etherbone_record_sender_param_fifo_syncfifo_din;
wire   [46:0] main_basesoc_etherbone_record_sender_param_fifo_syncfifo_dout;
wire          main_basesoc_etherbone_record_sender_param_fifo_syncfifo_re;
wire          main_basesoc_etherbone_record_sender_param_fifo_syncfifo_readable;
wire          main_basesoc_etherbone_record_sender_param_fifo_syncfifo_we;
wire          main_basesoc_etherbone_record_sender_param_fifo_syncfifo_writable;
reg           main_basesoc_etherbone_record_sender_param_fifo_wrport_adr = 1'd0;
wire   [46:0] main_basesoc_etherbone_record_sender_param_fifo_wrport_dat_r;
wire   [46:0] main_basesoc_etherbone_record_sender_param_fifo_wrport_dat_w;
wire          main_basesoc_etherbone_record_sender_param_fifo_wrport_we;
reg     [3:0] main_basesoc_etherbone_record_sender_payload_fifo_consume = 4'd0;
wire          main_basesoc_etherbone_record_sender_payload_fifo_do_read;
wire          main_basesoc_etherbone_record_sender_payload_fifo_fifo_in_first;
wire          main_basesoc_etherbone_record_sender_payload_fifo_fifo_in_last;
wire   [31:0] main_basesoc_etherbone_record_sender_payload_fifo_fifo_in_payload_addr;
wire   [31:0] main_basesoc_etherbone_record_sender_payload_fifo_fifo_in_payload_data;
wire    [3:0] main_basesoc_etherbone_record_sender_payload_fifo_fifo_in_payload_last_be;
wire          main_basesoc_etherbone_record_sender_payload_fifo_fifo_out_first;
wire          main_basesoc_etherbone_record_sender_payload_fifo_fifo_out_last;
wire   [31:0] main_basesoc_etherbone_record_sender_payload_fifo_fifo_out_payload_addr;
wire   [31:0] main_basesoc_etherbone_record_sender_payload_fifo_fifo_out_payload_data;
wire    [3:0] main_basesoc_etherbone_record_sender_payload_fifo_fifo_out_payload_last_be;
reg     [4:0] main_basesoc_etherbone_record_sender_payload_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_etherbone_record_sender_payload_fifo_level1;
reg     [3:0] main_basesoc_etherbone_record_sender_payload_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_etherbone_record_sender_payload_fifo_rdport_adr;
wire   [69:0] main_basesoc_etherbone_record_sender_payload_fifo_rdport_dat_r;
wire          main_basesoc_etherbone_record_sender_payload_fifo_rdport_re;
wire          main_basesoc_etherbone_record_sender_payload_fifo_re;
reg           main_basesoc_etherbone_record_sender_payload_fifo_readable = 1'd0;
reg           main_basesoc_etherbone_record_sender_payload_fifo_replace = 1'd0;
reg           main_basesoc_etherbone_record_sender_payload_fifo_sink_first = 1'd0;
wire          main_basesoc_etherbone_record_sender_payload_fifo_sink_last;
wire   [31:0] main_basesoc_etherbone_record_sender_payload_fifo_sink_payload_addr;
wire   [31:0] main_basesoc_etherbone_record_sender_payload_fifo_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_record_sender_payload_fifo_sink_payload_last_be;
wire          main_basesoc_etherbone_record_sender_payload_fifo_sink_ready;
wire          main_basesoc_etherbone_record_sender_payload_fifo_sink_valid;
wire          main_basesoc_etherbone_record_sender_payload_fifo_source_first;
wire          main_basesoc_etherbone_record_sender_payload_fifo_source_last;
wire   [31:0] main_basesoc_etherbone_record_sender_payload_fifo_source_payload_addr;
wire   [31:0] main_basesoc_etherbone_record_sender_payload_fifo_source_payload_data;
wire    [3:0] main_basesoc_etherbone_record_sender_payload_fifo_source_payload_last_be;
wire          main_basesoc_etherbone_record_sender_payload_fifo_source_ready;
wire          main_basesoc_etherbone_record_sender_payload_fifo_source_valid;
wire   [69:0] main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_din;
wire   [69:0] main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_dout;
wire          main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_re;
wire          main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_readable;
wire          main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_we;
wire          main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_etherbone_record_sender_payload_fifo_wrport_adr = 4'd0;
wire   [69:0] main_basesoc_etherbone_record_sender_payload_fifo_wrport_dat_r;
wire   [69:0] main_basesoc_etherbone_record_sender_payload_fifo_wrport_dat_w;
wire          main_basesoc_etherbone_record_sender_payload_fifo_wrport_we;
wire          main_basesoc_etherbone_record_sender_sink_first;
wire          main_basesoc_etherbone_record_sender_sink_last;
wire   [31:0] main_basesoc_etherbone_record_sender_sink_param_base_addr;
wire    [3:0] main_basesoc_etherbone_record_sender_sink_param_be;
wire    [7:0] main_basesoc_etherbone_record_sender_sink_param_count;
wire          main_basesoc_etherbone_record_sender_sink_param_we;
wire   [31:0] main_basesoc_etherbone_record_sender_sink_payload_addr;
wire   [31:0] main_basesoc_etherbone_record_sender_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_record_sender_sink_payload_last_be;
wire          main_basesoc_etherbone_record_sender_sink_ready;
wire          main_basesoc_etherbone_record_sender_sink_sink_first;
wire          main_basesoc_etherbone_record_sender_sink_sink_last;
wire   [31:0] main_basesoc_etherbone_record_sender_sink_sink_param_base_addr;
wire    [3:0] main_basesoc_etherbone_record_sender_sink_sink_param_be;
wire    [7:0] main_basesoc_etherbone_record_sender_sink_sink_param_count;
wire          main_basesoc_etherbone_record_sender_sink_sink_param_we;
wire   [31:0] main_basesoc_etherbone_record_sender_sink_sink_payload_addr;
wire   [31:0] main_basesoc_etherbone_record_sender_sink_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_record_sender_sink_sink_payload_last_be;
wire          main_basesoc_etherbone_record_sender_sink_sink_ready;
wire          main_basesoc_etherbone_record_sender_sink_sink_valid;
wire          main_basesoc_etherbone_record_sender_sink_valid;
reg           main_basesoc_etherbone_record_sender_source_first = 1'd0;
reg           main_basesoc_etherbone_record_sender_source_last = 1'd0;
reg           main_basesoc_etherbone_record_sender_source_param_bca = 1'd0;
wire    [7:0] main_basesoc_etherbone_record_sender_source_param_byte_enable;
reg           main_basesoc_etherbone_record_sender_source_param_cyc = 1'd0;
reg           main_basesoc_etherbone_record_sender_source_param_rca = 1'd0;
reg     [7:0] main_basesoc_etherbone_record_sender_source_param_rcount = 8'd0;
reg           main_basesoc_etherbone_record_sender_source_param_rff = 1'd0;
reg           main_basesoc_etherbone_record_sender_source_param_wca = 1'd0;
reg     [7:0] main_basesoc_etherbone_record_sender_source_param_wcount = 8'd0;
reg           main_basesoc_etherbone_record_sender_source_param_wff = 1'd0;
reg    [31:0] main_basesoc_etherbone_record_sender_source_payload_data = 32'd0;
reg     [3:0] main_basesoc_etherbone_record_sender_source_payload_error = 4'd0;
reg     [3:0] main_basesoc_etherbone_record_sender_source_payload_last_be = 4'd0;
wire          main_basesoc_etherbone_record_sender_source_ready;
reg           main_basesoc_etherbone_record_sender_source_source_first = 1'd0;
wire          main_basesoc_etherbone_record_sender_source_source_last;
wire   [31:0] main_basesoc_etherbone_record_sender_source_source_param_base_addr;
wire    [3:0] main_basesoc_etherbone_record_sender_source_source_param_be;
wire    [7:0] main_basesoc_etherbone_record_sender_source_source_param_count;
wire          main_basesoc_etherbone_record_sender_source_source_param_we;
wire   [31:0] main_basesoc_etherbone_record_sender_source_source_payload_addr;
wire   [31:0] main_basesoc_etherbone_record_sender_source_source_payload_data;
wire    [3:0] main_basesoc_etherbone_record_sender_source_source_payload_last_be;
reg           main_basesoc_etherbone_record_sender_source_source_ready = 1'd0;
wire          main_basesoc_etherbone_record_sender_source_source_valid;
reg           main_basesoc_etherbone_record_sender_source_valid = 1'd0;
reg           main_basesoc_etherbone_record_sink_sink_first = 1'd0;
reg           main_basesoc_etherbone_record_sink_sink_last = 1'd0;
reg     [3:0] main_basesoc_etherbone_record_sink_sink_param_addr_size = 4'd0;
reg    [15:0] main_basesoc_etherbone_record_sink_sink_param_dst_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_record_sink_sink_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_etherbone_record_sink_sink_param_length = 16'd0;
reg           main_basesoc_etherbone_record_sink_sink_param_nr = 1'd0;
reg           main_basesoc_etherbone_record_sink_sink_param_pf = 1'd0;
reg     [3:0] main_basesoc_etherbone_record_sink_sink_param_port_size = 4'd0;
reg           main_basesoc_etherbone_record_sink_sink_param_pr = 1'd0;
reg    [15:0] main_basesoc_etherbone_record_sink_sink_param_src_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_record_sink_sink_payload_data = 32'd0;
reg     [3:0] main_basesoc_etherbone_record_sink_sink_payload_error = 4'd0;
reg     [3:0] main_basesoc_etherbone_record_sink_sink_payload_last_be = 4'd0;
wire          main_basesoc_etherbone_record_sink_sink_ready;
reg           main_basesoc_etherbone_record_sink_sink_valid = 1'd0;
wire          main_basesoc_etherbone_record_source_source_first;
wire          main_basesoc_etherbone_record_source_source_last;
wire    [3:0] main_basesoc_etherbone_record_source_source_param_addr_size;
wire   [15:0] main_basesoc_etherbone_record_source_source_param_dst_port;
reg    [31:0] main_basesoc_etherbone_record_source_source_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_etherbone_record_source_source_param_length = 16'd0;
wire          main_basesoc_etherbone_record_source_source_param_nr;
wire          main_basesoc_etherbone_record_source_source_param_pf;
wire    [3:0] main_basesoc_etherbone_record_source_source_param_port_size;
wire          main_basesoc_etherbone_record_source_source_param_pr;
wire   [15:0] main_basesoc_etherbone_record_source_source_param_src_port;
wire   [31:0] main_basesoc_etherbone_record_source_source_payload_data;
wire    [3:0] main_basesoc_etherbone_record_source_source_payload_error;
wire    [3:0] main_basesoc_etherbone_record_source_source_payload_last_be;
reg           main_basesoc_etherbone_record_source_source_ready = 1'd0;
wire          main_basesoc_etherbone_record_source_source_valid;
reg     [1:0] main_basesoc_etherbone_request = 2'd0;
wire  [121:0] main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_din;
wire  [121:0] main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_dout;
wire          main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_re;
wire          main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_readable;
wire          main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_we;
wire          main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_writable;
wire    [2:0] main_basesoc_etherbone_rx_cdc_cdc_consume_wdomain;
wire          main_basesoc_etherbone_rx_cdc_cdc_fifo_in_first;
wire          main_basesoc_etherbone_rx_cdc_cdc_fifo_in_last;
wire   [15:0] main_basesoc_etherbone_rx_cdc_cdc_fifo_in_param_dst_port;
wire   [31:0] main_basesoc_etherbone_rx_cdc_cdc_fifo_in_param_ip_address;
wire   [15:0] main_basesoc_etherbone_rx_cdc_cdc_fifo_in_param_length;
wire   [15:0] main_basesoc_etherbone_rx_cdc_cdc_fifo_in_param_src_port;
wire   [31:0] main_basesoc_etherbone_rx_cdc_cdc_fifo_in_payload_data;
wire    [3:0] main_basesoc_etherbone_rx_cdc_cdc_fifo_in_payload_error;
wire    [3:0] main_basesoc_etherbone_rx_cdc_cdc_fifo_in_payload_last_be;
wire          main_basesoc_etherbone_rx_cdc_cdc_fifo_out_first;
wire          main_basesoc_etherbone_rx_cdc_cdc_fifo_out_last;
wire   [15:0] main_basesoc_etherbone_rx_cdc_cdc_fifo_out_param_dst_port;
wire   [31:0] main_basesoc_etherbone_rx_cdc_cdc_fifo_out_param_ip_address;
wire   [15:0] main_basesoc_etherbone_rx_cdc_cdc_fifo_out_param_length;
wire   [15:0] main_basesoc_etherbone_rx_cdc_cdc_fifo_out_param_src_port;
wire   [31:0] main_basesoc_etherbone_rx_cdc_cdc_fifo_out_payload_data;
wire    [3:0] main_basesoc_etherbone_rx_cdc_cdc_fifo_out_payload_error;
wire    [3:0] main_basesoc_etherbone_rx_cdc_cdc_fifo_out_payload_last_be;
wire          main_basesoc_etherbone_rx_cdc_cdc_graycounter0_ce;
(* dont_touch = "true" *)
reg     [2:0] main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q = 3'd0;
reg     [2:0] main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_binary = 3'd0;
wire    [2:0] main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_next;
reg     [2:0] main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_next_binary = 3'd0;
wire          main_basesoc_etherbone_rx_cdc_cdc_graycounter1_ce;
(* dont_touch = "true" *)
reg     [2:0] main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q = 3'd0;
reg     [2:0] main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_binary = 3'd0;
wire    [2:0] main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_next;
reg     [2:0] main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] main_basesoc_etherbone_rx_cdc_cdc_produce_rdomain;
wire    [1:0] main_basesoc_etherbone_rx_cdc_cdc_rdport_adr;
wire  [121:0] main_basesoc_etherbone_rx_cdc_cdc_rdport_dat_r;
wire          main_basesoc_etherbone_rx_cdc_cdc_sink_first;
wire          main_basesoc_etherbone_rx_cdc_cdc_sink_last;
wire   [15:0] main_basesoc_etherbone_rx_cdc_cdc_sink_param_dst_port;
wire   [31:0] main_basesoc_etherbone_rx_cdc_cdc_sink_param_ip_address;
wire   [15:0] main_basesoc_etherbone_rx_cdc_cdc_sink_param_length;
wire   [15:0] main_basesoc_etherbone_rx_cdc_cdc_sink_param_src_port;
wire   [31:0] main_basesoc_etherbone_rx_cdc_cdc_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_rx_cdc_cdc_sink_payload_error;
wire    [3:0] main_basesoc_etherbone_rx_cdc_cdc_sink_payload_last_be;
wire          main_basesoc_etherbone_rx_cdc_cdc_sink_ready;
wire          main_basesoc_etherbone_rx_cdc_cdc_sink_valid;
wire          main_basesoc_etherbone_rx_cdc_cdc_source_first;
wire          main_basesoc_etherbone_rx_cdc_cdc_source_last;
wire   [15:0] main_basesoc_etherbone_rx_cdc_cdc_source_param_dst_port;
wire   [31:0] main_basesoc_etherbone_rx_cdc_cdc_source_param_ip_address;
wire   [15:0] main_basesoc_etherbone_rx_cdc_cdc_source_param_length;
wire   [15:0] main_basesoc_etherbone_rx_cdc_cdc_source_param_src_port;
wire   [31:0] main_basesoc_etherbone_rx_cdc_cdc_source_payload_data;
wire    [3:0] main_basesoc_etherbone_rx_cdc_cdc_source_payload_error;
wire    [3:0] main_basesoc_etherbone_rx_cdc_cdc_source_payload_last_be;
wire          main_basesoc_etherbone_rx_cdc_cdc_source_ready;
wire          main_basesoc_etherbone_rx_cdc_cdc_source_valid;
wire    [1:0] main_basesoc_etherbone_rx_cdc_cdc_wrport_adr;
wire  [121:0] main_basesoc_etherbone_rx_cdc_cdc_wrport_dat_r;
wire  [121:0] main_basesoc_etherbone_rx_cdc_cdc_wrport_dat_w;
wire          main_basesoc_etherbone_rx_cdc_cdc_wrport_we;
wire          main_basesoc_etherbone_rx_cdc_sink_sink_first;
wire          main_basesoc_etherbone_rx_cdc_sink_sink_last;
wire   [15:0] main_basesoc_etherbone_rx_cdc_sink_sink_param_dst_port;
wire   [31:0] main_basesoc_etherbone_rx_cdc_sink_sink_param_ip_address;
wire   [15:0] main_basesoc_etherbone_rx_cdc_sink_sink_param_length;
wire   [15:0] main_basesoc_etherbone_rx_cdc_sink_sink_param_src_port;
wire   [31:0] main_basesoc_etherbone_rx_cdc_sink_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_rx_cdc_sink_sink_payload_error;
wire    [3:0] main_basesoc_etherbone_rx_cdc_sink_sink_payload_last_be;
wire          main_basesoc_etherbone_rx_cdc_sink_sink_ready;
wire          main_basesoc_etherbone_rx_cdc_sink_sink_valid;
wire          main_basesoc_etherbone_rx_cdc_source_source_first;
wire          main_basesoc_etherbone_rx_cdc_source_source_last;
wire   [15:0] main_basesoc_etherbone_rx_cdc_source_source_param_dst_port;
wire   [31:0] main_basesoc_etherbone_rx_cdc_source_source_param_ip_address;
wire   [15:0] main_basesoc_etherbone_rx_cdc_source_source_param_length;
wire   [15:0] main_basesoc_etherbone_rx_cdc_source_source_param_src_port;
wire   [31:0] main_basesoc_etherbone_rx_cdc_source_source_payload_data;
wire    [3:0] main_basesoc_etherbone_rx_cdc_source_source_payload_error;
wire    [3:0] main_basesoc_etherbone_rx_cdc_source_source_payload_last_be;
wire          main_basesoc_etherbone_rx_cdc_source_source_ready;
wire          main_basesoc_etherbone_rx_cdc_source_source_valid;
reg     [1:0] main_basesoc_etherbone_rx_converter_converter_demux = 2'd0;
wire          main_basesoc_etherbone_rx_converter_converter_load_part;
wire          main_basesoc_etherbone_rx_converter_converter_sink_first;
wire          main_basesoc_etherbone_rx_converter_converter_sink_last;
wire    [9:0] main_basesoc_etherbone_rx_converter_converter_sink_payload_data;
wire          main_basesoc_etherbone_rx_converter_converter_sink_ready;
wire          main_basesoc_etherbone_rx_converter_converter_sink_valid;
reg           main_basesoc_etherbone_rx_converter_converter_source_first = 1'd0;
reg           main_basesoc_etherbone_rx_converter_converter_source_last = 1'd0;
reg    [39:0] main_basesoc_etherbone_rx_converter_converter_source_payload_data = 40'd0;
reg     [2:0] main_basesoc_etherbone_rx_converter_converter_source_payload_valid_token_count = 3'd0;
wire          main_basesoc_etherbone_rx_converter_converter_source_ready;
wire          main_basesoc_etherbone_rx_converter_converter_source_valid;
reg           main_basesoc_etherbone_rx_converter_converter_strobe_all = 1'd0;
wire          main_basesoc_etherbone_rx_converter_sink_first;
wire          main_basesoc_etherbone_rx_converter_sink_last;
wire   [15:0] main_basesoc_etherbone_rx_converter_sink_param_dst_port;
wire   [31:0] main_basesoc_etherbone_rx_converter_sink_param_ip_address;
wire   [15:0] main_basesoc_etherbone_rx_converter_sink_param_length;
wire   [15:0] main_basesoc_etherbone_rx_converter_sink_param_src_port;
wire    [7:0] main_basesoc_etherbone_rx_converter_sink_payload_data;
wire          main_basesoc_etherbone_rx_converter_sink_payload_error;
wire          main_basesoc_etherbone_rx_converter_sink_payload_last_be;
wire          main_basesoc_etherbone_rx_converter_sink_ready;
wire          main_basesoc_etherbone_rx_converter_sink_valid;
wire          main_basesoc_etherbone_rx_converter_source_first;
wire          main_basesoc_etherbone_rx_converter_source_last;
reg    [15:0] main_basesoc_etherbone_rx_converter_source_param_dst_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_rx_converter_source_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_etherbone_rx_converter_source_param_length = 16'd0;
reg    [15:0] main_basesoc_etherbone_rx_converter_source_param_src_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_rx_converter_source_payload_data = 32'd0;
reg     [3:0] main_basesoc_etherbone_rx_converter_source_payload_error = 4'd0;
reg     [3:0] main_basesoc_etherbone_rx_converter_source_payload_last_be = 4'd0;
wire          main_basesoc_etherbone_rx_converter_source_ready;
wire          main_basesoc_etherbone_rx_converter_source_source_first;
wire          main_basesoc_etherbone_rx_converter_source_source_last;
wire   [39:0] main_basesoc_etherbone_rx_converter_source_source_payload_data;
wire          main_basesoc_etherbone_rx_converter_source_source_ready;
wire          main_basesoc_etherbone_rx_converter_source_source_valid;
wire          main_basesoc_etherbone_rx_converter_source_valid;
reg           main_basesoc_etherbone_rx_depacketizer_count = 1'd0;
reg           main_basesoc_etherbone_rx_depacketizer_count_liteethetherbone_fsm0_next_value2 = 1'd0;
reg           main_basesoc_etherbone_rx_depacketizer_count_liteethetherbone_fsm0_next_value_ce2 = 1'd0;
reg     [3:0] main_basesoc_etherbone_rx_depacketizer_delayed_last_be = 4'd0;
reg     [3:0] main_basesoc_etherbone_rx_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value1 = 4'd0;
reg           main_basesoc_etherbone_rx_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce1 = 1'd0;
reg           main_basesoc_etherbone_rx_depacketizer_fsm_from_idle = 1'd0;
reg           main_basesoc_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value3 = 1'd0;
reg           main_basesoc_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce3 = 1'd0;
wire   [63:0] main_basesoc_etherbone_rx_depacketizer_header;
wire          main_basesoc_etherbone_rx_depacketizer_is_in_copy;
reg           main_basesoc_etherbone_rx_depacketizer_is_ongoing0 = 1'd0;
reg           main_basesoc_etherbone_rx_depacketizer_is_ongoing1 = 1'd0;
reg           main_basesoc_etherbone_rx_depacketizer_is_ongoing2 = 1'd0;
reg           main_basesoc_etherbone_rx_depacketizer_is_ongoing3 = 1'd0;
wire    [3:0] main_basesoc_etherbone_rx_depacketizer_new_last_be;
reg           main_basesoc_etherbone_rx_depacketizer_sink_d_last = 1'd0;
wire          main_basesoc_etherbone_rx_depacketizer_sink_first;
wire          main_basesoc_etherbone_rx_depacketizer_sink_last;
wire   [15:0] main_basesoc_etherbone_rx_depacketizer_sink_param_dst_port;
wire   [31:0] main_basesoc_etherbone_rx_depacketizer_sink_param_ip_address;
wire   [15:0] main_basesoc_etherbone_rx_depacketizer_sink_param_length;
wire   [15:0] main_basesoc_etherbone_rx_depacketizer_sink_param_src_port;
wire   [31:0] main_basesoc_etherbone_rx_depacketizer_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_rx_depacketizer_sink_payload_error;
wire    [3:0] main_basesoc_etherbone_rx_depacketizer_sink_payload_last_be;
reg           main_basesoc_etherbone_rx_depacketizer_sink_ready = 1'd0;
wire          main_basesoc_etherbone_rx_depacketizer_sink_valid;
reg           main_basesoc_etherbone_rx_depacketizer_source_last = 1'd0;
reg           main_basesoc_etherbone_rx_depacketizer_source_last_a = 1'd0;
reg           main_basesoc_etherbone_rx_depacketizer_source_last_b = 1'd0;
reg           main_basesoc_etherbone_rx_depacketizer_source_last_s = 1'd0;
wire    [3:0] main_basesoc_etherbone_rx_depacketizer_source_param_addr_size;
wire   [15:0] main_basesoc_etherbone_rx_depacketizer_source_param_magic;
wire          main_basesoc_etherbone_rx_depacketizer_source_param_nr;
wire          main_basesoc_etherbone_rx_depacketizer_source_param_pf;
wire    [3:0] main_basesoc_etherbone_rx_depacketizer_source_param_port_size;
wire          main_basesoc_etherbone_rx_depacketizer_source_param_pr;
wire    [3:0] main_basesoc_etherbone_rx_depacketizer_source_param_version;
reg    [31:0] main_basesoc_etherbone_rx_depacketizer_source_payload_data = 32'd0;
wire    [3:0] main_basesoc_etherbone_rx_depacketizer_source_payload_error;
reg     [3:0] main_basesoc_etherbone_rx_depacketizer_source_payload_last_be = 4'd0;
reg           main_basesoc_etherbone_rx_depacketizer_source_ready = 1'd0;
reg           main_basesoc_etherbone_rx_depacketizer_source_valid = 1'd0;
reg    [63:0] main_basesoc_etherbone_rx_depacketizer_sr = 64'd0;
reg           main_basesoc_etherbone_rx_depacketizer_sr_shift = 1'd0;
reg           main_basesoc_etherbone_rx_depacketizer_sr_shift_leftover = 1'd0;
reg           main_basesoc_etherbone_rx_depacketizer_was_in_copy = 1'd0;
wire          main_basesoc_etherbone_rx_sink_sink_first;
wire          main_basesoc_etherbone_rx_sink_sink_last;
wire   [15:0] main_basesoc_etherbone_rx_sink_sink_param_dst_port;
wire   [31:0] main_basesoc_etherbone_rx_sink_sink_param_ip_address;
wire   [15:0] main_basesoc_etherbone_rx_sink_sink_param_length;
wire   [15:0] main_basesoc_etherbone_rx_sink_sink_param_src_port;
wire   [31:0] main_basesoc_etherbone_rx_sink_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_rx_sink_sink_payload_error;
wire    [3:0] main_basesoc_etherbone_rx_sink_sink_payload_last_be;
wire          main_basesoc_etherbone_rx_sink_sink_ready;
wire          main_basesoc_etherbone_rx_sink_sink_valid;
reg           main_basesoc_etherbone_rx_source_source_first = 1'd0;
wire          main_basesoc_etherbone_rx_source_source_last;
reg     [3:0] main_basesoc_etherbone_rx_source_source_param_addr_size = 4'd0;
wire   [15:0] main_basesoc_etherbone_rx_source_source_param_dst_port;
wire   [31:0] main_basesoc_etherbone_rx_source_source_param_ip_address;
wire   [15:0] main_basesoc_etherbone_rx_source_source_param_length;
wire          main_basesoc_etherbone_rx_source_source_param_nr;
wire          main_basesoc_etherbone_rx_source_source_param_pf;
reg     [3:0] main_basesoc_etherbone_rx_source_source_param_port_size = 4'd0;
wire          main_basesoc_etherbone_rx_source_source_param_pr;
wire   [15:0] main_basesoc_etherbone_rx_source_source_param_src_port;
wire   [31:0] main_basesoc_etherbone_rx_source_source_payload_data;
reg     [3:0] main_basesoc_etherbone_rx_source_source_payload_error = 4'd0;
wire    [3:0] main_basesoc_etherbone_rx_source_source_payload_last_be;
reg           main_basesoc_etherbone_rx_source_source_ready = 1'd0;
reg           main_basesoc_etherbone_rx_source_source_valid = 1'd0;
reg           main_basesoc_etherbone_status0_first = 1'd1;
wire          main_basesoc_etherbone_status0_last;
wire          main_basesoc_etherbone_status0_ongoing0;
reg           main_basesoc_etherbone_status0_ongoing1 = 1'd0;
reg           main_basesoc_etherbone_status1_first = 1'd1;
wire          main_basesoc_etherbone_status1_last;
wire          main_basesoc_etherbone_status1_ongoing0;
reg           main_basesoc_etherbone_status1_ongoing1 = 1'd0;
wire  [121:0] main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_din;
wire  [121:0] main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_dout;
wire          main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_re;
wire          main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_readable;
wire          main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_we;
wire          main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_writable;
wire    [2:0] main_basesoc_etherbone_tx_cdc_cdc_consume_wdomain;
wire          main_basesoc_etherbone_tx_cdc_cdc_fifo_in_first;
wire          main_basesoc_etherbone_tx_cdc_cdc_fifo_in_last;
wire   [15:0] main_basesoc_etherbone_tx_cdc_cdc_fifo_in_param_dst_port;
wire   [31:0] main_basesoc_etherbone_tx_cdc_cdc_fifo_in_param_ip_address;
wire   [15:0] main_basesoc_etherbone_tx_cdc_cdc_fifo_in_param_length;
wire   [15:0] main_basesoc_etherbone_tx_cdc_cdc_fifo_in_param_src_port;
wire   [31:0] main_basesoc_etherbone_tx_cdc_cdc_fifo_in_payload_data;
wire    [3:0] main_basesoc_etherbone_tx_cdc_cdc_fifo_in_payload_error;
wire    [3:0] main_basesoc_etherbone_tx_cdc_cdc_fifo_in_payload_last_be;
wire          main_basesoc_etherbone_tx_cdc_cdc_fifo_out_first;
wire          main_basesoc_etherbone_tx_cdc_cdc_fifo_out_last;
wire   [15:0] main_basesoc_etherbone_tx_cdc_cdc_fifo_out_param_dst_port;
wire   [31:0] main_basesoc_etherbone_tx_cdc_cdc_fifo_out_param_ip_address;
wire   [15:0] main_basesoc_etherbone_tx_cdc_cdc_fifo_out_param_length;
wire   [15:0] main_basesoc_etherbone_tx_cdc_cdc_fifo_out_param_src_port;
wire   [31:0] main_basesoc_etherbone_tx_cdc_cdc_fifo_out_payload_data;
wire    [3:0] main_basesoc_etherbone_tx_cdc_cdc_fifo_out_payload_error;
wire    [3:0] main_basesoc_etherbone_tx_cdc_cdc_fifo_out_payload_last_be;
wire          main_basesoc_etherbone_tx_cdc_cdc_graycounter0_ce;
(* dont_touch = "true" *)
reg     [2:0] main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q = 3'd0;
reg     [2:0] main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_binary = 3'd0;
wire    [2:0] main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_next;
reg     [2:0] main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_next_binary = 3'd0;
wire          main_basesoc_etherbone_tx_cdc_cdc_graycounter1_ce;
(* dont_touch = "true" *)
reg     [2:0] main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q = 3'd0;
reg     [2:0] main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_binary = 3'd0;
wire    [2:0] main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_next;
reg     [2:0] main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] main_basesoc_etherbone_tx_cdc_cdc_produce_rdomain;
wire    [1:0] main_basesoc_etherbone_tx_cdc_cdc_rdport_adr;
wire  [121:0] main_basesoc_etherbone_tx_cdc_cdc_rdport_dat_r;
wire          main_basesoc_etherbone_tx_cdc_cdc_sink_first;
wire          main_basesoc_etherbone_tx_cdc_cdc_sink_last;
wire   [15:0] main_basesoc_etherbone_tx_cdc_cdc_sink_param_dst_port;
wire   [31:0] main_basesoc_etherbone_tx_cdc_cdc_sink_param_ip_address;
wire   [15:0] main_basesoc_etherbone_tx_cdc_cdc_sink_param_length;
wire   [15:0] main_basesoc_etherbone_tx_cdc_cdc_sink_param_src_port;
wire   [31:0] main_basesoc_etherbone_tx_cdc_cdc_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_tx_cdc_cdc_sink_payload_error;
wire    [3:0] main_basesoc_etherbone_tx_cdc_cdc_sink_payload_last_be;
wire          main_basesoc_etherbone_tx_cdc_cdc_sink_ready;
wire          main_basesoc_etherbone_tx_cdc_cdc_sink_valid;
wire          main_basesoc_etherbone_tx_cdc_cdc_source_first;
wire          main_basesoc_etherbone_tx_cdc_cdc_source_last;
wire   [15:0] main_basesoc_etherbone_tx_cdc_cdc_source_param_dst_port;
wire   [31:0] main_basesoc_etherbone_tx_cdc_cdc_source_param_ip_address;
wire   [15:0] main_basesoc_etherbone_tx_cdc_cdc_source_param_length;
wire   [15:0] main_basesoc_etherbone_tx_cdc_cdc_source_param_src_port;
wire   [31:0] main_basesoc_etherbone_tx_cdc_cdc_source_payload_data;
wire    [3:0] main_basesoc_etherbone_tx_cdc_cdc_source_payload_error;
wire    [3:0] main_basesoc_etherbone_tx_cdc_cdc_source_payload_last_be;
wire          main_basesoc_etherbone_tx_cdc_cdc_source_ready;
wire          main_basesoc_etherbone_tx_cdc_cdc_source_valid;
wire    [1:0] main_basesoc_etherbone_tx_cdc_cdc_wrport_adr;
wire  [121:0] main_basesoc_etherbone_tx_cdc_cdc_wrport_dat_r;
wire  [121:0] main_basesoc_etherbone_tx_cdc_cdc_wrport_dat_w;
wire          main_basesoc_etherbone_tx_cdc_cdc_wrport_we;
wire          main_basesoc_etherbone_tx_cdc_sink_sink_first;
wire          main_basesoc_etherbone_tx_cdc_sink_sink_last;
wire   [15:0] main_basesoc_etherbone_tx_cdc_sink_sink_param_dst_port;
wire   [31:0] main_basesoc_etherbone_tx_cdc_sink_sink_param_ip_address;
wire   [15:0] main_basesoc_etherbone_tx_cdc_sink_sink_param_length;
wire   [15:0] main_basesoc_etherbone_tx_cdc_sink_sink_param_src_port;
wire   [31:0] main_basesoc_etherbone_tx_cdc_sink_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_tx_cdc_sink_sink_payload_error;
wire    [3:0] main_basesoc_etherbone_tx_cdc_sink_sink_payload_last_be;
wire          main_basesoc_etherbone_tx_cdc_sink_sink_ready;
wire          main_basesoc_etherbone_tx_cdc_sink_sink_valid;
wire          main_basesoc_etherbone_tx_cdc_source_source_first;
wire          main_basesoc_etherbone_tx_cdc_source_source_last;
wire   [15:0] main_basesoc_etherbone_tx_cdc_source_source_param_dst_port;
wire   [31:0] main_basesoc_etherbone_tx_cdc_source_source_param_ip_address;
wire   [15:0] main_basesoc_etherbone_tx_cdc_source_source_param_length;
wire   [15:0] main_basesoc_etherbone_tx_cdc_source_source_param_src_port;
wire   [31:0] main_basesoc_etherbone_tx_cdc_source_source_payload_data;
wire    [3:0] main_basesoc_etherbone_tx_cdc_source_source_payload_error;
wire    [3:0] main_basesoc_etherbone_tx_cdc_source_source_payload_last_be;
wire          main_basesoc_etherbone_tx_cdc_source_source_ready;
wire          main_basesoc_etherbone_tx_cdc_source_source_valid;
wire          main_basesoc_etherbone_tx_converter_converter_first;
wire          main_basesoc_etherbone_tx_converter_converter_last;
reg     [1:0] main_basesoc_etherbone_tx_converter_converter_mux = 2'd0;
wire          main_basesoc_etherbone_tx_converter_converter_sink_first;
wire          main_basesoc_etherbone_tx_converter_converter_sink_last;
reg    [39:0] main_basesoc_etherbone_tx_converter_converter_sink_payload_data = 40'd0;
wire          main_basesoc_etherbone_tx_converter_converter_sink_ready;
wire          main_basesoc_etherbone_tx_converter_converter_sink_valid;
wire          main_basesoc_etherbone_tx_converter_converter_source_first;
wire          main_basesoc_etherbone_tx_converter_converter_source_last;
reg     [9:0] main_basesoc_etherbone_tx_converter_converter_source_payload_data = 10'd0;
wire          main_basesoc_etherbone_tx_converter_converter_source_payload_valid_token_count;
wire          main_basesoc_etherbone_tx_converter_converter_source_ready;
wire          main_basesoc_etherbone_tx_converter_converter_source_valid;
wire          main_basesoc_etherbone_tx_converter_sink_first;
wire          main_basesoc_etherbone_tx_converter_sink_last;
wire   [15:0] main_basesoc_etherbone_tx_converter_sink_param_dst_port;
wire   [31:0] main_basesoc_etherbone_tx_converter_sink_param_ip_address;
wire   [15:0] main_basesoc_etherbone_tx_converter_sink_param_length;
wire   [15:0] main_basesoc_etherbone_tx_converter_sink_param_src_port;
wire   [31:0] main_basesoc_etherbone_tx_converter_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_tx_converter_sink_payload_error;
wire    [3:0] main_basesoc_etherbone_tx_converter_sink_payload_last_be;
wire          main_basesoc_etherbone_tx_converter_sink_ready;
wire          main_basesoc_etherbone_tx_converter_sink_valid;
wire          main_basesoc_etherbone_tx_converter_source_first;
wire          main_basesoc_etherbone_tx_converter_source_last;
wire   [15:0] main_basesoc_etherbone_tx_converter_source_param_dst_port;
wire   [31:0] main_basesoc_etherbone_tx_converter_source_param_ip_address;
wire   [15:0] main_basesoc_etherbone_tx_converter_source_param_length;
wire   [15:0] main_basesoc_etherbone_tx_converter_source_param_src_port;
wire    [7:0] main_basesoc_etherbone_tx_converter_source_payload_data;
wire          main_basesoc_etherbone_tx_converter_source_payload_error;
wire          main_basesoc_etherbone_tx_converter_source_payload_last_be;
wire          main_basesoc_etherbone_tx_converter_source_ready;
wire          main_basesoc_etherbone_tx_converter_source_source_first;
wire          main_basesoc_etherbone_tx_converter_source_source_last;
wire    [9:0] main_basesoc_etherbone_tx_converter_source_source_payload_data;
wire          main_basesoc_etherbone_tx_converter_source_source_ready;
wire          main_basesoc_etherbone_tx_converter_source_source_valid;
wire          main_basesoc_etherbone_tx_converter_source_valid;
reg           main_basesoc_etherbone_tx_packetizer_count = 1'd0;
reg           main_basesoc_etherbone_tx_packetizer_count_liteethetherbone_fsm0_next_value0 = 1'd0;
reg           main_basesoc_etherbone_tx_packetizer_count_liteethetherbone_fsm0_next_value_ce0 = 1'd0;
reg     [3:0] main_basesoc_etherbone_tx_packetizer_delayed_last_be = 4'd0;
reg     [3:0] main_basesoc_etherbone_tx_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value0 = 4'd0;
reg           main_basesoc_etherbone_tx_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce0 = 1'd0;
reg           main_basesoc_etherbone_tx_packetizer_fsm_from_idle = 1'd0;
reg           main_basesoc_etherbone_tx_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value1 = 1'd0;
reg           main_basesoc_etherbone_tx_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce1 = 1'd0;
reg    [63:0] main_basesoc_etherbone_tx_packetizer_header = 64'd0;
wire          main_basesoc_etherbone_tx_packetizer_in_data_copy;
reg           main_basesoc_etherbone_tx_packetizer_is_ongoing0 = 1'd0;
reg           main_basesoc_etherbone_tx_packetizer_is_ongoing1 = 1'd0;
reg           main_basesoc_etherbone_tx_packetizer_is_ongoing2 = 1'd0;
wire    [3:0] main_basesoc_etherbone_tx_packetizer_new_last_be;
wire          main_basesoc_etherbone_tx_packetizer_sink_last;
wire    [3:0] main_basesoc_etherbone_tx_packetizer_sink_param_addr_size;
wire   [15:0] main_basesoc_etherbone_tx_packetizer_sink_param_magic;
wire          main_basesoc_etherbone_tx_packetizer_sink_param_nr;
wire          main_basesoc_etherbone_tx_packetizer_sink_param_pf;
wire    [3:0] main_basesoc_etherbone_tx_packetizer_sink_param_port_size;
wire          main_basesoc_etherbone_tx_packetizer_sink_param_pr;
wire    [3:0] main_basesoc_etherbone_tx_packetizer_sink_param_version;
wire   [31:0] main_basesoc_etherbone_tx_packetizer_sink_payload_data;
reg     [3:0] main_basesoc_etherbone_tx_packetizer_sink_payload_error = 4'd0;
wire    [3:0] main_basesoc_etherbone_tx_packetizer_sink_payload_last_be;
reg           main_basesoc_etherbone_tx_packetizer_sink_ready = 1'd0;
wire          main_basesoc_etherbone_tx_packetizer_sink_valid;
reg           main_basesoc_etherbone_tx_packetizer_source_first = 1'd0;
reg           main_basesoc_etherbone_tx_packetizer_source_last = 1'd0;
reg           main_basesoc_etherbone_tx_packetizer_source_last_a = 1'd0;
reg           main_basesoc_etherbone_tx_packetizer_source_last_b = 1'd0;
reg           main_basesoc_etherbone_tx_packetizer_source_last_s = 1'd0;
reg    [15:0] main_basesoc_etherbone_tx_packetizer_source_param_dst_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_tx_packetizer_source_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_etherbone_tx_packetizer_source_param_length = 16'd0;
reg    [15:0] main_basesoc_etherbone_tx_packetizer_source_param_src_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_tx_packetizer_source_payload_data = 32'd0;
wire    [3:0] main_basesoc_etherbone_tx_packetizer_source_payload_error;
reg     [3:0] main_basesoc_etherbone_tx_packetizer_source_payload_last_be = 4'd0;
reg           main_basesoc_etherbone_tx_packetizer_source_ready = 1'd0;
reg           main_basesoc_etherbone_tx_packetizer_source_valid = 1'd0;
reg    [63:0] main_basesoc_etherbone_tx_packetizer_sr = 64'd0;
reg           main_basesoc_etherbone_tx_packetizer_sr_load = 1'd0;
reg           main_basesoc_etherbone_tx_packetizer_sr_shift = 1'd0;
reg           main_basesoc_etherbone_tx_sink_sink_first = 1'd0;
reg           main_basesoc_etherbone_tx_sink_sink_last = 1'd0;
reg     [3:0] main_basesoc_etherbone_tx_sink_sink_param_addr_size = 4'd0;
reg    [15:0] main_basesoc_etherbone_tx_sink_sink_param_dst_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_tx_sink_sink_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_etherbone_tx_sink_sink_param_length = 16'd0;
reg           main_basesoc_etherbone_tx_sink_sink_param_nr = 1'd0;
reg           main_basesoc_etherbone_tx_sink_sink_param_pf = 1'd0;
reg     [3:0] main_basesoc_etherbone_tx_sink_sink_param_port_size = 4'd0;
reg           main_basesoc_etherbone_tx_sink_sink_param_pr = 1'd0;
reg    [15:0] main_basesoc_etherbone_tx_sink_sink_param_src_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_tx_sink_sink_payload_data = 32'd0;
reg     [3:0] main_basesoc_etherbone_tx_sink_sink_payload_error = 4'd0;
reg     [3:0] main_basesoc_etherbone_tx_sink_sink_payload_last_be = 4'd0;
wire          main_basesoc_etherbone_tx_sink_sink_ready;
reg           main_basesoc_etherbone_tx_sink_sink_valid = 1'd0;
reg           main_basesoc_etherbone_tx_source_source_first = 1'd0;
reg           main_basesoc_etherbone_tx_source_source_last = 1'd0;
reg    [15:0] main_basesoc_etherbone_tx_source_source_param_dst_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_tx_source_source_param_ip_address = 32'd0;
reg    [15:0] main_basesoc_etherbone_tx_source_source_param_length = 16'd0;
reg    [15:0] main_basesoc_etherbone_tx_source_source_param_src_port = 16'd0;
reg    [31:0] main_basesoc_etherbone_tx_source_source_payload_data = 32'd0;
reg     [3:0] main_basesoc_etherbone_tx_source_source_payload_error = 4'd0;
reg     [3:0] main_basesoc_etherbone_tx_source_source_payload_last_be = 4'd0;
wire          main_basesoc_etherbone_tx_source_source_ready;
reg           main_basesoc_etherbone_tx_source_source_valid = 1'd0;
wire          main_basesoc_etherbone_user_port_sink_first;
wire          main_basesoc_etherbone_user_port_sink_last;
wire   [15:0] main_basesoc_etherbone_user_port_sink_param_dst_port;
wire   [31:0] main_basesoc_etherbone_user_port_sink_param_ip_address;
wire   [15:0] main_basesoc_etherbone_user_port_sink_param_length;
wire   [15:0] main_basesoc_etherbone_user_port_sink_param_src_port;
wire   [31:0] main_basesoc_etherbone_user_port_sink_payload_data;
wire    [3:0] main_basesoc_etherbone_user_port_sink_payload_error;
wire    [3:0] main_basesoc_etherbone_user_port_sink_payload_last_be;
wire          main_basesoc_etherbone_user_port_sink_ready;
wire          main_basesoc_etherbone_user_port_sink_valid;
wire          main_basesoc_etherbone_user_port_source_first;
wire          main_basesoc_etherbone_user_port_source_last;
wire   [15:0] main_basesoc_etherbone_user_port_source_param_dst_port;
wire   [31:0] main_basesoc_etherbone_user_port_source_param_ip_address;
wire   [15:0] main_basesoc_etherbone_user_port_source_param_length;
wire   [15:0] main_basesoc_etherbone_user_port_source_param_src_port;
wire   [31:0] main_basesoc_etherbone_user_port_source_payload_data;
wire    [3:0] main_basesoc_etherbone_user_port_source_payload_error;
wire    [3:0] main_basesoc_etherbone_user_port_source_payload_last_be;
wire          main_basesoc_etherbone_user_port_source_ready;
wire          main_basesoc_etherbone_user_port_source_valid;
reg           main_basesoc_interface_ack = 1'd0;
wire   [26:0] main_basesoc_interface_adr;
reg           main_basesoc_interface_cyc = 1'd0;
reg   [255:0] main_basesoc_interface_dat_r = 256'd0;
wire  [255:0] main_basesoc_interface_dat_w;
wire   [31:0] main_basesoc_interface_sel;
reg           main_basesoc_interface_stb = 1'd0;
reg           main_basesoc_interface_we = 1'd0;
reg           main_basesoc_is_ongoing = 1'd0;
wire          main_basesoc_port_cmd_last;
wire   [24:0] main_basesoc_port_cmd_payload_addr;
wire          main_basesoc_port_cmd_payload_we;
wire          main_basesoc_port_cmd_ready;
reg           main_basesoc_port_cmd_valid = 1'd0;
wire          main_basesoc_port_flush;
wire  [255:0] main_basesoc_port_rdata_payload_data;
wire          main_basesoc_port_rdata_ready;
wire          main_basesoc_port_rdata_valid;
wire  [255:0] main_basesoc_port_wdata_payload_data;
wire   [31:0] main_basesoc_port_wdata_payload_we;
wire          main_basesoc_port_wdata_ready;
reg           main_basesoc_port_wdata_valid = 1'd0;
reg           main_basesoc_sdram_bankmachine0_auto_precharge = 1'd0;
reg    [14:0] main_basesoc_sdram_bankmachine0_cmd_payload_a = 15'd0;
wire    [2:0] main_basesoc_sdram_bankmachine0_cmd_payload_ba;
reg           main_basesoc_sdram_bankmachine0_cmd_payload_cas = 1'd0;
reg           main_basesoc_sdram_bankmachine0_cmd_payload_is_cmd = 1'd0;
reg           main_basesoc_sdram_bankmachine0_cmd_payload_is_read = 1'd0;
reg           main_basesoc_sdram_bankmachine0_cmd_payload_is_write = 1'd0;
reg           main_basesoc_sdram_bankmachine0_cmd_payload_ras = 1'd0;
reg           main_basesoc_sdram_bankmachine0_cmd_payload_we = 1'd0;
reg           main_basesoc_sdram_bankmachine0_cmd_ready = 1'd0;
reg           main_basesoc_sdram_bankmachine0_cmd_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine0_consume = 3'd0;
wire          main_basesoc_sdram_bankmachine0_do_read;
wire          main_basesoc_sdram_bankmachine0_fifo_in_first;
wire          main_basesoc_sdram_bankmachine0_fifo_in_last;
wire   [21:0] main_basesoc_sdram_bankmachine0_fifo_in_payload_addr;
wire          main_basesoc_sdram_bankmachine0_fifo_in_payload_we;
wire          main_basesoc_sdram_bankmachine0_fifo_out_first;
wire          main_basesoc_sdram_bankmachine0_fifo_out_last;
wire   [21:0] main_basesoc_sdram_bankmachine0_fifo_out_payload_addr;
wire          main_basesoc_sdram_bankmachine0_fifo_out_payload_we;
reg     [3:0] main_basesoc_sdram_bankmachine0_level = 4'd0;
wire          main_basesoc_sdram_bankmachine0_pipe_valid_sink_first;
wire          main_basesoc_sdram_bankmachine0_pipe_valid_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine0_pipe_valid_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine0_pipe_valid_sink_payload_we;
wire          main_basesoc_sdram_bankmachine0_pipe_valid_sink_ready;
wire          main_basesoc_sdram_bankmachine0_pipe_valid_sink_valid;
reg           main_basesoc_sdram_bankmachine0_pipe_valid_source_first = 1'd0;
reg           main_basesoc_sdram_bankmachine0_pipe_valid_source_last = 1'd0;
reg    [21:0] main_basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr = 22'd0;
reg           main_basesoc_sdram_bankmachine0_pipe_valid_source_payload_we = 1'd0;
wire          main_basesoc_sdram_bankmachine0_pipe_valid_source_ready;
reg           main_basesoc_sdram_bankmachine0_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine0_produce = 3'd0;
wire    [2:0] main_basesoc_sdram_bankmachine0_rdport_adr;
wire   [24:0] main_basesoc_sdram_bankmachine0_rdport_dat_r;
reg           main_basesoc_sdram_bankmachine0_refresh_gnt = 1'd0;
wire          main_basesoc_sdram_bankmachine0_refresh_req;
reg           main_basesoc_sdram_bankmachine0_replace = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine0_req_addr;
wire          main_basesoc_sdram_bankmachine0_req_lock;
reg           main_basesoc_sdram_bankmachine0_req_rdata_valid = 1'd0;
wire          main_basesoc_sdram_bankmachine0_req_ready;
wire          main_basesoc_sdram_bankmachine0_req_valid;
reg           main_basesoc_sdram_bankmachine0_req_wdata_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine0_req_we;
reg    [14:0] main_basesoc_sdram_bankmachine0_row = 15'd0;
reg           main_basesoc_sdram_bankmachine0_row_close = 1'd0;
reg           main_basesoc_sdram_bankmachine0_row_col_n_addr_sel = 1'd0;
wire          main_basesoc_sdram_bankmachine0_row_hit;
reg           main_basesoc_sdram_bankmachine0_row_open = 1'd0;
reg           main_basesoc_sdram_bankmachine0_row_opened = 1'd0;
reg           main_basesoc_sdram_bankmachine0_sink_first = 1'd0;
reg           main_basesoc_sdram_bankmachine0_sink_last = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine0_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine0_sink_payload_we;
wire          main_basesoc_sdram_bankmachine0_sink_ready;
wire          main_basesoc_sdram_bankmachine0_sink_sink_first;
wire          main_basesoc_sdram_bankmachine0_sink_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine0_sink_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine0_sink_sink_payload_we;
wire          main_basesoc_sdram_bankmachine0_sink_sink_ready;
wire          main_basesoc_sdram_bankmachine0_sink_sink_valid;
wire          main_basesoc_sdram_bankmachine0_sink_valid;
wire          main_basesoc_sdram_bankmachine0_source_first;
wire          main_basesoc_sdram_bankmachine0_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine0_source_payload_addr;
wire          main_basesoc_sdram_bankmachine0_source_payload_we;
wire          main_basesoc_sdram_bankmachine0_source_ready;
wire          main_basesoc_sdram_bankmachine0_source_source_first;
wire          main_basesoc_sdram_bankmachine0_source_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine0_source_source_payload_addr;
wire          main_basesoc_sdram_bankmachine0_source_source_payload_we;
wire          main_basesoc_sdram_bankmachine0_source_source_ready;
wire          main_basesoc_sdram_bankmachine0_source_source_valid;
wire          main_basesoc_sdram_bankmachine0_source_valid;
wire   [24:0] main_basesoc_sdram_bankmachine0_syncfifo0_din;
wire   [24:0] main_basesoc_sdram_bankmachine0_syncfifo0_dout;
wire          main_basesoc_sdram_bankmachine0_syncfifo0_re;
wire          main_basesoc_sdram_bankmachine0_syncfifo0_readable;
wire          main_basesoc_sdram_bankmachine0_syncfifo0_we;
wire          main_basesoc_sdram_bankmachine0_syncfifo0_writable;
reg     [1:0] main_basesoc_sdram_bankmachine0_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine0_trascon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine0_trascon_valid;
reg     [1:0] main_basesoc_sdram_bankmachine0_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine0_trccon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine0_trccon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine0_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine0_twtpcon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine0_twtpcon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine0_wrport_adr = 3'd0;
wire   [24:0] main_basesoc_sdram_bankmachine0_wrport_dat_r;
wire   [24:0] main_basesoc_sdram_bankmachine0_wrport_dat_w;
wire          main_basesoc_sdram_bankmachine0_wrport_we;
reg           main_basesoc_sdram_bankmachine1_auto_precharge = 1'd0;
reg    [14:0] main_basesoc_sdram_bankmachine1_cmd_payload_a = 15'd0;
wire    [2:0] main_basesoc_sdram_bankmachine1_cmd_payload_ba;
reg           main_basesoc_sdram_bankmachine1_cmd_payload_cas = 1'd0;
reg           main_basesoc_sdram_bankmachine1_cmd_payload_is_cmd = 1'd0;
reg           main_basesoc_sdram_bankmachine1_cmd_payload_is_read = 1'd0;
reg           main_basesoc_sdram_bankmachine1_cmd_payload_is_write = 1'd0;
reg           main_basesoc_sdram_bankmachine1_cmd_payload_ras = 1'd0;
reg           main_basesoc_sdram_bankmachine1_cmd_payload_we = 1'd0;
reg           main_basesoc_sdram_bankmachine1_cmd_ready = 1'd0;
reg           main_basesoc_sdram_bankmachine1_cmd_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine1_consume = 3'd0;
wire          main_basesoc_sdram_bankmachine1_do_read;
wire          main_basesoc_sdram_bankmachine1_fifo_in_first;
wire          main_basesoc_sdram_bankmachine1_fifo_in_last;
wire   [21:0] main_basesoc_sdram_bankmachine1_fifo_in_payload_addr;
wire          main_basesoc_sdram_bankmachine1_fifo_in_payload_we;
wire          main_basesoc_sdram_bankmachine1_fifo_out_first;
wire          main_basesoc_sdram_bankmachine1_fifo_out_last;
wire   [21:0] main_basesoc_sdram_bankmachine1_fifo_out_payload_addr;
wire          main_basesoc_sdram_bankmachine1_fifo_out_payload_we;
reg     [3:0] main_basesoc_sdram_bankmachine1_level = 4'd0;
wire          main_basesoc_sdram_bankmachine1_pipe_valid_sink_first;
wire          main_basesoc_sdram_bankmachine1_pipe_valid_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine1_pipe_valid_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine1_pipe_valid_sink_payload_we;
wire          main_basesoc_sdram_bankmachine1_pipe_valid_sink_ready;
wire          main_basesoc_sdram_bankmachine1_pipe_valid_sink_valid;
reg           main_basesoc_sdram_bankmachine1_pipe_valid_source_first = 1'd0;
reg           main_basesoc_sdram_bankmachine1_pipe_valid_source_last = 1'd0;
reg    [21:0] main_basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr = 22'd0;
reg           main_basesoc_sdram_bankmachine1_pipe_valid_source_payload_we = 1'd0;
wire          main_basesoc_sdram_bankmachine1_pipe_valid_source_ready;
reg           main_basesoc_sdram_bankmachine1_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine1_produce = 3'd0;
wire    [2:0] main_basesoc_sdram_bankmachine1_rdport_adr;
wire   [24:0] main_basesoc_sdram_bankmachine1_rdport_dat_r;
reg           main_basesoc_sdram_bankmachine1_refresh_gnt = 1'd0;
wire          main_basesoc_sdram_bankmachine1_refresh_req;
reg           main_basesoc_sdram_bankmachine1_replace = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine1_req_addr;
wire          main_basesoc_sdram_bankmachine1_req_lock;
reg           main_basesoc_sdram_bankmachine1_req_rdata_valid = 1'd0;
wire          main_basesoc_sdram_bankmachine1_req_ready;
wire          main_basesoc_sdram_bankmachine1_req_valid;
reg           main_basesoc_sdram_bankmachine1_req_wdata_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine1_req_we;
reg    [14:0] main_basesoc_sdram_bankmachine1_row = 15'd0;
reg           main_basesoc_sdram_bankmachine1_row_close = 1'd0;
reg           main_basesoc_sdram_bankmachine1_row_col_n_addr_sel = 1'd0;
wire          main_basesoc_sdram_bankmachine1_row_hit;
reg           main_basesoc_sdram_bankmachine1_row_open = 1'd0;
reg           main_basesoc_sdram_bankmachine1_row_opened = 1'd0;
reg           main_basesoc_sdram_bankmachine1_sink_first = 1'd0;
reg           main_basesoc_sdram_bankmachine1_sink_last = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine1_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine1_sink_payload_we;
wire          main_basesoc_sdram_bankmachine1_sink_ready;
wire          main_basesoc_sdram_bankmachine1_sink_sink_first;
wire          main_basesoc_sdram_bankmachine1_sink_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine1_sink_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine1_sink_sink_payload_we;
wire          main_basesoc_sdram_bankmachine1_sink_sink_ready;
wire          main_basesoc_sdram_bankmachine1_sink_sink_valid;
wire          main_basesoc_sdram_bankmachine1_sink_valid;
wire          main_basesoc_sdram_bankmachine1_source_first;
wire          main_basesoc_sdram_bankmachine1_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine1_source_payload_addr;
wire          main_basesoc_sdram_bankmachine1_source_payload_we;
wire          main_basesoc_sdram_bankmachine1_source_ready;
wire          main_basesoc_sdram_bankmachine1_source_source_first;
wire          main_basesoc_sdram_bankmachine1_source_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine1_source_source_payload_addr;
wire          main_basesoc_sdram_bankmachine1_source_source_payload_we;
wire          main_basesoc_sdram_bankmachine1_source_source_ready;
wire          main_basesoc_sdram_bankmachine1_source_source_valid;
wire          main_basesoc_sdram_bankmachine1_source_valid;
wire   [24:0] main_basesoc_sdram_bankmachine1_syncfifo1_din;
wire   [24:0] main_basesoc_sdram_bankmachine1_syncfifo1_dout;
wire          main_basesoc_sdram_bankmachine1_syncfifo1_re;
wire          main_basesoc_sdram_bankmachine1_syncfifo1_readable;
wire          main_basesoc_sdram_bankmachine1_syncfifo1_we;
wire          main_basesoc_sdram_bankmachine1_syncfifo1_writable;
reg     [1:0] main_basesoc_sdram_bankmachine1_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine1_trascon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine1_trascon_valid;
reg     [1:0] main_basesoc_sdram_bankmachine1_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine1_trccon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine1_trccon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine1_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine1_twtpcon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine1_twtpcon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine1_wrport_adr = 3'd0;
wire   [24:0] main_basesoc_sdram_bankmachine1_wrport_dat_r;
wire   [24:0] main_basesoc_sdram_bankmachine1_wrport_dat_w;
wire          main_basesoc_sdram_bankmachine1_wrport_we;
reg           main_basesoc_sdram_bankmachine2_auto_precharge = 1'd0;
reg    [14:0] main_basesoc_sdram_bankmachine2_cmd_payload_a = 15'd0;
wire    [2:0] main_basesoc_sdram_bankmachine2_cmd_payload_ba;
reg           main_basesoc_sdram_bankmachine2_cmd_payload_cas = 1'd0;
reg           main_basesoc_sdram_bankmachine2_cmd_payload_is_cmd = 1'd0;
reg           main_basesoc_sdram_bankmachine2_cmd_payload_is_read = 1'd0;
reg           main_basesoc_sdram_bankmachine2_cmd_payload_is_write = 1'd0;
reg           main_basesoc_sdram_bankmachine2_cmd_payload_ras = 1'd0;
reg           main_basesoc_sdram_bankmachine2_cmd_payload_we = 1'd0;
reg           main_basesoc_sdram_bankmachine2_cmd_ready = 1'd0;
reg           main_basesoc_sdram_bankmachine2_cmd_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine2_consume = 3'd0;
wire          main_basesoc_sdram_bankmachine2_do_read;
wire          main_basesoc_sdram_bankmachine2_fifo_in_first;
wire          main_basesoc_sdram_bankmachine2_fifo_in_last;
wire   [21:0] main_basesoc_sdram_bankmachine2_fifo_in_payload_addr;
wire          main_basesoc_sdram_bankmachine2_fifo_in_payload_we;
wire          main_basesoc_sdram_bankmachine2_fifo_out_first;
wire          main_basesoc_sdram_bankmachine2_fifo_out_last;
wire   [21:0] main_basesoc_sdram_bankmachine2_fifo_out_payload_addr;
wire          main_basesoc_sdram_bankmachine2_fifo_out_payload_we;
reg     [3:0] main_basesoc_sdram_bankmachine2_level = 4'd0;
wire          main_basesoc_sdram_bankmachine2_pipe_valid_sink_first;
wire          main_basesoc_sdram_bankmachine2_pipe_valid_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine2_pipe_valid_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine2_pipe_valid_sink_payload_we;
wire          main_basesoc_sdram_bankmachine2_pipe_valid_sink_ready;
wire          main_basesoc_sdram_bankmachine2_pipe_valid_sink_valid;
reg           main_basesoc_sdram_bankmachine2_pipe_valid_source_first = 1'd0;
reg           main_basesoc_sdram_bankmachine2_pipe_valid_source_last = 1'd0;
reg    [21:0] main_basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr = 22'd0;
reg           main_basesoc_sdram_bankmachine2_pipe_valid_source_payload_we = 1'd0;
wire          main_basesoc_sdram_bankmachine2_pipe_valid_source_ready;
reg           main_basesoc_sdram_bankmachine2_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine2_produce = 3'd0;
wire    [2:0] main_basesoc_sdram_bankmachine2_rdport_adr;
wire   [24:0] main_basesoc_sdram_bankmachine2_rdport_dat_r;
reg           main_basesoc_sdram_bankmachine2_refresh_gnt = 1'd0;
wire          main_basesoc_sdram_bankmachine2_refresh_req;
reg           main_basesoc_sdram_bankmachine2_replace = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine2_req_addr;
wire          main_basesoc_sdram_bankmachine2_req_lock;
reg           main_basesoc_sdram_bankmachine2_req_rdata_valid = 1'd0;
wire          main_basesoc_sdram_bankmachine2_req_ready;
wire          main_basesoc_sdram_bankmachine2_req_valid;
reg           main_basesoc_sdram_bankmachine2_req_wdata_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine2_req_we;
reg    [14:0] main_basesoc_sdram_bankmachine2_row = 15'd0;
reg           main_basesoc_sdram_bankmachine2_row_close = 1'd0;
reg           main_basesoc_sdram_bankmachine2_row_col_n_addr_sel = 1'd0;
wire          main_basesoc_sdram_bankmachine2_row_hit;
reg           main_basesoc_sdram_bankmachine2_row_open = 1'd0;
reg           main_basesoc_sdram_bankmachine2_row_opened = 1'd0;
reg           main_basesoc_sdram_bankmachine2_sink_first = 1'd0;
reg           main_basesoc_sdram_bankmachine2_sink_last = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine2_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine2_sink_payload_we;
wire          main_basesoc_sdram_bankmachine2_sink_ready;
wire          main_basesoc_sdram_bankmachine2_sink_sink_first;
wire          main_basesoc_sdram_bankmachine2_sink_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine2_sink_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine2_sink_sink_payload_we;
wire          main_basesoc_sdram_bankmachine2_sink_sink_ready;
wire          main_basesoc_sdram_bankmachine2_sink_sink_valid;
wire          main_basesoc_sdram_bankmachine2_sink_valid;
wire          main_basesoc_sdram_bankmachine2_source_first;
wire          main_basesoc_sdram_bankmachine2_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine2_source_payload_addr;
wire          main_basesoc_sdram_bankmachine2_source_payload_we;
wire          main_basesoc_sdram_bankmachine2_source_ready;
wire          main_basesoc_sdram_bankmachine2_source_source_first;
wire          main_basesoc_sdram_bankmachine2_source_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine2_source_source_payload_addr;
wire          main_basesoc_sdram_bankmachine2_source_source_payload_we;
wire          main_basesoc_sdram_bankmachine2_source_source_ready;
wire          main_basesoc_sdram_bankmachine2_source_source_valid;
wire          main_basesoc_sdram_bankmachine2_source_valid;
wire   [24:0] main_basesoc_sdram_bankmachine2_syncfifo2_din;
wire   [24:0] main_basesoc_sdram_bankmachine2_syncfifo2_dout;
wire          main_basesoc_sdram_bankmachine2_syncfifo2_re;
wire          main_basesoc_sdram_bankmachine2_syncfifo2_readable;
wire          main_basesoc_sdram_bankmachine2_syncfifo2_we;
wire          main_basesoc_sdram_bankmachine2_syncfifo2_writable;
reg     [1:0] main_basesoc_sdram_bankmachine2_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine2_trascon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine2_trascon_valid;
reg     [1:0] main_basesoc_sdram_bankmachine2_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine2_trccon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine2_trccon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine2_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine2_twtpcon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine2_twtpcon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine2_wrport_adr = 3'd0;
wire   [24:0] main_basesoc_sdram_bankmachine2_wrport_dat_r;
wire   [24:0] main_basesoc_sdram_bankmachine2_wrport_dat_w;
wire          main_basesoc_sdram_bankmachine2_wrport_we;
reg           main_basesoc_sdram_bankmachine3_auto_precharge = 1'd0;
reg    [14:0] main_basesoc_sdram_bankmachine3_cmd_payload_a = 15'd0;
wire    [2:0] main_basesoc_sdram_bankmachine3_cmd_payload_ba;
reg           main_basesoc_sdram_bankmachine3_cmd_payload_cas = 1'd0;
reg           main_basesoc_sdram_bankmachine3_cmd_payload_is_cmd = 1'd0;
reg           main_basesoc_sdram_bankmachine3_cmd_payload_is_read = 1'd0;
reg           main_basesoc_sdram_bankmachine3_cmd_payload_is_write = 1'd0;
reg           main_basesoc_sdram_bankmachine3_cmd_payload_ras = 1'd0;
reg           main_basesoc_sdram_bankmachine3_cmd_payload_we = 1'd0;
reg           main_basesoc_sdram_bankmachine3_cmd_ready = 1'd0;
reg           main_basesoc_sdram_bankmachine3_cmd_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine3_consume = 3'd0;
wire          main_basesoc_sdram_bankmachine3_do_read;
wire          main_basesoc_sdram_bankmachine3_fifo_in_first;
wire          main_basesoc_sdram_bankmachine3_fifo_in_last;
wire   [21:0] main_basesoc_sdram_bankmachine3_fifo_in_payload_addr;
wire          main_basesoc_sdram_bankmachine3_fifo_in_payload_we;
wire          main_basesoc_sdram_bankmachine3_fifo_out_first;
wire          main_basesoc_sdram_bankmachine3_fifo_out_last;
wire   [21:0] main_basesoc_sdram_bankmachine3_fifo_out_payload_addr;
wire          main_basesoc_sdram_bankmachine3_fifo_out_payload_we;
reg     [3:0] main_basesoc_sdram_bankmachine3_level = 4'd0;
wire          main_basesoc_sdram_bankmachine3_pipe_valid_sink_first;
wire          main_basesoc_sdram_bankmachine3_pipe_valid_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine3_pipe_valid_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine3_pipe_valid_sink_payload_we;
wire          main_basesoc_sdram_bankmachine3_pipe_valid_sink_ready;
wire          main_basesoc_sdram_bankmachine3_pipe_valid_sink_valid;
reg           main_basesoc_sdram_bankmachine3_pipe_valid_source_first = 1'd0;
reg           main_basesoc_sdram_bankmachine3_pipe_valid_source_last = 1'd0;
reg    [21:0] main_basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr = 22'd0;
reg           main_basesoc_sdram_bankmachine3_pipe_valid_source_payload_we = 1'd0;
wire          main_basesoc_sdram_bankmachine3_pipe_valid_source_ready;
reg           main_basesoc_sdram_bankmachine3_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine3_produce = 3'd0;
wire    [2:0] main_basesoc_sdram_bankmachine3_rdport_adr;
wire   [24:0] main_basesoc_sdram_bankmachine3_rdport_dat_r;
reg           main_basesoc_sdram_bankmachine3_refresh_gnt = 1'd0;
wire          main_basesoc_sdram_bankmachine3_refresh_req;
reg           main_basesoc_sdram_bankmachine3_replace = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine3_req_addr;
wire          main_basesoc_sdram_bankmachine3_req_lock;
reg           main_basesoc_sdram_bankmachine3_req_rdata_valid = 1'd0;
wire          main_basesoc_sdram_bankmachine3_req_ready;
wire          main_basesoc_sdram_bankmachine3_req_valid;
reg           main_basesoc_sdram_bankmachine3_req_wdata_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine3_req_we;
reg    [14:0] main_basesoc_sdram_bankmachine3_row = 15'd0;
reg           main_basesoc_sdram_bankmachine3_row_close = 1'd0;
reg           main_basesoc_sdram_bankmachine3_row_col_n_addr_sel = 1'd0;
wire          main_basesoc_sdram_bankmachine3_row_hit;
reg           main_basesoc_sdram_bankmachine3_row_open = 1'd0;
reg           main_basesoc_sdram_bankmachine3_row_opened = 1'd0;
reg           main_basesoc_sdram_bankmachine3_sink_first = 1'd0;
reg           main_basesoc_sdram_bankmachine3_sink_last = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine3_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine3_sink_payload_we;
wire          main_basesoc_sdram_bankmachine3_sink_ready;
wire          main_basesoc_sdram_bankmachine3_sink_sink_first;
wire          main_basesoc_sdram_bankmachine3_sink_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine3_sink_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine3_sink_sink_payload_we;
wire          main_basesoc_sdram_bankmachine3_sink_sink_ready;
wire          main_basesoc_sdram_bankmachine3_sink_sink_valid;
wire          main_basesoc_sdram_bankmachine3_sink_valid;
wire          main_basesoc_sdram_bankmachine3_source_first;
wire          main_basesoc_sdram_bankmachine3_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine3_source_payload_addr;
wire          main_basesoc_sdram_bankmachine3_source_payload_we;
wire          main_basesoc_sdram_bankmachine3_source_ready;
wire          main_basesoc_sdram_bankmachine3_source_source_first;
wire          main_basesoc_sdram_bankmachine3_source_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine3_source_source_payload_addr;
wire          main_basesoc_sdram_bankmachine3_source_source_payload_we;
wire          main_basesoc_sdram_bankmachine3_source_source_ready;
wire          main_basesoc_sdram_bankmachine3_source_source_valid;
wire          main_basesoc_sdram_bankmachine3_source_valid;
wire   [24:0] main_basesoc_sdram_bankmachine3_syncfifo3_din;
wire   [24:0] main_basesoc_sdram_bankmachine3_syncfifo3_dout;
wire          main_basesoc_sdram_bankmachine3_syncfifo3_re;
wire          main_basesoc_sdram_bankmachine3_syncfifo3_readable;
wire          main_basesoc_sdram_bankmachine3_syncfifo3_we;
wire          main_basesoc_sdram_bankmachine3_syncfifo3_writable;
reg     [1:0] main_basesoc_sdram_bankmachine3_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine3_trascon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine3_trascon_valid;
reg     [1:0] main_basesoc_sdram_bankmachine3_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine3_trccon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine3_trccon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine3_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine3_twtpcon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine3_twtpcon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine3_wrport_adr = 3'd0;
wire   [24:0] main_basesoc_sdram_bankmachine3_wrport_dat_r;
wire   [24:0] main_basesoc_sdram_bankmachine3_wrport_dat_w;
wire          main_basesoc_sdram_bankmachine3_wrport_we;
reg           main_basesoc_sdram_bankmachine4_auto_precharge = 1'd0;
reg    [14:0] main_basesoc_sdram_bankmachine4_cmd_payload_a = 15'd0;
wire    [2:0] main_basesoc_sdram_bankmachine4_cmd_payload_ba;
reg           main_basesoc_sdram_bankmachine4_cmd_payload_cas = 1'd0;
reg           main_basesoc_sdram_bankmachine4_cmd_payload_is_cmd = 1'd0;
reg           main_basesoc_sdram_bankmachine4_cmd_payload_is_read = 1'd0;
reg           main_basesoc_sdram_bankmachine4_cmd_payload_is_write = 1'd0;
reg           main_basesoc_sdram_bankmachine4_cmd_payload_ras = 1'd0;
reg           main_basesoc_sdram_bankmachine4_cmd_payload_we = 1'd0;
reg           main_basesoc_sdram_bankmachine4_cmd_ready = 1'd0;
reg           main_basesoc_sdram_bankmachine4_cmd_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine4_consume = 3'd0;
wire          main_basesoc_sdram_bankmachine4_do_read;
wire          main_basesoc_sdram_bankmachine4_fifo_in_first;
wire          main_basesoc_sdram_bankmachine4_fifo_in_last;
wire   [21:0] main_basesoc_sdram_bankmachine4_fifo_in_payload_addr;
wire          main_basesoc_sdram_bankmachine4_fifo_in_payload_we;
wire          main_basesoc_sdram_bankmachine4_fifo_out_first;
wire          main_basesoc_sdram_bankmachine4_fifo_out_last;
wire   [21:0] main_basesoc_sdram_bankmachine4_fifo_out_payload_addr;
wire          main_basesoc_sdram_bankmachine4_fifo_out_payload_we;
reg     [3:0] main_basesoc_sdram_bankmachine4_level = 4'd0;
wire          main_basesoc_sdram_bankmachine4_pipe_valid_sink_first;
wire          main_basesoc_sdram_bankmachine4_pipe_valid_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine4_pipe_valid_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine4_pipe_valid_sink_payload_we;
wire          main_basesoc_sdram_bankmachine4_pipe_valid_sink_ready;
wire          main_basesoc_sdram_bankmachine4_pipe_valid_sink_valid;
reg           main_basesoc_sdram_bankmachine4_pipe_valid_source_first = 1'd0;
reg           main_basesoc_sdram_bankmachine4_pipe_valid_source_last = 1'd0;
reg    [21:0] main_basesoc_sdram_bankmachine4_pipe_valid_source_payload_addr = 22'd0;
reg           main_basesoc_sdram_bankmachine4_pipe_valid_source_payload_we = 1'd0;
wire          main_basesoc_sdram_bankmachine4_pipe_valid_source_ready;
reg           main_basesoc_sdram_bankmachine4_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine4_produce = 3'd0;
wire    [2:0] main_basesoc_sdram_bankmachine4_rdport_adr;
wire   [24:0] main_basesoc_sdram_bankmachine4_rdport_dat_r;
reg           main_basesoc_sdram_bankmachine4_refresh_gnt = 1'd0;
wire          main_basesoc_sdram_bankmachine4_refresh_req;
reg           main_basesoc_sdram_bankmachine4_replace = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine4_req_addr;
wire          main_basesoc_sdram_bankmachine4_req_lock;
reg           main_basesoc_sdram_bankmachine4_req_rdata_valid = 1'd0;
wire          main_basesoc_sdram_bankmachine4_req_ready;
wire          main_basesoc_sdram_bankmachine4_req_valid;
reg           main_basesoc_sdram_bankmachine4_req_wdata_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine4_req_we;
reg    [14:0] main_basesoc_sdram_bankmachine4_row = 15'd0;
reg           main_basesoc_sdram_bankmachine4_row_close = 1'd0;
reg           main_basesoc_sdram_bankmachine4_row_col_n_addr_sel = 1'd0;
wire          main_basesoc_sdram_bankmachine4_row_hit;
reg           main_basesoc_sdram_bankmachine4_row_open = 1'd0;
reg           main_basesoc_sdram_bankmachine4_row_opened = 1'd0;
reg           main_basesoc_sdram_bankmachine4_sink_first = 1'd0;
reg           main_basesoc_sdram_bankmachine4_sink_last = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine4_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine4_sink_payload_we;
wire          main_basesoc_sdram_bankmachine4_sink_ready;
wire          main_basesoc_sdram_bankmachine4_sink_sink_first;
wire          main_basesoc_sdram_bankmachine4_sink_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine4_sink_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine4_sink_sink_payload_we;
wire          main_basesoc_sdram_bankmachine4_sink_sink_ready;
wire          main_basesoc_sdram_bankmachine4_sink_sink_valid;
wire          main_basesoc_sdram_bankmachine4_sink_valid;
wire          main_basesoc_sdram_bankmachine4_source_first;
wire          main_basesoc_sdram_bankmachine4_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine4_source_payload_addr;
wire          main_basesoc_sdram_bankmachine4_source_payload_we;
wire          main_basesoc_sdram_bankmachine4_source_ready;
wire          main_basesoc_sdram_bankmachine4_source_source_first;
wire          main_basesoc_sdram_bankmachine4_source_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine4_source_source_payload_addr;
wire          main_basesoc_sdram_bankmachine4_source_source_payload_we;
wire          main_basesoc_sdram_bankmachine4_source_source_ready;
wire          main_basesoc_sdram_bankmachine4_source_source_valid;
wire          main_basesoc_sdram_bankmachine4_source_valid;
wire   [24:0] main_basesoc_sdram_bankmachine4_syncfifo4_din;
wire   [24:0] main_basesoc_sdram_bankmachine4_syncfifo4_dout;
wire          main_basesoc_sdram_bankmachine4_syncfifo4_re;
wire          main_basesoc_sdram_bankmachine4_syncfifo4_readable;
wire          main_basesoc_sdram_bankmachine4_syncfifo4_we;
wire          main_basesoc_sdram_bankmachine4_syncfifo4_writable;
reg     [1:0] main_basesoc_sdram_bankmachine4_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine4_trascon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine4_trascon_valid;
reg     [1:0] main_basesoc_sdram_bankmachine4_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine4_trccon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine4_trccon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine4_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine4_twtpcon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine4_twtpcon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine4_wrport_adr = 3'd0;
wire   [24:0] main_basesoc_sdram_bankmachine4_wrport_dat_r;
wire   [24:0] main_basesoc_sdram_bankmachine4_wrport_dat_w;
wire          main_basesoc_sdram_bankmachine4_wrport_we;
reg           main_basesoc_sdram_bankmachine5_auto_precharge = 1'd0;
reg    [14:0] main_basesoc_sdram_bankmachine5_cmd_payload_a = 15'd0;
wire    [2:0] main_basesoc_sdram_bankmachine5_cmd_payload_ba;
reg           main_basesoc_sdram_bankmachine5_cmd_payload_cas = 1'd0;
reg           main_basesoc_sdram_bankmachine5_cmd_payload_is_cmd = 1'd0;
reg           main_basesoc_sdram_bankmachine5_cmd_payload_is_read = 1'd0;
reg           main_basesoc_sdram_bankmachine5_cmd_payload_is_write = 1'd0;
reg           main_basesoc_sdram_bankmachine5_cmd_payload_ras = 1'd0;
reg           main_basesoc_sdram_bankmachine5_cmd_payload_we = 1'd0;
reg           main_basesoc_sdram_bankmachine5_cmd_ready = 1'd0;
reg           main_basesoc_sdram_bankmachine5_cmd_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine5_consume = 3'd0;
wire          main_basesoc_sdram_bankmachine5_do_read;
wire          main_basesoc_sdram_bankmachine5_fifo_in_first;
wire          main_basesoc_sdram_bankmachine5_fifo_in_last;
wire   [21:0] main_basesoc_sdram_bankmachine5_fifo_in_payload_addr;
wire          main_basesoc_sdram_bankmachine5_fifo_in_payload_we;
wire          main_basesoc_sdram_bankmachine5_fifo_out_first;
wire          main_basesoc_sdram_bankmachine5_fifo_out_last;
wire   [21:0] main_basesoc_sdram_bankmachine5_fifo_out_payload_addr;
wire          main_basesoc_sdram_bankmachine5_fifo_out_payload_we;
reg     [3:0] main_basesoc_sdram_bankmachine5_level = 4'd0;
wire          main_basesoc_sdram_bankmachine5_pipe_valid_sink_first;
wire          main_basesoc_sdram_bankmachine5_pipe_valid_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine5_pipe_valid_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine5_pipe_valid_sink_payload_we;
wire          main_basesoc_sdram_bankmachine5_pipe_valid_sink_ready;
wire          main_basesoc_sdram_bankmachine5_pipe_valid_sink_valid;
reg           main_basesoc_sdram_bankmachine5_pipe_valid_source_first = 1'd0;
reg           main_basesoc_sdram_bankmachine5_pipe_valid_source_last = 1'd0;
reg    [21:0] main_basesoc_sdram_bankmachine5_pipe_valid_source_payload_addr = 22'd0;
reg           main_basesoc_sdram_bankmachine5_pipe_valid_source_payload_we = 1'd0;
wire          main_basesoc_sdram_bankmachine5_pipe_valid_source_ready;
reg           main_basesoc_sdram_bankmachine5_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine5_produce = 3'd0;
wire    [2:0] main_basesoc_sdram_bankmachine5_rdport_adr;
wire   [24:0] main_basesoc_sdram_bankmachine5_rdport_dat_r;
reg           main_basesoc_sdram_bankmachine5_refresh_gnt = 1'd0;
wire          main_basesoc_sdram_bankmachine5_refresh_req;
reg           main_basesoc_sdram_bankmachine5_replace = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine5_req_addr;
wire          main_basesoc_sdram_bankmachine5_req_lock;
reg           main_basesoc_sdram_bankmachine5_req_rdata_valid = 1'd0;
wire          main_basesoc_sdram_bankmachine5_req_ready;
wire          main_basesoc_sdram_bankmachine5_req_valid;
reg           main_basesoc_sdram_bankmachine5_req_wdata_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine5_req_we;
reg    [14:0] main_basesoc_sdram_bankmachine5_row = 15'd0;
reg           main_basesoc_sdram_bankmachine5_row_close = 1'd0;
reg           main_basesoc_sdram_bankmachine5_row_col_n_addr_sel = 1'd0;
wire          main_basesoc_sdram_bankmachine5_row_hit;
reg           main_basesoc_sdram_bankmachine5_row_open = 1'd0;
reg           main_basesoc_sdram_bankmachine5_row_opened = 1'd0;
reg           main_basesoc_sdram_bankmachine5_sink_first = 1'd0;
reg           main_basesoc_sdram_bankmachine5_sink_last = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine5_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine5_sink_payload_we;
wire          main_basesoc_sdram_bankmachine5_sink_ready;
wire          main_basesoc_sdram_bankmachine5_sink_sink_first;
wire          main_basesoc_sdram_bankmachine5_sink_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine5_sink_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine5_sink_sink_payload_we;
wire          main_basesoc_sdram_bankmachine5_sink_sink_ready;
wire          main_basesoc_sdram_bankmachine5_sink_sink_valid;
wire          main_basesoc_sdram_bankmachine5_sink_valid;
wire          main_basesoc_sdram_bankmachine5_source_first;
wire          main_basesoc_sdram_bankmachine5_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine5_source_payload_addr;
wire          main_basesoc_sdram_bankmachine5_source_payload_we;
wire          main_basesoc_sdram_bankmachine5_source_ready;
wire          main_basesoc_sdram_bankmachine5_source_source_first;
wire          main_basesoc_sdram_bankmachine5_source_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine5_source_source_payload_addr;
wire          main_basesoc_sdram_bankmachine5_source_source_payload_we;
wire          main_basesoc_sdram_bankmachine5_source_source_ready;
wire          main_basesoc_sdram_bankmachine5_source_source_valid;
wire          main_basesoc_sdram_bankmachine5_source_valid;
wire   [24:0] main_basesoc_sdram_bankmachine5_syncfifo5_din;
wire   [24:0] main_basesoc_sdram_bankmachine5_syncfifo5_dout;
wire          main_basesoc_sdram_bankmachine5_syncfifo5_re;
wire          main_basesoc_sdram_bankmachine5_syncfifo5_readable;
wire          main_basesoc_sdram_bankmachine5_syncfifo5_we;
wire          main_basesoc_sdram_bankmachine5_syncfifo5_writable;
reg     [1:0] main_basesoc_sdram_bankmachine5_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine5_trascon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine5_trascon_valid;
reg     [1:0] main_basesoc_sdram_bankmachine5_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine5_trccon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine5_trccon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine5_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine5_twtpcon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine5_twtpcon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine5_wrport_adr = 3'd0;
wire   [24:0] main_basesoc_sdram_bankmachine5_wrport_dat_r;
wire   [24:0] main_basesoc_sdram_bankmachine5_wrport_dat_w;
wire          main_basesoc_sdram_bankmachine5_wrport_we;
reg           main_basesoc_sdram_bankmachine6_auto_precharge = 1'd0;
reg    [14:0] main_basesoc_sdram_bankmachine6_cmd_payload_a = 15'd0;
wire    [2:0] main_basesoc_sdram_bankmachine6_cmd_payload_ba;
reg           main_basesoc_sdram_bankmachine6_cmd_payload_cas = 1'd0;
reg           main_basesoc_sdram_bankmachine6_cmd_payload_is_cmd = 1'd0;
reg           main_basesoc_sdram_bankmachine6_cmd_payload_is_read = 1'd0;
reg           main_basesoc_sdram_bankmachine6_cmd_payload_is_write = 1'd0;
reg           main_basesoc_sdram_bankmachine6_cmd_payload_ras = 1'd0;
reg           main_basesoc_sdram_bankmachine6_cmd_payload_we = 1'd0;
reg           main_basesoc_sdram_bankmachine6_cmd_ready = 1'd0;
reg           main_basesoc_sdram_bankmachine6_cmd_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine6_consume = 3'd0;
wire          main_basesoc_sdram_bankmachine6_do_read;
wire          main_basesoc_sdram_bankmachine6_fifo_in_first;
wire          main_basesoc_sdram_bankmachine6_fifo_in_last;
wire   [21:0] main_basesoc_sdram_bankmachine6_fifo_in_payload_addr;
wire          main_basesoc_sdram_bankmachine6_fifo_in_payload_we;
wire          main_basesoc_sdram_bankmachine6_fifo_out_first;
wire          main_basesoc_sdram_bankmachine6_fifo_out_last;
wire   [21:0] main_basesoc_sdram_bankmachine6_fifo_out_payload_addr;
wire          main_basesoc_sdram_bankmachine6_fifo_out_payload_we;
reg     [3:0] main_basesoc_sdram_bankmachine6_level = 4'd0;
wire          main_basesoc_sdram_bankmachine6_pipe_valid_sink_first;
wire          main_basesoc_sdram_bankmachine6_pipe_valid_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine6_pipe_valid_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine6_pipe_valid_sink_payload_we;
wire          main_basesoc_sdram_bankmachine6_pipe_valid_sink_ready;
wire          main_basesoc_sdram_bankmachine6_pipe_valid_sink_valid;
reg           main_basesoc_sdram_bankmachine6_pipe_valid_source_first = 1'd0;
reg           main_basesoc_sdram_bankmachine6_pipe_valid_source_last = 1'd0;
reg    [21:0] main_basesoc_sdram_bankmachine6_pipe_valid_source_payload_addr = 22'd0;
reg           main_basesoc_sdram_bankmachine6_pipe_valid_source_payload_we = 1'd0;
wire          main_basesoc_sdram_bankmachine6_pipe_valid_source_ready;
reg           main_basesoc_sdram_bankmachine6_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine6_produce = 3'd0;
wire    [2:0] main_basesoc_sdram_bankmachine6_rdport_adr;
wire   [24:0] main_basesoc_sdram_bankmachine6_rdport_dat_r;
reg           main_basesoc_sdram_bankmachine6_refresh_gnt = 1'd0;
wire          main_basesoc_sdram_bankmachine6_refresh_req;
reg           main_basesoc_sdram_bankmachine6_replace = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine6_req_addr;
wire          main_basesoc_sdram_bankmachine6_req_lock;
reg           main_basesoc_sdram_bankmachine6_req_rdata_valid = 1'd0;
wire          main_basesoc_sdram_bankmachine6_req_ready;
wire          main_basesoc_sdram_bankmachine6_req_valid;
reg           main_basesoc_sdram_bankmachine6_req_wdata_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine6_req_we;
reg    [14:0] main_basesoc_sdram_bankmachine6_row = 15'd0;
reg           main_basesoc_sdram_bankmachine6_row_close = 1'd0;
reg           main_basesoc_sdram_bankmachine6_row_col_n_addr_sel = 1'd0;
wire          main_basesoc_sdram_bankmachine6_row_hit;
reg           main_basesoc_sdram_bankmachine6_row_open = 1'd0;
reg           main_basesoc_sdram_bankmachine6_row_opened = 1'd0;
reg           main_basesoc_sdram_bankmachine6_sink_first = 1'd0;
reg           main_basesoc_sdram_bankmachine6_sink_last = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine6_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine6_sink_payload_we;
wire          main_basesoc_sdram_bankmachine6_sink_ready;
wire          main_basesoc_sdram_bankmachine6_sink_sink_first;
wire          main_basesoc_sdram_bankmachine6_sink_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine6_sink_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine6_sink_sink_payload_we;
wire          main_basesoc_sdram_bankmachine6_sink_sink_ready;
wire          main_basesoc_sdram_bankmachine6_sink_sink_valid;
wire          main_basesoc_sdram_bankmachine6_sink_valid;
wire          main_basesoc_sdram_bankmachine6_source_first;
wire          main_basesoc_sdram_bankmachine6_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine6_source_payload_addr;
wire          main_basesoc_sdram_bankmachine6_source_payload_we;
wire          main_basesoc_sdram_bankmachine6_source_ready;
wire          main_basesoc_sdram_bankmachine6_source_source_first;
wire          main_basesoc_sdram_bankmachine6_source_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine6_source_source_payload_addr;
wire          main_basesoc_sdram_bankmachine6_source_source_payload_we;
wire          main_basesoc_sdram_bankmachine6_source_source_ready;
wire          main_basesoc_sdram_bankmachine6_source_source_valid;
wire          main_basesoc_sdram_bankmachine6_source_valid;
wire   [24:0] main_basesoc_sdram_bankmachine6_syncfifo6_din;
wire   [24:0] main_basesoc_sdram_bankmachine6_syncfifo6_dout;
wire          main_basesoc_sdram_bankmachine6_syncfifo6_re;
wire          main_basesoc_sdram_bankmachine6_syncfifo6_readable;
wire          main_basesoc_sdram_bankmachine6_syncfifo6_we;
wire          main_basesoc_sdram_bankmachine6_syncfifo6_writable;
reg     [1:0] main_basesoc_sdram_bankmachine6_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine6_trascon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine6_trascon_valid;
reg     [1:0] main_basesoc_sdram_bankmachine6_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine6_trccon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine6_trccon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine6_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine6_twtpcon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine6_twtpcon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine6_wrport_adr = 3'd0;
wire   [24:0] main_basesoc_sdram_bankmachine6_wrport_dat_r;
wire   [24:0] main_basesoc_sdram_bankmachine6_wrport_dat_w;
wire          main_basesoc_sdram_bankmachine6_wrport_we;
reg           main_basesoc_sdram_bankmachine7_auto_precharge = 1'd0;
reg    [14:0] main_basesoc_sdram_bankmachine7_cmd_payload_a = 15'd0;
wire    [2:0] main_basesoc_sdram_bankmachine7_cmd_payload_ba;
reg           main_basesoc_sdram_bankmachine7_cmd_payload_cas = 1'd0;
reg           main_basesoc_sdram_bankmachine7_cmd_payload_is_cmd = 1'd0;
reg           main_basesoc_sdram_bankmachine7_cmd_payload_is_read = 1'd0;
reg           main_basesoc_sdram_bankmachine7_cmd_payload_is_write = 1'd0;
reg           main_basesoc_sdram_bankmachine7_cmd_payload_ras = 1'd0;
reg           main_basesoc_sdram_bankmachine7_cmd_payload_we = 1'd0;
reg           main_basesoc_sdram_bankmachine7_cmd_ready = 1'd0;
reg           main_basesoc_sdram_bankmachine7_cmd_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine7_consume = 3'd0;
wire          main_basesoc_sdram_bankmachine7_do_read;
wire          main_basesoc_sdram_bankmachine7_fifo_in_first;
wire          main_basesoc_sdram_bankmachine7_fifo_in_last;
wire   [21:0] main_basesoc_sdram_bankmachine7_fifo_in_payload_addr;
wire          main_basesoc_sdram_bankmachine7_fifo_in_payload_we;
wire          main_basesoc_sdram_bankmachine7_fifo_out_first;
wire          main_basesoc_sdram_bankmachine7_fifo_out_last;
wire   [21:0] main_basesoc_sdram_bankmachine7_fifo_out_payload_addr;
wire          main_basesoc_sdram_bankmachine7_fifo_out_payload_we;
reg     [3:0] main_basesoc_sdram_bankmachine7_level = 4'd0;
wire          main_basesoc_sdram_bankmachine7_pipe_valid_sink_first;
wire          main_basesoc_sdram_bankmachine7_pipe_valid_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine7_pipe_valid_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine7_pipe_valid_sink_payload_we;
wire          main_basesoc_sdram_bankmachine7_pipe_valid_sink_ready;
wire          main_basesoc_sdram_bankmachine7_pipe_valid_sink_valid;
reg           main_basesoc_sdram_bankmachine7_pipe_valid_source_first = 1'd0;
reg           main_basesoc_sdram_bankmachine7_pipe_valid_source_last = 1'd0;
reg    [21:0] main_basesoc_sdram_bankmachine7_pipe_valid_source_payload_addr = 22'd0;
reg           main_basesoc_sdram_bankmachine7_pipe_valid_source_payload_we = 1'd0;
wire          main_basesoc_sdram_bankmachine7_pipe_valid_source_ready;
reg           main_basesoc_sdram_bankmachine7_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_basesoc_sdram_bankmachine7_produce = 3'd0;
wire    [2:0] main_basesoc_sdram_bankmachine7_rdport_adr;
wire   [24:0] main_basesoc_sdram_bankmachine7_rdport_dat_r;
reg           main_basesoc_sdram_bankmachine7_refresh_gnt = 1'd0;
wire          main_basesoc_sdram_bankmachine7_refresh_req;
reg           main_basesoc_sdram_bankmachine7_replace = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine7_req_addr;
wire          main_basesoc_sdram_bankmachine7_req_lock;
reg           main_basesoc_sdram_bankmachine7_req_rdata_valid = 1'd0;
wire          main_basesoc_sdram_bankmachine7_req_ready;
wire          main_basesoc_sdram_bankmachine7_req_valid;
reg           main_basesoc_sdram_bankmachine7_req_wdata_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine7_req_we;
reg    [14:0] main_basesoc_sdram_bankmachine7_row = 15'd0;
reg           main_basesoc_sdram_bankmachine7_row_close = 1'd0;
reg           main_basesoc_sdram_bankmachine7_row_col_n_addr_sel = 1'd0;
wire          main_basesoc_sdram_bankmachine7_row_hit;
reg           main_basesoc_sdram_bankmachine7_row_open = 1'd0;
reg           main_basesoc_sdram_bankmachine7_row_opened = 1'd0;
reg           main_basesoc_sdram_bankmachine7_sink_first = 1'd0;
reg           main_basesoc_sdram_bankmachine7_sink_last = 1'd0;
wire   [21:0] main_basesoc_sdram_bankmachine7_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine7_sink_payload_we;
wire          main_basesoc_sdram_bankmachine7_sink_ready;
wire          main_basesoc_sdram_bankmachine7_sink_sink_first;
wire          main_basesoc_sdram_bankmachine7_sink_sink_last;
wire   [21:0] main_basesoc_sdram_bankmachine7_sink_sink_payload_addr;
wire          main_basesoc_sdram_bankmachine7_sink_sink_payload_we;
wire          main_basesoc_sdram_bankmachine7_sink_sink_ready;
wire          main_basesoc_sdram_bankmachine7_sink_sink_valid;
wire          main_basesoc_sdram_bankmachine7_sink_valid;
wire          main_basesoc_sdram_bankmachine7_source_first;
wire          main_basesoc_sdram_bankmachine7_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine7_source_payload_addr;
wire          main_basesoc_sdram_bankmachine7_source_payload_we;
wire          main_basesoc_sdram_bankmachine7_source_ready;
wire          main_basesoc_sdram_bankmachine7_source_source_first;
wire          main_basesoc_sdram_bankmachine7_source_source_last;
wire   [21:0] main_basesoc_sdram_bankmachine7_source_source_payload_addr;
wire          main_basesoc_sdram_bankmachine7_source_source_payload_we;
wire          main_basesoc_sdram_bankmachine7_source_source_ready;
wire          main_basesoc_sdram_bankmachine7_source_source_valid;
wire          main_basesoc_sdram_bankmachine7_source_valid;
wire   [24:0] main_basesoc_sdram_bankmachine7_syncfifo7_din;
wire   [24:0] main_basesoc_sdram_bankmachine7_syncfifo7_dout;
wire          main_basesoc_sdram_bankmachine7_syncfifo7_re;
wire          main_basesoc_sdram_bankmachine7_syncfifo7_readable;
wire          main_basesoc_sdram_bankmachine7_syncfifo7_we;
wire          main_basesoc_sdram_bankmachine7_syncfifo7_writable;
reg     [1:0] main_basesoc_sdram_bankmachine7_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine7_trascon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine7_trascon_valid;
reg     [1:0] main_basesoc_sdram_bankmachine7_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine7_trccon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine7_trccon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine7_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_bankmachine7_twtpcon_ready = 1'd0;
wire          main_basesoc_sdram_bankmachine7_twtpcon_valid;
reg     [2:0] main_basesoc_sdram_bankmachine7_wrport_adr = 3'd0;
wire   [24:0] main_basesoc_sdram_bankmachine7_wrport_dat_r;
wire   [24:0] main_basesoc_sdram_bankmachine7_wrport_dat_w;
wire          main_basesoc_sdram_bankmachine7_wrport_we;
wire          main_basesoc_sdram_cas_allowed;
wire          main_basesoc_sdram_choose_cmd_ce;
wire   [14:0] main_basesoc_sdram_choose_cmd_cmd_payload_a;
wire    [2:0] main_basesoc_sdram_choose_cmd_cmd_payload_ba;
reg           main_basesoc_sdram_choose_cmd_cmd_payload_cas = 1'd0;
wire          main_basesoc_sdram_choose_cmd_cmd_payload_is_cmd;
wire          main_basesoc_sdram_choose_cmd_cmd_payload_is_read;
wire          main_basesoc_sdram_choose_cmd_cmd_payload_is_write;
reg           main_basesoc_sdram_choose_cmd_cmd_payload_ras = 1'd0;
reg           main_basesoc_sdram_choose_cmd_cmd_payload_we = 1'd0;
reg           main_basesoc_sdram_choose_cmd_cmd_ready = 1'd0;
wire          main_basesoc_sdram_choose_cmd_cmd_valid;
reg     [2:0] main_basesoc_sdram_choose_cmd_grant = 3'd0;
wire    [7:0] main_basesoc_sdram_choose_cmd_request;
reg     [7:0] main_basesoc_sdram_choose_cmd_requests = 8'd0;
reg           main_basesoc_sdram_choose_cmd_want_activates = 1'd0;
reg           main_basesoc_sdram_choose_cmd_want_cmds = 1'd0;
reg           main_basesoc_sdram_choose_cmd_want_reads = 1'd0;
reg           main_basesoc_sdram_choose_cmd_want_writes = 1'd0;
wire          main_basesoc_sdram_choose_req_ce;
wire   [14:0] main_basesoc_sdram_choose_req_cmd_payload_a;
wire    [2:0] main_basesoc_sdram_choose_req_cmd_payload_ba;
reg           main_basesoc_sdram_choose_req_cmd_payload_cas = 1'd0;
wire          main_basesoc_sdram_choose_req_cmd_payload_is_cmd;
wire          main_basesoc_sdram_choose_req_cmd_payload_is_read;
wire          main_basesoc_sdram_choose_req_cmd_payload_is_write;
reg           main_basesoc_sdram_choose_req_cmd_payload_ras = 1'd0;
reg           main_basesoc_sdram_choose_req_cmd_payload_we = 1'd0;
reg           main_basesoc_sdram_choose_req_cmd_ready = 1'd0;
wire          main_basesoc_sdram_choose_req_cmd_valid;
reg     [2:0] main_basesoc_sdram_choose_req_grant = 3'd0;
wire    [7:0] main_basesoc_sdram_choose_req_request;
reg     [7:0] main_basesoc_sdram_choose_req_requests = 8'd0;
reg           main_basesoc_sdram_choose_req_want_activates = 1'd0;
reg           main_basesoc_sdram_choose_req_want_cmds = 1'd0;
reg           main_basesoc_sdram_choose_req_want_reads = 1'd0;
reg           main_basesoc_sdram_choose_req_want_writes = 1'd0;
wire          main_basesoc_sdram_cke;
reg           main_basesoc_sdram_cmd_last = 1'd0;
reg    [14:0] main_basesoc_sdram_cmd_payload_a = 15'd0;
reg     [2:0] main_basesoc_sdram_cmd_payload_ba = 3'd0;
reg           main_basesoc_sdram_cmd_payload_cas = 1'd0;
reg           main_basesoc_sdram_cmd_payload_is_read = 1'd0;
reg           main_basesoc_sdram_cmd_payload_is_write = 1'd0;
reg           main_basesoc_sdram_cmd_payload_ras = 1'd0;
reg           main_basesoc_sdram_cmd_payload_we = 1'd0;
reg           main_basesoc_sdram_cmd_ready = 1'd0;
reg           main_basesoc_sdram_cmd_valid = 1'd0;
reg           main_basesoc_sdram_csr_dfi_p0_act_n = 1'd1;
wire   [14:0] main_basesoc_sdram_csr_dfi_p0_address;
wire    [2:0] main_basesoc_sdram_csr_dfi_p0_bank;
reg           main_basesoc_sdram_csr_dfi_p0_cas_n = 1'd1;
wire          main_basesoc_sdram_csr_dfi_p0_cke;
reg           main_basesoc_sdram_csr_dfi_p0_cs_n = 1'd1;
wire          main_basesoc_sdram_csr_dfi_p0_odt;
reg           main_basesoc_sdram_csr_dfi_p0_ras_n = 1'd1;
reg    [63:0] main_basesoc_sdram_csr_dfi_p0_rddata = 64'd0;
wire          main_basesoc_sdram_csr_dfi_p0_rddata_en;
reg           main_basesoc_sdram_csr_dfi_p0_rddata_valid = 1'd0;
wire          main_basesoc_sdram_csr_dfi_p0_reset_n;
reg           main_basesoc_sdram_csr_dfi_p0_we_n = 1'd1;
wire   [63:0] main_basesoc_sdram_csr_dfi_p0_wrdata;
wire          main_basesoc_sdram_csr_dfi_p0_wrdata_en;
wire    [7:0] main_basesoc_sdram_csr_dfi_p0_wrdata_mask;
reg           main_basesoc_sdram_csr_dfi_p1_act_n = 1'd1;
wire   [14:0] main_basesoc_sdram_csr_dfi_p1_address;
wire    [2:0] main_basesoc_sdram_csr_dfi_p1_bank;
reg           main_basesoc_sdram_csr_dfi_p1_cas_n = 1'd1;
wire          main_basesoc_sdram_csr_dfi_p1_cke;
reg           main_basesoc_sdram_csr_dfi_p1_cs_n = 1'd1;
wire          main_basesoc_sdram_csr_dfi_p1_odt;
reg           main_basesoc_sdram_csr_dfi_p1_ras_n = 1'd1;
reg    [63:0] main_basesoc_sdram_csr_dfi_p1_rddata = 64'd0;
wire          main_basesoc_sdram_csr_dfi_p1_rddata_en;
reg           main_basesoc_sdram_csr_dfi_p1_rddata_valid = 1'd0;
wire          main_basesoc_sdram_csr_dfi_p1_reset_n;
reg           main_basesoc_sdram_csr_dfi_p1_we_n = 1'd1;
wire   [63:0] main_basesoc_sdram_csr_dfi_p1_wrdata;
wire          main_basesoc_sdram_csr_dfi_p1_wrdata_en;
wire    [7:0] main_basesoc_sdram_csr_dfi_p1_wrdata_mask;
reg           main_basesoc_sdram_csr_dfi_p2_act_n = 1'd1;
wire   [14:0] main_basesoc_sdram_csr_dfi_p2_address;
wire    [2:0] main_basesoc_sdram_csr_dfi_p2_bank;
reg           main_basesoc_sdram_csr_dfi_p2_cas_n = 1'd1;
wire          main_basesoc_sdram_csr_dfi_p2_cke;
reg           main_basesoc_sdram_csr_dfi_p2_cs_n = 1'd1;
wire          main_basesoc_sdram_csr_dfi_p2_odt;
reg           main_basesoc_sdram_csr_dfi_p2_ras_n = 1'd1;
reg    [63:0] main_basesoc_sdram_csr_dfi_p2_rddata = 64'd0;
wire          main_basesoc_sdram_csr_dfi_p2_rddata_en;
reg           main_basesoc_sdram_csr_dfi_p2_rddata_valid = 1'd0;
wire          main_basesoc_sdram_csr_dfi_p2_reset_n;
reg           main_basesoc_sdram_csr_dfi_p2_we_n = 1'd1;
wire   [63:0] main_basesoc_sdram_csr_dfi_p2_wrdata;
wire          main_basesoc_sdram_csr_dfi_p2_wrdata_en;
wire    [7:0] main_basesoc_sdram_csr_dfi_p2_wrdata_mask;
reg           main_basesoc_sdram_csr_dfi_p3_act_n = 1'd1;
wire   [14:0] main_basesoc_sdram_csr_dfi_p3_address;
wire    [2:0] main_basesoc_sdram_csr_dfi_p3_bank;
reg           main_basesoc_sdram_csr_dfi_p3_cas_n = 1'd1;
wire          main_basesoc_sdram_csr_dfi_p3_cke;
reg           main_basesoc_sdram_csr_dfi_p3_cs_n = 1'd1;
wire          main_basesoc_sdram_csr_dfi_p3_odt;
reg           main_basesoc_sdram_csr_dfi_p3_ras_n = 1'd1;
reg    [63:0] main_basesoc_sdram_csr_dfi_p3_rddata = 64'd0;
wire          main_basesoc_sdram_csr_dfi_p3_rddata_en;
reg           main_basesoc_sdram_csr_dfi_p3_rddata_valid = 1'd0;
wire          main_basesoc_sdram_csr_dfi_p3_reset_n;
reg           main_basesoc_sdram_csr_dfi_p3_we_n = 1'd1;
wire   [63:0] main_basesoc_sdram_csr_dfi_p3_wrdata;
wire          main_basesoc_sdram_csr_dfi_p3_wrdata_en;
wire    [7:0] main_basesoc_sdram_csr_dfi_p3_wrdata_mask;
reg           main_basesoc_sdram_dfi_p0_act_n = 1'd1;
reg    [14:0] main_basesoc_sdram_dfi_p0_address = 15'd0;
reg     [2:0] main_basesoc_sdram_dfi_p0_bank = 3'd0;
reg           main_basesoc_sdram_dfi_p0_cas_n = 1'd1;
wire          main_basesoc_sdram_dfi_p0_cke;
reg           main_basesoc_sdram_dfi_p0_cs_n = 1'd1;
wire          main_basesoc_sdram_dfi_p0_odt;
reg           main_basesoc_sdram_dfi_p0_ras_n = 1'd1;
wire   [63:0] main_basesoc_sdram_dfi_p0_rddata;
reg           main_basesoc_sdram_dfi_p0_rddata_en = 1'd0;
wire          main_basesoc_sdram_dfi_p0_rddata_valid;
wire          main_basesoc_sdram_dfi_p0_reset_n;
reg           main_basesoc_sdram_dfi_p0_we_n = 1'd1;
wire   [63:0] main_basesoc_sdram_dfi_p0_wrdata;
reg           main_basesoc_sdram_dfi_p0_wrdata_en = 1'd0;
wire    [7:0] main_basesoc_sdram_dfi_p0_wrdata_mask;
reg           main_basesoc_sdram_dfi_p1_act_n = 1'd1;
reg    [14:0] main_basesoc_sdram_dfi_p1_address = 15'd0;
reg     [2:0] main_basesoc_sdram_dfi_p1_bank = 3'd0;
reg           main_basesoc_sdram_dfi_p1_cas_n = 1'd1;
wire          main_basesoc_sdram_dfi_p1_cke;
reg           main_basesoc_sdram_dfi_p1_cs_n = 1'd1;
wire          main_basesoc_sdram_dfi_p1_odt;
reg           main_basesoc_sdram_dfi_p1_ras_n = 1'd1;
wire   [63:0] main_basesoc_sdram_dfi_p1_rddata;
reg           main_basesoc_sdram_dfi_p1_rddata_en = 1'd0;
wire          main_basesoc_sdram_dfi_p1_rddata_valid;
wire          main_basesoc_sdram_dfi_p1_reset_n;
reg           main_basesoc_sdram_dfi_p1_we_n = 1'd1;
wire   [63:0] main_basesoc_sdram_dfi_p1_wrdata;
reg           main_basesoc_sdram_dfi_p1_wrdata_en = 1'd0;
wire    [7:0] main_basesoc_sdram_dfi_p1_wrdata_mask;
reg           main_basesoc_sdram_dfi_p2_act_n = 1'd1;
reg    [14:0] main_basesoc_sdram_dfi_p2_address = 15'd0;
reg     [2:0] main_basesoc_sdram_dfi_p2_bank = 3'd0;
reg           main_basesoc_sdram_dfi_p2_cas_n = 1'd1;
wire          main_basesoc_sdram_dfi_p2_cke;
reg           main_basesoc_sdram_dfi_p2_cs_n = 1'd1;
wire          main_basesoc_sdram_dfi_p2_odt;
reg           main_basesoc_sdram_dfi_p2_ras_n = 1'd1;
wire   [63:0] main_basesoc_sdram_dfi_p2_rddata;
reg           main_basesoc_sdram_dfi_p2_rddata_en = 1'd0;
wire          main_basesoc_sdram_dfi_p2_rddata_valid;
wire          main_basesoc_sdram_dfi_p2_reset_n;
reg           main_basesoc_sdram_dfi_p2_we_n = 1'd1;
wire   [63:0] main_basesoc_sdram_dfi_p2_wrdata;
reg           main_basesoc_sdram_dfi_p2_wrdata_en = 1'd0;
wire    [7:0] main_basesoc_sdram_dfi_p2_wrdata_mask;
reg           main_basesoc_sdram_dfi_p3_act_n = 1'd1;
reg    [14:0] main_basesoc_sdram_dfi_p3_address = 15'd0;
reg     [2:0] main_basesoc_sdram_dfi_p3_bank = 3'd0;
reg           main_basesoc_sdram_dfi_p3_cas_n = 1'd1;
wire          main_basesoc_sdram_dfi_p3_cke;
reg           main_basesoc_sdram_dfi_p3_cs_n = 1'd1;
wire          main_basesoc_sdram_dfi_p3_odt;
reg           main_basesoc_sdram_dfi_p3_ras_n = 1'd1;
wire   [63:0] main_basesoc_sdram_dfi_p3_rddata;
reg           main_basesoc_sdram_dfi_p3_rddata_en = 1'd0;
wire          main_basesoc_sdram_dfi_p3_rddata_valid;
wire          main_basesoc_sdram_dfi_p3_reset_n;
reg           main_basesoc_sdram_dfi_p3_we_n = 1'd1;
wire   [63:0] main_basesoc_sdram_dfi_p3_wrdata;
reg           main_basesoc_sdram_dfi_p3_wrdata_en = 1'd0;
wire    [7:0] main_basesoc_sdram_dfi_p3_wrdata_mask;
reg           main_basesoc_sdram_en0 = 1'd0;
reg           main_basesoc_sdram_en1 = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p0_act_n = 1'd1;
reg    [14:0] main_basesoc_sdram_ext_dfi_p0_address = 15'd0;
reg     [2:0] main_basesoc_sdram_ext_dfi_p0_bank = 3'd0;
reg           main_basesoc_sdram_ext_dfi_p0_cas_n = 1'd1;
reg           main_basesoc_sdram_ext_dfi_p0_cke = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p0_cs_n = 1'd1;
reg           main_basesoc_sdram_ext_dfi_p0_odt = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p0_ras_n = 1'd1;
reg    [63:0] main_basesoc_sdram_ext_dfi_p0_rddata = 64'd0;
reg           main_basesoc_sdram_ext_dfi_p0_rddata_en = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p0_rddata_valid = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p0_reset_n = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p0_we_n = 1'd1;
reg    [63:0] main_basesoc_sdram_ext_dfi_p0_wrdata = 64'd0;
reg           main_basesoc_sdram_ext_dfi_p0_wrdata_en = 1'd0;
reg     [7:0] main_basesoc_sdram_ext_dfi_p0_wrdata_mask = 8'd0;
reg           main_basesoc_sdram_ext_dfi_p1_act_n = 1'd1;
reg    [14:0] main_basesoc_sdram_ext_dfi_p1_address = 15'd0;
reg     [2:0] main_basesoc_sdram_ext_dfi_p1_bank = 3'd0;
reg           main_basesoc_sdram_ext_dfi_p1_cas_n = 1'd1;
reg           main_basesoc_sdram_ext_dfi_p1_cke = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p1_cs_n = 1'd1;
reg           main_basesoc_sdram_ext_dfi_p1_odt = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p1_ras_n = 1'd1;
reg    [63:0] main_basesoc_sdram_ext_dfi_p1_rddata = 64'd0;
reg           main_basesoc_sdram_ext_dfi_p1_rddata_en = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p1_rddata_valid = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p1_reset_n = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p1_we_n = 1'd1;
reg    [63:0] main_basesoc_sdram_ext_dfi_p1_wrdata = 64'd0;
reg           main_basesoc_sdram_ext_dfi_p1_wrdata_en = 1'd0;
reg     [7:0] main_basesoc_sdram_ext_dfi_p1_wrdata_mask = 8'd0;
reg           main_basesoc_sdram_ext_dfi_p2_act_n = 1'd1;
reg    [14:0] main_basesoc_sdram_ext_dfi_p2_address = 15'd0;
reg     [2:0] main_basesoc_sdram_ext_dfi_p2_bank = 3'd0;
reg           main_basesoc_sdram_ext_dfi_p2_cas_n = 1'd1;
reg           main_basesoc_sdram_ext_dfi_p2_cke = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p2_cs_n = 1'd1;
reg           main_basesoc_sdram_ext_dfi_p2_odt = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p2_ras_n = 1'd1;
reg    [63:0] main_basesoc_sdram_ext_dfi_p2_rddata = 64'd0;
reg           main_basesoc_sdram_ext_dfi_p2_rddata_en = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p2_rddata_valid = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p2_reset_n = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p2_we_n = 1'd1;
reg    [63:0] main_basesoc_sdram_ext_dfi_p2_wrdata = 64'd0;
reg           main_basesoc_sdram_ext_dfi_p2_wrdata_en = 1'd0;
reg     [7:0] main_basesoc_sdram_ext_dfi_p2_wrdata_mask = 8'd0;
reg           main_basesoc_sdram_ext_dfi_p3_act_n = 1'd1;
reg    [14:0] main_basesoc_sdram_ext_dfi_p3_address = 15'd0;
reg     [2:0] main_basesoc_sdram_ext_dfi_p3_bank = 3'd0;
reg           main_basesoc_sdram_ext_dfi_p3_cas_n = 1'd1;
reg           main_basesoc_sdram_ext_dfi_p3_cke = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p3_cs_n = 1'd1;
reg           main_basesoc_sdram_ext_dfi_p3_odt = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p3_ras_n = 1'd1;
reg    [63:0] main_basesoc_sdram_ext_dfi_p3_rddata = 64'd0;
reg           main_basesoc_sdram_ext_dfi_p3_rddata_en = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p3_rddata_valid = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p3_reset_n = 1'd0;
reg           main_basesoc_sdram_ext_dfi_p3_we_n = 1'd1;
reg    [63:0] main_basesoc_sdram_ext_dfi_p3_wrdata = 64'd0;
reg           main_basesoc_sdram_ext_dfi_p3_wrdata_en = 1'd0;
reg     [7:0] main_basesoc_sdram_ext_dfi_p3_wrdata_mask = 8'd0;
reg           main_basesoc_sdram_ext_dfi_sel = 1'd0;
wire          main_basesoc_sdram_go_to_refresh;
wire    [1:0] main_basesoc_sdram_interface;
wire   [21:0] main_basesoc_sdram_interface_bank0_addr;
wire          main_basesoc_sdram_interface_bank0_lock;
wire          main_basesoc_sdram_interface_bank0_rdata_valid;
wire          main_basesoc_sdram_interface_bank0_ready;
wire          main_basesoc_sdram_interface_bank0_valid;
wire          main_basesoc_sdram_interface_bank0_wdata_ready;
wire          main_basesoc_sdram_interface_bank0_we;
wire   [21:0] main_basesoc_sdram_interface_bank1_addr;
wire          main_basesoc_sdram_interface_bank1_lock;
wire          main_basesoc_sdram_interface_bank1_rdata_valid;
wire          main_basesoc_sdram_interface_bank1_ready;
wire          main_basesoc_sdram_interface_bank1_valid;
wire          main_basesoc_sdram_interface_bank1_wdata_ready;
wire          main_basesoc_sdram_interface_bank1_we;
wire   [21:0] main_basesoc_sdram_interface_bank2_addr;
wire          main_basesoc_sdram_interface_bank2_lock;
wire          main_basesoc_sdram_interface_bank2_rdata_valid;
wire          main_basesoc_sdram_interface_bank2_ready;
wire          main_basesoc_sdram_interface_bank2_valid;
wire          main_basesoc_sdram_interface_bank2_wdata_ready;
wire          main_basesoc_sdram_interface_bank2_we;
wire   [21:0] main_basesoc_sdram_interface_bank3_addr;
wire          main_basesoc_sdram_interface_bank3_lock;
wire          main_basesoc_sdram_interface_bank3_rdata_valid;
wire          main_basesoc_sdram_interface_bank3_ready;
wire          main_basesoc_sdram_interface_bank3_valid;
wire          main_basesoc_sdram_interface_bank3_wdata_ready;
wire          main_basesoc_sdram_interface_bank3_we;
wire   [21:0] main_basesoc_sdram_interface_bank4_addr;
wire          main_basesoc_sdram_interface_bank4_lock;
wire          main_basesoc_sdram_interface_bank4_rdata_valid;
wire          main_basesoc_sdram_interface_bank4_ready;
wire          main_basesoc_sdram_interface_bank4_valid;
wire          main_basesoc_sdram_interface_bank4_wdata_ready;
wire          main_basesoc_sdram_interface_bank4_we;
wire   [21:0] main_basesoc_sdram_interface_bank5_addr;
wire          main_basesoc_sdram_interface_bank5_lock;
wire          main_basesoc_sdram_interface_bank5_rdata_valid;
wire          main_basesoc_sdram_interface_bank5_ready;
wire          main_basesoc_sdram_interface_bank5_valid;
wire          main_basesoc_sdram_interface_bank5_wdata_ready;
wire          main_basesoc_sdram_interface_bank5_we;
wire   [21:0] main_basesoc_sdram_interface_bank6_addr;
wire          main_basesoc_sdram_interface_bank6_lock;
wire          main_basesoc_sdram_interface_bank6_rdata_valid;
wire          main_basesoc_sdram_interface_bank6_ready;
wire          main_basesoc_sdram_interface_bank6_valid;
wire          main_basesoc_sdram_interface_bank6_wdata_ready;
wire          main_basesoc_sdram_interface_bank6_we;
wire   [21:0] main_basesoc_sdram_interface_bank7_addr;
wire          main_basesoc_sdram_interface_bank7_lock;
wire          main_basesoc_sdram_interface_bank7_rdata_valid;
wire          main_basesoc_sdram_interface_bank7_ready;
wire          main_basesoc_sdram_interface_bank7_valid;
wire          main_basesoc_sdram_interface_bank7_wdata_ready;
wire          main_basesoc_sdram_interface_bank7_we;
wire  [255:0] main_basesoc_sdram_interface_rdata;
reg   [255:0] main_basesoc_sdram_interface_wdata = 256'd0;
reg    [31:0] main_basesoc_sdram_interface_wdata_we = 32'd0;
reg           main_basesoc_sdram_master_p0_act_n = 1'd1;
reg    [14:0] main_basesoc_sdram_master_p0_address = 15'd0;
reg     [2:0] main_basesoc_sdram_master_p0_bank = 3'd0;
reg           main_basesoc_sdram_master_p0_cas_n = 1'd1;
reg           main_basesoc_sdram_master_p0_cke = 1'd0;
reg           main_basesoc_sdram_master_p0_cs_n = 1'd1;
reg           main_basesoc_sdram_master_p0_odt = 1'd0;
reg           main_basesoc_sdram_master_p0_ras_n = 1'd1;
wire   [63:0] main_basesoc_sdram_master_p0_rddata;
reg           main_basesoc_sdram_master_p0_rddata_en = 1'd0;
wire          main_basesoc_sdram_master_p0_rddata_valid;
reg           main_basesoc_sdram_master_p0_reset_n = 1'd0;
reg           main_basesoc_sdram_master_p0_we_n = 1'd1;
reg    [63:0] main_basesoc_sdram_master_p0_wrdata = 64'd0;
reg           main_basesoc_sdram_master_p0_wrdata_en = 1'd0;
reg     [7:0] main_basesoc_sdram_master_p0_wrdata_mask = 8'd0;
reg           main_basesoc_sdram_master_p1_act_n = 1'd1;
reg    [14:0] main_basesoc_sdram_master_p1_address = 15'd0;
reg     [2:0] main_basesoc_sdram_master_p1_bank = 3'd0;
reg           main_basesoc_sdram_master_p1_cas_n = 1'd1;
reg           main_basesoc_sdram_master_p1_cke = 1'd0;
reg           main_basesoc_sdram_master_p1_cs_n = 1'd1;
reg           main_basesoc_sdram_master_p1_odt = 1'd0;
reg           main_basesoc_sdram_master_p1_ras_n = 1'd1;
wire   [63:0] main_basesoc_sdram_master_p1_rddata;
reg           main_basesoc_sdram_master_p1_rddata_en = 1'd0;
wire          main_basesoc_sdram_master_p1_rddata_valid;
reg           main_basesoc_sdram_master_p1_reset_n = 1'd0;
reg           main_basesoc_sdram_master_p1_we_n = 1'd1;
reg    [63:0] main_basesoc_sdram_master_p1_wrdata = 64'd0;
reg           main_basesoc_sdram_master_p1_wrdata_en = 1'd0;
reg     [7:0] main_basesoc_sdram_master_p1_wrdata_mask = 8'd0;
reg           main_basesoc_sdram_master_p2_act_n = 1'd1;
reg    [14:0] main_basesoc_sdram_master_p2_address = 15'd0;
reg     [2:0] main_basesoc_sdram_master_p2_bank = 3'd0;
reg           main_basesoc_sdram_master_p2_cas_n = 1'd1;
reg           main_basesoc_sdram_master_p2_cke = 1'd0;
reg           main_basesoc_sdram_master_p2_cs_n = 1'd1;
reg           main_basesoc_sdram_master_p2_odt = 1'd0;
reg           main_basesoc_sdram_master_p2_ras_n = 1'd1;
wire   [63:0] main_basesoc_sdram_master_p2_rddata;
reg           main_basesoc_sdram_master_p2_rddata_en = 1'd0;
wire          main_basesoc_sdram_master_p2_rddata_valid;
reg           main_basesoc_sdram_master_p2_reset_n = 1'd0;
reg           main_basesoc_sdram_master_p2_we_n = 1'd1;
reg    [63:0] main_basesoc_sdram_master_p2_wrdata = 64'd0;
reg           main_basesoc_sdram_master_p2_wrdata_en = 1'd0;
reg     [7:0] main_basesoc_sdram_master_p2_wrdata_mask = 8'd0;
reg           main_basesoc_sdram_master_p3_act_n = 1'd1;
reg    [14:0] main_basesoc_sdram_master_p3_address = 15'd0;
reg     [2:0] main_basesoc_sdram_master_p3_bank = 3'd0;
reg           main_basesoc_sdram_master_p3_cas_n = 1'd1;
reg           main_basesoc_sdram_master_p3_cke = 1'd0;
reg           main_basesoc_sdram_master_p3_cs_n = 1'd1;
reg           main_basesoc_sdram_master_p3_odt = 1'd0;
reg           main_basesoc_sdram_master_p3_ras_n = 1'd1;
wire   [63:0] main_basesoc_sdram_master_p3_rddata;
reg           main_basesoc_sdram_master_p3_rddata_en = 1'd0;
wire          main_basesoc_sdram_master_p3_rddata_valid;
reg           main_basesoc_sdram_master_p3_reset_n = 1'd0;
reg           main_basesoc_sdram_master_p3_we_n = 1'd1;
reg    [63:0] main_basesoc_sdram_master_p3_wrdata = 64'd0;
reg           main_basesoc_sdram_master_p3_wrdata_en = 1'd0;
reg     [7:0] main_basesoc_sdram_master_p3_wrdata_mask = 8'd0;
wire          main_basesoc_sdram_max_time0;
wire          main_basesoc_sdram_max_time1;
reg    [14:0] main_basesoc_sdram_nop_a = 15'd0;
reg     [2:0] main_basesoc_sdram_nop_ba = 3'd0;
wire          main_basesoc_sdram_odt;
reg           main_basesoc_sdram_phaseinjector0_address_re = 1'd0;
reg    [14:0] main_basesoc_sdram_phaseinjector0_address_storage = 15'd0;
reg           main_basesoc_sdram_phaseinjector0_baddress_re = 1'd0;
reg     [2:0] main_basesoc_sdram_phaseinjector0_baddress_storage = 3'd0;
wire          main_basesoc_sdram_phaseinjector0_command_issue_r;
reg           main_basesoc_sdram_phaseinjector0_command_issue_re = 1'd0;
reg           main_basesoc_sdram_phaseinjector0_command_issue_w = 1'd0;
reg           main_basesoc_sdram_phaseinjector0_command_issue_we = 1'd0;
reg           main_basesoc_sdram_phaseinjector0_command_re = 1'd0;
reg     [7:0] main_basesoc_sdram_phaseinjector0_command_storage = 8'd0;
wire          main_basesoc_sdram_phaseinjector0_csrfield_cas;
wire          main_basesoc_sdram_phaseinjector0_csrfield_cs;
wire          main_basesoc_sdram_phaseinjector0_csrfield_cs_bottom;
wire          main_basesoc_sdram_phaseinjector0_csrfield_cs_top;
wire          main_basesoc_sdram_phaseinjector0_csrfield_ras;
wire          main_basesoc_sdram_phaseinjector0_csrfield_rden;
wire          main_basesoc_sdram_phaseinjector0_csrfield_we;
wire          main_basesoc_sdram_phaseinjector0_csrfield_wren;
reg           main_basesoc_sdram_phaseinjector0_rddata_re = 1'd0;
reg    [63:0] main_basesoc_sdram_phaseinjector0_rddata_status = 64'd0;
wire          main_basesoc_sdram_phaseinjector0_rddata_we;
reg           main_basesoc_sdram_phaseinjector0_wrdata_re = 1'd0;
reg    [63:0] main_basesoc_sdram_phaseinjector0_wrdata_storage = 64'd0;
reg           main_basesoc_sdram_phaseinjector1_address_re = 1'd0;
reg    [14:0] main_basesoc_sdram_phaseinjector1_address_storage = 15'd0;
reg           main_basesoc_sdram_phaseinjector1_baddress_re = 1'd0;
reg     [2:0] main_basesoc_sdram_phaseinjector1_baddress_storage = 3'd0;
wire          main_basesoc_sdram_phaseinjector1_command_issue_r;
reg           main_basesoc_sdram_phaseinjector1_command_issue_re = 1'd0;
reg           main_basesoc_sdram_phaseinjector1_command_issue_w = 1'd0;
reg           main_basesoc_sdram_phaseinjector1_command_issue_we = 1'd0;
reg           main_basesoc_sdram_phaseinjector1_command_re = 1'd0;
reg     [7:0] main_basesoc_sdram_phaseinjector1_command_storage = 8'd0;
wire          main_basesoc_sdram_phaseinjector1_csrfield_cas;
wire          main_basesoc_sdram_phaseinjector1_csrfield_cs;
wire          main_basesoc_sdram_phaseinjector1_csrfield_cs_bottom;
wire          main_basesoc_sdram_phaseinjector1_csrfield_cs_top;
wire          main_basesoc_sdram_phaseinjector1_csrfield_ras;
wire          main_basesoc_sdram_phaseinjector1_csrfield_rden;
wire          main_basesoc_sdram_phaseinjector1_csrfield_we;
wire          main_basesoc_sdram_phaseinjector1_csrfield_wren;
reg           main_basesoc_sdram_phaseinjector1_rddata_re = 1'd0;
reg    [63:0] main_basesoc_sdram_phaseinjector1_rddata_status = 64'd0;
wire          main_basesoc_sdram_phaseinjector1_rddata_we;
reg           main_basesoc_sdram_phaseinjector1_wrdata_re = 1'd0;
reg    [63:0] main_basesoc_sdram_phaseinjector1_wrdata_storage = 64'd0;
reg           main_basesoc_sdram_phaseinjector2_address_re = 1'd0;
reg    [14:0] main_basesoc_sdram_phaseinjector2_address_storage = 15'd0;
reg           main_basesoc_sdram_phaseinjector2_baddress_re = 1'd0;
reg     [2:0] main_basesoc_sdram_phaseinjector2_baddress_storage = 3'd0;
wire          main_basesoc_sdram_phaseinjector2_command_issue_r;
reg           main_basesoc_sdram_phaseinjector2_command_issue_re = 1'd0;
reg           main_basesoc_sdram_phaseinjector2_command_issue_w = 1'd0;
reg           main_basesoc_sdram_phaseinjector2_command_issue_we = 1'd0;
reg           main_basesoc_sdram_phaseinjector2_command_re = 1'd0;
reg     [7:0] main_basesoc_sdram_phaseinjector2_command_storage = 8'd0;
wire          main_basesoc_sdram_phaseinjector2_csrfield_cas;
wire          main_basesoc_sdram_phaseinjector2_csrfield_cs;
wire          main_basesoc_sdram_phaseinjector2_csrfield_cs_bottom;
wire          main_basesoc_sdram_phaseinjector2_csrfield_cs_top;
wire          main_basesoc_sdram_phaseinjector2_csrfield_ras;
wire          main_basesoc_sdram_phaseinjector2_csrfield_rden;
wire          main_basesoc_sdram_phaseinjector2_csrfield_we;
wire          main_basesoc_sdram_phaseinjector2_csrfield_wren;
reg           main_basesoc_sdram_phaseinjector2_rddata_re = 1'd0;
reg    [63:0] main_basesoc_sdram_phaseinjector2_rddata_status = 64'd0;
wire          main_basesoc_sdram_phaseinjector2_rddata_we;
reg           main_basesoc_sdram_phaseinjector2_wrdata_re = 1'd0;
reg    [63:0] main_basesoc_sdram_phaseinjector2_wrdata_storage = 64'd0;
reg           main_basesoc_sdram_phaseinjector3_address_re = 1'd0;
reg    [14:0] main_basesoc_sdram_phaseinjector3_address_storage = 15'd0;
reg           main_basesoc_sdram_phaseinjector3_baddress_re = 1'd0;
reg     [2:0] main_basesoc_sdram_phaseinjector3_baddress_storage = 3'd0;
wire          main_basesoc_sdram_phaseinjector3_command_issue_r;
reg           main_basesoc_sdram_phaseinjector3_command_issue_re = 1'd0;
reg           main_basesoc_sdram_phaseinjector3_command_issue_w = 1'd0;
reg           main_basesoc_sdram_phaseinjector3_command_issue_we = 1'd0;
reg           main_basesoc_sdram_phaseinjector3_command_re = 1'd0;
reg     [7:0] main_basesoc_sdram_phaseinjector3_command_storage = 8'd0;
wire          main_basesoc_sdram_phaseinjector3_csrfield_cas;
wire          main_basesoc_sdram_phaseinjector3_csrfield_cs;
wire          main_basesoc_sdram_phaseinjector3_csrfield_cs_bottom;
wire          main_basesoc_sdram_phaseinjector3_csrfield_cs_top;
wire          main_basesoc_sdram_phaseinjector3_csrfield_ras;
wire          main_basesoc_sdram_phaseinjector3_csrfield_rden;
wire          main_basesoc_sdram_phaseinjector3_csrfield_we;
wire          main_basesoc_sdram_phaseinjector3_csrfield_wren;
reg           main_basesoc_sdram_phaseinjector3_rddata_re = 1'd0;
reg    [63:0] main_basesoc_sdram_phaseinjector3_rddata_status = 64'd0;
wire          main_basesoc_sdram_phaseinjector3_rddata_we;
reg           main_basesoc_sdram_phaseinjector3_wrdata_re = 1'd0;
reg    [63:0] main_basesoc_sdram_phaseinjector3_wrdata_storage = 64'd0;
reg           main_basesoc_sdram_postponer_count = 1'd0;
wire          main_basesoc_sdram_postponer_req_i;
reg           main_basesoc_sdram_postponer_req_o = 1'd0;
wire          main_basesoc_sdram_ras_allowed;
reg           main_basesoc_sdram_re = 1'd0;
wire          main_basesoc_sdram_read_available;
wire          main_basesoc_sdram_reset_n;
wire          main_basesoc_sdram_sel;
reg           main_basesoc_sdram_sequencer_count = 1'd0;
wire          main_basesoc_sdram_sequencer_done0;
reg           main_basesoc_sdram_sequencer_done1 = 1'd0;
reg           main_basesoc_sdram_sequencer_start0 = 1'd0;
wire          main_basesoc_sdram_sequencer_start1;
reg     [5:0] main_basesoc_sdram_sequencer_trigger = 6'd0;
wire    [1:0] main_basesoc_sdram_settings;
wire          main_basesoc_sdram_slave_p0_act_n;
wire   [14:0] main_basesoc_sdram_slave_p0_address;
wire    [2:0] main_basesoc_sdram_slave_p0_bank;
wire          main_basesoc_sdram_slave_p0_cas_n;
wire          main_basesoc_sdram_slave_p0_cke;
wire          main_basesoc_sdram_slave_p0_cs_n;
wire          main_basesoc_sdram_slave_p0_odt;
wire          main_basesoc_sdram_slave_p0_ras_n;
reg    [63:0] main_basesoc_sdram_slave_p0_rddata = 64'd0;
wire          main_basesoc_sdram_slave_p0_rddata_en;
reg           main_basesoc_sdram_slave_p0_rddata_valid = 1'd0;
wire          main_basesoc_sdram_slave_p0_reset_n;
wire          main_basesoc_sdram_slave_p0_we_n;
wire   [63:0] main_basesoc_sdram_slave_p0_wrdata;
wire          main_basesoc_sdram_slave_p0_wrdata_en;
wire    [7:0] main_basesoc_sdram_slave_p0_wrdata_mask;
wire          main_basesoc_sdram_slave_p1_act_n;
wire   [14:0] main_basesoc_sdram_slave_p1_address;
wire    [2:0] main_basesoc_sdram_slave_p1_bank;
wire          main_basesoc_sdram_slave_p1_cas_n;
wire          main_basesoc_sdram_slave_p1_cke;
wire          main_basesoc_sdram_slave_p1_cs_n;
wire          main_basesoc_sdram_slave_p1_odt;
wire          main_basesoc_sdram_slave_p1_ras_n;
reg    [63:0] main_basesoc_sdram_slave_p1_rddata = 64'd0;
wire          main_basesoc_sdram_slave_p1_rddata_en;
reg           main_basesoc_sdram_slave_p1_rddata_valid = 1'd0;
wire          main_basesoc_sdram_slave_p1_reset_n;
wire          main_basesoc_sdram_slave_p1_we_n;
wire   [63:0] main_basesoc_sdram_slave_p1_wrdata;
wire          main_basesoc_sdram_slave_p1_wrdata_en;
wire    [7:0] main_basesoc_sdram_slave_p1_wrdata_mask;
wire          main_basesoc_sdram_slave_p2_act_n;
wire   [14:0] main_basesoc_sdram_slave_p2_address;
wire    [2:0] main_basesoc_sdram_slave_p2_bank;
wire          main_basesoc_sdram_slave_p2_cas_n;
wire          main_basesoc_sdram_slave_p2_cke;
wire          main_basesoc_sdram_slave_p2_cs_n;
wire          main_basesoc_sdram_slave_p2_odt;
wire          main_basesoc_sdram_slave_p2_ras_n;
reg    [63:0] main_basesoc_sdram_slave_p2_rddata = 64'd0;
wire          main_basesoc_sdram_slave_p2_rddata_en;
reg           main_basesoc_sdram_slave_p2_rddata_valid = 1'd0;
wire          main_basesoc_sdram_slave_p2_reset_n;
wire          main_basesoc_sdram_slave_p2_we_n;
wire   [63:0] main_basesoc_sdram_slave_p2_wrdata;
wire          main_basesoc_sdram_slave_p2_wrdata_en;
wire    [7:0] main_basesoc_sdram_slave_p2_wrdata_mask;
wire          main_basesoc_sdram_slave_p3_act_n;
wire   [14:0] main_basesoc_sdram_slave_p3_address;
wire    [2:0] main_basesoc_sdram_slave_p3_bank;
wire          main_basesoc_sdram_slave_p3_cas_n;
wire          main_basesoc_sdram_slave_p3_cke;
wire          main_basesoc_sdram_slave_p3_cs_n;
wire          main_basesoc_sdram_slave_p3_odt;
wire          main_basesoc_sdram_slave_p3_ras_n;
reg    [63:0] main_basesoc_sdram_slave_p3_rddata = 64'd0;
wire          main_basesoc_sdram_slave_p3_rddata_en;
reg           main_basesoc_sdram_slave_p3_rddata_valid = 1'd0;
wire          main_basesoc_sdram_slave_p3_reset_n;
wire          main_basesoc_sdram_slave_p3_we_n;
wire   [63:0] main_basesoc_sdram_slave_p3_wrdata;
wire          main_basesoc_sdram_slave_p3_wrdata_en;
wire    [7:0] main_basesoc_sdram_slave_p3_wrdata_mask;
reg           main_basesoc_sdram_steerer0 = 1'd1;
reg           main_basesoc_sdram_steerer1 = 1'd1;
reg           main_basesoc_sdram_steerer2 = 1'd1;
reg           main_basesoc_sdram_steerer3 = 1'd1;
reg           main_basesoc_sdram_steerer4 = 1'd1;
reg           main_basesoc_sdram_steerer5 = 1'd1;
reg           main_basesoc_sdram_steerer6 = 1'd1;
reg           main_basesoc_sdram_steerer7 = 1'd1;
reg     [1:0] main_basesoc_sdram_steerer_sel0 = 2'd0;
reg     [1:0] main_basesoc_sdram_steerer_sel1 = 2'd0;
reg     [1:0] main_basesoc_sdram_steerer_sel2 = 2'd0;
reg     [1:0] main_basesoc_sdram_steerer_sel3 = 2'd0;
reg     [3:0] main_basesoc_sdram_storage = 4'd1;
reg           main_basesoc_sdram_tccdcon_count = 1'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_tccdcon_ready = 1'd0;
wire          main_basesoc_sdram_tccdcon_valid;
wire    [1:0] main_basesoc_sdram_tfawcon_count;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_tfawcon_ready = 1'd1;
reg     [2:0] main_basesoc_sdram_tfawcon_self = 3'd0;
wire          main_basesoc_sdram_tfawcon_valid;
reg     [4:0] main_basesoc_sdram_time0 = 5'd0;
reg     [3:0] main_basesoc_sdram_time1 = 4'd0;
wire    [8:0] main_basesoc_sdram_timer_count0;
reg     [8:0] main_basesoc_sdram_timer_count1 = 9'd390;
wire          main_basesoc_sdram_timer_done0;
wire          main_basesoc_sdram_timer_done1;
wire          main_basesoc_sdram_timer_wait;
reg           main_basesoc_sdram_trrdcon_count = 1'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_trrdcon_ready = 1'd0;
wire          main_basesoc_sdram_trrdcon_valid;
reg     [2:0] main_basesoc_sdram_twtrcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_basesoc_sdram_twtrcon_ready = 1'd0;
wire          main_basesoc_sdram_twtrcon_valid;
wire          main_basesoc_sdram_wants_refresh;
wire          main_basesoc_sdram_wants_zqcs;
wire          main_basesoc_sdram_write_available;
reg           main_basesoc_sdram_zqcs_executer_done = 1'd0;
reg           main_basesoc_sdram_zqcs_executer_start = 1'd0;
reg     [4:0] main_basesoc_sdram_zqcs_executer_trigger = 5'd0;
wire   [25:0] main_basesoc_sdram_zqcs_timer_count0;
reg    [25:0] main_basesoc_sdram_zqcs_timer_count1 = 26'd49999999;
wire          main_basesoc_sdram_zqcs_timer_done0;
wire          main_basesoc_sdram_zqcs_timer_done1;
wire          main_basesoc_sdram_zqcs_timer_wait;
reg           main_basesoc_tag_di_dirty = 1'd0;
wire   [21:0] main_basesoc_tag_di_tag;
wire          main_basesoc_tag_do_dirty;
wire   [21:0] main_basesoc_tag_do_tag;
wire    [7:0] main_basesoc_tag_port_adr;
wire   [22:0] main_basesoc_tag_port_dat_r;
wire   [22:0] main_basesoc_tag_port_dat_w;
reg           main_basesoc_tag_port_we = 1'd0;
reg           main_basesoc_wb_sdram_ack = 1'd0;
wire   [29:0] main_basesoc_wb_sdram_adr;
wire    [1:0] main_basesoc_wb_sdram_bte;
wire    [2:0] main_basesoc_wb_sdram_cti;
wire          main_basesoc_wb_sdram_cyc;
reg    [31:0] main_basesoc_wb_sdram_dat_r = 32'd0;
wire   [31:0] main_basesoc_wb_sdram_dat_w;
reg           main_basesoc_wb_sdram_err = 1'd0;
wire    [3:0] main_basesoc_wb_sdram_sel;
wire          main_basesoc_wb_sdram_stb;
wire          main_basesoc_wb_sdram_we;
reg           main_basesoc_word_clr = 1'd0;
reg           main_basesoc_word_inc = 1'd0;
reg           main_basesoc_write_from_slave = 1'd0;
reg           main_bypass_en_re = 1'd0;
reg           main_bypass_en_storage = 1'd0;
reg           main_cordic_rx_phase_re = 1'd0;
reg    [18:0] main_cordic_rx_phase_storage = 19'd0;
reg           main_cordic_tx_phase_re = 1'd0;
reg    [18:0] main_cordic_tx_phase_storage = 19'd0;
(* dont_touch = "true" *)
wire          main_crg_clkin;
wire          main_crg_clkout0;
wire          main_crg_clkout1;
wire          main_crg_clkout2;
wire          main_crg_clkout3;
wire          main_crg_clkout_buf0;
wire          main_crg_clkout_buf1;
wire          main_crg_clkout_buf2;
wire          main_crg_clkout_buf3;
reg           main_crg_ic_reset = 1'd1;
wire          main_crg_locked;
reg           main_crg_power_down = 1'd0;
wire          main_crg_reset;
reg     [3:0] main_crg_reset_counter = 4'd15;
reg           main_crg_rst = 1'd0;
reg           main_downsample_factor_re = 1'd0;
reg     [3:0] main_downsample_factor_storage = 4'd0;
reg           main_ethphy__r_re = 1'd0;
reg           main_ethphy__r_status = 1'd0;
wire          main_ethphy__r_we;
reg           main_ethphy__w_re = 1'd0;
reg     [2:0] main_ethphy__w_storage = 3'd0;
wire          main_ethphy_clkin;
wire          main_ethphy_clkout0;
wire          main_ethphy_clkout1;
wire          main_ethphy_clkout_buf0;
wire          main_ethphy_clkout_buf1;
wire          main_ethphy_data_oe;
wire          main_ethphy_data_r;
wire          main_ethphy_data_w;
wire          main_ethphy_eth_rx_clk_ibuf;
wire          main_ethphy_eth_tx_clk_obuf;
reg     [8:0] main_ethphy_hw_reset_counter = 9'd0;
wire          main_ethphy_hw_reset_counter_ce;
wire          main_ethphy_hw_reset_counter_done;
wire          main_ethphy_hw_reset_reset;
wire          main_ethphy_liteethphyrgmiirx;
wire          main_ethphy_liteethphyrgmiirx_last;
wire          main_ethphy_liteethphyrgmiirx_rx_ctl;
reg           main_ethphy_liteethphyrgmiirx_rx_ctl_d = 1'd0;
wire          main_ethphy_liteethphyrgmiirx_rx_ctl_ibuf;
wire          main_ethphy_liteethphyrgmiirx_rx_ctl_idelay;
wire    [7:0] main_ethphy_liteethphyrgmiirx_rx_data;
wire    [3:0] main_ethphy_liteethphyrgmiirx_rx_data_ibuf;
wire    [3:0] main_ethphy_liteethphyrgmiirx_rx_data_idelay;
reg           main_ethphy_liteethphyrgmiirx_source_first = 1'd0;
wire          main_ethphy_liteethphyrgmiirx_source_last;
reg     [7:0] main_ethphy_liteethphyrgmiirx_source_payload_data = 8'd0;
reg           main_ethphy_liteethphyrgmiirx_source_payload_error = 1'd0;
reg           main_ethphy_liteethphyrgmiirx_source_payload_last_be = 1'd0;
wire          main_ethphy_liteethphyrgmiirx_source_ready;
reg           main_ethphy_liteethphyrgmiirx_source_valid = 1'd0;
wire          main_ethphy_mdc;
wire          main_ethphy_oe;
wire          main_ethphy_pll_locked;
reg           main_ethphy_pll_power_down = 1'd0;
reg           main_ethphy_pll_reset = 1'd0;
reg           main_ethphy_r = 1'd0;
wire          main_ethphy_reset;
reg           main_ethphy_reset_re = 1'd0;
reg           main_ethphy_reset_storage = 1'd0;
wire          main_ethphy_sink_first;
wire          main_ethphy_sink_last;
wire    [7:0] main_ethphy_sink_payload_data;
wire          main_ethphy_sink_payload_error;
wire          main_ethphy_sink_payload_last_be;
wire          main_ethphy_sink_ready;
wire          main_ethphy_sink_valid;
wire          main_ethphy_tx_ctl_obuf;
wire    [3:0] main_ethphy_tx_data_obuf;
wire          main_ethphy_w;
reg           main_gain_rx_re = 1'd0;
reg    [11:0] main_gain_rx_storage = 12'd0;
reg           main_gain_tx_re = 1'd0;
reg    [11:0] main_gain_tx_storage = 12'd0;
reg           main_hs_dbg_addr_re = 1'd0;
reg    [15:0] main_hs_dbg_addr_storage = 16'd0;
reg           main_hs_dbg_rdata_re = 1'd0;
reg    [31:0] main_hs_dbg_rdata_status = 32'd0;
wire          main_hs_dbg_rdata_we;
reg           main_hs_dbg_wdata_re = 1'd0;
reg    [31:0] main_hs_dbg_wdata_storage = 32'd0;
reg           main_ls_dbg_addr_re = 1'd0;
reg    [15:0] main_ls_dbg_addr_storage = 16'd0;
reg           main_ls_dbg_rdata_re = 1'd0;
reg    [31:0] main_ls_dbg_rdata_status = 32'd0;
wire          main_ls_dbg_rdata_we;
reg           main_ls_dbg_wdata_re = 1'd0;
reg    [31:0] main_ls_dbg_wdata_storage = 32'd0;
reg           main_method_sel_re = 1'd0;
reg     [2:0] main_method_sel_storage = 3'd0;
reg           main_mux_sel_re = 1'd0;
reg     [2:0] main_mux_sel_storage = 3'd0;
reg           main_phase_inc_re = 1'd0;
reg    [18:0] main_phase_inc_storage = 19'd0;
reg           main_physics_busy_re = 1'd0;
reg           main_physics_busy_status = 1'd0;
wire          main_physics_busy_we;
reg           main_physics_run_re = 1'd0;
reg           main_physics_run_storage = 1'd0;
reg           main_rx_lpf_cutoff_re = 1'd0;
reg     [7:0] main_rx_lpf_cutoff_storage = 8'd0;
reg           main_sd_cmd_re = 1'd0;
reg     [7:0] main_sd_cmd_storage = 8'd0;
reg           main_sd_status_re = 1'd0;
reg     [7:0] main_sd_status_status = 8'd0;
wire          main_sd_status_we;
reg           main_tx_lpf_cutoff_re = 1'd0;
reg     [7:0] main_tx_lpf_cutoff_storage = 8'd0;
reg           main_upsample_factor_re = 1'd0;
reg     [3:0] main_upsample_factor_storage = 4'd0;
wire          sys4x_clk;
wire          sys4x_dqs_clk;
wire          sys4x_dqs_rst;
wire          sys4x_rst;
(* dont_touch = "true" *)
wire          sys_clk;
wire          sys_rst;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_basesoc_basesoc_reset = (main_basesoc_basesoc_soc_rst | main_basesoc_basesoc_cpu_rst);
assign etherbone_clk = sys_clk;
assign etherbone_rst = sys_rst;
always @(*) begin
    main_crg_rst <= 1'd0;
    if (main_basesoc_basesoc_soc_rst) begin
        main_crg_rst <= 1'd1;
    end
end
assign main_basesoc_basesoc_bus_error = builder_error;
always @(*) begin
    main_basesoc_basesoc_interrupt <= 32'd0;
    main_basesoc_basesoc_interrupt[1] <= main_basesoc_basesoc_timer_irq;
    main_basesoc_basesoc_interrupt[0] <= main_basesoc_basesoc_uart_irq;
end
assign main_crg_reset = main_crg_rst;
assign sys_clk = main_crg_clkout_buf0;
assign sys4x_clk = main_crg_clkout_buf1;
assign sys4x_dqs_clk = main_crg_clkout_buf2;
assign idelay_clk = main_crg_clkout_buf3;
assign builder_shared_adr = builder_rhs_self0;
assign builder_shared_dat_w = builder_rhs_self1;
assign builder_shared_sel = builder_rhs_self2;
assign builder_shared_cyc = builder_rhs_self3;
assign builder_shared_stb = builder_rhs_self4;
assign builder_shared_we = builder_rhs_self5;
assign builder_shared_cti = builder_rhs_self6;
assign builder_shared_bte = builder_rhs_self7;
assign main_basesoc_basesoc_ibus_dat_r = builder_shared_dat_r;
assign main_basesoc_basesoc_dbus_dat_r = builder_shared_dat_r;
assign main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_dat_r = builder_shared_dat_r;
assign main_basesoc_basesoc_ibus_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_basesoc_basesoc_dbus_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_ack = (builder_shared_ack & (builder_grant == 2'd2));
assign main_basesoc_basesoc_ibus_err = (builder_shared_err & (builder_grant == 1'd0));
assign main_basesoc_basesoc_dbus_err = (builder_shared_err & (builder_grant == 1'd1));
assign main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_err = (builder_shared_err & (builder_grant == 2'd2));
assign builder_request = {main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_cyc, main_basesoc_basesoc_dbus_cyc, main_basesoc_basesoc_ibus_cyc};
always @(*) begin
    builder_master <= 4'd0;
    builder_master[0] <= (builder_shared_adr[29:15] == 1'd0);
    builder_master[1] <= (builder_shared_adr[29:11] == 16'd32768);
    builder_master[2] <= (builder_shared_adr[29:28] == 1'd1);
    builder_master[3] <= (builder_shared_adr[29:14] == 16'd61440);
end
assign main_basesoc_basesoc_basesoc_ram_bus_adr = builder_shared_adr;
assign main_basesoc_basesoc_basesoc_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_basesoc_basesoc_ram_bus_sel = builder_shared_sel;
assign main_basesoc_basesoc_basesoc_ram_bus_stb = builder_shared_stb;
assign main_basesoc_basesoc_basesoc_ram_bus_we = builder_shared_we;
assign main_basesoc_basesoc_basesoc_ram_bus_cti = builder_shared_cti;
assign main_basesoc_basesoc_basesoc_ram_bus_bte = builder_shared_bte;
assign main_basesoc_basesoc_ram_bus_ram_bus_adr = builder_shared_adr;
assign main_basesoc_basesoc_ram_bus_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_basesoc_ram_bus_ram_bus_sel = builder_shared_sel;
assign main_basesoc_basesoc_ram_bus_ram_bus_stb = builder_shared_stb;
assign main_basesoc_basesoc_ram_bus_ram_bus_we = builder_shared_we;
assign main_basesoc_basesoc_ram_bus_ram_bus_cti = builder_shared_cti;
assign main_basesoc_basesoc_ram_bus_ram_bus_bte = builder_shared_bte;
assign main_basesoc_wb_sdram_adr = builder_shared_adr;
assign main_basesoc_wb_sdram_dat_w = builder_shared_dat_w;
assign main_basesoc_wb_sdram_sel = builder_shared_sel;
assign main_basesoc_wb_sdram_stb = builder_shared_stb;
assign main_basesoc_wb_sdram_we = builder_shared_we;
assign main_basesoc_wb_sdram_cti = builder_shared_cti;
assign main_basesoc_wb_sdram_bte = builder_shared_bte;
assign builder_interface0_adr = builder_shared_adr;
assign builder_interface0_dat_w = builder_shared_dat_w;
assign builder_interface0_sel = builder_shared_sel;
assign builder_interface0_stb = builder_shared_stb;
assign builder_interface0_we = builder_shared_we;
assign builder_interface0_cti = builder_shared_cti;
assign builder_interface0_bte = builder_shared_bte;
assign main_basesoc_basesoc_basesoc_ram_bus_cyc = (builder_shared_cyc & builder_master[0]);
assign main_basesoc_basesoc_ram_bus_ram_bus_cyc = (builder_shared_cyc & builder_master[1]);
assign main_basesoc_wb_sdram_cyc = (builder_shared_cyc & builder_master[2]);
assign builder_interface0_cyc = (builder_shared_cyc & builder_master[3]);
assign builder_shared_err = (((main_basesoc_basesoc_basesoc_ram_bus_err | main_basesoc_basesoc_ram_bus_ram_bus_err) | main_basesoc_wb_sdram_err) | builder_interface0_err);
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
    builder_error <= 1'd0;
    builder_shared_ack <= 1'd0;
    builder_shared_dat_r <= 32'd0;
    builder_shared_ack <= (((main_basesoc_basesoc_basesoc_ram_bus_ack | main_basesoc_basesoc_ram_bus_ram_bus_ack) | main_basesoc_wb_sdram_ack) | builder_interface0_ack);
    builder_shared_dat_r <= (((({32{builder_slaves[0]}} & main_basesoc_basesoc_basesoc_ram_bus_dat_r) | ({32{builder_slaves[1]}} & main_basesoc_basesoc_ram_bus_ram_bus_dat_r)) | ({32{builder_slaves[2]}} & main_basesoc_wb_sdram_dat_r)) | ({32{builder_slaves[3]}} & builder_interface0_dat_r));
    if (builder_done) begin
        builder_shared_dat_r <= 32'd4294967295;
        builder_shared_ack <= 1'd1;
        builder_error <= 1'd1;
    end
end
assign builder_done = (builder_count == 1'd0);
assign main_basesoc_basesoc_bus_errors_status = main_basesoc_basesoc_bus_errors;
assign main_basesoc_basesoc_basesoc_adr = main_basesoc_basesoc_basesoc_ram_bus_adr[14:0];
assign main_basesoc_basesoc_basesoc_ram_bus_dat_r = main_basesoc_basesoc_basesoc_dat_r;
always @(*) begin
    main_basesoc_basesoc_ram_we <= 4'd0;
    main_basesoc_basesoc_ram_we[0] <= (((main_basesoc_basesoc_ram_bus_ram_bus_cyc & main_basesoc_basesoc_ram_bus_ram_bus_stb) & main_basesoc_basesoc_ram_bus_ram_bus_we) & main_basesoc_basesoc_ram_bus_ram_bus_sel[0]);
    main_basesoc_basesoc_ram_we[1] <= (((main_basesoc_basesoc_ram_bus_ram_bus_cyc & main_basesoc_basesoc_ram_bus_ram_bus_stb) & main_basesoc_basesoc_ram_bus_ram_bus_we) & main_basesoc_basesoc_ram_bus_ram_bus_sel[1]);
    main_basesoc_basesoc_ram_we[2] <= (((main_basesoc_basesoc_ram_bus_ram_bus_cyc & main_basesoc_basesoc_ram_bus_ram_bus_stb) & main_basesoc_basesoc_ram_bus_ram_bus_we) & main_basesoc_basesoc_ram_bus_ram_bus_sel[2]);
    main_basesoc_basesoc_ram_we[3] <= (((main_basesoc_basesoc_ram_bus_ram_bus_cyc & main_basesoc_basesoc_ram_bus_ram_bus_stb) & main_basesoc_basesoc_ram_bus_ram_bus_we) & main_basesoc_basesoc_ram_bus_ram_bus_sel[3]);
end
assign main_basesoc_basesoc_ram_adr = main_basesoc_basesoc_ram_bus_ram_bus_adr[10:0];
assign main_basesoc_basesoc_ram_bus_ram_bus_dat_r = main_basesoc_basesoc_ram_dat_r;
assign main_basesoc_basesoc_ram_dat_w = main_basesoc_basesoc_ram_bus_ram_bus_dat_w;
always @(*) begin
    builder_rs232phytx_next_state <= 1'd0;
    main_basesoc_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    main_basesoc_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    main_basesoc_basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    main_basesoc_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    main_basesoc_basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    main_basesoc_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    main_basesoc_basesoc_tx_enable <= 1'd0;
    main_basesoc_basesoc_tx_sink_ready <= 1'd0;
    builder_rs232phytx_next_state <= builder_rs232phytx_state;
    case (builder_rs232phytx_state)
        1'd1: begin
            main_basesoc_basesoc_tx_enable <= 1'd1;
            if (main_basesoc_basesoc_tx_tick) begin
                main_basesoc_basesoc_serial_tx_rs232phytx_next_value1 <= main_basesoc_basesoc_tx_data;
                main_basesoc_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_basesoc_tx_count_rs232phytx_next_value0 <= (main_basesoc_basesoc_tx_count + 1'd1);
                main_basesoc_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                main_basesoc_basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, main_basesoc_basesoc_tx_data[7:1]};
                main_basesoc_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((main_basesoc_basesoc_tx_count == 4'd9)) begin
                    main_basesoc_basesoc_tx_sink_ready <= 1'd1;
                    builder_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            main_basesoc_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            main_basesoc_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            main_basesoc_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (main_basesoc_basesoc_tx_sink_valid) begin
                main_basesoc_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                main_basesoc_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_basesoc_tx_data_rs232phytx_next_value2 <= main_basesoc_basesoc_tx_sink_payload_data;
                main_basesoc_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                builder_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_rs232phyrx_next_state <= 1'd0;
    main_basesoc_basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    main_basesoc_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    main_basesoc_basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    main_basesoc_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    main_basesoc_basesoc_rx_enable <= 1'd0;
    main_basesoc_basesoc_rx_source_payload_data <= 8'd0;
    main_basesoc_basesoc_rx_source_valid <= 1'd0;
    builder_rs232phyrx_next_state <= builder_rs232phyrx_state;
    case (builder_rs232phyrx_state)
        1'd1: begin
            main_basesoc_basesoc_rx_enable <= 1'd1;
            if (main_basesoc_basesoc_rx_tick) begin
                main_basesoc_basesoc_rx_count_rs232phyrx_next_value0 <= (main_basesoc_basesoc_rx_count + 1'd1);
                main_basesoc_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                main_basesoc_basesoc_rx_data_rs232phyrx_next_value1 <= {main_basesoc_basesoc_rx_rx, main_basesoc_basesoc_rx_data[7:1]};
                main_basesoc_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((main_basesoc_basesoc_rx_count == 4'd9)) begin
                    main_basesoc_basesoc_rx_source_valid <= (main_basesoc_basesoc_rx_rx == 1'd1);
                    main_basesoc_basesoc_rx_source_payload_data <= main_basesoc_basesoc_rx_data;
                    builder_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            main_basesoc_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((main_basesoc_basesoc_rx_rx == 1'd0) & (main_basesoc_basesoc_rx_rx_d == 1'd1))) begin
                builder_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_basesoc_uart_uart_sink_valid = main_basesoc_basesoc_rx_source_valid;
assign main_basesoc_basesoc_rx_source_ready = main_basesoc_basesoc_uart_uart_sink_ready;
assign main_basesoc_basesoc_uart_uart_sink_first = main_basesoc_basesoc_rx_source_first;
assign main_basesoc_basesoc_uart_uart_sink_last = main_basesoc_basesoc_rx_source_last;
assign main_basesoc_basesoc_uart_uart_sink_payload_data = main_basesoc_basesoc_rx_source_payload_data;
assign main_basesoc_basesoc_tx_sink_valid = main_basesoc_basesoc_uart_uart_source_valid;
assign main_basesoc_basesoc_uart_uart_source_ready = main_basesoc_basesoc_tx_sink_ready;
assign main_basesoc_basesoc_tx_sink_first = main_basesoc_basesoc_uart_uart_source_first;
assign main_basesoc_basesoc_tx_sink_last = main_basesoc_basesoc_uart_uart_source_last;
assign main_basesoc_basesoc_tx_sink_payload_data = main_basesoc_basesoc_uart_uart_source_payload_data;
assign main_basesoc_basesoc_uart_tx_fifo_sink_valid = main_basesoc_basesoc_uart_rxtx_re;
assign main_basesoc_basesoc_uart_tx_fifo_sink_payload_data = main_basesoc_basesoc_uart_rxtx_r;
assign main_basesoc_basesoc_uart_uart_source_valid = main_basesoc_basesoc_uart_tx_fifo_source_valid;
assign main_basesoc_basesoc_uart_tx_fifo_source_ready = main_basesoc_basesoc_uart_uart_source_ready;
assign main_basesoc_basesoc_uart_uart_source_first = main_basesoc_basesoc_uart_tx_fifo_source_first;
assign main_basesoc_basesoc_uart_uart_source_last = main_basesoc_basesoc_uart_tx_fifo_source_last;
assign main_basesoc_basesoc_uart_uart_source_payload_data = main_basesoc_basesoc_uart_tx_fifo_source_payload_data;
assign main_basesoc_basesoc_uart_txfull_status = (~main_basesoc_basesoc_uart_tx_fifo_sink_ready);
assign main_basesoc_basesoc_uart_txempty_status = (~main_basesoc_basesoc_uart_tx_fifo_source_valid);
assign main_basesoc_basesoc_uart_tx_trigger = main_basesoc_basesoc_uart_tx_fifo_sink_ready;
assign main_basesoc_basesoc_uart_rx_fifo_sink_valid = main_basesoc_basesoc_uart_uart_sink_valid;
assign main_basesoc_basesoc_uart_uart_sink_ready = main_basesoc_basesoc_uart_rx_fifo_sink_ready;
assign main_basesoc_basesoc_uart_rx_fifo_sink_first = main_basesoc_basesoc_uart_uart_sink_first;
assign main_basesoc_basesoc_uart_rx_fifo_sink_last = main_basesoc_basesoc_uart_uart_sink_last;
assign main_basesoc_basesoc_uart_rx_fifo_sink_payload_data = main_basesoc_basesoc_uart_uart_sink_payload_data;
assign main_basesoc_basesoc_uart_rxtx_w = main_basesoc_basesoc_uart_rx_fifo_source_payload_data;
assign main_basesoc_basesoc_uart_rx_fifo_source_ready = (main_basesoc_basesoc_uart_rx_clear | (1'd0 & main_basesoc_basesoc_uart_rxtx_we));
assign main_basesoc_basesoc_uart_rxempty_status = (~main_basesoc_basesoc_uart_rx_fifo_source_valid);
assign main_basesoc_basesoc_uart_rxfull_status = (~main_basesoc_basesoc_uart_rx_fifo_sink_ready);
assign main_basesoc_basesoc_uart_rx_trigger = main_basesoc_basesoc_uart_rx_fifo_source_valid;
assign main_basesoc_basesoc_uart_tx0 = main_basesoc_basesoc_uart_tx_status;
assign main_basesoc_basesoc_uart_tx1 = main_basesoc_basesoc_uart_tx_pending;
always @(*) begin
    main_basesoc_basesoc_uart_tx_clear <= 1'd0;
    if ((main_basesoc_basesoc_uart_pending_re & main_basesoc_basesoc_uart_pending_r[0])) begin
        main_basesoc_basesoc_uart_tx_clear <= 1'd1;
    end
end
assign main_basesoc_basesoc_uart_rx0 = main_basesoc_basesoc_uart_rx_status;
assign main_basesoc_basesoc_uart_rx1 = main_basesoc_basesoc_uart_rx_pending;
always @(*) begin
    main_basesoc_basesoc_uart_rx_clear <= 1'd0;
    if ((main_basesoc_basesoc_uart_pending_re & main_basesoc_basesoc_uart_pending_r[1])) begin
        main_basesoc_basesoc_uart_rx_clear <= 1'd1;
    end
end
assign main_basesoc_basesoc_uart_irq = ((main_basesoc_basesoc_uart_pending_status[0] & main_basesoc_basesoc_uart_enable_storage[0]) | (main_basesoc_basesoc_uart_pending_status[1] & main_basesoc_basesoc_uart_enable_storage[1]));
assign main_basesoc_basesoc_uart_tx_status = main_basesoc_basesoc_uart_tx_trigger;
assign main_basesoc_basesoc_uart_rx_status = main_basesoc_basesoc_uart_rx_trigger;
assign main_basesoc_basesoc_uart_tx_fifo_syncfifo_din = {main_basesoc_basesoc_uart_tx_fifo_fifo_in_last, main_basesoc_basesoc_uart_tx_fifo_fifo_in_first, main_basesoc_basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {main_basesoc_basesoc_uart_tx_fifo_fifo_out_last, main_basesoc_basesoc_uart_tx_fifo_fifo_out_first, main_basesoc_basesoc_uart_tx_fifo_fifo_out_payload_data} = main_basesoc_basesoc_uart_tx_fifo_syncfifo_dout;
assign main_basesoc_basesoc_uart_tx_fifo_sink_ready = main_basesoc_basesoc_uart_tx_fifo_syncfifo_writable;
assign main_basesoc_basesoc_uart_tx_fifo_syncfifo_we = main_basesoc_basesoc_uart_tx_fifo_sink_valid;
assign main_basesoc_basesoc_uart_tx_fifo_fifo_in_first = main_basesoc_basesoc_uart_tx_fifo_sink_first;
assign main_basesoc_basesoc_uart_tx_fifo_fifo_in_last = main_basesoc_basesoc_uart_tx_fifo_sink_last;
assign main_basesoc_basesoc_uart_tx_fifo_fifo_in_payload_data = main_basesoc_basesoc_uart_tx_fifo_sink_payload_data;
assign main_basesoc_basesoc_uart_tx_fifo_source_valid = main_basesoc_basesoc_uart_tx_fifo_readable;
assign main_basesoc_basesoc_uart_tx_fifo_source_first = main_basesoc_basesoc_uart_tx_fifo_fifo_out_first;
assign main_basesoc_basesoc_uart_tx_fifo_source_last = main_basesoc_basesoc_uart_tx_fifo_fifo_out_last;
assign main_basesoc_basesoc_uart_tx_fifo_source_payload_data = main_basesoc_basesoc_uart_tx_fifo_fifo_out_payload_data;
assign main_basesoc_basesoc_uart_tx_fifo_re = main_basesoc_basesoc_uart_tx_fifo_source_ready;
assign main_basesoc_basesoc_uart_tx_fifo_syncfifo_re = (main_basesoc_basesoc_uart_tx_fifo_syncfifo_readable & ((~main_basesoc_basesoc_uart_tx_fifo_readable) | main_basesoc_basesoc_uart_tx_fifo_re));
assign main_basesoc_basesoc_uart_tx_fifo_level1 = (main_basesoc_basesoc_uart_tx_fifo_level0 + main_basesoc_basesoc_uart_tx_fifo_readable);
always @(*) begin
    main_basesoc_basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_basesoc_uart_tx_fifo_replace) begin
        main_basesoc_basesoc_uart_tx_fifo_wrport_adr <= (main_basesoc_basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_basesoc_uart_tx_fifo_wrport_adr <= main_basesoc_basesoc_uart_tx_fifo_produce;
    end
end
assign main_basesoc_basesoc_uart_tx_fifo_wrport_dat_w = main_basesoc_basesoc_uart_tx_fifo_syncfifo_din;
assign main_basesoc_basesoc_uart_tx_fifo_wrport_we = (main_basesoc_basesoc_uart_tx_fifo_syncfifo_we & (main_basesoc_basesoc_uart_tx_fifo_syncfifo_writable | main_basesoc_basesoc_uart_tx_fifo_replace));
assign main_basesoc_basesoc_uart_tx_fifo_do_read = (main_basesoc_basesoc_uart_tx_fifo_syncfifo_readable & main_basesoc_basesoc_uart_tx_fifo_syncfifo_re);
assign main_basesoc_basesoc_uart_tx_fifo_rdport_adr = main_basesoc_basesoc_uart_tx_fifo_consume;
assign main_basesoc_basesoc_uart_tx_fifo_syncfifo_dout = main_basesoc_basesoc_uart_tx_fifo_rdport_dat_r;
assign main_basesoc_basesoc_uart_tx_fifo_rdport_re = main_basesoc_basesoc_uart_tx_fifo_do_read;
assign main_basesoc_basesoc_uart_tx_fifo_syncfifo_writable = (main_basesoc_basesoc_uart_tx_fifo_level0 != 5'd16);
assign main_basesoc_basesoc_uart_tx_fifo_syncfifo_readable = (main_basesoc_basesoc_uart_tx_fifo_level0 != 1'd0);
assign main_basesoc_basesoc_uart_rx_fifo_syncfifo_din = {main_basesoc_basesoc_uart_rx_fifo_fifo_in_last, main_basesoc_basesoc_uart_rx_fifo_fifo_in_first, main_basesoc_basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {main_basesoc_basesoc_uart_rx_fifo_fifo_out_last, main_basesoc_basesoc_uart_rx_fifo_fifo_out_first, main_basesoc_basesoc_uart_rx_fifo_fifo_out_payload_data} = main_basesoc_basesoc_uart_rx_fifo_syncfifo_dout;
assign main_basesoc_basesoc_uart_rx_fifo_sink_ready = main_basesoc_basesoc_uart_rx_fifo_syncfifo_writable;
assign main_basesoc_basesoc_uart_rx_fifo_syncfifo_we = main_basesoc_basesoc_uart_rx_fifo_sink_valid;
assign main_basesoc_basesoc_uart_rx_fifo_fifo_in_first = main_basesoc_basesoc_uart_rx_fifo_sink_first;
assign main_basesoc_basesoc_uart_rx_fifo_fifo_in_last = main_basesoc_basesoc_uart_rx_fifo_sink_last;
assign main_basesoc_basesoc_uart_rx_fifo_fifo_in_payload_data = main_basesoc_basesoc_uart_rx_fifo_sink_payload_data;
assign main_basesoc_basesoc_uart_rx_fifo_source_valid = main_basesoc_basesoc_uart_rx_fifo_readable;
assign main_basesoc_basesoc_uart_rx_fifo_source_first = main_basesoc_basesoc_uart_rx_fifo_fifo_out_first;
assign main_basesoc_basesoc_uart_rx_fifo_source_last = main_basesoc_basesoc_uart_rx_fifo_fifo_out_last;
assign main_basesoc_basesoc_uart_rx_fifo_source_payload_data = main_basesoc_basesoc_uart_rx_fifo_fifo_out_payload_data;
assign main_basesoc_basesoc_uart_rx_fifo_re = main_basesoc_basesoc_uart_rx_fifo_source_ready;
assign main_basesoc_basesoc_uart_rx_fifo_syncfifo_re = (main_basesoc_basesoc_uart_rx_fifo_syncfifo_readable & ((~main_basesoc_basesoc_uart_rx_fifo_readable) | main_basesoc_basesoc_uart_rx_fifo_re));
assign main_basesoc_basesoc_uart_rx_fifo_level1 = (main_basesoc_basesoc_uart_rx_fifo_level0 + main_basesoc_basesoc_uart_rx_fifo_readable);
always @(*) begin
    main_basesoc_basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_basesoc_uart_rx_fifo_replace) begin
        main_basesoc_basesoc_uart_rx_fifo_wrport_adr <= (main_basesoc_basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_basesoc_uart_rx_fifo_wrport_adr <= main_basesoc_basesoc_uart_rx_fifo_produce;
    end
end
assign main_basesoc_basesoc_uart_rx_fifo_wrport_dat_w = main_basesoc_basesoc_uart_rx_fifo_syncfifo_din;
assign main_basesoc_basesoc_uart_rx_fifo_wrport_we = (main_basesoc_basesoc_uart_rx_fifo_syncfifo_we & (main_basesoc_basesoc_uart_rx_fifo_syncfifo_writable | main_basesoc_basesoc_uart_rx_fifo_replace));
assign main_basesoc_basesoc_uart_rx_fifo_do_read = (main_basesoc_basesoc_uart_rx_fifo_syncfifo_readable & main_basesoc_basesoc_uart_rx_fifo_syncfifo_re);
assign main_basesoc_basesoc_uart_rx_fifo_rdport_adr = main_basesoc_basesoc_uart_rx_fifo_consume;
assign main_basesoc_basesoc_uart_rx_fifo_syncfifo_dout = main_basesoc_basesoc_uart_rx_fifo_rdport_dat_r;
assign main_basesoc_basesoc_uart_rx_fifo_rdport_re = main_basesoc_basesoc_uart_rx_fifo_do_read;
assign main_basesoc_basesoc_uart_rx_fifo_syncfifo_writable = (main_basesoc_basesoc_uart_rx_fifo_level0 != 5'd16);
assign main_basesoc_basesoc_uart_rx_fifo_syncfifo_readable = (main_basesoc_basesoc_uart_rx_fifo_level0 != 1'd0);
assign main_basesoc_basesoc_timer_zero_trigger = (main_basesoc_basesoc_timer_value == 1'd0);
assign main_basesoc_basesoc_timer_zero0 = main_basesoc_basesoc_timer_zero_status;
assign main_basesoc_basesoc_timer_zero1 = main_basesoc_basesoc_timer_zero_pending;
always @(*) begin
    main_basesoc_basesoc_timer_zero_clear <= 1'd0;
    if ((main_basesoc_basesoc_timer_pending_re & main_basesoc_basesoc_timer_pending_r)) begin
        main_basesoc_basesoc_timer_zero_clear <= 1'd1;
    end
end
assign main_basesoc_basesoc_timer_irq = (main_basesoc_basesoc_timer_pending_status & main_basesoc_basesoc_timer_enable_storage);
assign main_basesoc_basesoc_timer_zero_status = main_basesoc_basesoc_timer_zero_trigger;
assign ddram_ba = main_a7ddrphy_pads_ba;
assign main_a7ddrphy_dqs_oe_delay_tappeddelayline = ((main_a7ddrphy_dqs_preamble | main_a7ddrphy_dqs_oe) | main_a7ddrphy_dqs_postamble);
assign main_a7ddrphy_dq_oe_delay_tappeddelayline = ((main_a7ddrphy_dqs_preamble | main_a7ddrphy_dq_oe) | main_a7ddrphy_dqs_postamble);
always @(*) begin
    main_a7ddrphy_dfi_p0_rddata <= 64'd0;
    main_a7ddrphy_dfi_p0_rddata[0] <= main_a7ddrphy_bitslip04[0];
    main_a7ddrphy_dfi_p0_rddata[32] <= main_a7ddrphy_bitslip04[1];
    main_a7ddrphy_dfi_p0_rddata[1] <= main_a7ddrphy_bitslip14[0];
    main_a7ddrphy_dfi_p0_rddata[33] <= main_a7ddrphy_bitslip14[1];
    main_a7ddrphy_dfi_p0_rddata[2] <= main_a7ddrphy_bitslip24[0];
    main_a7ddrphy_dfi_p0_rddata[34] <= main_a7ddrphy_bitslip24[1];
    main_a7ddrphy_dfi_p0_rddata[3] <= main_a7ddrphy_bitslip34[0];
    main_a7ddrphy_dfi_p0_rddata[35] <= main_a7ddrphy_bitslip34[1];
    main_a7ddrphy_dfi_p0_rddata[4] <= main_a7ddrphy_bitslip42[0];
    main_a7ddrphy_dfi_p0_rddata[36] <= main_a7ddrphy_bitslip42[1];
    main_a7ddrphy_dfi_p0_rddata[5] <= main_a7ddrphy_bitslip52[0];
    main_a7ddrphy_dfi_p0_rddata[37] <= main_a7ddrphy_bitslip52[1];
    main_a7ddrphy_dfi_p0_rddata[6] <= main_a7ddrphy_bitslip62[0];
    main_a7ddrphy_dfi_p0_rddata[38] <= main_a7ddrphy_bitslip62[1];
    main_a7ddrphy_dfi_p0_rddata[7] <= main_a7ddrphy_bitslip72[0];
    main_a7ddrphy_dfi_p0_rddata[39] <= main_a7ddrphy_bitslip72[1];
    main_a7ddrphy_dfi_p0_rddata[8] <= main_a7ddrphy_bitslip82[0];
    main_a7ddrphy_dfi_p0_rddata[40] <= main_a7ddrphy_bitslip82[1];
    main_a7ddrphy_dfi_p0_rddata[9] <= main_a7ddrphy_bitslip92[0];
    main_a7ddrphy_dfi_p0_rddata[41] <= main_a7ddrphy_bitslip92[1];
    main_a7ddrphy_dfi_p0_rddata[10] <= main_a7ddrphy_bitslip102[0];
    main_a7ddrphy_dfi_p0_rddata[42] <= main_a7ddrphy_bitslip102[1];
    main_a7ddrphy_dfi_p0_rddata[11] <= main_a7ddrphy_bitslip112[0];
    main_a7ddrphy_dfi_p0_rddata[43] <= main_a7ddrphy_bitslip112[1];
    main_a7ddrphy_dfi_p0_rddata[12] <= main_a7ddrphy_bitslip122[0];
    main_a7ddrphy_dfi_p0_rddata[44] <= main_a7ddrphy_bitslip122[1];
    main_a7ddrphy_dfi_p0_rddata[13] <= main_a7ddrphy_bitslip132[0];
    main_a7ddrphy_dfi_p0_rddata[45] <= main_a7ddrphy_bitslip132[1];
    main_a7ddrphy_dfi_p0_rddata[14] <= main_a7ddrphy_bitslip142[0];
    main_a7ddrphy_dfi_p0_rddata[46] <= main_a7ddrphy_bitslip142[1];
    main_a7ddrphy_dfi_p0_rddata[15] <= main_a7ddrphy_bitslip152[0];
    main_a7ddrphy_dfi_p0_rddata[47] <= main_a7ddrphy_bitslip152[1];
    main_a7ddrphy_dfi_p0_rddata[16] <= main_a7ddrphy_bitslip162[0];
    main_a7ddrphy_dfi_p0_rddata[48] <= main_a7ddrphy_bitslip162[1];
    main_a7ddrphy_dfi_p0_rddata[17] <= main_a7ddrphy_bitslip172[0];
    main_a7ddrphy_dfi_p0_rddata[49] <= main_a7ddrphy_bitslip172[1];
    main_a7ddrphy_dfi_p0_rddata[18] <= main_a7ddrphy_bitslip182[0];
    main_a7ddrphy_dfi_p0_rddata[50] <= main_a7ddrphy_bitslip182[1];
    main_a7ddrphy_dfi_p0_rddata[19] <= main_a7ddrphy_bitslip192[0];
    main_a7ddrphy_dfi_p0_rddata[51] <= main_a7ddrphy_bitslip192[1];
    main_a7ddrphy_dfi_p0_rddata[20] <= main_a7ddrphy_bitslip202[0];
    main_a7ddrphy_dfi_p0_rddata[52] <= main_a7ddrphy_bitslip202[1];
    main_a7ddrphy_dfi_p0_rddata[21] <= main_a7ddrphy_bitslip212[0];
    main_a7ddrphy_dfi_p0_rddata[53] <= main_a7ddrphy_bitslip212[1];
    main_a7ddrphy_dfi_p0_rddata[22] <= main_a7ddrphy_bitslip222[0];
    main_a7ddrphy_dfi_p0_rddata[54] <= main_a7ddrphy_bitslip222[1];
    main_a7ddrphy_dfi_p0_rddata[23] <= main_a7ddrphy_bitslip232[0];
    main_a7ddrphy_dfi_p0_rddata[55] <= main_a7ddrphy_bitslip232[1];
    main_a7ddrphy_dfi_p0_rddata[24] <= main_a7ddrphy_bitslip242[0];
    main_a7ddrphy_dfi_p0_rddata[56] <= main_a7ddrphy_bitslip242[1];
    main_a7ddrphy_dfi_p0_rddata[25] <= main_a7ddrphy_bitslip252[0];
    main_a7ddrphy_dfi_p0_rddata[57] <= main_a7ddrphy_bitslip252[1];
    main_a7ddrphy_dfi_p0_rddata[26] <= main_a7ddrphy_bitslip262[0];
    main_a7ddrphy_dfi_p0_rddata[58] <= main_a7ddrphy_bitslip262[1];
    main_a7ddrphy_dfi_p0_rddata[27] <= main_a7ddrphy_bitslip272[0];
    main_a7ddrphy_dfi_p0_rddata[59] <= main_a7ddrphy_bitslip272[1];
    main_a7ddrphy_dfi_p0_rddata[28] <= main_a7ddrphy_bitslip282[0];
    main_a7ddrphy_dfi_p0_rddata[60] <= main_a7ddrphy_bitslip282[1];
    main_a7ddrphy_dfi_p0_rddata[29] <= main_a7ddrphy_bitslip292[0];
    main_a7ddrphy_dfi_p0_rddata[61] <= main_a7ddrphy_bitslip292[1];
    main_a7ddrphy_dfi_p0_rddata[30] <= main_a7ddrphy_bitslip302[0];
    main_a7ddrphy_dfi_p0_rddata[62] <= main_a7ddrphy_bitslip302[1];
    main_a7ddrphy_dfi_p0_rddata[31] <= main_a7ddrphy_bitslip312[0];
    main_a7ddrphy_dfi_p0_rddata[63] <= main_a7ddrphy_bitslip312[1];
end
always @(*) begin
    main_a7ddrphy_dfi_p1_rddata <= 64'd0;
    main_a7ddrphy_dfi_p1_rddata[0] <= main_a7ddrphy_bitslip04[2];
    main_a7ddrphy_dfi_p1_rddata[32] <= main_a7ddrphy_bitslip04[3];
    main_a7ddrphy_dfi_p1_rddata[1] <= main_a7ddrphy_bitslip14[2];
    main_a7ddrphy_dfi_p1_rddata[33] <= main_a7ddrphy_bitslip14[3];
    main_a7ddrphy_dfi_p1_rddata[2] <= main_a7ddrphy_bitslip24[2];
    main_a7ddrphy_dfi_p1_rddata[34] <= main_a7ddrphy_bitslip24[3];
    main_a7ddrphy_dfi_p1_rddata[3] <= main_a7ddrphy_bitslip34[2];
    main_a7ddrphy_dfi_p1_rddata[35] <= main_a7ddrphy_bitslip34[3];
    main_a7ddrphy_dfi_p1_rddata[4] <= main_a7ddrphy_bitslip42[2];
    main_a7ddrphy_dfi_p1_rddata[36] <= main_a7ddrphy_bitslip42[3];
    main_a7ddrphy_dfi_p1_rddata[5] <= main_a7ddrphy_bitslip52[2];
    main_a7ddrphy_dfi_p1_rddata[37] <= main_a7ddrphy_bitslip52[3];
    main_a7ddrphy_dfi_p1_rddata[6] <= main_a7ddrphy_bitslip62[2];
    main_a7ddrphy_dfi_p1_rddata[38] <= main_a7ddrphy_bitslip62[3];
    main_a7ddrphy_dfi_p1_rddata[7] <= main_a7ddrphy_bitslip72[2];
    main_a7ddrphy_dfi_p1_rddata[39] <= main_a7ddrphy_bitslip72[3];
    main_a7ddrphy_dfi_p1_rddata[8] <= main_a7ddrphy_bitslip82[2];
    main_a7ddrphy_dfi_p1_rddata[40] <= main_a7ddrphy_bitslip82[3];
    main_a7ddrphy_dfi_p1_rddata[9] <= main_a7ddrphy_bitslip92[2];
    main_a7ddrphy_dfi_p1_rddata[41] <= main_a7ddrphy_bitslip92[3];
    main_a7ddrphy_dfi_p1_rddata[10] <= main_a7ddrphy_bitslip102[2];
    main_a7ddrphy_dfi_p1_rddata[42] <= main_a7ddrphy_bitslip102[3];
    main_a7ddrphy_dfi_p1_rddata[11] <= main_a7ddrphy_bitslip112[2];
    main_a7ddrphy_dfi_p1_rddata[43] <= main_a7ddrphy_bitslip112[3];
    main_a7ddrphy_dfi_p1_rddata[12] <= main_a7ddrphy_bitslip122[2];
    main_a7ddrphy_dfi_p1_rddata[44] <= main_a7ddrphy_bitslip122[3];
    main_a7ddrphy_dfi_p1_rddata[13] <= main_a7ddrphy_bitslip132[2];
    main_a7ddrphy_dfi_p1_rddata[45] <= main_a7ddrphy_bitslip132[3];
    main_a7ddrphy_dfi_p1_rddata[14] <= main_a7ddrphy_bitslip142[2];
    main_a7ddrphy_dfi_p1_rddata[46] <= main_a7ddrphy_bitslip142[3];
    main_a7ddrphy_dfi_p1_rddata[15] <= main_a7ddrphy_bitslip152[2];
    main_a7ddrphy_dfi_p1_rddata[47] <= main_a7ddrphy_bitslip152[3];
    main_a7ddrphy_dfi_p1_rddata[16] <= main_a7ddrphy_bitslip162[2];
    main_a7ddrphy_dfi_p1_rddata[48] <= main_a7ddrphy_bitslip162[3];
    main_a7ddrphy_dfi_p1_rddata[17] <= main_a7ddrphy_bitslip172[2];
    main_a7ddrphy_dfi_p1_rddata[49] <= main_a7ddrphy_bitslip172[3];
    main_a7ddrphy_dfi_p1_rddata[18] <= main_a7ddrphy_bitslip182[2];
    main_a7ddrphy_dfi_p1_rddata[50] <= main_a7ddrphy_bitslip182[3];
    main_a7ddrphy_dfi_p1_rddata[19] <= main_a7ddrphy_bitslip192[2];
    main_a7ddrphy_dfi_p1_rddata[51] <= main_a7ddrphy_bitslip192[3];
    main_a7ddrphy_dfi_p1_rddata[20] <= main_a7ddrphy_bitslip202[2];
    main_a7ddrphy_dfi_p1_rddata[52] <= main_a7ddrphy_bitslip202[3];
    main_a7ddrphy_dfi_p1_rddata[21] <= main_a7ddrphy_bitslip212[2];
    main_a7ddrphy_dfi_p1_rddata[53] <= main_a7ddrphy_bitslip212[3];
    main_a7ddrphy_dfi_p1_rddata[22] <= main_a7ddrphy_bitslip222[2];
    main_a7ddrphy_dfi_p1_rddata[54] <= main_a7ddrphy_bitslip222[3];
    main_a7ddrphy_dfi_p1_rddata[23] <= main_a7ddrphy_bitslip232[2];
    main_a7ddrphy_dfi_p1_rddata[55] <= main_a7ddrphy_bitslip232[3];
    main_a7ddrphy_dfi_p1_rddata[24] <= main_a7ddrphy_bitslip242[2];
    main_a7ddrphy_dfi_p1_rddata[56] <= main_a7ddrphy_bitslip242[3];
    main_a7ddrphy_dfi_p1_rddata[25] <= main_a7ddrphy_bitslip252[2];
    main_a7ddrphy_dfi_p1_rddata[57] <= main_a7ddrphy_bitslip252[3];
    main_a7ddrphy_dfi_p1_rddata[26] <= main_a7ddrphy_bitslip262[2];
    main_a7ddrphy_dfi_p1_rddata[58] <= main_a7ddrphy_bitslip262[3];
    main_a7ddrphy_dfi_p1_rddata[27] <= main_a7ddrphy_bitslip272[2];
    main_a7ddrphy_dfi_p1_rddata[59] <= main_a7ddrphy_bitslip272[3];
    main_a7ddrphy_dfi_p1_rddata[28] <= main_a7ddrphy_bitslip282[2];
    main_a7ddrphy_dfi_p1_rddata[60] <= main_a7ddrphy_bitslip282[3];
    main_a7ddrphy_dfi_p1_rddata[29] <= main_a7ddrphy_bitslip292[2];
    main_a7ddrphy_dfi_p1_rddata[61] <= main_a7ddrphy_bitslip292[3];
    main_a7ddrphy_dfi_p1_rddata[30] <= main_a7ddrphy_bitslip302[2];
    main_a7ddrphy_dfi_p1_rddata[62] <= main_a7ddrphy_bitslip302[3];
    main_a7ddrphy_dfi_p1_rddata[31] <= main_a7ddrphy_bitslip312[2];
    main_a7ddrphy_dfi_p1_rddata[63] <= main_a7ddrphy_bitslip312[3];
end
always @(*) begin
    main_a7ddrphy_dfi_p2_rddata <= 64'd0;
    main_a7ddrphy_dfi_p2_rddata[0] <= main_a7ddrphy_bitslip04[4];
    main_a7ddrphy_dfi_p2_rddata[32] <= main_a7ddrphy_bitslip04[5];
    main_a7ddrphy_dfi_p2_rddata[1] <= main_a7ddrphy_bitslip14[4];
    main_a7ddrphy_dfi_p2_rddata[33] <= main_a7ddrphy_bitslip14[5];
    main_a7ddrphy_dfi_p2_rddata[2] <= main_a7ddrphy_bitslip24[4];
    main_a7ddrphy_dfi_p2_rddata[34] <= main_a7ddrphy_bitslip24[5];
    main_a7ddrphy_dfi_p2_rddata[3] <= main_a7ddrphy_bitslip34[4];
    main_a7ddrphy_dfi_p2_rddata[35] <= main_a7ddrphy_bitslip34[5];
    main_a7ddrphy_dfi_p2_rddata[4] <= main_a7ddrphy_bitslip42[4];
    main_a7ddrphy_dfi_p2_rddata[36] <= main_a7ddrphy_bitslip42[5];
    main_a7ddrphy_dfi_p2_rddata[5] <= main_a7ddrphy_bitslip52[4];
    main_a7ddrphy_dfi_p2_rddata[37] <= main_a7ddrphy_bitslip52[5];
    main_a7ddrphy_dfi_p2_rddata[6] <= main_a7ddrphy_bitslip62[4];
    main_a7ddrphy_dfi_p2_rddata[38] <= main_a7ddrphy_bitslip62[5];
    main_a7ddrphy_dfi_p2_rddata[7] <= main_a7ddrphy_bitslip72[4];
    main_a7ddrphy_dfi_p2_rddata[39] <= main_a7ddrphy_bitslip72[5];
    main_a7ddrphy_dfi_p2_rddata[8] <= main_a7ddrphy_bitslip82[4];
    main_a7ddrphy_dfi_p2_rddata[40] <= main_a7ddrphy_bitslip82[5];
    main_a7ddrphy_dfi_p2_rddata[9] <= main_a7ddrphy_bitslip92[4];
    main_a7ddrphy_dfi_p2_rddata[41] <= main_a7ddrphy_bitslip92[5];
    main_a7ddrphy_dfi_p2_rddata[10] <= main_a7ddrphy_bitslip102[4];
    main_a7ddrphy_dfi_p2_rddata[42] <= main_a7ddrphy_bitslip102[5];
    main_a7ddrphy_dfi_p2_rddata[11] <= main_a7ddrphy_bitslip112[4];
    main_a7ddrphy_dfi_p2_rddata[43] <= main_a7ddrphy_bitslip112[5];
    main_a7ddrphy_dfi_p2_rddata[12] <= main_a7ddrphy_bitslip122[4];
    main_a7ddrphy_dfi_p2_rddata[44] <= main_a7ddrphy_bitslip122[5];
    main_a7ddrphy_dfi_p2_rddata[13] <= main_a7ddrphy_bitslip132[4];
    main_a7ddrphy_dfi_p2_rddata[45] <= main_a7ddrphy_bitslip132[5];
    main_a7ddrphy_dfi_p2_rddata[14] <= main_a7ddrphy_bitslip142[4];
    main_a7ddrphy_dfi_p2_rddata[46] <= main_a7ddrphy_bitslip142[5];
    main_a7ddrphy_dfi_p2_rddata[15] <= main_a7ddrphy_bitslip152[4];
    main_a7ddrphy_dfi_p2_rddata[47] <= main_a7ddrphy_bitslip152[5];
    main_a7ddrphy_dfi_p2_rddata[16] <= main_a7ddrphy_bitslip162[4];
    main_a7ddrphy_dfi_p2_rddata[48] <= main_a7ddrphy_bitslip162[5];
    main_a7ddrphy_dfi_p2_rddata[17] <= main_a7ddrphy_bitslip172[4];
    main_a7ddrphy_dfi_p2_rddata[49] <= main_a7ddrphy_bitslip172[5];
    main_a7ddrphy_dfi_p2_rddata[18] <= main_a7ddrphy_bitslip182[4];
    main_a7ddrphy_dfi_p2_rddata[50] <= main_a7ddrphy_bitslip182[5];
    main_a7ddrphy_dfi_p2_rddata[19] <= main_a7ddrphy_bitslip192[4];
    main_a7ddrphy_dfi_p2_rddata[51] <= main_a7ddrphy_bitslip192[5];
    main_a7ddrphy_dfi_p2_rddata[20] <= main_a7ddrphy_bitslip202[4];
    main_a7ddrphy_dfi_p2_rddata[52] <= main_a7ddrphy_bitslip202[5];
    main_a7ddrphy_dfi_p2_rddata[21] <= main_a7ddrphy_bitslip212[4];
    main_a7ddrphy_dfi_p2_rddata[53] <= main_a7ddrphy_bitslip212[5];
    main_a7ddrphy_dfi_p2_rddata[22] <= main_a7ddrphy_bitslip222[4];
    main_a7ddrphy_dfi_p2_rddata[54] <= main_a7ddrphy_bitslip222[5];
    main_a7ddrphy_dfi_p2_rddata[23] <= main_a7ddrphy_bitslip232[4];
    main_a7ddrphy_dfi_p2_rddata[55] <= main_a7ddrphy_bitslip232[5];
    main_a7ddrphy_dfi_p2_rddata[24] <= main_a7ddrphy_bitslip242[4];
    main_a7ddrphy_dfi_p2_rddata[56] <= main_a7ddrphy_bitslip242[5];
    main_a7ddrphy_dfi_p2_rddata[25] <= main_a7ddrphy_bitslip252[4];
    main_a7ddrphy_dfi_p2_rddata[57] <= main_a7ddrphy_bitslip252[5];
    main_a7ddrphy_dfi_p2_rddata[26] <= main_a7ddrphy_bitslip262[4];
    main_a7ddrphy_dfi_p2_rddata[58] <= main_a7ddrphy_bitslip262[5];
    main_a7ddrphy_dfi_p2_rddata[27] <= main_a7ddrphy_bitslip272[4];
    main_a7ddrphy_dfi_p2_rddata[59] <= main_a7ddrphy_bitslip272[5];
    main_a7ddrphy_dfi_p2_rddata[28] <= main_a7ddrphy_bitslip282[4];
    main_a7ddrphy_dfi_p2_rddata[60] <= main_a7ddrphy_bitslip282[5];
    main_a7ddrphy_dfi_p2_rddata[29] <= main_a7ddrphy_bitslip292[4];
    main_a7ddrphy_dfi_p2_rddata[61] <= main_a7ddrphy_bitslip292[5];
    main_a7ddrphy_dfi_p2_rddata[30] <= main_a7ddrphy_bitslip302[4];
    main_a7ddrphy_dfi_p2_rddata[62] <= main_a7ddrphy_bitslip302[5];
    main_a7ddrphy_dfi_p2_rddata[31] <= main_a7ddrphy_bitslip312[4];
    main_a7ddrphy_dfi_p2_rddata[63] <= main_a7ddrphy_bitslip312[5];
end
always @(*) begin
    main_a7ddrphy_dfi_p3_rddata <= 64'd0;
    main_a7ddrphy_dfi_p3_rddata[0] <= main_a7ddrphy_bitslip04[6];
    main_a7ddrphy_dfi_p3_rddata[32] <= main_a7ddrphy_bitslip04[7];
    main_a7ddrphy_dfi_p3_rddata[1] <= main_a7ddrphy_bitslip14[6];
    main_a7ddrphy_dfi_p3_rddata[33] <= main_a7ddrphy_bitslip14[7];
    main_a7ddrphy_dfi_p3_rddata[2] <= main_a7ddrphy_bitslip24[6];
    main_a7ddrphy_dfi_p3_rddata[34] <= main_a7ddrphy_bitslip24[7];
    main_a7ddrphy_dfi_p3_rddata[3] <= main_a7ddrphy_bitslip34[6];
    main_a7ddrphy_dfi_p3_rddata[35] <= main_a7ddrphy_bitslip34[7];
    main_a7ddrphy_dfi_p3_rddata[4] <= main_a7ddrphy_bitslip42[6];
    main_a7ddrphy_dfi_p3_rddata[36] <= main_a7ddrphy_bitslip42[7];
    main_a7ddrphy_dfi_p3_rddata[5] <= main_a7ddrphy_bitslip52[6];
    main_a7ddrphy_dfi_p3_rddata[37] <= main_a7ddrphy_bitslip52[7];
    main_a7ddrphy_dfi_p3_rddata[6] <= main_a7ddrphy_bitslip62[6];
    main_a7ddrphy_dfi_p3_rddata[38] <= main_a7ddrphy_bitslip62[7];
    main_a7ddrphy_dfi_p3_rddata[7] <= main_a7ddrphy_bitslip72[6];
    main_a7ddrphy_dfi_p3_rddata[39] <= main_a7ddrphy_bitslip72[7];
    main_a7ddrphy_dfi_p3_rddata[8] <= main_a7ddrphy_bitslip82[6];
    main_a7ddrphy_dfi_p3_rddata[40] <= main_a7ddrphy_bitslip82[7];
    main_a7ddrphy_dfi_p3_rddata[9] <= main_a7ddrphy_bitslip92[6];
    main_a7ddrphy_dfi_p3_rddata[41] <= main_a7ddrphy_bitslip92[7];
    main_a7ddrphy_dfi_p3_rddata[10] <= main_a7ddrphy_bitslip102[6];
    main_a7ddrphy_dfi_p3_rddata[42] <= main_a7ddrphy_bitslip102[7];
    main_a7ddrphy_dfi_p3_rddata[11] <= main_a7ddrphy_bitslip112[6];
    main_a7ddrphy_dfi_p3_rddata[43] <= main_a7ddrphy_bitslip112[7];
    main_a7ddrphy_dfi_p3_rddata[12] <= main_a7ddrphy_bitslip122[6];
    main_a7ddrphy_dfi_p3_rddata[44] <= main_a7ddrphy_bitslip122[7];
    main_a7ddrphy_dfi_p3_rddata[13] <= main_a7ddrphy_bitslip132[6];
    main_a7ddrphy_dfi_p3_rddata[45] <= main_a7ddrphy_bitslip132[7];
    main_a7ddrphy_dfi_p3_rddata[14] <= main_a7ddrphy_bitslip142[6];
    main_a7ddrphy_dfi_p3_rddata[46] <= main_a7ddrphy_bitslip142[7];
    main_a7ddrphy_dfi_p3_rddata[15] <= main_a7ddrphy_bitslip152[6];
    main_a7ddrphy_dfi_p3_rddata[47] <= main_a7ddrphy_bitslip152[7];
    main_a7ddrphy_dfi_p3_rddata[16] <= main_a7ddrphy_bitslip162[6];
    main_a7ddrphy_dfi_p3_rddata[48] <= main_a7ddrphy_bitslip162[7];
    main_a7ddrphy_dfi_p3_rddata[17] <= main_a7ddrphy_bitslip172[6];
    main_a7ddrphy_dfi_p3_rddata[49] <= main_a7ddrphy_bitslip172[7];
    main_a7ddrphy_dfi_p3_rddata[18] <= main_a7ddrphy_bitslip182[6];
    main_a7ddrphy_dfi_p3_rddata[50] <= main_a7ddrphy_bitslip182[7];
    main_a7ddrphy_dfi_p3_rddata[19] <= main_a7ddrphy_bitslip192[6];
    main_a7ddrphy_dfi_p3_rddata[51] <= main_a7ddrphy_bitslip192[7];
    main_a7ddrphy_dfi_p3_rddata[20] <= main_a7ddrphy_bitslip202[6];
    main_a7ddrphy_dfi_p3_rddata[52] <= main_a7ddrphy_bitslip202[7];
    main_a7ddrphy_dfi_p3_rddata[21] <= main_a7ddrphy_bitslip212[6];
    main_a7ddrphy_dfi_p3_rddata[53] <= main_a7ddrphy_bitslip212[7];
    main_a7ddrphy_dfi_p3_rddata[22] <= main_a7ddrphy_bitslip222[6];
    main_a7ddrphy_dfi_p3_rddata[54] <= main_a7ddrphy_bitslip222[7];
    main_a7ddrphy_dfi_p3_rddata[23] <= main_a7ddrphy_bitslip232[6];
    main_a7ddrphy_dfi_p3_rddata[55] <= main_a7ddrphy_bitslip232[7];
    main_a7ddrphy_dfi_p3_rddata[24] <= main_a7ddrphy_bitslip242[6];
    main_a7ddrphy_dfi_p3_rddata[56] <= main_a7ddrphy_bitslip242[7];
    main_a7ddrphy_dfi_p3_rddata[25] <= main_a7ddrphy_bitslip252[6];
    main_a7ddrphy_dfi_p3_rddata[57] <= main_a7ddrphy_bitslip252[7];
    main_a7ddrphy_dfi_p3_rddata[26] <= main_a7ddrphy_bitslip262[6];
    main_a7ddrphy_dfi_p3_rddata[58] <= main_a7ddrphy_bitslip262[7];
    main_a7ddrphy_dfi_p3_rddata[27] <= main_a7ddrphy_bitslip272[6];
    main_a7ddrphy_dfi_p3_rddata[59] <= main_a7ddrphy_bitslip272[7];
    main_a7ddrphy_dfi_p3_rddata[28] <= main_a7ddrphy_bitslip282[6];
    main_a7ddrphy_dfi_p3_rddata[60] <= main_a7ddrphy_bitslip282[7];
    main_a7ddrphy_dfi_p3_rddata[29] <= main_a7ddrphy_bitslip292[6];
    main_a7ddrphy_dfi_p3_rddata[61] <= main_a7ddrphy_bitslip292[7];
    main_a7ddrphy_dfi_p3_rddata[30] <= main_a7ddrphy_bitslip302[6];
    main_a7ddrphy_dfi_p3_rddata[62] <= main_a7ddrphy_bitslip302[7];
    main_a7ddrphy_dfi_p3_rddata[31] <= main_a7ddrphy_bitslip312[6];
    main_a7ddrphy_dfi_p3_rddata[63] <= main_a7ddrphy_bitslip312[7];
end
assign main_a7ddrphy_dfi_p0_rddata_valid = (main_a7ddrphy_cmd_latency_tappeddelayline7 | main_a7ddrphy_wlevel_en_storage);
assign main_a7ddrphy_dfi_p1_rddata_valid = (main_a7ddrphy_cmd_latency_tappeddelayline7 | main_a7ddrphy_wlevel_en_storage);
assign main_a7ddrphy_dfi_p2_rddata_valid = (main_a7ddrphy_cmd_latency_tappeddelayline7 | main_a7ddrphy_wlevel_en_storage);
assign main_a7ddrphy_dfi_p3_rddata_valid = (main_a7ddrphy_cmd_latency_tappeddelayline7 | main_a7ddrphy_wlevel_en_storage);
assign main_a7ddrphy_dq_oe = main_a7ddrphy_wrdata_en_tappeddelayline1;
always @(*) begin
    main_a7ddrphy_dqs_oe <= 1'd0;
    if (main_a7ddrphy_wlevel_en_storage) begin
        main_a7ddrphy_dqs_oe <= 1'd1;
    end else begin
        main_a7ddrphy_dqs_oe <= main_a7ddrphy_dq_oe;
    end
end
assign main_a7ddrphy_dqs_preamble = (main_a7ddrphy_wrdata_en_tappeddelayline0 & (~main_a7ddrphy_wrdata_en_tappeddelayline1));
assign main_a7ddrphy_dqs_postamble = (main_a7ddrphy_wrdata_en_tappeddelayline2 & (~main_a7ddrphy_wrdata_en_tappeddelayline1));
always @(*) begin
    main_a7ddrphy_dqspattern_o0 <= 8'd0;
    main_a7ddrphy_dqspattern_o0 <= 7'd85;
    if (main_a7ddrphy_dqspattern0) begin
        main_a7ddrphy_dqspattern_o0 <= 5'd21;
    end
    if (main_a7ddrphy_dqspattern1) begin
        main_a7ddrphy_dqspattern_o0 <= 7'd84;
    end
    if (main_a7ddrphy_wlevel_en_storage) begin
        main_a7ddrphy_dqspattern_o0 <= 1'd0;
        if (main_a7ddrphy_wlevel_strobe_re) begin
            main_a7ddrphy_dqspattern_o0 <= 1'd1;
        end
    end
end
always @(*) begin
    main_a7ddrphy_bitslip00 <= 8'd0;
    case (main_a7ddrphy_bitslip0_value0)
        1'd0: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip10 <= 8'd0;
    case (main_a7ddrphy_bitslip1_value0)
        1'd0: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip20 <= 8'd0;
    case (main_a7ddrphy_bitslip2_value0)
        1'd0: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip30 <= 8'd0;
    case (main_a7ddrphy_bitslip3_value0)
        1'd0: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip01 <= 8'd0;
    case (main_a7ddrphy_bitslip0_value1)
        1'd0: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip11 <= 8'd0;
    case (main_a7ddrphy_bitslip1_value1)
        1'd0: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip21 <= 8'd0;
    case (main_a7ddrphy_bitslip2_value1)
        1'd0: begin
            main_a7ddrphy_bitslip21 <= main_a7ddrphy_bitslip2_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip21 <= main_a7ddrphy_bitslip2_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip21 <= main_a7ddrphy_bitslip2_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip21 <= main_a7ddrphy_bitslip2_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip21 <= main_a7ddrphy_bitslip2_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip21 <= main_a7ddrphy_bitslip2_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip21 <= main_a7ddrphy_bitslip2_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip21 <= main_a7ddrphy_bitslip2_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip31 <= 8'd0;
    case (main_a7ddrphy_bitslip3_value1)
        1'd0: begin
            main_a7ddrphy_bitslip31 <= main_a7ddrphy_bitslip3_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip31 <= main_a7ddrphy_bitslip3_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip31 <= main_a7ddrphy_bitslip3_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip31 <= main_a7ddrphy_bitslip3_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip31 <= main_a7ddrphy_bitslip3_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip31 <= main_a7ddrphy_bitslip3_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip31 <= main_a7ddrphy_bitslip3_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip31 <= main_a7ddrphy_bitslip3_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip02 <= 8'd0;
    case (main_a7ddrphy_bitslip0_value2)
        1'd0: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip04 <= 8'd0;
    case (main_a7ddrphy_bitslip0_value3)
        1'd0: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip12 <= 8'd0;
    case (main_a7ddrphy_bitslip1_value2)
        1'd0: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip14 <= 8'd0;
    case (main_a7ddrphy_bitslip1_value3)
        1'd0: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip22 <= 8'd0;
    case (main_a7ddrphy_bitslip2_value2)
        1'd0: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r2[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r2[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r2[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r2[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r2[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r2[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r2[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r2[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip24 <= 8'd0;
    case (main_a7ddrphy_bitslip2_value3)
        1'd0: begin
            main_a7ddrphy_bitslip24 <= main_a7ddrphy_bitslip2_r3[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip24 <= main_a7ddrphy_bitslip2_r3[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip24 <= main_a7ddrphy_bitslip2_r3[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip24 <= main_a7ddrphy_bitslip2_r3[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip24 <= main_a7ddrphy_bitslip2_r3[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip24 <= main_a7ddrphy_bitslip2_r3[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip24 <= main_a7ddrphy_bitslip2_r3[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip24 <= main_a7ddrphy_bitslip2_r3[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip32 <= 8'd0;
    case (main_a7ddrphy_bitslip3_value2)
        1'd0: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r2[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r2[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r2[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r2[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r2[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r2[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r2[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r2[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip34 <= 8'd0;
    case (main_a7ddrphy_bitslip3_value3)
        1'd0: begin
            main_a7ddrphy_bitslip34 <= main_a7ddrphy_bitslip3_r3[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip34 <= main_a7ddrphy_bitslip3_r3[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip34 <= main_a7ddrphy_bitslip3_r3[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip34 <= main_a7ddrphy_bitslip3_r3[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip34 <= main_a7ddrphy_bitslip3_r3[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip34 <= main_a7ddrphy_bitslip3_r3[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip34 <= main_a7ddrphy_bitslip3_r3[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip34 <= main_a7ddrphy_bitslip3_r3[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip40 <= 8'd0;
    case (main_a7ddrphy_bitslip4_value0)
        1'd0: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip42 <= 8'd0;
    case (main_a7ddrphy_bitslip4_value1)
        1'd0: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip50 <= 8'd0;
    case (main_a7ddrphy_bitslip5_value0)
        1'd0: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip52 <= 8'd0;
    case (main_a7ddrphy_bitslip5_value1)
        1'd0: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip60 <= 8'd0;
    case (main_a7ddrphy_bitslip6_value0)
        1'd0: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip62 <= 8'd0;
    case (main_a7ddrphy_bitslip6_value1)
        1'd0: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip70 <= 8'd0;
    case (main_a7ddrphy_bitslip7_value0)
        1'd0: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip72 <= 8'd0;
    case (main_a7ddrphy_bitslip7_value1)
        1'd0: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip80 <= 8'd0;
    case (main_a7ddrphy_bitslip8_value0)
        1'd0: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip82 <= 8'd0;
    case (main_a7ddrphy_bitslip8_value1)
        1'd0: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip90 <= 8'd0;
    case (main_a7ddrphy_bitslip9_value0)
        1'd0: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip92 <= 8'd0;
    case (main_a7ddrphy_bitslip9_value1)
        1'd0: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip100 <= 8'd0;
    case (main_a7ddrphy_bitslip10_value0)
        1'd0: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip102 <= 8'd0;
    case (main_a7ddrphy_bitslip10_value1)
        1'd0: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip110 <= 8'd0;
    case (main_a7ddrphy_bitslip11_value0)
        1'd0: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip112 <= 8'd0;
    case (main_a7ddrphy_bitslip11_value1)
        1'd0: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip120 <= 8'd0;
    case (main_a7ddrphy_bitslip12_value0)
        1'd0: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip122 <= 8'd0;
    case (main_a7ddrphy_bitslip12_value1)
        1'd0: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip130 <= 8'd0;
    case (main_a7ddrphy_bitslip13_value0)
        1'd0: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip132 <= 8'd0;
    case (main_a7ddrphy_bitslip13_value1)
        1'd0: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip140 <= 8'd0;
    case (main_a7ddrphy_bitslip14_value0)
        1'd0: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip142 <= 8'd0;
    case (main_a7ddrphy_bitslip14_value1)
        1'd0: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip150 <= 8'd0;
    case (main_a7ddrphy_bitslip15_value0)
        1'd0: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip152 <= 8'd0;
    case (main_a7ddrphy_bitslip15_value1)
        1'd0: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip160 <= 8'd0;
    case (main_a7ddrphy_bitslip16_value0)
        1'd0: begin
            main_a7ddrphy_bitslip160 <= main_a7ddrphy_bitslip16_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip160 <= main_a7ddrphy_bitslip16_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip160 <= main_a7ddrphy_bitslip16_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip160 <= main_a7ddrphy_bitslip16_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip160 <= main_a7ddrphy_bitslip16_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip160 <= main_a7ddrphy_bitslip16_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip160 <= main_a7ddrphy_bitslip16_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip160 <= main_a7ddrphy_bitslip16_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip162 <= 8'd0;
    case (main_a7ddrphy_bitslip16_value1)
        1'd0: begin
            main_a7ddrphy_bitslip162 <= main_a7ddrphy_bitslip16_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip162 <= main_a7ddrphy_bitslip16_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip162 <= main_a7ddrphy_bitslip16_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip162 <= main_a7ddrphy_bitslip16_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip162 <= main_a7ddrphy_bitslip16_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip162 <= main_a7ddrphy_bitslip16_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip162 <= main_a7ddrphy_bitslip16_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip162 <= main_a7ddrphy_bitslip16_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip170 <= 8'd0;
    case (main_a7ddrphy_bitslip17_value0)
        1'd0: begin
            main_a7ddrphy_bitslip170 <= main_a7ddrphy_bitslip17_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip170 <= main_a7ddrphy_bitslip17_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip170 <= main_a7ddrphy_bitslip17_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip170 <= main_a7ddrphy_bitslip17_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip170 <= main_a7ddrphy_bitslip17_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip170 <= main_a7ddrphy_bitslip17_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip170 <= main_a7ddrphy_bitslip17_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip170 <= main_a7ddrphy_bitslip17_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip172 <= 8'd0;
    case (main_a7ddrphy_bitslip17_value1)
        1'd0: begin
            main_a7ddrphy_bitslip172 <= main_a7ddrphy_bitslip17_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip172 <= main_a7ddrphy_bitslip17_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip172 <= main_a7ddrphy_bitslip17_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip172 <= main_a7ddrphy_bitslip17_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip172 <= main_a7ddrphy_bitslip17_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip172 <= main_a7ddrphy_bitslip17_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip172 <= main_a7ddrphy_bitslip17_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip172 <= main_a7ddrphy_bitslip17_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip180 <= 8'd0;
    case (main_a7ddrphy_bitslip18_value0)
        1'd0: begin
            main_a7ddrphy_bitslip180 <= main_a7ddrphy_bitslip18_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip180 <= main_a7ddrphy_bitslip18_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip180 <= main_a7ddrphy_bitslip18_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip180 <= main_a7ddrphy_bitslip18_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip180 <= main_a7ddrphy_bitslip18_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip180 <= main_a7ddrphy_bitslip18_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip180 <= main_a7ddrphy_bitslip18_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip180 <= main_a7ddrphy_bitslip18_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip182 <= 8'd0;
    case (main_a7ddrphy_bitslip18_value1)
        1'd0: begin
            main_a7ddrphy_bitslip182 <= main_a7ddrphy_bitslip18_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip182 <= main_a7ddrphy_bitslip18_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip182 <= main_a7ddrphy_bitslip18_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip182 <= main_a7ddrphy_bitslip18_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip182 <= main_a7ddrphy_bitslip18_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip182 <= main_a7ddrphy_bitslip18_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip182 <= main_a7ddrphy_bitslip18_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip182 <= main_a7ddrphy_bitslip18_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip190 <= 8'd0;
    case (main_a7ddrphy_bitslip19_value0)
        1'd0: begin
            main_a7ddrphy_bitslip190 <= main_a7ddrphy_bitslip19_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip190 <= main_a7ddrphy_bitslip19_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip190 <= main_a7ddrphy_bitslip19_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip190 <= main_a7ddrphy_bitslip19_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip190 <= main_a7ddrphy_bitslip19_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip190 <= main_a7ddrphy_bitslip19_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip190 <= main_a7ddrphy_bitslip19_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip190 <= main_a7ddrphy_bitslip19_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip192 <= 8'd0;
    case (main_a7ddrphy_bitslip19_value1)
        1'd0: begin
            main_a7ddrphy_bitslip192 <= main_a7ddrphy_bitslip19_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip192 <= main_a7ddrphy_bitslip19_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip192 <= main_a7ddrphy_bitslip19_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip192 <= main_a7ddrphy_bitslip19_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip192 <= main_a7ddrphy_bitslip19_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip192 <= main_a7ddrphy_bitslip19_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip192 <= main_a7ddrphy_bitslip19_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip192 <= main_a7ddrphy_bitslip19_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip200 <= 8'd0;
    case (main_a7ddrphy_bitslip20_value0)
        1'd0: begin
            main_a7ddrphy_bitslip200 <= main_a7ddrphy_bitslip20_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip200 <= main_a7ddrphy_bitslip20_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip200 <= main_a7ddrphy_bitslip20_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip200 <= main_a7ddrphy_bitslip20_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip200 <= main_a7ddrphy_bitslip20_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip200 <= main_a7ddrphy_bitslip20_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip200 <= main_a7ddrphy_bitslip20_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip200 <= main_a7ddrphy_bitslip20_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip202 <= 8'd0;
    case (main_a7ddrphy_bitslip20_value1)
        1'd0: begin
            main_a7ddrphy_bitslip202 <= main_a7ddrphy_bitslip20_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip202 <= main_a7ddrphy_bitslip20_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip202 <= main_a7ddrphy_bitslip20_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip202 <= main_a7ddrphy_bitslip20_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip202 <= main_a7ddrphy_bitslip20_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip202 <= main_a7ddrphy_bitslip20_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip202 <= main_a7ddrphy_bitslip20_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip202 <= main_a7ddrphy_bitslip20_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip210 <= 8'd0;
    case (main_a7ddrphy_bitslip21_value0)
        1'd0: begin
            main_a7ddrphy_bitslip210 <= main_a7ddrphy_bitslip21_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip210 <= main_a7ddrphy_bitslip21_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip210 <= main_a7ddrphy_bitslip21_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip210 <= main_a7ddrphy_bitslip21_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip210 <= main_a7ddrphy_bitslip21_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip210 <= main_a7ddrphy_bitslip21_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip210 <= main_a7ddrphy_bitslip21_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip210 <= main_a7ddrphy_bitslip21_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip212 <= 8'd0;
    case (main_a7ddrphy_bitslip21_value1)
        1'd0: begin
            main_a7ddrphy_bitslip212 <= main_a7ddrphy_bitslip21_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip212 <= main_a7ddrphy_bitslip21_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip212 <= main_a7ddrphy_bitslip21_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip212 <= main_a7ddrphy_bitslip21_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip212 <= main_a7ddrphy_bitslip21_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip212 <= main_a7ddrphy_bitslip21_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip212 <= main_a7ddrphy_bitslip21_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip212 <= main_a7ddrphy_bitslip21_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip220 <= 8'd0;
    case (main_a7ddrphy_bitslip22_value0)
        1'd0: begin
            main_a7ddrphy_bitslip220 <= main_a7ddrphy_bitslip22_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip220 <= main_a7ddrphy_bitslip22_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip220 <= main_a7ddrphy_bitslip22_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip220 <= main_a7ddrphy_bitslip22_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip220 <= main_a7ddrphy_bitslip22_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip220 <= main_a7ddrphy_bitslip22_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip220 <= main_a7ddrphy_bitslip22_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip220 <= main_a7ddrphy_bitslip22_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip222 <= 8'd0;
    case (main_a7ddrphy_bitslip22_value1)
        1'd0: begin
            main_a7ddrphy_bitslip222 <= main_a7ddrphy_bitslip22_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip222 <= main_a7ddrphy_bitslip22_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip222 <= main_a7ddrphy_bitslip22_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip222 <= main_a7ddrphy_bitslip22_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip222 <= main_a7ddrphy_bitslip22_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip222 <= main_a7ddrphy_bitslip22_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip222 <= main_a7ddrphy_bitslip22_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip222 <= main_a7ddrphy_bitslip22_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip230 <= 8'd0;
    case (main_a7ddrphy_bitslip23_value0)
        1'd0: begin
            main_a7ddrphy_bitslip230 <= main_a7ddrphy_bitslip23_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip230 <= main_a7ddrphy_bitslip23_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip230 <= main_a7ddrphy_bitslip23_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip230 <= main_a7ddrphy_bitslip23_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip230 <= main_a7ddrphy_bitslip23_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip230 <= main_a7ddrphy_bitslip23_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip230 <= main_a7ddrphy_bitslip23_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip230 <= main_a7ddrphy_bitslip23_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip232 <= 8'd0;
    case (main_a7ddrphy_bitslip23_value1)
        1'd0: begin
            main_a7ddrphy_bitslip232 <= main_a7ddrphy_bitslip23_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip232 <= main_a7ddrphy_bitslip23_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip232 <= main_a7ddrphy_bitslip23_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip232 <= main_a7ddrphy_bitslip23_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip232 <= main_a7ddrphy_bitslip23_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip232 <= main_a7ddrphy_bitslip23_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip232 <= main_a7ddrphy_bitslip23_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip232 <= main_a7ddrphy_bitslip23_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip240 <= 8'd0;
    case (main_a7ddrphy_bitslip24_value0)
        1'd0: begin
            main_a7ddrphy_bitslip240 <= main_a7ddrphy_bitslip24_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip240 <= main_a7ddrphy_bitslip24_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip240 <= main_a7ddrphy_bitslip24_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip240 <= main_a7ddrphy_bitslip24_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip240 <= main_a7ddrphy_bitslip24_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip240 <= main_a7ddrphy_bitslip24_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip240 <= main_a7ddrphy_bitslip24_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip240 <= main_a7ddrphy_bitslip24_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip242 <= 8'd0;
    case (main_a7ddrphy_bitslip24_value1)
        1'd0: begin
            main_a7ddrphy_bitslip242 <= main_a7ddrphy_bitslip24_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip242 <= main_a7ddrphy_bitslip24_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip242 <= main_a7ddrphy_bitslip24_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip242 <= main_a7ddrphy_bitslip24_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip242 <= main_a7ddrphy_bitslip24_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip242 <= main_a7ddrphy_bitslip24_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip242 <= main_a7ddrphy_bitslip24_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip242 <= main_a7ddrphy_bitslip24_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip250 <= 8'd0;
    case (main_a7ddrphy_bitslip25_value0)
        1'd0: begin
            main_a7ddrphy_bitslip250 <= main_a7ddrphy_bitslip25_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip250 <= main_a7ddrphy_bitslip25_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip250 <= main_a7ddrphy_bitslip25_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip250 <= main_a7ddrphy_bitslip25_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip250 <= main_a7ddrphy_bitslip25_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip250 <= main_a7ddrphy_bitslip25_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip250 <= main_a7ddrphy_bitslip25_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip250 <= main_a7ddrphy_bitslip25_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip252 <= 8'd0;
    case (main_a7ddrphy_bitslip25_value1)
        1'd0: begin
            main_a7ddrphy_bitslip252 <= main_a7ddrphy_bitslip25_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip252 <= main_a7ddrphy_bitslip25_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip252 <= main_a7ddrphy_bitslip25_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip252 <= main_a7ddrphy_bitslip25_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip252 <= main_a7ddrphy_bitslip25_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip252 <= main_a7ddrphy_bitslip25_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip252 <= main_a7ddrphy_bitslip25_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip252 <= main_a7ddrphy_bitslip25_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip260 <= 8'd0;
    case (main_a7ddrphy_bitslip26_value0)
        1'd0: begin
            main_a7ddrphy_bitslip260 <= main_a7ddrphy_bitslip26_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip260 <= main_a7ddrphy_bitslip26_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip260 <= main_a7ddrphy_bitslip26_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip260 <= main_a7ddrphy_bitslip26_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip260 <= main_a7ddrphy_bitslip26_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip260 <= main_a7ddrphy_bitslip26_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip260 <= main_a7ddrphy_bitslip26_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip260 <= main_a7ddrphy_bitslip26_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip262 <= 8'd0;
    case (main_a7ddrphy_bitslip26_value1)
        1'd0: begin
            main_a7ddrphy_bitslip262 <= main_a7ddrphy_bitslip26_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip262 <= main_a7ddrphy_bitslip26_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip262 <= main_a7ddrphy_bitslip26_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip262 <= main_a7ddrphy_bitslip26_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip262 <= main_a7ddrphy_bitslip26_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip262 <= main_a7ddrphy_bitslip26_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip262 <= main_a7ddrphy_bitslip26_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip262 <= main_a7ddrphy_bitslip26_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip270 <= 8'd0;
    case (main_a7ddrphy_bitslip27_value0)
        1'd0: begin
            main_a7ddrphy_bitslip270 <= main_a7ddrphy_bitslip27_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip270 <= main_a7ddrphy_bitslip27_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip270 <= main_a7ddrphy_bitslip27_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip270 <= main_a7ddrphy_bitslip27_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip270 <= main_a7ddrphy_bitslip27_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip270 <= main_a7ddrphy_bitslip27_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip270 <= main_a7ddrphy_bitslip27_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip270 <= main_a7ddrphy_bitslip27_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip272 <= 8'd0;
    case (main_a7ddrphy_bitslip27_value1)
        1'd0: begin
            main_a7ddrphy_bitslip272 <= main_a7ddrphy_bitslip27_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip272 <= main_a7ddrphy_bitslip27_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip272 <= main_a7ddrphy_bitslip27_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip272 <= main_a7ddrphy_bitslip27_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip272 <= main_a7ddrphy_bitslip27_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip272 <= main_a7ddrphy_bitslip27_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip272 <= main_a7ddrphy_bitslip27_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip272 <= main_a7ddrphy_bitslip27_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip280 <= 8'd0;
    case (main_a7ddrphy_bitslip28_value0)
        1'd0: begin
            main_a7ddrphy_bitslip280 <= main_a7ddrphy_bitslip28_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip280 <= main_a7ddrphy_bitslip28_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip280 <= main_a7ddrphy_bitslip28_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip280 <= main_a7ddrphy_bitslip28_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip280 <= main_a7ddrphy_bitslip28_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip280 <= main_a7ddrphy_bitslip28_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip280 <= main_a7ddrphy_bitslip28_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip280 <= main_a7ddrphy_bitslip28_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip282 <= 8'd0;
    case (main_a7ddrphy_bitslip28_value1)
        1'd0: begin
            main_a7ddrphy_bitslip282 <= main_a7ddrphy_bitslip28_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip282 <= main_a7ddrphy_bitslip28_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip282 <= main_a7ddrphy_bitslip28_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip282 <= main_a7ddrphy_bitslip28_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip282 <= main_a7ddrphy_bitslip28_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip282 <= main_a7ddrphy_bitslip28_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip282 <= main_a7ddrphy_bitslip28_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip282 <= main_a7ddrphy_bitslip28_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip290 <= 8'd0;
    case (main_a7ddrphy_bitslip29_value0)
        1'd0: begin
            main_a7ddrphy_bitslip290 <= main_a7ddrphy_bitslip29_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip290 <= main_a7ddrphy_bitslip29_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip290 <= main_a7ddrphy_bitslip29_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip290 <= main_a7ddrphy_bitslip29_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip290 <= main_a7ddrphy_bitslip29_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip290 <= main_a7ddrphy_bitslip29_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip290 <= main_a7ddrphy_bitslip29_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip290 <= main_a7ddrphy_bitslip29_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip292 <= 8'd0;
    case (main_a7ddrphy_bitslip29_value1)
        1'd0: begin
            main_a7ddrphy_bitslip292 <= main_a7ddrphy_bitslip29_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip292 <= main_a7ddrphy_bitslip29_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip292 <= main_a7ddrphy_bitslip29_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip292 <= main_a7ddrphy_bitslip29_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip292 <= main_a7ddrphy_bitslip29_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip292 <= main_a7ddrphy_bitslip29_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip292 <= main_a7ddrphy_bitslip29_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip292 <= main_a7ddrphy_bitslip29_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip300 <= 8'd0;
    case (main_a7ddrphy_bitslip30_value0)
        1'd0: begin
            main_a7ddrphy_bitslip300 <= main_a7ddrphy_bitslip30_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip300 <= main_a7ddrphy_bitslip30_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip300 <= main_a7ddrphy_bitslip30_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip300 <= main_a7ddrphy_bitslip30_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip300 <= main_a7ddrphy_bitslip30_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip300 <= main_a7ddrphy_bitslip30_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip300 <= main_a7ddrphy_bitslip30_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip300 <= main_a7ddrphy_bitslip30_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip302 <= 8'd0;
    case (main_a7ddrphy_bitslip30_value1)
        1'd0: begin
            main_a7ddrphy_bitslip302 <= main_a7ddrphy_bitslip30_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip302 <= main_a7ddrphy_bitslip30_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip302 <= main_a7ddrphy_bitslip30_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip302 <= main_a7ddrphy_bitslip30_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip302 <= main_a7ddrphy_bitslip30_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip302 <= main_a7ddrphy_bitslip30_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip302 <= main_a7ddrphy_bitslip30_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip302 <= main_a7ddrphy_bitslip30_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip310 <= 8'd0;
    case (main_a7ddrphy_bitslip31_value0)
        1'd0: begin
            main_a7ddrphy_bitslip310 <= main_a7ddrphy_bitslip31_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip310 <= main_a7ddrphy_bitslip31_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip310 <= main_a7ddrphy_bitslip31_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip310 <= main_a7ddrphy_bitslip31_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip310 <= main_a7ddrphy_bitslip31_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip310 <= main_a7ddrphy_bitslip31_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip310 <= main_a7ddrphy_bitslip31_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip310 <= main_a7ddrphy_bitslip31_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip312 <= 8'd0;
    case (main_a7ddrphy_bitslip31_value1)
        1'd0: begin
            main_a7ddrphy_bitslip312 <= main_a7ddrphy_bitslip31_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip312 <= main_a7ddrphy_bitslip31_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip312 <= main_a7ddrphy_bitslip31_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip312 <= main_a7ddrphy_bitslip31_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip312 <= main_a7ddrphy_bitslip31_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip312 <= main_a7ddrphy_bitslip31_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip312 <= main_a7ddrphy_bitslip31_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip312 <= main_a7ddrphy_bitslip31_r1[15:8];
        end
    endcase
end
assign main_a7ddrphy_dfi_p0_address = main_basesoc_sdram_master_p0_address;
assign main_a7ddrphy_dfi_p0_bank = main_basesoc_sdram_master_p0_bank;
assign main_a7ddrphy_dfi_p0_cas_n = main_basesoc_sdram_master_p0_cas_n;
assign main_a7ddrphy_dfi_p0_cs_n = main_basesoc_sdram_master_p0_cs_n;
assign main_a7ddrphy_dfi_p0_ras_n = main_basesoc_sdram_master_p0_ras_n;
assign main_a7ddrphy_dfi_p0_we_n = main_basesoc_sdram_master_p0_we_n;
assign main_a7ddrphy_dfi_p0_cke = main_basesoc_sdram_master_p0_cke;
assign main_a7ddrphy_dfi_p0_odt = main_basesoc_sdram_master_p0_odt;
assign main_a7ddrphy_dfi_p0_reset_n = main_basesoc_sdram_master_p0_reset_n;
assign main_a7ddrphy_dfi_p0_act_n = main_basesoc_sdram_master_p0_act_n;
assign main_a7ddrphy_dfi_p0_wrdata = main_basesoc_sdram_master_p0_wrdata;
assign main_a7ddrphy_dfi_p0_wrdata_en = main_basesoc_sdram_master_p0_wrdata_en;
assign main_a7ddrphy_dfi_p0_wrdata_mask = main_basesoc_sdram_master_p0_wrdata_mask;
assign main_a7ddrphy_dfi_p0_rddata_en = main_basesoc_sdram_master_p0_rddata_en;
assign main_basesoc_sdram_master_p0_rddata = main_a7ddrphy_dfi_p0_rddata;
assign main_basesoc_sdram_master_p0_rddata_valid = main_a7ddrphy_dfi_p0_rddata_valid;
assign main_a7ddrphy_dfi_p1_address = main_basesoc_sdram_master_p1_address;
assign main_a7ddrphy_dfi_p1_bank = main_basesoc_sdram_master_p1_bank;
assign main_a7ddrphy_dfi_p1_cas_n = main_basesoc_sdram_master_p1_cas_n;
assign main_a7ddrphy_dfi_p1_cs_n = main_basesoc_sdram_master_p1_cs_n;
assign main_a7ddrphy_dfi_p1_ras_n = main_basesoc_sdram_master_p1_ras_n;
assign main_a7ddrphy_dfi_p1_we_n = main_basesoc_sdram_master_p1_we_n;
assign main_a7ddrphy_dfi_p1_cke = main_basesoc_sdram_master_p1_cke;
assign main_a7ddrphy_dfi_p1_odt = main_basesoc_sdram_master_p1_odt;
assign main_a7ddrphy_dfi_p1_reset_n = main_basesoc_sdram_master_p1_reset_n;
assign main_a7ddrphy_dfi_p1_act_n = main_basesoc_sdram_master_p1_act_n;
assign main_a7ddrphy_dfi_p1_wrdata = main_basesoc_sdram_master_p1_wrdata;
assign main_a7ddrphy_dfi_p1_wrdata_en = main_basesoc_sdram_master_p1_wrdata_en;
assign main_a7ddrphy_dfi_p1_wrdata_mask = main_basesoc_sdram_master_p1_wrdata_mask;
assign main_a7ddrphy_dfi_p1_rddata_en = main_basesoc_sdram_master_p1_rddata_en;
assign main_basesoc_sdram_master_p1_rddata = main_a7ddrphy_dfi_p1_rddata;
assign main_basesoc_sdram_master_p1_rddata_valid = main_a7ddrphy_dfi_p1_rddata_valid;
assign main_a7ddrphy_dfi_p2_address = main_basesoc_sdram_master_p2_address;
assign main_a7ddrphy_dfi_p2_bank = main_basesoc_sdram_master_p2_bank;
assign main_a7ddrphy_dfi_p2_cas_n = main_basesoc_sdram_master_p2_cas_n;
assign main_a7ddrphy_dfi_p2_cs_n = main_basesoc_sdram_master_p2_cs_n;
assign main_a7ddrphy_dfi_p2_ras_n = main_basesoc_sdram_master_p2_ras_n;
assign main_a7ddrphy_dfi_p2_we_n = main_basesoc_sdram_master_p2_we_n;
assign main_a7ddrphy_dfi_p2_cke = main_basesoc_sdram_master_p2_cke;
assign main_a7ddrphy_dfi_p2_odt = main_basesoc_sdram_master_p2_odt;
assign main_a7ddrphy_dfi_p2_reset_n = main_basesoc_sdram_master_p2_reset_n;
assign main_a7ddrphy_dfi_p2_act_n = main_basesoc_sdram_master_p2_act_n;
assign main_a7ddrphy_dfi_p2_wrdata = main_basesoc_sdram_master_p2_wrdata;
assign main_a7ddrphy_dfi_p2_wrdata_en = main_basesoc_sdram_master_p2_wrdata_en;
assign main_a7ddrphy_dfi_p2_wrdata_mask = main_basesoc_sdram_master_p2_wrdata_mask;
assign main_a7ddrphy_dfi_p2_rddata_en = main_basesoc_sdram_master_p2_rddata_en;
assign main_basesoc_sdram_master_p2_rddata = main_a7ddrphy_dfi_p2_rddata;
assign main_basesoc_sdram_master_p2_rddata_valid = main_a7ddrphy_dfi_p2_rddata_valid;
assign main_a7ddrphy_dfi_p3_address = main_basesoc_sdram_master_p3_address;
assign main_a7ddrphy_dfi_p3_bank = main_basesoc_sdram_master_p3_bank;
assign main_a7ddrphy_dfi_p3_cas_n = main_basesoc_sdram_master_p3_cas_n;
assign main_a7ddrphy_dfi_p3_cs_n = main_basesoc_sdram_master_p3_cs_n;
assign main_a7ddrphy_dfi_p3_ras_n = main_basesoc_sdram_master_p3_ras_n;
assign main_a7ddrphy_dfi_p3_we_n = main_basesoc_sdram_master_p3_we_n;
assign main_a7ddrphy_dfi_p3_cke = main_basesoc_sdram_master_p3_cke;
assign main_a7ddrphy_dfi_p3_odt = main_basesoc_sdram_master_p3_odt;
assign main_a7ddrphy_dfi_p3_reset_n = main_basesoc_sdram_master_p3_reset_n;
assign main_a7ddrphy_dfi_p3_act_n = main_basesoc_sdram_master_p3_act_n;
assign main_a7ddrphy_dfi_p3_wrdata = main_basesoc_sdram_master_p3_wrdata;
assign main_a7ddrphy_dfi_p3_wrdata_en = main_basesoc_sdram_master_p3_wrdata_en;
assign main_a7ddrphy_dfi_p3_wrdata_mask = main_basesoc_sdram_master_p3_wrdata_mask;
assign main_a7ddrphy_dfi_p3_rddata_en = main_basesoc_sdram_master_p3_rddata_en;
assign main_basesoc_sdram_master_p3_rddata = main_a7ddrphy_dfi_p3_rddata;
assign main_basesoc_sdram_master_p3_rddata_valid = main_a7ddrphy_dfi_p3_rddata_valid;
assign main_basesoc_sdram_slave_p0_address = main_basesoc_sdram_dfi_p0_address;
assign main_basesoc_sdram_slave_p0_bank = main_basesoc_sdram_dfi_p0_bank;
assign main_basesoc_sdram_slave_p0_cas_n = main_basesoc_sdram_dfi_p0_cas_n;
assign main_basesoc_sdram_slave_p0_cs_n = main_basesoc_sdram_dfi_p0_cs_n;
assign main_basesoc_sdram_slave_p0_ras_n = main_basesoc_sdram_dfi_p0_ras_n;
assign main_basesoc_sdram_slave_p0_we_n = main_basesoc_sdram_dfi_p0_we_n;
assign main_basesoc_sdram_slave_p0_cke = main_basesoc_sdram_dfi_p0_cke;
assign main_basesoc_sdram_slave_p0_odt = main_basesoc_sdram_dfi_p0_odt;
assign main_basesoc_sdram_slave_p0_reset_n = main_basesoc_sdram_dfi_p0_reset_n;
assign main_basesoc_sdram_slave_p0_act_n = main_basesoc_sdram_dfi_p0_act_n;
assign main_basesoc_sdram_slave_p0_wrdata = main_basesoc_sdram_dfi_p0_wrdata;
assign main_basesoc_sdram_slave_p0_wrdata_en = main_basesoc_sdram_dfi_p0_wrdata_en;
assign main_basesoc_sdram_slave_p0_wrdata_mask = main_basesoc_sdram_dfi_p0_wrdata_mask;
assign main_basesoc_sdram_slave_p0_rddata_en = main_basesoc_sdram_dfi_p0_rddata_en;
assign main_basesoc_sdram_dfi_p0_rddata = main_basesoc_sdram_slave_p0_rddata;
assign main_basesoc_sdram_dfi_p0_rddata_valid = main_basesoc_sdram_slave_p0_rddata_valid;
assign main_basesoc_sdram_slave_p1_address = main_basesoc_sdram_dfi_p1_address;
assign main_basesoc_sdram_slave_p1_bank = main_basesoc_sdram_dfi_p1_bank;
assign main_basesoc_sdram_slave_p1_cas_n = main_basesoc_sdram_dfi_p1_cas_n;
assign main_basesoc_sdram_slave_p1_cs_n = main_basesoc_sdram_dfi_p1_cs_n;
assign main_basesoc_sdram_slave_p1_ras_n = main_basesoc_sdram_dfi_p1_ras_n;
assign main_basesoc_sdram_slave_p1_we_n = main_basesoc_sdram_dfi_p1_we_n;
assign main_basesoc_sdram_slave_p1_cke = main_basesoc_sdram_dfi_p1_cke;
assign main_basesoc_sdram_slave_p1_odt = main_basesoc_sdram_dfi_p1_odt;
assign main_basesoc_sdram_slave_p1_reset_n = main_basesoc_sdram_dfi_p1_reset_n;
assign main_basesoc_sdram_slave_p1_act_n = main_basesoc_sdram_dfi_p1_act_n;
assign main_basesoc_sdram_slave_p1_wrdata = main_basesoc_sdram_dfi_p1_wrdata;
assign main_basesoc_sdram_slave_p1_wrdata_en = main_basesoc_sdram_dfi_p1_wrdata_en;
assign main_basesoc_sdram_slave_p1_wrdata_mask = main_basesoc_sdram_dfi_p1_wrdata_mask;
assign main_basesoc_sdram_slave_p1_rddata_en = main_basesoc_sdram_dfi_p1_rddata_en;
assign main_basesoc_sdram_dfi_p1_rddata = main_basesoc_sdram_slave_p1_rddata;
assign main_basesoc_sdram_dfi_p1_rddata_valid = main_basesoc_sdram_slave_p1_rddata_valid;
assign main_basesoc_sdram_slave_p2_address = main_basesoc_sdram_dfi_p2_address;
assign main_basesoc_sdram_slave_p2_bank = main_basesoc_sdram_dfi_p2_bank;
assign main_basesoc_sdram_slave_p2_cas_n = main_basesoc_sdram_dfi_p2_cas_n;
assign main_basesoc_sdram_slave_p2_cs_n = main_basesoc_sdram_dfi_p2_cs_n;
assign main_basesoc_sdram_slave_p2_ras_n = main_basesoc_sdram_dfi_p2_ras_n;
assign main_basesoc_sdram_slave_p2_we_n = main_basesoc_sdram_dfi_p2_we_n;
assign main_basesoc_sdram_slave_p2_cke = main_basesoc_sdram_dfi_p2_cke;
assign main_basesoc_sdram_slave_p2_odt = main_basesoc_sdram_dfi_p2_odt;
assign main_basesoc_sdram_slave_p2_reset_n = main_basesoc_sdram_dfi_p2_reset_n;
assign main_basesoc_sdram_slave_p2_act_n = main_basesoc_sdram_dfi_p2_act_n;
assign main_basesoc_sdram_slave_p2_wrdata = main_basesoc_sdram_dfi_p2_wrdata;
assign main_basesoc_sdram_slave_p2_wrdata_en = main_basesoc_sdram_dfi_p2_wrdata_en;
assign main_basesoc_sdram_slave_p2_wrdata_mask = main_basesoc_sdram_dfi_p2_wrdata_mask;
assign main_basesoc_sdram_slave_p2_rddata_en = main_basesoc_sdram_dfi_p2_rddata_en;
assign main_basesoc_sdram_dfi_p2_rddata = main_basesoc_sdram_slave_p2_rddata;
assign main_basesoc_sdram_dfi_p2_rddata_valid = main_basesoc_sdram_slave_p2_rddata_valid;
assign main_basesoc_sdram_slave_p3_address = main_basesoc_sdram_dfi_p3_address;
assign main_basesoc_sdram_slave_p3_bank = main_basesoc_sdram_dfi_p3_bank;
assign main_basesoc_sdram_slave_p3_cas_n = main_basesoc_sdram_dfi_p3_cas_n;
assign main_basesoc_sdram_slave_p3_cs_n = main_basesoc_sdram_dfi_p3_cs_n;
assign main_basesoc_sdram_slave_p3_ras_n = main_basesoc_sdram_dfi_p3_ras_n;
assign main_basesoc_sdram_slave_p3_we_n = main_basesoc_sdram_dfi_p3_we_n;
assign main_basesoc_sdram_slave_p3_cke = main_basesoc_sdram_dfi_p3_cke;
assign main_basesoc_sdram_slave_p3_odt = main_basesoc_sdram_dfi_p3_odt;
assign main_basesoc_sdram_slave_p3_reset_n = main_basesoc_sdram_dfi_p3_reset_n;
assign main_basesoc_sdram_slave_p3_act_n = main_basesoc_sdram_dfi_p3_act_n;
assign main_basesoc_sdram_slave_p3_wrdata = main_basesoc_sdram_dfi_p3_wrdata;
assign main_basesoc_sdram_slave_p3_wrdata_en = main_basesoc_sdram_dfi_p3_wrdata_en;
assign main_basesoc_sdram_slave_p3_wrdata_mask = main_basesoc_sdram_dfi_p3_wrdata_mask;
assign main_basesoc_sdram_slave_p3_rddata_en = main_basesoc_sdram_dfi_p3_rddata_en;
assign main_basesoc_sdram_dfi_p3_rddata = main_basesoc_sdram_slave_p3_rddata;
assign main_basesoc_sdram_dfi_p3_rddata_valid = main_basesoc_sdram_slave_p3_rddata_valid;
always @(*) begin
    main_basesoc_sdram_csr_dfi_p0_rddata <= 64'd0;
    main_basesoc_sdram_csr_dfi_p0_rddata_valid <= 1'd0;
    main_basesoc_sdram_csr_dfi_p1_rddata <= 64'd0;
    main_basesoc_sdram_csr_dfi_p1_rddata_valid <= 1'd0;
    main_basesoc_sdram_csr_dfi_p2_rddata <= 64'd0;
    main_basesoc_sdram_csr_dfi_p2_rddata_valid <= 1'd0;
    main_basesoc_sdram_csr_dfi_p3_rddata <= 64'd0;
    main_basesoc_sdram_csr_dfi_p3_rddata_valid <= 1'd0;
    main_basesoc_sdram_ext_dfi_p0_rddata <= 64'd0;
    main_basesoc_sdram_ext_dfi_p0_rddata_valid <= 1'd0;
    main_basesoc_sdram_ext_dfi_p1_rddata <= 64'd0;
    main_basesoc_sdram_ext_dfi_p1_rddata_valid <= 1'd0;
    main_basesoc_sdram_ext_dfi_p2_rddata <= 64'd0;
    main_basesoc_sdram_ext_dfi_p2_rddata_valid <= 1'd0;
    main_basesoc_sdram_ext_dfi_p3_rddata <= 64'd0;
    main_basesoc_sdram_ext_dfi_p3_rddata_valid <= 1'd0;
    main_basesoc_sdram_master_p0_act_n <= 1'd1;
    main_basesoc_sdram_master_p0_address <= 15'd0;
    main_basesoc_sdram_master_p0_bank <= 3'd0;
    main_basesoc_sdram_master_p0_cas_n <= 1'd1;
    main_basesoc_sdram_master_p0_cke <= 1'd0;
    main_basesoc_sdram_master_p0_cs_n <= 1'd1;
    main_basesoc_sdram_master_p0_odt <= 1'd0;
    main_basesoc_sdram_master_p0_ras_n <= 1'd1;
    main_basesoc_sdram_master_p0_rddata_en <= 1'd0;
    main_basesoc_sdram_master_p0_reset_n <= 1'd0;
    main_basesoc_sdram_master_p0_we_n <= 1'd1;
    main_basesoc_sdram_master_p0_wrdata <= 64'd0;
    main_basesoc_sdram_master_p0_wrdata_en <= 1'd0;
    main_basesoc_sdram_master_p0_wrdata_mask <= 8'd0;
    main_basesoc_sdram_master_p1_act_n <= 1'd1;
    main_basesoc_sdram_master_p1_address <= 15'd0;
    main_basesoc_sdram_master_p1_bank <= 3'd0;
    main_basesoc_sdram_master_p1_cas_n <= 1'd1;
    main_basesoc_sdram_master_p1_cke <= 1'd0;
    main_basesoc_sdram_master_p1_cs_n <= 1'd1;
    main_basesoc_sdram_master_p1_odt <= 1'd0;
    main_basesoc_sdram_master_p1_ras_n <= 1'd1;
    main_basesoc_sdram_master_p1_rddata_en <= 1'd0;
    main_basesoc_sdram_master_p1_reset_n <= 1'd0;
    main_basesoc_sdram_master_p1_we_n <= 1'd1;
    main_basesoc_sdram_master_p1_wrdata <= 64'd0;
    main_basesoc_sdram_master_p1_wrdata_en <= 1'd0;
    main_basesoc_sdram_master_p1_wrdata_mask <= 8'd0;
    main_basesoc_sdram_master_p2_act_n <= 1'd1;
    main_basesoc_sdram_master_p2_address <= 15'd0;
    main_basesoc_sdram_master_p2_bank <= 3'd0;
    main_basesoc_sdram_master_p2_cas_n <= 1'd1;
    main_basesoc_sdram_master_p2_cke <= 1'd0;
    main_basesoc_sdram_master_p2_cs_n <= 1'd1;
    main_basesoc_sdram_master_p2_odt <= 1'd0;
    main_basesoc_sdram_master_p2_ras_n <= 1'd1;
    main_basesoc_sdram_master_p2_rddata_en <= 1'd0;
    main_basesoc_sdram_master_p2_reset_n <= 1'd0;
    main_basesoc_sdram_master_p2_we_n <= 1'd1;
    main_basesoc_sdram_master_p2_wrdata <= 64'd0;
    main_basesoc_sdram_master_p2_wrdata_en <= 1'd0;
    main_basesoc_sdram_master_p2_wrdata_mask <= 8'd0;
    main_basesoc_sdram_master_p3_act_n <= 1'd1;
    main_basesoc_sdram_master_p3_address <= 15'd0;
    main_basesoc_sdram_master_p3_bank <= 3'd0;
    main_basesoc_sdram_master_p3_cas_n <= 1'd1;
    main_basesoc_sdram_master_p3_cke <= 1'd0;
    main_basesoc_sdram_master_p3_cs_n <= 1'd1;
    main_basesoc_sdram_master_p3_odt <= 1'd0;
    main_basesoc_sdram_master_p3_ras_n <= 1'd1;
    main_basesoc_sdram_master_p3_rddata_en <= 1'd0;
    main_basesoc_sdram_master_p3_reset_n <= 1'd0;
    main_basesoc_sdram_master_p3_we_n <= 1'd1;
    main_basesoc_sdram_master_p3_wrdata <= 64'd0;
    main_basesoc_sdram_master_p3_wrdata_en <= 1'd0;
    main_basesoc_sdram_master_p3_wrdata_mask <= 8'd0;
    main_basesoc_sdram_slave_p0_rddata <= 64'd0;
    main_basesoc_sdram_slave_p0_rddata_valid <= 1'd0;
    main_basesoc_sdram_slave_p1_rddata <= 64'd0;
    main_basesoc_sdram_slave_p1_rddata_valid <= 1'd0;
    main_basesoc_sdram_slave_p2_rddata <= 64'd0;
    main_basesoc_sdram_slave_p2_rddata_valid <= 1'd0;
    main_basesoc_sdram_slave_p3_rddata <= 64'd0;
    main_basesoc_sdram_slave_p3_rddata_valid <= 1'd0;
    if (main_basesoc_sdram_sel) begin
        if (main_basesoc_sdram_ext_dfi_sel) begin
            main_basesoc_sdram_master_p0_address <= main_basesoc_sdram_ext_dfi_p0_address;
            main_basesoc_sdram_master_p0_bank <= main_basesoc_sdram_ext_dfi_p0_bank;
            main_basesoc_sdram_master_p0_cas_n <= main_basesoc_sdram_ext_dfi_p0_cas_n;
            main_basesoc_sdram_master_p0_cs_n <= main_basesoc_sdram_ext_dfi_p0_cs_n;
            main_basesoc_sdram_master_p0_ras_n <= main_basesoc_sdram_ext_dfi_p0_ras_n;
            main_basesoc_sdram_master_p0_we_n <= main_basesoc_sdram_ext_dfi_p0_we_n;
            main_basesoc_sdram_master_p0_cke <= main_basesoc_sdram_ext_dfi_p0_cke;
            main_basesoc_sdram_master_p0_odt <= main_basesoc_sdram_ext_dfi_p0_odt;
            main_basesoc_sdram_master_p0_reset_n <= main_basesoc_sdram_ext_dfi_p0_reset_n;
            main_basesoc_sdram_master_p0_act_n <= main_basesoc_sdram_ext_dfi_p0_act_n;
            main_basesoc_sdram_master_p0_wrdata <= main_basesoc_sdram_ext_dfi_p0_wrdata;
            main_basesoc_sdram_master_p0_wrdata_en <= main_basesoc_sdram_ext_dfi_p0_wrdata_en;
            main_basesoc_sdram_master_p0_wrdata_mask <= main_basesoc_sdram_ext_dfi_p0_wrdata_mask;
            main_basesoc_sdram_master_p0_rddata_en <= main_basesoc_sdram_ext_dfi_p0_rddata_en;
            main_basesoc_sdram_ext_dfi_p0_rddata <= main_basesoc_sdram_master_p0_rddata;
            main_basesoc_sdram_ext_dfi_p0_rddata_valid <= main_basesoc_sdram_master_p0_rddata_valid;
            main_basesoc_sdram_master_p1_address <= main_basesoc_sdram_ext_dfi_p1_address;
            main_basesoc_sdram_master_p1_bank <= main_basesoc_sdram_ext_dfi_p1_bank;
            main_basesoc_sdram_master_p1_cas_n <= main_basesoc_sdram_ext_dfi_p1_cas_n;
            main_basesoc_sdram_master_p1_cs_n <= main_basesoc_sdram_ext_dfi_p1_cs_n;
            main_basesoc_sdram_master_p1_ras_n <= main_basesoc_sdram_ext_dfi_p1_ras_n;
            main_basesoc_sdram_master_p1_we_n <= main_basesoc_sdram_ext_dfi_p1_we_n;
            main_basesoc_sdram_master_p1_cke <= main_basesoc_sdram_ext_dfi_p1_cke;
            main_basesoc_sdram_master_p1_odt <= main_basesoc_sdram_ext_dfi_p1_odt;
            main_basesoc_sdram_master_p1_reset_n <= main_basesoc_sdram_ext_dfi_p1_reset_n;
            main_basesoc_sdram_master_p1_act_n <= main_basesoc_sdram_ext_dfi_p1_act_n;
            main_basesoc_sdram_master_p1_wrdata <= main_basesoc_sdram_ext_dfi_p1_wrdata;
            main_basesoc_sdram_master_p1_wrdata_en <= main_basesoc_sdram_ext_dfi_p1_wrdata_en;
            main_basesoc_sdram_master_p1_wrdata_mask <= main_basesoc_sdram_ext_dfi_p1_wrdata_mask;
            main_basesoc_sdram_master_p1_rddata_en <= main_basesoc_sdram_ext_dfi_p1_rddata_en;
            main_basesoc_sdram_ext_dfi_p1_rddata <= main_basesoc_sdram_master_p1_rddata;
            main_basesoc_sdram_ext_dfi_p1_rddata_valid <= main_basesoc_sdram_master_p1_rddata_valid;
            main_basesoc_sdram_master_p2_address <= main_basesoc_sdram_ext_dfi_p2_address;
            main_basesoc_sdram_master_p2_bank <= main_basesoc_sdram_ext_dfi_p2_bank;
            main_basesoc_sdram_master_p2_cas_n <= main_basesoc_sdram_ext_dfi_p2_cas_n;
            main_basesoc_sdram_master_p2_cs_n <= main_basesoc_sdram_ext_dfi_p2_cs_n;
            main_basesoc_sdram_master_p2_ras_n <= main_basesoc_sdram_ext_dfi_p2_ras_n;
            main_basesoc_sdram_master_p2_we_n <= main_basesoc_sdram_ext_dfi_p2_we_n;
            main_basesoc_sdram_master_p2_cke <= main_basesoc_sdram_ext_dfi_p2_cke;
            main_basesoc_sdram_master_p2_odt <= main_basesoc_sdram_ext_dfi_p2_odt;
            main_basesoc_sdram_master_p2_reset_n <= main_basesoc_sdram_ext_dfi_p2_reset_n;
            main_basesoc_sdram_master_p2_act_n <= main_basesoc_sdram_ext_dfi_p2_act_n;
            main_basesoc_sdram_master_p2_wrdata <= main_basesoc_sdram_ext_dfi_p2_wrdata;
            main_basesoc_sdram_master_p2_wrdata_en <= main_basesoc_sdram_ext_dfi_p2_wrdata_en;
            main_basesoc_sdram_master_p2_wrdata_mask <= main_basesoc_sdram_ext_dfi_p2_wrdata_mask;
            main_basesoc_sdram_master_p2_rddata_en <= main_basesoc_sdram_ext_dfi_p2_rddata_en;
            main_basesoc_sdram_ext_dfi_p2_rddata <= main_basesoc_sdram_master_p2_rddata;
            main_basesoc_sdram_ext_dfi_p2_rddata_valid <= main_basesoc_sdram_master_p2_rddata_valid;
            main_basesoc_sdram_master_p3_address <= main_basesoc_sdram_ext_dfi_p3_address;
            main_basesoc_sdram_master_p3_bank <= main_basesoc_sdram_ext_dfi_p3_bank;
            main_basesoc_sdram_master_p3_cas_n <= main_basesoc_sdram_ext_dfi_p3_cas_n;
            main_basesoc_sdram_master_p3_cs_n <= main_basesoc_sdram_ext_dfi_p3_cs_n;
            main_basesoc_sdram_master_p3_ras_n <= main_basesoc_sdram_ext_dfi_p3_ras_n;
            main_basesoc_sdram_master_p3_we_n <= main_basesoc_sdram_ext_dfi_p3_we_n;
            main_basesoc_sdram_master_p3_cke <= main_basesoc_sdram_ext_dfi_p3_cke;
            main_basesoc_sdram_master_p3_odt <= main_basesoc_sdram_ext_dfi_p3_odt;
            main_basesoc_sdram_master_p3_reset_n <= main_basesoc_sdram_ext_dfi_p3_reset_n;
            main_basesoc_sdram_master_p3_act_n <= main_basesoc_sdram_ext_dfi_p3_act_n;
            main_basesoc_sdram_master_p3_wrdata <= main_basesoc_sdram_ext_dfi_p3_wrdata;
            main_basesoc_sdram_master_p3_wrdata_en <= main_basesoc_sdram_ext_dfi_p3_wrdata_en;
            main_basesoc_sdram_master_p3_wrdata_mask <= main_basesoc_sdram_ext_dfi_p3_wrdata_mask;
            main_basesoc_sdram_master_p3_rddata_en <= main_basesoc_sdram_ext_dfi_p3_rddata_en;
            main_basesoc_sdram_ext_dfi_p3_rddata <= main_basesoc_sdram_master_p3_rddata;
            main_basesoc_sdram_ext_dfi_p3_rddata_valid <= main_basesoc_sdram_master_p3_rddata_valid;
        end else begin
            main_basesoc_sdram_master_p0_address <= main_basesoc_sdram_slave_p0_address;
            main_basesoc_sdram_master_p0_bank <= main_basesoc_sdram_slave_p0_bank;
            main_basesoc_sdram_master_p0_cas_n <= main_basesoc_sdram_slave_p0_cas_n;
            main_basesoc_sdram_master_p0_cs_n <= main_basesoc_sdram_slave_p0_cs_n;
            main_basesoc_sdram_master_p0_ras_n <= main_basesoc_sdram_slave_p0_ras_n;
            main_basesoc_sdram_master_p0_we_n <= main_basesoc_sdram_slave_p0_we_n;
            main_basesoc_sdram_master_p0_cke <= main_basesoc_sdram_slave_p0_cke;
            main_basesoc_sdram_master_p0_odt <= main_basesoc_sdram_slave_p0_odt;
            main_basesoc_sdram_master_p0_reset_n <= main_basesoc_sdram_slave_p0_reset_n;
            main_basesoc_sdram_master_p0_act_n <= main_basesoc_sdram_slave_p0_act_n;
            main_basesoc_sdram_master_p0_wrdata <= main_basesoc_sdram_slave_p0_wrdata;
            main_basesoc_sdram_master_p0_wrdata_en <= main_basesoc_sdram_slave_p0_wrdata_en;
            main_basesoc_sdram_master_p0_wrdata_mask <= main_basesoc_sdram_slave_p0_wrdata_mask;
            main_basesoc_sdram_master_p0_rddata_en <= main_basesoc_sdram_slave_p0_rddata_en;
            main_basesoc_sdram_slave_p0_rddata <= main_basesoc_sdram_master_p0_rddata;
            main_basesoc_sdram_slave_p0_rddata_valid <= main_basesoc_sdram_master_p0_rddata_valid;
            main_basesoc_sdram_master_p1_address <= main_basesoc_sdram_slave_p1_address;
            main_basesoc_sdram_master_p1_bank <= main_basesoc_sdram_slave_p1_bank;
            main_basesoc_sdram_master_p1_cas_n <= main_basesoc_sdram_slave_p1_cas_n;
            main_basesoc_sdram_master_p1_cs_n <= main_basesoc_sdram_slave_p1_cs_n;
            main_basesoc_sdram_master_p1_ras_n <= main_basesoc_sdram_slave_p1_ras_n;
            main_basesoc_sdram_master_p1_we_n <= main_basesoc_sdram_slave_p1_we_n;
            main_basesoc_sdram_master_p1_cke <= main_basesoc_sdram_slave_p1_cke;
            main_basesoc_sdram_master_p1_odt <= main_basesoc_sdram_slave_p1_odt;
            main_basesoc_sdram_master_p1_reset_n <= main_basesoc_sdram_slave_p1_reset_n;
            main_basesoc_sdram_master_p1_act_n <= main_basesoc_sdram_slave_p1_act_n;
            main_basesoc_sdram_master_p1_wrdata <= main_basesoc_sdram_slave_p1_wrdata;
            main_basesoc_sdram_master_p1_wrdata_en <= main_basesoc_sdram_slave_p1_wrdata_en;
            main_basesoc_sdram_master_p1_wrdata_mask <= main_basesoc_sdram_slave_p1_wrdata_mask;
            main_basesoc_sdram_master_p1_rddata_en <= main_basesoc_sdram_slave_p1_rddata_en;
            main_basesoc_sdram_slave_p1_rddata <= main_basesoc_sdram_master_p1_rddata;
            main_basesoc_sdram_slave_p1_rddata_valid <= main_basesoc_sdram_master_p1_rddata_valid;
            main_basesoc_sdram_master_p2_address <= main_basesoc_sdram_slave_p2_address;
            main_basesoc_sdram_master_p2_bank <= main_basesoc_sdram_slave_p2_bank;
            main_basesoc_sdram_master_p2_cas_n <= main_basesoc_sdram_slave_p2_cas_n;
            main_basesoc_sdram_master_p2_cs_n <= main_basesoc_sdram_slave_p2_cs_n;
            main_basesoc_sdram_master_p2_ras_n <= main_basesoc_sdram_slave_p2_ras_n;
            main_basesoc_sdram_master_p2_we_n <= main_basesoc_sdram_slave_p2_we_n;
            main_basesoc_sdram_master_p2_cke <= main_basesoc_sdram_slave_p2_cke;
            main_basesoc_sdram_master_p2_odt <= main_basesoc_sdram_slave_p2_odt;
            main_basesoc_sdram_master_p2_reset_n <= main_basesoc_sdram_slave_p2_reset_n;
            main_basesoc_sdram_master_p2_act_n <= main_basesoc_sdram_slave_p2_act_n;
            main_basesoc_sdram_master_p2_wrdata <= main_basesoc_sdram_slave_p2_wrdata;
            main_basesoc_sdram_master_p2_wrdata_en <= main_basesoc_sdram_slave_p2_wrdata_en;
            main_basesoc_sdram_master_p2_wrdata_mask <= main_basesoc_sdram_slave_p2_wrdata_mask;
            main_basesoc_sdram_master_p2_rddata_en <= main_basesoc_sdram_slave_p2_rddata_en;
            main_basesoc_sdram_slave_p2_rddata <= main_basesoc_sdram_master_p2_rddata;
            main_basesoc_sdram_slave_p2_rddata_valid <= main_basesoc_sdram_master_p2_rddata_valid;
            main_basesoc_sdram_master_p3_address <= main_basesoc_sdram_slave_p3_address;
            main_basesoc_sdram_master_p3_bank <= main_basesoc_sdram_slave_p3_bank;
            main_basesoc_sdram_master_p3_cas_n <= main_basesoc_sdram_slave_p3_cas_n;
            main_basesoc_sdram_master_p3_cs_n <= main_basesoc_sdram_slave_p3_cs_n;
            main_basesoc_sdram_master_p3_ras_n <= main_basesoc_sdram_slave_p3_ras_n;
            main_basesoc_sdram_master_p3_we_n <= main_basesoc_sdram_slave_p3_we_n;
            main_basesoc_sdram_master_p3_cke <= main_basesoc_sdram_slave_p3_cke;
            main_basesoc_sdram_master_p3_odt <= main_basesoc_sdram_slave_p3_odt;
            main_basesoc_sdram_master_p3_reset_n <= main_basesoc_sdram_slave_p3_reset_n;
            main_basesoc_sdram_master_p3_act_n <= main_basesoc_sdram_slave_p3_act_n;
            main_basesoc_sdram_master_p3_wrdata <= main_basesoc_sdram_slave_p3_wrdata;
            main_basesoc_sdram_master_p3_wrdata_en <= main_basesoc_sdram_slave_p3_wrdata_en;
            main_basesoc_sdram_master_p3_wrdata_mask <= main_basesoc_sdram_slave_p3_wrdata_mask;
            main_basesoc_sdram_master_p3_rddata_en <= main_basesoc_sdram_slave_p3_rddata_en;
            main_basesoc_sdram_slave_p3_rddata <= main_basesoc_sdram_master_p3_rddata;
            main_basesoc_sdram_slave_p3_rddata_valid <= main_basesoc_sdram_master_p3_rddata_valid;
            if (1'd0) begin
                main_basesoc_sdram_master_p0_cs_n <= {2{main_basesoc_sdram_slave_p0_cs_n}};
                main_basesoc_sdram_master_p1_cs_n <= {2{main_basesoc_sdram_slave_p1_cs_n}};
                main_basesoc_sdram_master_p2_cs_n <= {2{main_basesoc_sdram_slave_p2_cs_n}};
                main_basesoc_sdram_master_p3_cs_n <= {2{main_basesoc_sdram_slave_p3_cs_n}};
            end
        end
    end else begin
        main_basesoc_sdram_master_p0_address <= main_basesoc_sdram_csr_dfi_p0_address;
        main_basesoc_sdram_master_p0_bank <= main_basesoc_sdram_csr_dfi_p0_bank;
        main_basesoc_sdram_master_p0_cas_n <= main_basesoc_sdram_csr_dfi_p0_cas_n;
        main_basesoc_sdram_master_p0_cs_n <= main_basesoc_sdram_csr_dfi_p0_cs_n;
        main_basesoc_sdram_master_p0_ras_n <= main_basesoc_sdram_csr_dfi_p0_ras_n;
        main_basesoc_sdram_master_p0_we_n <= main_basesoc_sdram_csr_dfi_p0_we_n;
        main_basesoc_sdram_master_p0_cke <= main_basesoc_sdram_csr_dfi_p0_cke;
        main_basesoc_sdram_master_p0_odt <= main_basesoc_sdram_csr_dfi_p0_odt;
        main_basesoc_sdram_master_p0_reset_n <= main_basesoc_sdram_csr_dfi_p0_reset_n;
        main_basesoc_sdram_master_p0_act_n <= main_basesoc_sdram_csr_dfi_p0_act_n;
        main_basesoc_sdram_master_p0_wrdata <= main_basesoc_sdram_csr_dfi_p0_wrdata;
        main_basesoc_sdram_master_p0_wrdata_en <= main_basesoc_sdram_csr_dfi_p0_wrdata_en;
        main_basesoc_sdram_master_p0_wrdata_mask <= main_basesoc_sdram_csr_dfi_p0_wrdata_mask;
        main_basesoc_sdram_master_p0_rddata_en <= main_basesoc_sdram_csr_dfi_p0_rddata_en;
        main_basesoc_sdram_csr_dfi_p0_rddata <= main_basesoc_sdram_master_p0_rddata;
        main_basesoc_sdram_csr_dfi_p0_rddata_valid <= main_basesoc_sdram_master_p0_rddata_valid;
        main_basesoc_sdram_master_p1_address <= main_basesoc_sdram_csr_dfi_p1_address;
        main_basesoc_sdram_master_p1_bank <= main_basesoc_sdram_csr_dfi_p1_bank;
        main_basesoc_sdram_master_p1_cas_n <= main_basesoc_sdram_csr_dfi_p1_cas_n;
        main_basesoc_sdram_master_p1_cs_n <= main_basesoc_sdram_csr_dfi_p1_cs_n;
        main_basesoc_sdram_master_p1_ras_n <= main_basesoc_sdram_csr_dfi_p1_ras_n;
        main_basesoc_sdram_master_p1_we_n <= main_basesoc_sdram_csr_dfi_p1_we_n;
        main_basesoc_sdram_master_p1_cke <= main_basesoc_sdram_csr_dfi_p1_cke;
        main_basesoc_sdram_master_p1_odt <= main_basesoc_sdram_csr_dfi_p1_odt;
        main_basesoc_sdram_master_p1_reset_n <= main_basesoc_sdram_csr_dfi_p1_reset_n;
        main_basesoc_sdram_master_p1_act_n <= main_basesoc_sdram_csr_dfi_p1_act_n;
        main_basesoc_sdram_master_p1_wrdata <= main_basesoc_sdram_csr_dfi_p1_wrdata;
        main_basesoc_sdram_master_p1_wrdata_en <= main_basesoc_sdram_csr_dfi_p1_wrdata_en;
        main_basesoc_sdram_master_p1_wrdata_mask <= main_basesoc_sdram_csr_dfi_p1_wrdata_mask;
        main_basesoc_sdram_master_p1_rddata_en <= main_basesoc_sdram_csr_dfi_p1_rddata_en;
        main_basesoc_sdram_csr_dfi_p1_rddata <= main_basesoc_sdram_master_p1_rddata;
        main_basesoc_sdram_csr_dfi_p1_rddata_valid <= main_basesoc_sdram_master_p1_rddata_valid;
        main_basesoc_sdram_master_p2_address <= main_basesoc_sdram_csr_dfi_p2_address;
        main_basesoc_sdram_master_p2_bank <= main_basesoc_sdram_csr_dfi_p2_bank;
        main_basesoc_sdram_master_p2_cas_n <= main_basesoc_sdram_csr_dfi_p2_cas_n;
        main_basesoc_sdram_master_p2_cs_n <= main_basesoc_sdram_csr_dfi_p2_cs_n;
        main_basesoc_sdram_master_p2_ras_n <= main_basesoc_sdram_csr_dfi_p2_ras_n;
        main_basesoc_sdram_master_p2_we_n <= main_basesoc_sdram_csr_dfi_p2_we_n;
        main_basesoc_sdram_master_p2_cke <= main_basesoc_sdram_csr_dfi_p2_cke;
        main_basesoc_sdram_master_p2_odt <= main_basesoc_sdram_csr_dfi_p2_odt;
        main_basesoc_sdram_master_p2_reset_n <= main_basesoc_sdram_csr_dfi_p2_reset_n;
        main_basesoc_sdram_master_p2_act_n <= main_basesoc_sdram_csr_dfi_p2_act_n;
        main_basesoc_sdram_master_p2_wrdata <= main_basesoc_sdram_csr_dfi_p2_wrdata;
        main_basesoc_sdram_master_p2_wrdata_en <= main_basesoc_sdram_csr_dfi_p2_wrdata_en;
        main_basesoc_sdram_master_p2_wrdata_mask <= main_basesoc_sdram_csr_dfi_p2_wrdata_mask;
        main_basesoc_sdram_master_p2_rddata_en <= main_basesoc_sdram_csr_dfi_p2_rddata_en;
        main_basesoc_sdram_csr_dfi_p2_rddata <= main_basesoc_sdram_master_p2_rddata;
        main_basesoc_sdram_csr_dfi_p2_rddata_valid <= main_basesoc_sdram_master_p2_rddata_valid;
        main_basesoc_sdram_master_p3_address <= main_basesoc_sdram_csr_dfi_p3_address;
        main_basesoc_sdram_master_p3_bank <= main_basesoc_sdram_csr_dfi_p3_bank;
        main_basesoc_sdram_master_p3_cas_n <= main_basesoc_sdram_csr_dfi_p3_cas_n;
        main_basesoc_sdram_master_p3_cs_n <= main_basesoc_sdram_csr_dfi_p3_cs_n;
        main_basesoc_sdram_master_p3_ras_n <= main_basesoc_sdram_csr_dfi_p3_ras_n;
        main_basesoc_sdram_master_p3_we_n <= main_basesoc_sdram_csr_dfi_p3_we_n;
        main_basesoc_sdram_master_p3_cke <= main_basesoc_sdram_csr_dfi_p3_cke;
        main_basesoc_sdram_master_p3_odt <= main_basesoc_sdram_csr_dfi_p3_odt;
        main_basesoc_sdram_master_p3_reset_n <= main_basesoc_sdram_csr_dfi_p3_reset_n;
        main_basesoc_sdram_master_p3_act_n <= main_basesoc_sdram_csr_dfi_p3_act_n;
        main_basesoc_sdram_master_p3_wrdata <= main_basesoc_sdram_csr_dfi_p3_wrdata;
        main_basesoc_sdram_master_p3_wrdata_en <= main_basesoc_sdram_csr_dfi_p3_wrdata_en;
        main_basesoc_sdram_master_p3_wrdata_mask <= main_basesoc_sdram_csr_dfi_p3_wrdata_mask;
        main_basesoc_sdram_master_p3_rddata_en <= main_basesoc_sdram_csr_dfi_p3_rddata_en;
        main_basesoc_sdram_csr_dfi_p3_rddata <= main_basesoc_sdram_master_p3_rddata;
        main_basesoc_sdram_csr_dfi_p3_rddata_valid <= main_basesoc_sdram_master_p3_rddata_valid;
    end
end
assign main_basesoc_sdram_csr_dfi_p0_cke = main_basesoc_sdram_cke;
assign main_basesoc_sdram_csr_dfi_p1_cke = main_basesoc_sdram_cke;
assign main_basesoc_sdram_csr_dfi_p2_cke = main_basesoc_sdram_cke;
assign main_basesoc_sdram_csr_dfi_p3_cke = main_basesoc_sdram_cke;
assign main_basesoc_sdram_csr_dfi_p0_odt = main_basesoc_sdram_odt;
assign main_basesoc_sdram_csr_dfi_p1_odt = main_basesoc_sdram_odt;
assign main_basesoc_sdram_csr_dfi_p2_odt = main_basesoc_sdram_odt;
assign main_basesoc_sdram_csr_dfi_p3_odt = main_basesoc_sdram_odt;
assign main_basesoc_sdram_csr_dfi_p0_reset_n = main_basesoc_sdram_reset_n;
assign main_basesoc_sdram_csr_dfi_p1_reset_n = main_basesoc_sdram_reset_n;
assign main_basesoc_sdram_csr_dfi_p2_reset_n = main_basesoc_sdram_reset_n;
assign main_basesoc_sdram_csr_dfi_p3_reset_n = main_basesoc_sdram_reset_n;
always @(*) begin
    main_basesoc_sdram_csr_dfi_p0_cas_n <= 1'd1;
    main_basesoc_sdram_csr_dfi_p0_cs_n <= 1'd1;
    main_basesoc_sdram_csr_dfi_p0_ras_n <= 1'd1;
    main_basesoc_sdram_csr_dfi_p0_we_n <= 1'd1;
    if (main_basesoc_sdram_phaseinjector0_command_issue_re) begin
        if (main_basesoc_sdram_phaseinjector0_csrfield_cs_top) begin
            main_basesoc_sdram_csr_dfi_p0_cs_n <= 2'd2;
        end else begin
            if (main_basesoc_sdram_phaseinjector0_csrfield_cs_bottom) begin
                main_basesoc_sdram_csr_dfi_p0_cs_n <= 1'd1;
            end else begin
                main_basesoc_sdram_csr_dfi_p0_cs_n <= {1{(~main_basesoc_sdram_phaseinjector0_csrfield_cs)}};
            end
        end
        main_basesoc_sdram_csr_dfi_p0_we_n <= (~main_basesoc_sdram_phaseinjector0_csrfield_we);
        main_basesoc_sdram_csr_dfi_p0_cas_n <= (~main_basesoc_sdram_phaseinjector0_csrfield_cas);
        main_basesoc_sdram_csr_dfi_p0_ras_n <= (~main_basesoc_sdram_phaseinjector0_csrfield_ras);
    end else begin
        main_basesoc_sdram_csr_dfi_p0_cs_n <= {1{1'd1}};
        main_basesoc_sdram_csr_dfi_p0_we_n <= 1'd1;
        main_basesoc_sdram_csr_dfi_p0_cas_n <= 1'd1;
        main_basesoc_sdram_csr_dfi_p0_ras_n <= 1'd1;
    end
end
assign main_basesoc_sdram_csr_dfi_p0_address = main_basesoc_sdram_phaseinjector0_address_storage;
assign main_basesoc_sdram_csr_dfi_p0_bank = main_basesoc_sdram_phaseinjector0_baddress_storage;
assign main_basesoc_sdram_csr_dfi_p0_wrdata_en = (main_basesoc_sdram_phaseinjector0_command_issue_re & main_basesoc_sdram_phaseinjector0_csrfield_wren);
assign main_basesoc_sdram_csr_dfi_p0_rddata_en = (main_basesoc_sdram_phaseinjector0_command_issue_re & main_basesoc_sdram_phaseinjector0_csrfield_rden);
assign main_basesoc_sdram_csr_dfi_p0_wrdata = main_basesoc_sdram_phaseinjector0_wrdata_storage;
assign main_basesoc_sdram_csr_dfi_p0_wrdata_mask = 1'd0;
always @(*) begin
    main_basesoc_sdram_csr_dfi_p1_cas_n <= 1'd1;
    main_basesoc_sdram_csr_dfi_p1_cs_n <= 1'd1;
    main_basesoc_sdram_csr_dfi_p1_ras_n <= 1'd1;
    main_basesoc_sdram_csr_dfi_p1_we_n <= 1'd1;
    if (main_basesoc_sdram_phaseinjector1_command_issue_re) begin
        if (main_basesoc_sdram_phaseinjector1_csrfield_cs_top) begin
            main_basesoc_sdram_csr_dfi_p1_cs_n <= 2'd2;
        end else begin
            if (main_basesoc_sdram_phaseinjector1_csrfield_cs_bottom) begin
                main_basesoc_sdram_csr_dfi_p1_cs_n <= 1'd1;
            end else begin
                main_basesoc_sdram_csr_dfi_p1_cs_n <= {1{(~main_basesoc_sdram_phaseinjector1_csrfield_cs)}};
            end
        end
        main_basesoc_sdram_csr_dfi_p1_we_n <= (~main_basesoc_sdram_phaseinjector1_csrfield_we);
        main_basesoc_sdram_csr_dfi_p1_cas_n <= (~main_basesoc_sdram_phaseinjector1_csrfield_cas);
        main_basesoc_sdram_csr_dfi_p1_ras_n <= (~main_basesoc_sdram_phaseinjector1_csrfield_ras);
    end else begin
        main_basesoc_sdram_csr_dfi_p1_cs_n <= {1{1'd1}};
        main_basesoc_sdram_csr_dfi_p1_we_n <= 1'd1;
        main_basesoc_sdram_csr_dfi_p1_cas_n <= 1'd1;
        main_basesoc_sdram_csr_dfi_p1_ras_n <= 1'd1;
    end
end
assign main_basesoc_sdram_csr_dfi_p1_address = main_basesoc_sdram_phaseinjector1_address_storage;
assign main_basesoc_sdram_csr_dfi_p1_bank = main_basesoc_sdram_phaseinjector1_baddress_storage;
assign main_basesoc_sdram_csr_dfi_p1_wrdata_en = (main_basesoc_sdram_phaseinjector1_command_issue_re & main_basesoc_sdram_phaseinjector1_csrfield_wren);
assign main_basesoc_sdram_csr_dfi_p1_rddata_en = (main_basesoc_sdram_phaseinjector1_command_issue_re & main_basesoc_sdram_phaseinjector1_csrfield_rden);
assign main_basesoc_sdram_csr_dfi_p1_wrdata = main_basesoc_sdram_phaseinjector1_wrdata_storage;
assign main_basesoc_sdram_csr_dfi_p1_wrdata_mask = 1'd0;
always @(*) begin
    main_basesoc_sdram_csr_dfi_p2_cas_n <= 1'd1;
    main_basesoc_sdram_csr_dfi_p2_cs_n <= 1'd1;
    main_basesoc_sdram_csr_dfi_p2_ras_n <= 1'd1;
    main_basesoc_sdram_csr_dfi_p2_we_n <= 1'd1;
    if (main_basesoc_sdram_phaseinjector2_command_issue_re) begin
        if (main_basesoc_sdram_phaseinjector2_csrfield_cs_top) begin
            main_basesoc_sdram_csr_dfi_p2_cs_n <= 2'd2;
        end else begin
            if (main_basesoc_sdram_phaseinjector2_csrfield_cs_bottom) begin
                main_basesoc_sdram_csr_dfi_p2_cs_n <= 1'd1;
            end else begin
                main_basesoc_sdram_csr_dfi_p2_cs_n <= {1{(~main_basesoc_sdram_phaseinjector2_csrfield_cs)}};
            end
        end
        main_basesoc_sdram_csr_dfi_p2_we_n <= (~main_basesoc_sdram_phaseinjector2_csrfield_we);
        main_basesoc_sdram_csr_dfi_p2_cas_n <= (~main_basesoc_sdram_phaseinjector2_csrfield_cas);
        main_basesoc_sdram_csr_dfi_p2_ras_n <= (~main_basesoc_sdram_phaseinjector2_csrfield_ras);
    end else begin
        main_basesoc_sdram_csr_dfi_p2_cs_n <= {1{1'd1}};
        main_basesoc_sdram_csr_dfi_p2_we_n <= 1'd1;
        main_basesoc_sdram_csr_dfi_p2_cas_n <= 1'd1;
        main_basesoc_sdram_csr_dfi_p2_ras_n <= 1'd1;
    end
end
assign main_basesoc_sdram_csr_dfi_p2_address = main_basesoc_sdram_phaseinjector2_address_storage;
assign main_basesoc_sdram_csr_dfi_p2_bank = main_basesoc_sdram_phaseinjector2_baddress_storage;
assign main_basesoc_sdram_csr_dfi_p2_wrdata_en = (main_basesoc_sdram_phaseinjector2_command_issue_re & main_basesoc_sdram_phaseinjector2_csrfield_wren);
assign main_basesoc_sdram_csr_dfi_p2_rddata_en = (main_basesoc_sdram_phaseinjector2_command_issue_re & main_basesoc_sdram_phaseinjector2_csrfield_rden);
assign main_basesoc_sdram_csr_dfi_p2_wrdata = main_basesoc_sdram_phaseinjector2_wrdata_storage;
assign main_basesoc_sdram_csr_dfi_p2_wrdata_mask = 1'd0;
always @(*) begin
    main_basesoc_sdram_csr_dfi_p3_cas_n <= 1'd1;
    main_basesoc_sdram_csr_dfi_p3_cs_n <= 1'd1;
    main_basesoc_sdram_csr_dfi_p3_ras_n <= 1'd1;
    main_basesoc_sdram_csr_dfi_p3_we_n <= 1'd1;
    if (main_basesoc_sdram_phaseinjector3_command_issue_re) begin
        if (main_basesoc_sdram_phaseinjector3_csrfield_cs_top) begin
            main_basesoc_sdram_csr_dfi_p3_cs_n <= 2'd2;
        end else begin
            if (main_basesoc_sdram_phaseinjector3_csrfield_cs_bottom) begin
                main_basesoc_sdram_csr_dfi_p3_cs_n <= 1'd1;
            end else begin
                main_basesoc_sdram_csr_dfi_p3_cs_n <= {1{(~main_basesoc_sdram_phaseinjector3_csrfield_cs)}};
            end
        end
        main_basesoc_sdram_csr_dfi_p3_we_n <= (~main_basesoc_sdram_phaseinjector3_csrfield_we);
        main_basesoc_sdram_csr_dfi_p3_cas_n <= (~main_basesoc_sdram_phaseinjector3_csrfield_cas);
        main_basesoc_sdram_csr_dfi_p3_ras_n <= (~main_basesoc_sdram_phaseinjector3_csrfield_ras);
    end else begin
        main_basesoc_sdram_csr_dfi_p3_cs_n <= {1{1'd1}};
        main_basesoc_sdram_csr_dfi_p3_we_n <= 1'd1;
        main_basesoc_sdram_csr_dfi_p3_cas_n <= 1'd1;
        main_basesoc_sdram_csr_dfi_p3_ras_n <= 1'd1;
    end
end
assign main_basesoc_sdram_csr_dfi_p3_address = main_basesoc_sdram_phaseinjector3_address_storage;
assign main_basesoc_sdram_csr_dfi_p3_bank = main_basesoc_sdram_phaseinjector3_baddress_storage;
assign main_basesoc_sdram_csr_dfi_p3_wrdata_en = (main_basesoc_sdram_phaseinjector3_command_issue_re & main_basesoc_sdram_phaseinjector3_csrfield_wren);
assign main_basesoc_sdram_csr_dfi_p3_rddata_en = (main_basesoc_sdram_phaseinjector3_command_issue_re & main_basesoc_sdram_phaseinjector3_csrfield_rden);
assign main_basesoc_sdram_csr_dfi_p3_wrdata = main_basesoc_sdram_phaseinjector3_wrdata_storage;
assign main_basesoc_sdram_csr_dfi_p3_wrdata_mask = 1'd0;
assign main_basesoc_sdram_bankmachine0_req_valid = main_basesoc_sdram_interface_bank0_valid;
assign main_basesoc_sdram_interface_bank0_ready = main_basesoc_sdram_bankmachine0_req_ready;
assign main_basesoc_sdram_bankmachine0_req_we = main_basesoc_sdram_interface_bank0_we;
assign main_basesoc_sdram_bankmachine0_req_addr = main_basesoc_sdram_interface_bank0_addr;
assign main_basesoc_sdram_interface_bank0_lock = main_basesoc_sdram_bankmachine0_req_lock;
assign main_basesoc_sdram_interface_bank0_wdata_ready = main_basesoc_sdram_bankmachine0_req_wdata_ready;
assign main_basesoc_sdram_interface_bank0_rdata_valid = main_basesoc_sdram_bankmachine0_req_rdata_valid;
assign main_basesoc_sdram_bankmachine1_req_valid = main_basesoc_sdram_interface_bank1_valid;
assign main_basesoc_sdram_interface_bank1_ready = main_basesoc_sdram_bankmachine1_req_ready;
assign main_basesoc_sdram_bankmachine1_req_we = main_basesoc_sdram_interface_bank1_we;
assign main_basesoc_sdram_bankmachine1_req_addr = main_basesoc_sdram_interface_bank1_addr;
assign main_basesoc_sdram_interface_bank1_lock = main_basesoc_sdram_bankmachine1_req_lock;
assign main_basesoc_sdram_interface_bank1_wdata_ready = main_basesoc_sdram_bankmachine1_req_wdata_ready;
assign main_basesoc_sdram_interface_bank1_rdata_valid = main_basesoc_sdram_bankmachine1_req_rdata_valid;
assign main_basesoc_sdram_bankmachine2_req_valid = main_basesoc_sdram_interface_bank2_valid;
assign main_basesoc_sdram_interface_bank2_ready = main_basesoc_sdram_bankmachine2_req_ready;
assign main_basesoc_sdram_bankmachine2_req_we = main_basesoc_sdram_interface_bank2_we;
assign main_basesoc_sdram_bankmachine2_req_addr = main_basesoc_sdram_interface_bank2_addr;
assign main_basesoc_sdram_interface_bank2_lock = main_basesoc_sdram_bankmachine2_req_lock;
assign main_basesoc_sdram_interface_bank2_wdata_ready = main_basesoc_sdram_bankmachine2_req_wdata_ready;
assign main_basesoc_sdram_interface_bank2_rdata_valid = main_basesoc_sdram_bankmachine2_req_rdata_valid;
assign main_basesoc_sdram_bankmachine3_req_valid = main_basesoc_sdram_interface_bank3_valid;
assign main_basesoc_sdram_interface_bank3_ready = main_basesoc_sdram_bankmachine3_req_ready;
assign main_basesoc_sdram_bankmachine3_req_we = main_basesoc_sdram_interface_bank3_we;
assign main_basesoc_sdram_bankmachine3_req_addr = main_basesoc_sdram_interface_bank3_addr;
assign main_basesoc_sdram_interface_bank3_lock = main_basesoc_sdram_bankmachine3_req_lock;
assign main_basesoc_sdram_interface_bank3_wdata_ready = main_basesoc_sdram_bankmachine3_req_wdata_ready;
assign main_basesoc_sdram_interface_bank3_rdata_valid = main_basesoc_sdram_bankmachine3_req_rdata_valid;
assign main_basesoc_sdram_bankmachine4_req_valid = main_basesoc_sdram_interface_bank4_valid;
assign main_basesoc_sdram_interface_bank4_ready = main_basesoc_sdram_bankmachine4_req_ready;
assign main_basesoc_sdram_bankmachine4_req_we = main_basesoc_sdram_interface_bank4_we;
assign main_basesoc_sdram_bankmachine4_req_addr = main_basesoc_sdram_interface_bank4_addr;
assign main_basesoc_sdram_interface_bank4_lock = main_basesoc_sdram_bankmachine4_req_lock;
assign main_basesoc_sdram_interface_bank4_wdata_ready = main_basesoc_sdram_bankmachine4_req_wdata_ready;
assign main_basesoc_sdram_interface_bank4_rdata_valid = main_basesoc_sdram_bankmachine4_req_rdata_valid;
assign main_basesoc_sdram_bankmachine5_req_valid = main_basesoc_sdram_interface_bank5_valid;
assign main_basesoc_sdram_interface_bank5_ready = main_basesoc_sdram_bankmachine5_req_ready;
assign main_basesoc_sdram_bankmachine5_req_we = main_basesoc_sdram_interface_bank5_we;
assign main_basesoc_sdram_bankmachine5_req_addr = main_basesoc_sdram_interface_bank5_addr;
assign main_basesoc_sdram_interface_bank5_lock = main_basesoc_sdram_bankmachine5_req_lock;
assign main_basesoc_sdram_interface_bank5_wdata_ready = main_basesoc_sdram_bankmachine5_req_wdata_ready;
assign main_basesoc_sdram_interface_bank5_rdata_valid = main_basesoc_sdram_bankmachine5_req_rdata_valid;
assign main_basesoc_sdram_bankmachine6_req_valid = main_basesoc_sdram_interface_bank6_valid;
assign main_basesoc_sdram_interface_bank6_ready = main_basesoc_sdram_bankmachine6_req_ready;
assign main_basesoc_sdram_bankmachine6_req_we = main_basesoc_sdram_interface_bank6_we;
assign main_basesoc_sdram_bankmachine6_req_addr = main_basesoc_sdram_interface_bank6_addr;
assign main_basesoc_sdram_interface_bank6_lock = main_basesoc_sdram_bankmachine6_req_lock;
assign main_basesoc_sdram_interface_bank6_wdata_ready = main_basesoc_sdram_bankmachine6_req_wdata_ready;
assign main_basesoc_sdram_interface_bank6_rdata_valid = main_basesoc_sdram_bankmachine6_req_rdata_valid;
assign main_basesoc_sdram_bankmachine7_req_valid = main_basesoc_sdram_interface_bank7_valid;
assign main_basesoc_sdram_interface_bank7_ready = main_basesoc_sdram_bankmachine7_req_ready;
assign main_basesoc_sdram_bankmachine7_req_we = main_basesoc_sdram_interface_bank7_we;
assign main_basesoc_sdram_bankmachine7_req_addr = main_basesoc_sdram_interface_bank7_addr;
assign main_basesoc_sdram_interface_bank7_lock = main_basesoc_sdram_bankmachine7_req_lock;
assign main_basesoc_sdram_interface_bank7_wdata_ready = main_basesoc_sdram_bankmachine7_req_wdata_ready;
assign main_basesoc_sdram_interface_bank7_rdata_valid = main_basesoc_sdram_bankmachine7_req_rdata_valid;
assign main_basesoc_sdram_timer_wait = (~main_basesoc_sdram_timer_done0);
assign main_basesoc_sdram_postponer_req_i = main_basesoc_sdram_timer_done0;
assign main_basesoc_sdram_wants_refresh = main_basesoc_sdram_postponer_req_o;
assign main_basesoc_sdram_wants_zqcs = main_basesoc_sdram_zqcs_timer_done0;
assign main_basesoc_sdram_zqcs_timer_wait = (~main_basesoc_sdram_zqcs_executer_done);
assign main_basesoc_sdram_timer_done1 = (main_basesoc_sdram_timer_count1 == 1'd0);
assign main_basesoc_sdram_timer_done0 = main_basesoc_sdram_timer_done1;
assign main_basesoc_sdram_timer_count0 = main_basesoc_sdram_timer_count1;
assign main_basesoc_sdram_sequencer_start1 = (main_basesoc_sdram_sequencer_start0 | (main_basesoc_sdram_sequencer_count != 1'd0));
assign main_basesoc_sdram_sequencer_done0 = (main_basesoc_sdram_sequencer_done1 & (main_basesoc_sdram_sequencer_count == 1'd0));
assign main_basesoc_sdram_zqcs_timer_done1 = (main_basesoc_sdram_zqcs_timer_count1 == 1'd0);
assign main_basesoc_sdram_zqcs_timer_done0 = main_basesoc_sdram_zqcs_timer_done1;
assign main_basesoc_sdram_zqcs_timer_count0 = main_basesoc_sdram_zqcs_timer_count1;
always @(*) begin
    builder_refresher_next_state <= 2'd0;
    main_basesoc_sdram_cmd_last <= 1'd0;
    main_basesoc_sdram_cmd_valid <= 1'd0;
    main_basesoc_sdram_sequencer_start0 <= 1'd0;
    main_basesoc_sdram_zqcs_executer_start <= 1'd0;
    builder_refresher_next_state <= builder_refresher_state;
    case (builder_refresher_state)
        1'd1: begin
            main_basesoc_sdram_cmd_valid <= 1'd1;
            if (main_basesoc_sdram_cmd_ready) begin
                main_basesoc_sdram_sequencer_start0 <= 1'd1;
                builder_refresher_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_basesoc_sdram_cmd_valid <= 1'd1;
            if (main_basesoc_sdram_sequencer_done0) begin
                if (main_basesoc_sdram_wants_zqcs) begin
                    main_basesoc_sdram_zqcs_executer_start <= 1'd1;
                    builder_refresher_next_state <= 2'd3;
                end else begin
                    main_basesoc_sdram_cmd_valid <= 1'd0;
                    main_basesoc_sdram_cmd_last <= 1'd1;
                    builder_refresher_next_state <= 1'd0;
                end
            end
        end
        2'd3: begin
            main_basesoc_sdram_cmd_valid <= 1'd1;
            if (main_basesoc_sdram_zqcs_executer_done) begin
                main_basesoc_sdram_cmd_valid <= 1'd0;
                main_basesoc_sdram_cmd_last <= 1'd1;
                builder_refresher_next_state <= 1'd0;
            end
        end
        default: begin
            if (1'd1) begin
                if (main_basesoc_sdram_wants_refresh) begin
                    builder_refresher_next_state <= 1'd1;
                end
            end
        end
    endcase
end
assign main_basesoc_sdram_bankmachine0_sink_valid = main_basesoc_sdram_bankmachine0_req_valid;
assign main_basesoc_sdram_bankmachine0_req_ready = main_basesoc_sdram_bankmachine0_sink_ready;
assign main_basesoc_sdram_bankmachine0_sink_payload_we = main_basesoc_sdram_bankmachine0_req_we;
assign main_basesoc_sdram_bankmachine0_sink_payload_addr = main_basesoc_sdram_bankmachine0_req_addr;
assign main_basesoc_sdram_bankmachine0_sink_sink_valid = main_basesoc_sdram_bankmachine0_source_valid;
assign main_basesoc_sdram_bankmachine0_source_ready = main_basesoc_sdram_bankmachine0_sink_sink_ready;
assign main_basesoc_sdram_bankmachine0_sink_sink_first = main_basesoc_sdram_bankmachine0_source_first;
assign main_basesoc_sdram_bankmachine0_sink_sink_last = main_basesoc_sdram_bankmachine0_source_last;
assign main_basesoc_sdram_bankmachine0_sink_sink_payload_we = main_basesoc_sdram_bankmachine0_source_payload_we;
assign main_basesoc_sdram_bankmachine0_sink_sink_payload_addr = main_basesoc_sdram_bankmachine0_source_payload_addr;
assign main_basesoc_sdram_bankmachine0_source_source_ready = (main_basesoc_sdram_bankmachine0_req_wdata_ready | main_basesoc_sdram_bankmachine0_req_rdata_valid);
assign main_basesoc_sdram_bankmachine0_req_lock = (main_basesoc_sdram_bankmachine0_source_valid | main_basesoc_sdram_bankmachine0_source_source_valid);
assign main_basesoc_sdram_bankmachine0_row_hit = (main_basesoc_sdram_bankmachine0_row == main_basesoc_sdram_bankmachine0_source_source_payload_addr[21:7]);
assign main_basesoc_sdram_bankmachine0_cmd_payload_ba = 1'd0;
always @(*) begin
    main_basesoc_sdram_bankmachine0_cmd_payload_a <= 15'd0;
    if (main_basesoc_sdram_bankmachine0_row_col_n_addr_sel) begin
        main_basesoc_sdram_bankmachine0_cmd_payload_a <= main_basesoc_sdram_bankmachine0_source_source_payload_addr[21:7];
    end else begin
        main_basesoc_sdram_bankmachine0_cmd_payload_a <= ((main_basesoc_sdram_bankmachine0_auto_precharge <<< 4'd10) | {main_basesoc_sdram_bankmachine0_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_basesoc_sdram_bankmachine0_twtpcon_valid = ((main_basesoc_sdram_bankmachine0_cmd_valid & main_basesoc_sdram_bankmachine0_cmd_ready) & main_basesoc_sdram_bankmachine0_cmd_payload_is_write);
assign main_basesoc_sdram_bankmachine0_trccon_valid = ((main_basesoc_sdram_bankmachine0_cmd_valid & main_basesoc_sdram_bankmachine0_cmd_ready) & main_basesoc_sdram_bankmachine0_row_open);
assign main_basesoc_sdram_bankmachine0_trascon_valid = ((main_basesoc_sdram_bankmachine0_cmd_valid & main_basesoc_sdram_bankmachine0_cmd_ready) & main_basesoc_sdram_bankmachine0_row_open);
always @(*) begin
    main_basesoc_sdram_bankmachine0_auto_precharge <= 1'd0;
    if ((main_basesoc_sdram_bankmachine0_source_valid & main_basesoc_sdram_bankmachine0_source_source_valid)) begin
        if ((main_basesoc_sdram_bankmachine0_source_payload_addr[21:7] != main_basesoc_sdram_bankmachine0_source_source_payload_addr[21:7])) begin
            main_basesoc_sdram_bankmachine0_auto_precharge <= (main_basesoc_sdram_bankmachine0_row_close == 1'd0);
        end
    end
end
assign main_basesoc_sdram_bankmachine0_syncfifo0_din = {main_basesoc_sdram_bankmachine0_fifo_in_last, main_basesoc_sdram_bankmachine0_fifo_in_first, main_basesoc_sdram_bankmachine0_fifo_in_payload_addr, main_basesoc_sdram_bankmachine0_fifo_in_payload_we};
assign {main_basesoc_sdram_bankmachine0_fifo_out_last, main_basesoc_sdram_bankmachine0_fifo_out_first, main_basesoc_sdram_bankmachine0_fifo_out_payload_addr, main_basesoc_sdram_bankmachine0_fifo_out_payload_we} = main_basesoc_sdram_bankmachine0_syncfifo0_dout;
assign main_basesoc_sdram_bankmachine0_sink_ready = main_basesoc_sdram_bankmachine0_syncfifo0_writable;
assign main_basesoc_sdram_bankmachine0_syncfifo0_we = main_basesoc_sdram_bankmachine0_sink_valid;
assign main_basesoc_sdram_bankmachine0_fifo_in_first = main_basesoc_sdram_bankmachine0_sink_first;
assign main_basesoc_sdram_bankmachine0_fifo_in_last = main_basesoc_sdram_bankmachine0_sink_last;
assign main_basesoc_sdram_bankmachine0_fifo_in_payload_we = main_basesoc_sdram_bankmachine0_sink_payload_we;
assign main_basesoc_sdram_bankmachine0_fifo_in_payload_addr = main_basesoc_sdram_bankmachine0_sink_payload_addr;
assign main_basesoc_sdram_bankmachine0_source_valid = main_basesoc_sdram_bankmachine0_syncfifo0_readable;
assign main_basesoc_sdram_bankmachine0_source_first = main_basesoc_sdram_bankmachine0_fifo_out_first;
assign main_basesoc_sdram_bankmachine0_source_last = main_basesoc_sdram_bankmachine0_fifo_out_last;
assign main_basesoc_sdram_bankmachine0_source_payload_we = main_basesoc_sdram_bankmachine0_fifo_out_payload_we;
assign main_basesoc_sdram_bankmachine0_source_payload_addr = main_basesoc_sdram_bankmachine0_fifo_out_payload_addr;
assign main_basesoc_sdram_bankmachine0_syncfifo0_re = main_basesoc_sdram_bankmachine0_source_ready;
always @(*) begin
    main_basesoc_sdram_bankmachine0_wrport_adr <= 3'd0;
    if (main_basesoc_sdram_bankmachine0_replace) begin
        main_basesoc_sdram_bankmachine0_wrport_adr <= (main_basesoc_sdram_bankmachine0_produce - 1'd1);
    end else begin
        main_basesoc_sdram_bankmachine0_wrport_adr <= main_basesoc_sdram_bankmachine0_produce;
    end
end
assign main_basesoc_sdram_bankmachine0_wrport_dat_w = main_basesoc_sdram_bankmachine0_syncfifo0_din;
assign main_basesoc_sdram_bankmachine0_wrport_we = (main_basesoc_sdram_bankmachine0_syncfifo0_we & (main_basesoc_sdram_bankmachine0_syncfifo0_writable | main_basesoc_sdram_bankmachine0_replace));
assign main_basesoc_sdram_bankmachine0_do_read = (main_basesoc_sdram_bankmachine0_syncfifo0_readable & main_basesoc_sdram_bankmachine0_syncfifo0_re);
assign main_basesoc_sdram_bankmachine0_rdport_adr = main_basesoc_sdram_bankmachine0_consume;
assign main_basesoc_sdram_bankmachine0_syncfifo0_dout = main_basesoc_sdram_bankmachine0_rdport_dat_r;
assign main_basesoc_sdram_bankmachine0_syncfifo0_writable = (main_basesoc_sdram_bankmachine0_level != 4'd8);
assign main_basesoc_sdram_bankmachine0_syncfifo0_readable = (main_basesoc_sdram_bankmachine0_level != 1'd0);
assign main_basesoc_sdram_bankmachine0_pipe_valid_sink_ready = ((~main_basesoc_sdram_bankmachine0_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine0_pipe_valid_source_ready);
assign main_basesoc_sdram_bankmachine0_pipe_valid_sink_valid = main_basesoc_sdram_bankmachine0_sink_sink_valid;
assign main_basesoc_sdram_bankmachine0_sink_sink_ready = main_basesoc_sdram_bankmachine0_pipe_valid_sink_ready;
assign main_basesoc_sdram_bankmachine0_pipe_valid_sink_first = main_basesoc_sdram_bankmachine0_sink_sink_first;
assign main_basesoc_sdram_bankmachine0_pipe_valid_sink_last = main_basesoc_sdram_bankmachine0_sink_sink_last;
assign main_basesoc_sdram_bankmachine0_pipe_valid_sink_payload_we = main_basesoc_sdram_bankmachine0_sink_sink_payload_we;
assign main_basesoc_sdram_bankmachine0_pipe_valid_sink_payload_addr = main_basesoc_sdram_bankmachine0_sink_sink_payload_addr;
assign main_basesoc_sdram_bankmachine0_source_source_valid = main_basesoc_sdram_bankmachine0_pipe_valid_source_valid;
assign main_basesoc_sdram_bankmachine0_pipe_valid_source_ready = main_basesoc_sdram_bankmachine0_source_source_ready;
assign main_basesoc_sdram_bankmachine0_source_source_first = main_basesoc_sdram_bankmachine0_pipe_valid_source_first;
assign main_basesoc_sdram_bankmachine0_source_source_last = main_basesoc_sdram_bankmachine0_pipe_valid_source_last;
assign main_basesoc_sdram_bankmachine0_source_source_payload_we = main_basesoc_sdram_bankmachine0_pipe_valid_source_payload_we;
assign main_basesoc_sdram_bankmachine0_source_source_payload_addr = main_basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr;
always @(*) begin
    builder_bankmachine0_next_state <= 3'd0;
    main_basesoc_sdram_bankmachine0_cmd_payload_cas <= 1'd0;
    main_basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd0;
    main_basesoc_sdram_bankmachine0_cmd_payload_is_read <= 1'd0;
    main_basesoc_sdram_bankmachine0_cmd_payload_is_write <= 1'd0;
    main_basesoc_sdram_bankmachine0_cmd_payload_ras <= 1'd0;
    main_basesoc_sdram_bankmachine0_cmd_payload_we <= 1'd0;
    main_basesoc_sdram_bankmachine0_cmd_valid <= 1'd0;
    main_basesoc_sdram_bankmachine0_refresh_gnt <= 1'd0;
    main_basesoc_sdram_bankmachine0_req_rdata_valid <= 1'd0;
    main_basesoc_sdram_bankmachine0_req_wdata_ready <= 1'd0;
    main_basesoc_sdram_bankmachine0_row_close <= 1'd0;
    main_basesoc_sdram_bankmachine0_row_col_n_addr_sel <= 1'd0;
    main_basesoc_sdram_bankmachine0_row_open <= 1'd0;
    builder_bankmachine0_next_state <= builder_bankmachine0_state;
    case (builder_bankmachine0_state)
        1'd1: begin
            if ((main_basesoc_sdram_bankmachine0_twtpcon_ready & main_basesoc_sdram_bankmachine0_trascon_ready)) begin
                main_basesoc_sdram_bankmachine0_cmd_valid <= 1'd1;
                if (main_basesoc_sdram_bankmachine0_cmd_ready) begin
                    builder_bankmachine0_next_state <= 3'd5;
                end
                main_basesoc_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
                main_basesoc_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                main_basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            end
            main_basesoc_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_basesoc_sdram_bankmachine0_twtpcon_ready & main_basesoc_sdram_bankmachine0_trascon_ready)) begin
                builder_bankmachine0_next_state <= 3'd5;
            end
            main_basesoc_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_basesoc_sdram_bankmachine0_trccon_ready) begin
                main_basesoc_sdram_bankmachine0_row_col_n_addr_sel <= 1'd1;
                main_basesoc_sdram_bankmachine0_row_open <= 1'd1;
                main_basesoc_sdram_bankmachine0_cmd_valid <= 1'd1;
                main_basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
                if (main_basesoc_sdram_bankmachine0_cmd_ready) begin
                    builder_bankmachine0_next_state <= 3'd6;
                end
                main_basesoc_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_basesoc_sdram_bankmachine0_twtpcon_ready) begin
                main_basesoc_sdram_bankmachine0_refresh_gnt <= 1'd1;
            end
            main_basesoc_sdram_bankmachine0_row_close <= 1'd1;
            main_basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            if ((~main_basesoc_sdram_bankmachine0_refresh_req)) begin
                builder_bankmachine0_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_bankmachine0_next_state <= 2'd3;
        end
        3'd6: begin
            builder_bankmachine0_next_state <= 1'd0;
        end
        default: begin
            if (main_basesoc_sdram_bankmachine0_refresh_req) begin
                builder_bankmachine0_next_state <= 3'd4;
            end else begin
                if (main_basesoc_sdram_bankmachine0_source_source_valid) begin
                    if (main_basesoc_sdram_bankmachine0_row_opened) begin
                        if (main_basesoc_sdram_bankmachine0_row_hit) begin
                            main_basesoc_sdram_bankmachine0_cmd_valid <= 1'd1;
                            if (main_basesoc_sdram_bankmachine0_source_source_payload_we) begin
                                main_basesoc_sdram_bankmachine0_req_wdata_ready <= main_basesoc_sdram_bankmachine0_cmd_ready;
                                main_basesoc_sdram_bankmachine0_cmd_payload_is_write <= 1'd1;
                                main_basesoc_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                            end else begin
                                main_basesoc_sdram_bankmachine0_req_rdata_valid <= main_basesoc_sdram_bankmachine0_cmd_ready;
                                main_basesoc_sdram_bankmachine0_cmd_payload_is_read <= 1'd1;
                            end
                            main_basesoc_sdram_bankmachine0_cmd_payload_cas <= 1'd1;
                            if ((main_basesoc_sdram_bankmachine0_cmd_ready & main_basesoc_sdram_bankmachine0_auto_precharge)) begin
                                builder_bankmachine0_next_state <= 2'd2;
                            end
                        end else begin
                            builder_bankmachine0_next_state <= 1'd1;
                        end
                    end else begin
                        builder_bankmachine0_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_basesoc_sdram_bankmachine1_sink_valid = main_basesoc_sdram_bankmachine1_req_valid;
assign main_basesoc_sdram_bankmachine1_req_ready = main_basesoc_sdram_bankmachine1_sink_ready;
assign main_basesoc_sdram_bankmachine1_sink_payload_we = main_basesoc_sdram_bankmachine1_req_we;
assign main_basesoc_sdram_bankmachine1_sink_payload_addr = main_basesoc_sdram_bankmachine1_req_addr;
assign main_basesoc_sdram_bankmachine1_sink_sink_valid = main_basesoc_sdram_bankmachine1_source_valid;
assign main_basesoc_sdram_bankmachine1_source_ready = main_basesoc_sdram_bankmachine1_sink_sink_ready;
assign main_basesoc_sdram_bankmachine1_sink_sink_first = main_basesoc_sdram_bankmachine1_source_first;
assign main_basesoc_sdram_bankmachine1_sink_sink_last = main_basesoc_sdram_bankmachine1_source_last;
assign main_basesoc_sdram_bankmachine1_sink_sink_payload_we = main_basesoc_sdram_bankmachine1_source_payload_we;
assign main_basesoc_sdram_bankmachine1_sink_sink_payload_addr = main_basesoc_sdram_bankmachine1_source_payload_addr;
assign main_basesoc_sdram_bankmachine1_source_source_ready = (main_basesoc_sdram_bankmachine1_req_wdata_ready | main_basesoc_sdram_bankmachine1_req_rdata_valid);
assign main_basesoc_sdram_bankmachine1_req_lock = (main_basesoc_sdram_bankmachine1_source_valid | main_basesoc_sdram_bankmachine1_source_source_valid);
assign main_basesoc_sdram_bankmachine1_row_hit = (main_basesoc_sdram_bankmachine1_row == main_basesoc_sdram_bankmachine1_source_source_payload_addr[21:7]);
assign main_basesoc_sdram_bankmachine1_cmd_payload_ba = 1'd1;
always @(*) begin
    main_basesoc_sdram_bankmachine1_cmd_payload_a <= 15'd0;
    if (main_basesoc_sdram_bankmachine1_row_col_n_addr_sel) begin
        main_basesoc_sdram_bankmachine1_cmd_payload_a <= main_basesoc_sdram_bankmachine1_source_source_payload_addr[21:7];
    end else begin
        main_basesoc_sdram_bankmachine1_cmd_payload_a <= ((main_basesoc_sdram_bankmachine1_auto_precharge <<< 4'd10) | {main_basesoc_sdram_bankmachine1_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_basesoc_sdram_bankmachine1_twtpcon_valid = ((main_basesoc_sdram_bankmachine1_cmd_valid & main_basesoc_sdram_bankmachine1_cmd_ready) & main_basesoc_sdram_bankmachine1_cmd_payload_is_write);
assign main_basesoc_sdram_bankmachine1_trccon_valid = ((main_basesoc_sdram_bankmachine1_cmd_valid & main_basesoc_sdram_bankmachine1_cmd_ready) & main_basesoc_sdram_bankmachine1_row_open);
assign main_basesoc_sdram_bankmachine1_trascon_valid = ((main_basesoc_sdram_bankmachine1_cmd_valid & main_basesoc_sdram_bankmachine1_cmd_ready) & main_basesoc_sdram_bankmachine1_row_open);
always @(*) begin
    main_basesoc_sdram_bankmachine1_auto_precharge <= 1'd0;
    if ((main_basesoc_sdram_bankmachine1_source_valid & main_basesoc_sdram_bankmachine1_source_source_valid)) begin
        if ((main_basesoc_sdram_bankmachine1_source_payload_addr[21:7] != main_basesoc_sdram_bankmachine1_source_source_payload_addr[21:7])) begin
            main_basesoc_sdram_bankmachine1_auto_precharge <= (main_basesoc_sdram_bankmachine1_row_close == 1'd0);
        end
    end
end
assign main_basesoc_sdram_bankmachine1_syncfifo1_din = {main_basesoc_sdram_bankmachine1_fifo_in_last, main_basesoc_sdram_bankmachine1_fifo_in_first, main_basesoc_sdram_bankmachine1_fifo_in_payload_addr, main_basesoc_sdram_bankmachine1_fifo_in_payload_we};
assign {main_basesoc_sdram_bankmachine1_fifo_out_last, main_basesoc_sdram_bankmachine1_fifo_out_first, main_basesoc_sdram_bankmachine1_fifo_out_payload_addr, main_basesoc_sdram_bankmachine1_fifo_out_payload_we} = main_basesoc_sdram_bankmachine1_syncfifo1_dout;
assign main_basesoc_sdram_bankmachine1_sink_ready = main_basesoc_sdram_bankmachine1_syncfifo1_writable;
assign main_basesoc_sdram_bankmachine1_syncfifo1_we = main_basesoc_sdram_bankmachine1_sink_valid;
assign main_basesoc_sdram_bankmachine1_fifo_in_first = main_basesoc_sdram_bankmachine1_sink_first;
assign main_basesoc_sdram_bankmachine1_fifo_in_last = main_basesoc_sdram_bankmachine1_sink_last;
assign main_basesoc_sdram_bankmachine1_fifo_in_payload_we = main_basesoc_sdram_bankmachine1_sink_payload_we;
assign main_basesoc_sdram_bankmachine1_fifo_in_payload_addr = main_basesoc_sdram_bankmachine1_sink_payload_addr;
assign main_basesoc_sdram_bankmachine1_source_valid = main_basesoc_sdram_bankmachine1_syncfifo1_readable;
assign main_basesoc_sdram_bankmachine1_source_first = main_basesoc_sdram_bankmachine1_fifo_out_first;
assign main_basesoc_sdram_bankmachine1_source_last = main_basesoc_sdram_bankmachine1_fifo_out_last;
assign main_basesoc_sdram_bankmachine1_source_payload_we = main_basesoc_sdram_bankmachine1_fifo_out_payload_we;
assign main_basesoc_sdram_bankmachine1_source_payload_addr = main_basesoc_sdram_bankmachine1_fifo_out_payload_addr;
assign main_basesoc_sdram_bankmachine1_syncfifo1_re = main_basesoc_sdram_bankmachine1_source_ready;
always @(*) begin
    main_basesoc_sdram_bankmachine1_wrport_adr <= 3'd0;
    if (main_basesoc_sdram_bankmachine1_replace) begin
        main_basesoc_sdram_bankmachine1_wrport_adr <= (main_basesoc_sdram_bankmachine1_produce - 1'd1);
    end else begin
        main_basesoc_sdram_bankmachine1_wrport_adr <= main_basesoc_sdram_bankmachine1_produce;
    end
end
assign main_basesoc_sdram_bankmachine1_wrport_dat_w = main_basesoc_sdram_bankmachine1_syncfifo1_din;
assign main_basesoc_sdram_bankmachine1_wrport_we = (main_basesoc_sdram_bankmachine1_syncfifo1_we & (main_basesoc_sdram_bankmachine1_syncfifo1_writable | main_basesoc_sdram_bankmachine1_replace));
assign main_basesoc_sdram_bankmachine1_do_read = (main_basesoc_sdram_bankmachine1_syncfifo1_readable & main_basesoc_sdram_bankmachine1_syncfifo1_re);
assign main_basesoc_sdram_bankmachine1_rdport_adr = main_basesoc_sdram_bankmachine1_consume;
assign main_basesoc_sdram_bankmachine1_syncfifo1_dout = main_basesoc_sdram_bankmachine1_rdport_dat_r;
assign main_basesoc_sdram_bankmachine1_syncfifo1_writable = (main_basesoc_sdram_bankmachine1_level != 4'd8);
assign main_basesoc_sdram_bankmachine1_syncfifo1_readable = (main_basesoc_sdram_bankmachine1_level != 1'd0);
assign main_basesoc_sdram_bankmachine1_pipe_valid_sink_ready = ((~main_basesoc_sdram_bankmachine1_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine1_pipe_valid_source_ready);
assign main_basesoc_sdram_bankmachine1_pipe_valid_sink_valid = main_basesoc_sdram_bankmachine1_sink_sink_valid;
assign main_basesoc_sdram_bankmachine1_sink_sink_ready = main_basesoc_sdram_bankmachine1_pipe_valid_sink_ready;
assign main_basesoc_sdram_bankmachine1_pipe_valid_sink_first = main_basesoc_sdram_bankmachine1_sink_sink_first;
assign main_basesoc_sdram_bankmachine1_pipe_valid_sink_last = main_basesoc_sdram_bankmachine1_sink_sink_last;
assign main_basesoc_sdram_bankmachine1_pipe_valid_sink_payload_we = main_basesoc_sdram_bankmachine1_sink_sink_payload_we;
assign main_basesoc_sdram_bankmachine1_pipe_valid_sink_payload_addr = main_basesoc_sdram_bankmachine1_sink_sink_payload_addr;
assign main_basesoc_sdram_bankmachine1_source_source_valid = main_basesoc_sdram_bankmachine1_pipe_valid_source_valid;
assign main_basesoc_sdram_bankmachine1_pipe_valid_source_ready = main_basesoc_sdram_bankmachine1_source_source_ready;
assign main_basesoc_sdram_bankmachine1_source_source_first = main_basesoc_sdram_bankmachine1_pipe_valid_source_first;
assign main_basesoc_sdram_bankmachine1_source_source_last = main_basesoc_sdram_bankmachine1_pipe_valid_source_last;
assign main_basesoc_sdram_bankmachine1_source_source_payload_we = main_basesoc_sdram_bankmachine1_pipe_valid_source_payload_we;
assign main_basesoc_sdram_bankmachine1_source_source_payload_addr = main_basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr;
always @(*) begin
    builder_bankmachine1_next_state <= 3'd0;
    main_basesoc_sdram_bankmachine1_cmd_payload_cas <= 1'd0;
    main_basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd0;
    main_basesoc_sdram_bankmachine1_cmd_payload_is_read <= 1'd0;
    main_basesoc_sdram_bankmachine1_cmd_payload_is_write <= 1'd0;
    main_basesoc_sdram_bankmachine1_cmd_payload_ras <= 1'd0;
    main_basesoc_sdram_bankmachine1_cmd_payload_we <= 1'd0;
    main_basesoc_sdram_bankmachine1_cmd_valid <= 1'd0;
    main_basesoc_sdram_bankmachine1_refresh_gnt <= 1'd0;
    main_basesoc_sdram_bankmachine1_req_rdata_valid <= 1'd0;
    main_basesoc_sdram_bankmachine1_req_wdata_ready <= 1'd0;
    main_basesoc_sdram_bankmachine1_row_close <= 1'd0;
    main_basesoc_sdram_bankmachine1_row_col_n_addr_sel <= 1'd0;
    main_basesoc_sdram_bankmachine1_row_open <= 1'd0;
    builder_bankmachine1_next_state <= builder_bankmachine1_state;
    case (builder_bankmachine1_state)
        1'd1: begin
            if ((main_basesoc_sdram_bankmachine1_twtpcon_ready & main_basesoc_sdram_bankmachine1_trascon_ready)) begin
                main_basesoc_sdram_bankmachine1_cmd_valid <= 1'd1;
                if (main_basesoc_sdram_bankmachine1_cmd_ready) begin
                    builder_bankmachine1_next_state <= 3'd5;
                end
                main_basesoc_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
                main_basesoc_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                main_basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            end
            main_basesoc_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_basesoc_sdram_bankmachine1_twtpcon_ready & main_basesoc_sdram_bankmachine1_trascon_ready)) begin
                builder_bankmachine1_next_state <= 3'd5;
            end
            main_basesoc_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_basesoc_sdram_bankmachine1_trccon_ready) begin
                main_basesoc_sdram_bankmachine1_row_col_n_addr_sel <= 1'd1;
                main_basesoc_sdram_bankmachine1_row_open <= 1'd1;
                main_basesoc_sdram_bankmachine1_cmd_valid <= 1'd1;
                main_basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
                if (main_basesoc_sdram_bankmachine1_cmd_ready) begin
                    builder_bankmachine1_next_state <= 3'd6;
                end
                main_basesoc_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_basesoc_sdram_bankmachine1_twtpcon_ready) begin
                main_basesoc_sdram_bankmachine1_refresh_gnt <= 1'd1;
            end
            main_basesoc_sdram_bankmachine1_row_close <= 1'd1;
            main_basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            if ((~main_basesoc_sdram_bankmachine1_refresh_req)) begin
                builder_bankmachine1_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_bankmachine1_next_state <= 2'd3;
        end
        3'd6: begin
            builder_bankmachine1_next_state <= 1'd0;
        end
        default: begin
            if (main_basesoc_sdram_bankmachine1_refresh_req) begin
                builder_bankmachine1_next_state <= 3'd4;
            end else begin
                if (main_basesoc_sdram_bankmachine1_source_source_valid) begin
                    if (main_basesoc_sdram_bankmachine1_row_opened) begin
                        if (main_basesoc_sdram_bankmachine1_row_hit) begin
                            main_basesoc_sdram_bankmachine1_cmd_valid <= 1'd1;
                            if (main_basesoc_sdram_bankmachine1_source_source_payload_we) begin
                                main_basesoc_sdram_bankmachine1_req_wdata_ready <= main_basesoc_sdram_bankmachine1_cmd_ready;
                                main_basesoc_sdram_bankmachine1_cmd_payload_is_write <= 1'd1;
                                main_basesoc_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                            end else begin
                                main_basesoc_sdram_bankmachine1_req_rdata_valid <= main_basesoc_sdram_bankmachine1_cmd_ready;
                                main_basesoc_sdram_bankmachine1_cmd_payload_is_read <= 1'd1;
                            end
                            main_basesoc_sdram_bankmachine1_cmd_payload_cas <= 1'd1;
                            if ((main_basesoc_sdram_bankmachine1_cmd_ready & main_basesoc_sdram_bankmachine1_auto_precharge)) begin
                                builder_bankmachine1_next_state <= 2'd2;
                            end
                        end else begin
                            builder_bankmachine1_next_state <= 1'd1;
                        end
                    end else begin
                        builder_bankmachine1_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_basesoc_sdram_bankmachine2_sink_valid = main_basesoc_sdram_bankmachine2_req_valid;
assign main_basesoc_sdram_bankmachine2_req_ready = main_basesoc_sdram_bankmachine2_sink_ready;
assign main_basesoc_sdram_bankmachine2_sink_payload_we = main_basesoc_sdram_bankmachine2_req_we;
assign main_basesoc_sdram_bankmachine2_sink_payload_addr = main_basesoc_sdram_bankmachine2_req_addr;
assign main_basesoc_sdram_bankmachine2_sink_sink_valid = main_basesoc_sdram_bankmachine2_source_valid;
assign main_basesoc_sdram_bankmachine2_source_ready = main_basesoc_sdram_bankmachine2_sink_sink_ready;
assign main_basesoc_sdram_bankmachine2_sink_sink_first = main_basesoc_sdram_bankmachine2_source_first;
assign main_basesoc_sdram_bankmachine2_sink_sink_last = main_basesoc_sdram_bankmachine2_source_last;
assign main_basesoc_sdram_bankmachine2_sink_sink_payload_we = main_basesoc_sdram_bankmachine2_source_payload_we;
assign main_basesoc_sdram_bankmachine2_sink_sink_payload_addr = main_basesoc_sdram_bankmachine2_source_payload_addr;
assign main_basesoc_sdram_bankmachine2_source_source_ready = (main_basesoc_sdram_bankmachine2_req_wdata_ready | main_basesoc_sdram_bankmachine2_req_rdata_valid);
assign main_basesoc_sdram_bankmachine2_req_lock = (main_basesoc_sdram_bankmachine2_source_valid | main_basesoc_sdram_bankmachine2_source_source_valid);
assign main_basesoc_sdram_bankmachine2_row_hit = (main_basesoc_sdram_bankmachine2_row == main_basesoc_sdram_bankmachine2_source_source_payload_addr[21:7]);
assign main_basesoc_sdram_bankmachine2_cmd_payload_ba = 2'd2;
always @(*) begin
    main_basesoc_sdram_bankmachine2_cmd_payload_a <= 15'd0;
    if (main_basesoc_sdram_bankmachine2_row_col_n_addr_sel) begin
        main_basesoc_sdram_bankmachine2_cmd_payload_a <= main_basesoc_sdram_bankmachine2_source_source_payload_addr[21:7];
    end else begin
        main_basesoc_sdram_bankmachine2_cmd_payload_a <= ((main_basesoc_sdram_bankmachine2_auto_precharge <<< 4'd10) | {main_basesoc_sdram_bankmachine2_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_basesoc_sdram_bankmachine2_twtpcon_valid = ((main_basesoc_sdram_bankmachine2_cmd_valid & main_basesoc_sdram_bankmachine2_cmd_ready) & main_basesoc_sdram_bankmachine2_cmd_payload_is_write);
assign main_basesoc_sdram_bankmachine2_trccon_valid = ((main_basesoc_sdram_bankmachine2_cmd_valid & main_basesoc_sdram_bankmachine2_cmd_ready) & main_basesoc_sdram_bankmachine2_row_open);
assign main_basesoc_sdram_bankmachine2_trascon_valid = ((main_basesoc_sdram_bankmachine2_cmd_valid & main_basesoc_sdram_bankmachine2_cmd_ready) & main_basesoc_sdram_bankmachine2_row_open);
always @(*) begin
    main_basesoc_sdram_bankmachine2_auto_precharge <= 1'd0;
    if ((main_basesoc_sdram_bankmachine2_source_valid & main_basesoc_sdram_bankmachine2_source_source_valid)) begin
        if ((main_basesoc_sdram_bankmachine2_source_payload_addr[21:7] != main_basesoc_sdram_bankmachine2_source_source_payload_addr[21:7])) begin
            main_basesoc_sdram_bankmachine2_auto_precharge <= (main_basesoc_sdram_bankmachine2_row_close == 1'd0);
        end
    end
end
assign main_basesoc_sdram_bankmachine2_syncfifo2_din = {main_basesoc_sdram_bankmachine2_fifo_in_last, main_basesoc_sdram_bankmachine2_fifo_in_first, main_basesoc_sdram_bankmachine2_fifo_in_payload_addr, main_basesoc_sdram_bankmachine2_fifo_in_payload_we};
assign {main_basesoc_sdram_bankmachine2_fifo_out_last, main_basesoc_sdram_bankmachine2_fifo_out_first, main_basesoc_sdram_bankmachine2_fifo_out_payload_addr, main_basesoc_sdram_bankmachine2_fifo_out_payload_we} = main_basesoc_sdram_bankmachine2_syncfifo2_dout;
assign main_basesoc_sdram_bankmachine2_sink_ready = main_basesoc_sdram_bankmachine2_syncfifo2_writable;
assign main_basesoc_sdram_bankmachine2_syncfifo2_we = main_basesoc_sdram_bankmachine2_sink_valid;
assign main_basesoc_sdram_bankmachine2_fifo_in_first = main_basesoc_sdram_bankmachine2_sink_first;
assign main_basesoc_sdram_bankmachine2_fifo_in_last = main_basesoc_sdram_bankmachine2_sink_last;
assign main_basesoc_sdram_bankmachine2_fifo_in_payload_we = main_basesoc_sdram_bankmachine2_sink_payload_we;
assign main_basesoc_sdram_bankmachine2_fifo_in_payload_addr = main_basesoc_sdram_bankmachine2_sink_payload_addr;
assign main_basesoc_sdram_bankmachine2_source_valid = main_basesoc_sdram_bankmachine2_syncfifo2_readable;
assign main_basesoc_sdram_bankmachine2_source_first = main_basesoc_sdram_bankmachine2_fifo_out_first;
assign main_basesoc_sdram_bankmachine2_source_last = main_basesoc_sdram_bankmachine2_fifo_out_last;
assign main_basesoc_sdram_bankmachine2_source_payload_we = main_basesoc_sdram_bankmachine2_fifo_out_payload_we;
assign main_basesoc_sdram_bankmachine2_source_payload_addr = main_basesoc_sdram_bankmachine2_fifo_out_payload_addr;
assign main_basesoc_sdram_bankmachine2_syncfifo2_re = main_basesoc_sdram_bankmachine2_source_ready;
always @(*) begin
    main_basesoc_sdram_bankmachine2_wrport_adr <= 3'd0;
    if (main_basesoc_sdram_bankmachine2_replace) begin
        main_basesoc_sdram_bankmachine2_wrport_adr <= (main_basesoc_sdram_bankmachine2_produce - 1'd1);
    end else begin
        main_basesoc_sdram_bankmachine2_wrport_adr <= main_basesoc_sdram_bankmachine2_produce;
    end
end
assign main_basesoc_sdram_bankmachine2_wrport_dat_w = main_basesoc_sdram_bankmachine2_syncfifo2_din;
assign main_basesoc_sdram_bankmachine2_wrport_we = (main_basesoc_sdram_bankmachine2_syncfifo2_we & (main_basesoc_sdram_bankmachine2_syncfifo2_writable | main_basesoc_sdram_bankmachine2_replace));
assign main_basesoc_sdram_bankmachine2_do_read = (main_basesoc_sdram_bankmachine2_syncfifo2_readable & main_basesoc_sdram_bankmachine2_syncfifo2_re);
assign main_basesoc_sdram_bankmachine2_rdport_adr = main_basesoc_sdram_bankmachine2_consume;
assign main_basesoc_sdram_bankmachine2_syncfifo2_dout = main_basesoc_sdram_bankmachine2_rdport_dat_r;
assign main_basesoc_sdram_bankmachine2_syncfifo2_writable = (main_basesoc_sdram_bankmachine2_level != 4'd8);
assign main_basesoc_sdram_bankmachine2_syncfifo2_readable = (main_basesoc_sdram_bankmachine2_level != 1'd0);
assign main_basesoc_sdram_bankmachine2_pipe_valid_sink_ready = ((~main_basesoc_sdram_bankmachine2_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine2_pipe_valid_source_ready);
assign main_basesoc_sdram_bankmachine2_pipe_valid_sink_valid = main_basesoc_sdram_bankmachine2_sink_sink_valid;
assign main_basesoc_sdram_bankmachine2_sink_sink_ready = main_basesoc_sdram_bankmachine2_pipe_valid_sink_ready;
assign main_basesoc_sdram_bankmachine2_pipe_valid_sink_first = main_basesoc_sdram_bankmachine2_sink_sink_first;
assign main_basesoc_sdram_bankmachine2_pipe_valid_sink_last = main_basesoc_sdram_bankmachine2_sink_sink_last;
assign main_basesoc_sdram_bankmachine2_pipe_valid_sink_payload_we = main_basesoc_sdram_bankmachine2_sink_sink_payload_we;
assign main_basesoc_sdram_bankmachine2_pipe_valid_sink_payload_addr = main_basesoc_sdram_bankmachine2_sink_sink_payload_addr;
assign main_basesoc_sdram_bankmachine2_source_source_valid = main_basesoc_sdram_bankmachine2_pipe_valid_source_valid;
assign main_basesoc_sdram_bankmachine2_pipe_valid_source_ready = main_basesoc_sdram_bankmachine2_source_source_ready;
assign main_basesoc_sdram_bankmachine2_source_source_first = main_basesoc_sdram_bankmachine2_pipe_valid_source_first;
assign main_basesoc_sdram_bankmachine2_source_source_last = main_basesoc_sdram_bankmachine2_pipe_valid_source_last;
assign main_basesoc_sdram_bankmachine2_source_source_payload_we = main_basesoc_sdram_bankmachine2_pipe_valid_source_payload_we;
assign main_basesoc_sdram_bankmachine2_source_source_payload_addr = main_basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr;
always @(*) begin
    builder_bankmachine2_next_state <= 3'd0;
    main_basesoc_sdram_bankmachine2_cmd_payload_cas <= 1'd0;
    main_basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd0;
    main_basesoc_sdram_bankmachine2_cmd_payload_is_read <= 1'd0;
    main_basesoc_sdram_bankmachine2_cmd_payload_is_write <= 1'd0;
    main_basesoc_sdram_bankmachine2_cmd_payload_ras <= 1'd0;
    main_basesoc_sdram_bankmachine2_cmd_payload_we <= 1'd0;
    main_basesoc_sdram_bankmachine2_cmd_valid <= 1'd0;
    main_basesoc_sdram_bankmachine2_refresh_gnt <= 1'd0;
    main_basesoc_sdram_bankmachine2_req_rdata_valid <= 1'd0;
    main_basesoc_sdram_bankmachine2_req_wdata_ready <= 1'd0;
    main_basesoc_sdram_bankmachine2_row_close <= 1'd0;
    main_basesoc_sdram_bankmachine2_row_col_n_addr_sel <= 1'd0;
    main_basesoc_sdram_bankmachine2_row_open <= 1'd0;
    builder_bankmachine2_next_state <= builder_bankmachine2_state;
    case (builder_bankmachine2_state)
        1'd1: begin
            if ((main_basesoc_sdram_bankmachine2_twtpcon_ready & main_basesoc_sdram_bankmachine2_trascon_ready)) begin
                main_basesoc_sdram_bankmachine2_cmd_valid <= 1'd1;
                if (main_basesoc_sdram_bankmachine2_cmd_ready) begin
                    builder_bankmachine2_next_state <= 3'd5;
                end
                main_basesoc_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
                main_basesoc_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                main_basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            end
            main_basesoc_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_basesoc_sdram_bankmachine2_twtpcon_ready & main_basesoc_sdram_bankmachine2_trascon_ready)) begin
                builder_bankmachine2_next_state <= 3'd5;
            end
            main_basesoc_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_basesoc_sdram_bankmachine2_trccon_ready) begin
                main_basesoc_sdram_bankmachine2_row_col_n_addr_sel <= 1'd1;
                main_basesoc_sdram_bankmachine2_row_open <= 1'd1;
                main_basesoc_sdram_bankmachine2_cmd_valid <= 1'd1;
                main_basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
                if (main_basesoc_sdram_bankmachine2_cmd_ready) begin
                    builder_bankmachine2_next_state <= 3'd6;
                end
                main_basesoc_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_basesoc_sdram_bankmachine2_twtpcon_ready) begin
                main_basesoc_sdram_bankmachine2_refresh_gnt <= 1'd1;
            end
            main_basesoc_sdram_bankmachine2_row_close <= 1'd1;
            main_basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            if ((~main_basesoc_sdram_bankmachine2_refresh_req)) begin
                builder_bankmachine2_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_bankmachine2_next_state <= 2'd3;
        end
        3'd6: begin
            builder_bankmachine2_next_state <= 1'd0;
        end
        default: begin
            if (main_basesoc_sdram_bankmachine2_refresh_req) begin
                builder_bankmachine2_next_state <= 3'd4;
            end else begin
                if (main_basesoc_sdram_bankmachine2_source_source_valid) begin
                    if (main_basesoc_sdram_bankmachine2_row_opened) begin
                        if (main_basesoc_sdram_bankmachine2_row_hit) begin
                            main_basesoc_sdram_bankmachine2_cmd_valid <= 1'd1;
                            if (main_basesoc_sdram_bankmachine2_source_source_payload_we) begin
                                main_basesoc_sdram_bankmachine2_req_wdata_ready <= main_basesoc_sdram_bankmachine2_cmd_ready;
                                main_basesoc_sdram_bankmachine2_cmd_payload_is_write <= 1'd1;
                                main_basesoc_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                            end else begin
                                main_basesoc_sdram_bankmachine2_req_rdata_valid <= main_basesoc_sdram_bankmachine2_cmd_ready;
                                main_basesoc_sdram_bankmachine2_cmd_payload_is_read <= 1'd1;
                            end
                            main_basesoc_sdram_bankmachine2_cmd_payload_cas <= 1'd1;
                            if ((main_basesoc_sdram_bankmachine2_cmd_ready & main_basesoc_sdram_bankmachine2_auto_precharge)) begin
                                builder_bankmachine2_next_state <= 2'd2;
                            end
                        end else begin
                            builder_bankmachine2_next_state <= 1'd1;
                        end
                    end else begin
                        builder_bankmachine2_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_basesoc_sdram_bankmachine3_sink_valid = main_basesoc_sdram_bankmachine3_req_valid;
assign main_basesoc_sdram_bankmachine3_req_ready = main_basesoc_sdram_bankmachine3_sink_ready;
assign main_basesoc_sdram_bankmachine3_sink_payload_we = main_basesoc_sdram_bankmachine3_req_we;
assign main_basesoc_sdram_bankmachine3_sink_payload_addr = main_basesoc_sdram_bankmachine3_req_addr;
assign main_basesoc_sdram_bankmachine3_sink_sink_valid = main_basesoc_sdram_bankmachine3_source_valid;
assign main_basesoc_sdram_bankmachine3_source_ready = main_basesoc_sdram_bankmachine3_sink_sink_ready;
assign main_basesoc_sdram_bankmachine3_sink_sink_first = main_basesoc_sdram_bankmachine3_source_first;
assign main_basesoc_sdram_bankmachine3_sink_sink_last = main_basesoc_sdram_bankmachine3_source_last;
assign main_basesoc_sdram_bankmachine3_sink_sink_payload_we = main_basesoc_sdram_bankmachine3_source_payload_we;
assign main_basesoc_sdram_bankmachine3_sink_sink_payload_addr = main_basesoc_sdram_bankmachine3_source_payload_addr;
assign main_basesoc_sdram_bankmachine3_source_source_ready = (main_basesoc_sdram_bankmachine3_req_wdata_ready | main_basesoc_sdram_bankmachine3_req_rdata_valid);
assign main_basesoc_sdram_bankmachine3_req_lock = (main_basesoc_sdram_bankmachine3_source_valid | main_basesoc_sdram_bankmachine3_source_source_valid);
assign main_basesoc_sdram_bankmachine3_row_hit = (main_basesoc_sdram_bankmachine3_row == main_basesoc_sdram_bankmachine3_source_source_payload_addr[21:7]);
assign main_basesoc_sdram_bankmachine3_cmd_payload_ba = 2'd3;
always @(*) begin
    main_basesoc_sdram_bankmachine3_cmd_payload_a <= 15'd0;
    if (main_basesoc_sdram_bankmachine3_row_col_n_addr_sel) begin
        main_basesoc_sdram_bankmachine3_cmd_payload_a <= main_basesoc_sdram_bankmachine3_source_source_payload_addr[21:7];
    end else begin
        main_basesoc_sdram_bankmachine3_cmd_payload_a <= ((main_basesoc_sdram_bankmachine3_auto_precharge <<< 4'd10) | {main_basesoc_sdram_bankmachine3_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_basesoc_sdram_bankmachine3_twtpcon_valid = ((main_basesoc_sdram_bankmachine3_cmd_valid & main_basesoc_sdram_bankmachine3_cmd_ready) & main_basesoc_sdram_bankmachine3_cmd_payload_is_write);
assign main_basesoc_sdram_bankmachine3_trccon_valid = ((main_basesoc_sdram_bankmachine3_cmd_valid & main_basesoc_sdram_bankmachine3_cmd_ready) & main_basesoc_sdram_bankmachine3_row_open);
assign main_basesoc_sdram_bankmachine3_trascon_valid = ((main_basesoc_sdram_bankmachine3_cmd_valid & main_basesoc_sdram_bankmachine3_cmd_ready) & main_basesoc_sdram_bankmachine3_row_open);
always @(*) begin
    main_basesoc_sdram_bankmachine3_auto_precharge <= 1'd0;
    if ((main_basesoc_sdram_bankmachine3_source_valid & main_basesoc_sdram_bankmachine3_source_source_valid)) begin
        if ((main_basesoc_sdram_bankmachine3_source_payload_addr[21:7] != main_basesoc_sdram_bankmachine3_source_source_payload_addr[21:7])) begin
            main_basesoc_sdram_bankmachine3_auto_precharge <= (main_basesoc_sdram_bankmachine3_row_close == 1'd0);
        end
    end
end
assign main_basesoc_sdram_bankmachine3_syncfifo3_din = {main_basesoc_sdram_bankmachine3_fifo_in_last, main_basesoc_sdram_bankmachine3_fifo_in_first, main_basesoc_sdram_bankmachine3_fifo_in_payload_addr, main_basesoc_sdram_bankmachine3_fifo_in_payload_we};
assign {main_basesoc_sdram_bankmachine3_fifo_out_last, main_basesoc_sdram_bankmachine3_fifo_out_first, main_basesoc_sdram_bankmachine3_fifo_out_payload_addr, main_basesoc_sdram_bankmachine3_fifo_out_payload_we} = main_basesoc_sdram_bankmachine3_syncfifo3_dout;
assign main_basesoc_sdram_bankmachine3_sink_ready = main_basesoc_sdram_bankmachine3_syncfifo3_writable;
assign main_basesoc_sdram_bankmachine3_syncfifo3_we = main_basesoc_sdram_bankmachine3_sink_valid;
assign main_basesoc_sdram_bankmachine3_fifo_in_first = main_basesoc_sdram_bankmachine3_sink_first;
assign main_basesoc_sdram_bankmachine3_fifo_in_last = main_basesoc_sdram_bankmachine3_sink_last;
assign main_basesoc_sdram_bankmachine3_fifo_in_payload_we = main_basesoc_sdram_bankmachine3_sink_payload_we;
assign main_basesoc_sdram_bankmachine3_fifo_in_payload_addr = main_basesoc_sdram_bankmachine3_sink_payload_addr;
assign main_basesoc_sdram_bankmachine3_source_valid = main_basesoc_sdram_bankmachine3_syncfifo3_readable;
assign main_basesoc_sdram_bankmachine3_source_first = main_basesoc_sdram_bankmachine3_fifo_out_first;
assign main_basesoc_sdram_bankmachine3_source_last = main_basesoc_sdram_bankmachine3_fifo_out_last;
assign main_basesoc_sdram_bankmachine3_source_payload_we = main_basesoc_sdram_bankmachine3_fifo_out_payload_we;
assign main_basesoc_sdram_bankmachine3_source_payload_addr = main_basesoc_sdram_bankmachine3_fifo_out_payload_addr;
assign main_basesoc_sdram_bankmachine3_syncfifo3_re = main_basesoc_sdram_bankmachine3_source_ready;
always @(*) begin
    main_basesoc_sdram_bankmachine3_wrport_adr <= 3'd0;
    if (main_basesoc_sdram_bankmachine3_replace) begin
        main_basesoc_sdram_bankmachine3_wrport_adr <= (main_basesoc_sdram_bankmachine3_produce - 1'd1);
    end else begin
        main_basesoc_sdram_bankmachine3_wrport_adr <= main_basesoc_sdram_bankmachine3_produce;
    end
end
assign main_basesoc_sdram_bankmachine3_wrport_dat_w = main_basesoc_sdram_bankmachine3_syncfifo3_din;
assign main_basesoc_sdram_bankmachine3_wrport_we = (main_basesoc_sdram_bankmachine3_syncfifo3_we & (main_basesoc_sdram_bankmachine3_syncfifo3_writable | main_basesoc_sdram_bankmachine3_replace));
assign main_basesoc_sdram_bankmachine3_do_read = (main_basesoc_sdram_bankmachine3_syncfifo3_readable & main_basesoc_sdram_bankmachine3_syncfifo3_re);
assign main_basesoc_sdram_bankmachine3_rdport_adr = main_basesoc_sdram_bankmachine3_consume;
assign main_basesoc_sdram_bankmachine3_syncfifo3_dout = main_basesoc_sdram_bankmachine3_rdport_dat_r;
assign main_basesoc_sdram_bankmachine3_syncfifo3_writable = (main_basesoc_sdram_bankmachine3_level != 4'd8);
assign main_basesoc_sdram_bankmachine3_syncfifo3_readable = (main_basesoc_sdram_bankmachine3_level != 1'd0);
assign main_basesoc_sdram_bankmachine3_pipe_valid_sink_ready = ((~main_basesoc_sdram_bankmachine3_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine3_pipe_valid_source_ready);
assign main_basesoc_sdram_bankmachine3_pipe_valid_sink_valid = main_basesoc_sdram_bankmachine3_sink_sink_valid;
assign main_basesoc_sdram_bankmachine3_sink_sink_ready = main_basesoc_sdram_bankmachine3_pipe_valid_sink_ready;
assign main_basesoc_sdram_bankmachine3_pipe_valid_sink_first = main_basesoc_sdram_bankmachine3_sink_sink_first;
assign main_basesoc_sdram_bankmachine3_pipe_valid_sink_last = main_basesoc_sdram_bankmachine3_sink_sink_last;
assign main_basesoc_sdram_bankmachine3_pipe_valid_sink_payload_we = main_basesoc_sdram_bankmachine3_sink_sink_payload_we;
assign main_basesoc_sdram_bankmachine3_pipe_valid_sink_payload_addr = main_basesoc_sdram_bankmachine3_sink_sink_payload_addr;
assign main_basesoc_sdram_bankmachine3_source_source_valid = main_basesoc_sdram_bankmachine3_pipe_valid_source_valid;
assign main_basesoc_sdram_bankmachine3_pipe_valid_source_ready = main_basesoc_sdram_bankmachine3_source_source_ready;
assign main_basesoc_sdram_bankmachine3_source_source_first = main_basesoc_sdram_bankmachine3_pipe_valid_source_first;
assign main_basesoc_sdram_bankmachine3_source_source_last = main_basesoc_sdram_bankmachine3_pipe_valid_source_last;
assign main_basesoc_sdram_bankmachine3_source_source_payload_we = main_basesoc_sdram_bankmachine3_pipe_valid_source_payload_we;
assign main_basesoc_sdram_bankmachine3_source_source_payload_addr = main_basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr;
always @(*) begin
    builder_bankmachine3_next_state <= 3'd0;
    main_basesoc_sdram_bankmachine3_cmd_payload_cas <= 1'd0;
    main_basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd0;
    main_basesoc_sdram_bankmachine3_cmd_payload_is_read <= 1'd0;
    main_basesoc_sdram_bankmachine3_cmd_payload_is_write <= 1'd0;
    main_basesoc_sdram_bankmachine3_cmd_payload_ras <= 1'd0;
    main_basesoc_sdram_bankmachine3_cmd_payload_we <= 1'd0;
    main_basesoc_sdram_bankmachine3_cmd_valid <= 1'd0;
    main_basesoc_sdram_bankmachine3_refresh_gnt <= 1'd0;
    main_basesoc_sdram_bankmachine3_req_rdata_valid <= 1'd0;
    main_basesoc_sdram_bankmachine3_req_wdata_ready <= 1'd0;
    main_basesoc_sdram_bankmachine3_row_close <= 1'd0;
    main_basesoc_sdram_bankmachine3_row_col_n_addr_sel <= 1'd0;
    main_basesoc_sdram_bankmachine3_row_open <= 1'd0;
    builder_bankmachine3_next_state <= builder_bankmachine3_state;
    case (builder_bankmachine3_state)
        1'd1: begin
            if ((main_basesoc_sdram_bankmachine3_twtpcon_ready & main_basesoc_sdram_bankmachine3_trascon_ready)) begin
                main_basesoc_sdram_bankmachine3_cmd_valid <= 1'd1;
                if (main_basesoc_sdram_bankmachine3_cmd_ready) begin
                    builder_bankmachine3_next_state <= 3'd5;
                end
                main_basesoc_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
                main_basesoc_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                main_basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            end
            main_basesoc_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_basesoc_sdram_bankmachine3_twtpcon_ready & main_basesoc_sdram_bankmachine3_trascon_ready)) begin
                builder_bankmachine3_next_state <= 3'd5;
            end
            main_basesoc_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_basesoc_sdram_bankmachine3_trccon_ready) begin
                main_basesoc_sdram_bankmachine3_row_col_n_addr_sel <= 1'd1;
                main_basesoc_sdram_bankmachine3_row_open <= 1'd1;
                main_basesoc_sdram_bankmachine3_cmd_valid <= 1'd1;
                main_basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
                if (main_basesoc_sdram_bankmachine3_cmd_ready) begin
                    builder_bankmachine3_next_state <= 3'd6;
                end
                main_basesoc_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_basesoc_sdram_bankmachine3_twtpcon_ready) begin
                main_basesoc_sdram_bankmachine3_refresh_gnt <= 1'd1;
            end
            main_basesoc_sdram_bankmachine3_row_close <= 1'd1;
            main_basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            if ((~main_basesoc_sdram_bankmachine3_refresh_req)) begin
                builder_bankmachine3_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_bankmachine3_next_state <= 2'd3;
        end
        3'd6: begin
            builder_bankmachine3_next_state <= 1'd0;
        end
        default: begin
            if (main_basesoc_sdram_bankmachine3_refresh_req) begin
                builder_bankmachine3_next_state <= 3'd4;
            end else begin
                if (main_basesoc_sdram_bankmachine3_source_source_valid) begin
                    if (main_basesoc_sdram_bankmachine3_row_opened) begin
                        if (main_basesoc_sdram_bankmachine3_row_hit) begin
                            main_basesoc_sdram_bankmachine3_cmd_valid <= 1'd1;
                            if (main_basesoc_sdram_bankmachine3_source_source_payload_we) begin
                                main_basesoc_sdram_bankmachine3_req_wdata_ready <= main_basesoc_sdram_bankmachine3_cmd_ready;
                                main_basesoc_sdram_bankmachine3_cmd_payload_is_write <= 1'd1;
                                main_basesoc_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                            end else begin
                                main_basesoc_sdram_bankmachine3_req_rdata_valid <= main_basesoc_sdram_bankmachine3_cmd_ready;
                                main_basesoc_sdram_bankmachine3_cmd_payload_is_read <= 1'd1;
                            end
                            main_basesoc_sdram_bankmachine3_cmd_payload_cas <= 1'd1;
                            if ((main_basesoc_sdram_bankmachine3_cmd_ready & main_basesoc_sdram_bankmachine3_auto_precharge)) begin
                                builder_bankmachine3_next_state <= 2'd2;
                            end
                        end else begin
                            builder_bankmachine3_next_state <= 1'd1;
                        end
                    end else begin
                        builder_bankmachine3_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_basesoc_sdram_bankmachine4_sink_valid = main_basesoc_sdram_bankmachine4_req_valid;
assign main_basesoc_sdram_bankmachine4_req_ready = main_basesoc_sdram_bankmachine4_sink_ready;
assign main_basesoc_sdram_bankmachine4_sink_payload_we = main_basesoc_sdram_bankmachine4_req_we;
assign main_basesoc_sdram_bankmachine4_sink_payload_addr = main_basesoc_sdram_bankmachine4_req_addr;
assign main_basesoc_sdram_bankmachine4_sink_sink_valid = main_basesoc_sdram_bankmachine4_source_valid;
assign main_basesoc_sdram_bankmachine4_source_ready = main_basesoc_sdram_bankmachine4_sink_sink_ready;
assign main_basesoc_sdram_bankmachine4_sink_sink_first = main_basesoc_sdram_bankmachine4_source_first;
assign main_basesoc_sdram_bankmachine4_sink_sink_last = main_basesoc_sdram_bankmachine4_source_last;
assign main_basesoc_sdram_bankmachine4_sink_sink_payload_we = main_basesoc_sdram_bankmachine4_source_payload_we;
assign main_basesoc_sdram_bankmachine4_sink_sink_payload_addr = main_basesoc_sdram_bankmachine4_source_payload_addr;
assign main_basesoc_sdram_bankmachine4_source_source_ready = (main_basesoc_sdram_bankmachine4_req_wdata_ready | main_basesoc_sdram_bankmachine4_req_rdata_valid);
assign main_basesoc_sdram_bankmachine4_req_lock = (main_basesoc_sdram_bankmachine4_source_valid | main_basesoc_sdram_bankmachine4_source_source_valid);
assign main_basesoc_sdram_bankmachine4_row_hit = (main_basesoc_sdram_bankmachine4_row == main_basesoc_sdram_bankmachine4_source_source_payload_addr[21:7]);
assign main_basesoc_sdram_bankmachine4_cmd_payload_ba = 3'd4;
always @(*) begin
    main_basesoc_sdram_bankmachine4_cmd_payload_a <= 15'd0;
    if (main_basesoc_sdram_bankmachine4_row_col_n_addr_sel) begin
        main_basesoc_sdram_bankmachine4_cmd_payload_a <= main_basesoc_sdram_bankmachine4_source_source_payload_addr[21:7];
    end else begin
        main_basesoc_sdram_bankmachine4_cmd_payload_a <= ((main_basesoc_sdram_bankmachine4_auto_precharge <<< 4'd10) | {main_basesoc_sdram_bankmachine4_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_basesoc_sdram_bankmachine4_twtpcon_valid = ((main_basesoc_sdram_bankmachine4_cmd_valid & main_basesoc_sdram_bankmachine4_cmd_ready) & main_basesoc_sdram_bankmachine4_cmd_payload_is_write);
assign main_basesoc_sdram_bankmachine4_trccon_valid = ((main_basesoc_sdram_bankmachine4_cmd_valid & main_basesoc_sdram_bankmachine4_cmd_ready) & main_basesoc_sdram_bankmachine4_row_open);
assign main_basesoc_sdram_bankmachine4_trascon_valid = ((main_basesoc_sdram_bankmachine4_cmd_valid & main_basesoc_sdram_bankmachine4_cmd_ready) & main_basesoc_sdram_bankmachine4_row_open);
always @(*) begin
    main_basesoc_sdram_bankmachine4_auto_precharge <= 1'd0;
    if ((main_basesoc_sdram_bankmachine4_source_valid & main_basesoc_sdram_bankmachine4_source_source_valid)) begin
        if ((main_basesoc_sdram_bankmachine4_source_payload_addr[21:7] != main_basesoc_sdram_bankmachine4_source_source_payload_addr[21:7])) begin
            main_basesoc_sdram_bankmachine4_auto_precharge <= (main_basesoc_sdram_bankmachine4_row_close == 1'd0);
        end
    end
end
assign main_basesoc_sdram_bankmachine4_syncfifo4_din = {main_basesoc_sdram_bankmachine4_fifo_in_last, main_basesoc_sdram_bankmachine4_fifo_in_first, main_basesoc_sdram_bankmachine4_fifo_in_payload_addr, main_basesoc_sdram_bankmachine4_fifo_in_payload_we};
assign {main_basesoc_sdram_bankmachine4_fifo_out_last, main_basesoc_sdram_bankmachine4_fifo_out_first, main_basesoc_sdram_bankmachine4_fifo_out_payload_addr, main_basesoc_sdram_bankmachine4_fifo_out_payload_we} = main_basesoc_sdram_bankmachine4_syncfifo4_dout;
assign main_basesoc_sdram_bankmachine4_sink_ready = main_basesoc_sdram_bankmachine4_syncfifo4_writable;
assign main_basesoc_sdram_bankmachine4_syncfifo4_we = main_basesoc_sdram_bankmachine4_sink_valid;
assign main_basesoc_sdram_bankmachine4_fifo_in_first = main_basesoc_sdram_bankmachine4_sink_first;
assign main_basesoc_sdram_bankmachine4_fifo_in_last = main_basesoc_sdram_bankmachine4_sink_last;
assign main_basesoc_sdram_bankmachine4_fifo_in_payload_we = main_basesoc_sdram_bankmachine4_sink_payload_we;
assign main_basesoc_sdram_bankmachine4_fifo_in_payload_addr = main_basesoc_sdram_bankmachine4_sink_payload_addr;
assign main_basesoc_sdram_bankmachine4_source_valid = main_basesoc_sdram_bankmachine4_syncfifo4_readable;
assign main_basesoc_sdram_bankmachine4_source_first = main_basesoc_sdram_bankmachine4_fifo_out_first;
assign main_basesoc_sdram_bankmachine4_source_last = main_basesoc_sdram_bankmachine4_fifo_out_last;
assign main_basesoc_sdram_bankmachine4_source_payload_we = main_basesoc_sdram_bankmachine4_fifo_out_payload_we;
assign main_basesoc_sdram_bankmachine4_source_payload_addr = main_basesoc_sdram_bankmachine4_fifo_out_payload_addr;
assign main_basesoc_sdram_bankmachine4_syncfifo4_re = main_basesoc_sdram_bankmachine4_source_ready;
always @(*) begin
    main_basesoc_sdram_bankmachine4_wrport_adr <= 3'd0;
    if (main_basesoc_sdram_bankmachine4_replace) begin
        main_basesoc_sdram_bankmachine4_wrport_adr <= (main_basesoc_sdram_bankmachine4_produce - 1'd1);
    end else begin
        main_basesoc_sdram_bankmachine4_wrport_adr <= main_basesoc_sdram_bankmachine4_produce;
    end
end
assign main_basesoc_sdram_bankmachine4_wrport_dat_w = main_basesoc_sdram_bankmachine4_syncfifo4_din;
assign main_basesoc_sdram_bankmachine4_wrport_we = (main_basesoc_sdram_bankmachine4_syncfifo4_we & (main_basesoc_sdram_bankmachine4_syncfifo4_writable | main_basesoc_sdram_bankmachine4_replace));
assign main_basesoc_sdram_bankmachine4_do_read = (main_basesoc_sdram_bankmachine4_syncfifo4_readable & main_basesoc_sdram_bankmachine4_syncfifo4_re);
assign main_basesoc_sdram_bankmachine4_rdport_adr = main_basesoc_sdram_bankmachine4_consume;
assign main_basesoc_sdram_bankmachine4_syncfifo4_dout = main_basesoc_sdram_bankmachine4_rdport_dat_r;
assign main_basesoc_sdram_bankmachine4_syncfifo4_writable = (main_basesoc_sdram_bankmachine4_level != 4'd8);
assign main_basesoc_sdram_bankmachine4_syncfifo4_readable = (main_basesoc_sdram_bankmachine4_level != 1'd0);
assign main_basesoc_sdram_bankmachine4_pipe_valid_sink_ready = ((~main_basesoc_sdram_bankmachine4_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine4_pipe_valid_source_ready);
assign main_basesoc_sdram_bankmachine4_pipe_valid_sink_valid = main_basesoc_sdram_bankmachine4_sink_sink_valid;
assign main_basesoc_sdram_bankmachine4_sink_sink_ready = main_basesoc_sdram_bankmachine4_pipe_valid_sink_ready;
assign main_basesoc_sdram_bankmachine4_pipe_valid_sink_first = main_basesoc_sdram_bankmachine4_sink_sink_first;
assign main_basesoc_sdram_bankmachine4_pipe_valid_sink_last = main_basesoc_sdram_bankmachine4_sink_sink_last;
assign main_basesoc_sdram_bankmachine4_pipe_valid_sink_payload_we = main_basesoc_sdram_bankmachine4_sink_sink_payload_we;
assign main_basesoc_sdram_bankmachine4_pipe_valid_sink_payload_addr = main_basesoc_sdram_bankmachine4_sink_sink_payload_addr;
assign main_basesoc_sdram_bankmachine4_source_source_valid = main_basesoc_sdram_bankmachine4_pipe_valid_source_valid;
assign main_basesoc_sdram_bankmachine4_pipe_valid_source_ready = main_basesoc_sdram_bankmachine4_source_source_ready;
assign main_basesoc_sdram_bankmachine4_source_source_first = main_basesoc_sdram_bankmachine4_pipe_valid_source_first;
assign main_basesoc_sdram_bankmachine4_source_source_last = main_basesoc_sdram_bankmachine4_pipe_valid_source_last;
assign main_basesoc_sdram_bankmachine4_source_source_payload_we = main_basesoc_sdram_bankmachine4_pipe_valid_source_payload_we;
assign main_basesoc_sdram_bankmachine4_source_source_payload_addr = main_basesoc_sdram_bankmachine4_pipe_valid_source_payload_addr;
always @(*) begin
    builder_bankmachine4_next_state <= 3'd0;
    main_basesoc_sdram_bankmachine4_cmd_payload_cas <= 1'd0;
    main_basesoc_sdram_bankmachine4_cmd_payload_is_cmd <= 1'd0;
    main_basesoc_sdram_bankmachine4_cmd_payload_is_read <= 1'd0;
    main_basesoc_sdram_bankmachine4_cmd_payload_is_write <= 1'd0;
    main_basesoc_sdram_bankmachine4_cmd_payload_ras <= 1'd0;
    main_basesoc_sdram_bankmachine4_cmd_payload_we <= 1'd0;
    main_basesoc_sdram_bankmachine4_cmd_valid <= 1'd0;
    main_basesoc_sdram_bankmachine4_refresh_gnt <= 1'd0;
    main_basesoc_sdram_bankmachine4_req_rdata_valid <= 1'd0;
    main_basesoc_sdram_bankmachine4_req_wdata_ready <= 1'd0;
    main_basesoc_sdram_bankmachine4_row_close <= 1'd0;
    main_basesoc_sdram_bankmachine4_row_col_n_addr_sel <= 1'd0;
    main_basesoc_sdram_bankmachine4_row_open <= 1'd0;
    builder_bankmachine4_next_state <= builder_bankmachine4_state;
    case (builder_bankmachine4_state)
        1'd1: begin
            if ((main_basesoc_sdram_bankmachine4_twtpcon_ready & main_basesoc_sdram_bankmachine4_trascon_ready)) begin
                main_basesoc_sdram_bankmachine4_cmd_valid <= 1'd1;
                if (main_basesoc_sdram_bankmachine4_cmd_ready) begin
                    builder_bankmachine4_next_state <= 3'd5;
                end
                main_basesoc_sdram_bankmachine4_cmd_payload_ras <= 1'd1;
                main_basesoc_sdram_bankmachine4_cmd_payload_we <= 1'd1;
                main_basesoc_sdram_bankmachine4_cmd_payload_is_cmd <= 1'd1;
            end
            main_basesoc_sdram_bankmachine4_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_basesoc_sdram_bankmachine4_twtpcon_ready & main_basesoc_sdram_bankmachine4_trascon_ready)) begin
                builder_bankmachine4_next_state <= 3'd5;
            end
            main_basesoc_sdram_bankmachine4_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_basesoc_sdram_bankmachine4_trccon_ready) begin
                main_basesoc_sdram_bankmachine4_row_col_n_addr_sel <= 1'd1;
                main_basesoc_sdram_bankmachine4_row_open <= 1'd1;
                main_basesoc_sdram_bankmachine4_cmd_valid <= 1'd1;
                main_basesoc_sdram_bankmachine4_cmd_payload_is_cmd <= 1'd1;
                if (main_basesoc_sdram_bankmachine4_cmd_ready) begin
                    builder_bankmachine4_next_state <= 3'd6;
                end
                main_basesoc_sdram_bankmachine4_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_basesoc_sdram_bankmachine4_twtpcon_ready) begin
                main_basesoc_sdram_bankmachine4_refresh_gnt <= 1'd1;
            end
            main_basesoc_sdram_bankmachine4_row_close <= 1'd1;
            main_basesoc_sdram_bankmachine4_cmd_payload_is_cmd <= 1'd1;
            if ((~main_basesoc_sdram_bankmachine4_refresh_req)) begin
                builder_bankmachine4_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_bankmachine4_next_state <= 2'd3;
        end
        3'd6: begin
            builder_bankmachine4_next_state <= 1'd0;
        end
        default: begin
            if (main_basesoc_sdram_bankmachine4_refresh_req) begin
                builder_bankmachine4_next_state <= 3'd4;
            end else begin
                if (main_basesoc_sdram_bankmachine4_source_source_valid) begin
                    if (main_basesoc_sdram_bankmachine4_row_opened) begin
                        if (main_basesoc_sdram_bankmachine4_row_hit) begin
                            main_basesoc_sdram_bankmachine4_cmd_valid <= 1'd1;
                            if (main_basesoc_sdram_bankmachine4_source_source_payload_we) begin
                                main_basesoc_sdram_bankmachine4_req_wdata_ready <= main_basesoc_sdram_bankmachine4_cmd_ready;
                                main_basesoc_sdram_bankmachine4_cmd_payload_is_write <= 1'd1;
                                main_basesoc_sdram_bankmachine4_cmd_payload_we <= 1'd1;
                            end else begin
                                main_basesoc_sdram_bankmachine4_req_rdata_valid <= main_basesoc_sdram_bankmachine4_cmd_ready;
                                main_basesoc_sdram_bankmachine4_cmd_payload_is_read <= 1'd1;
                            end
                            main_basesoc_sdram_bankmachine4_cmd_payload_cas <= 1'd1;
                            if ((main_basesoc_sdram_bankmachine4_cmd_ready & main_basesoc_sdram_bankmachine4_auto_precharge)) begin
                                builder_bankmachine4_next_state <= 2'd2;
                            end
                        end else begin
                            builder_bankmachine4_next_state <= 1'd1;
                        end
                    end else begin
                        builder_bankmachine4_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_basesoc_sdram_bankmachine5_sink_valid = main_basesoc_sdram_bankmachine5_req_valid;
assign main_basesoc_sdram_bankmachine5_req_ready = main_basesoc_sdram_bankmachine5_sink_ready;
assign main_basesoc_sdram_bankmachine5_sink_payload_we = main_basesoc_sdram_bankmachine5_req_we;
assign main_basesoc_sdram_bankmachine5_sink_payload_addr = main_basesoc_sdram_bankmachine5_req_addr;
assign main_basesoc_sdram_bankmachine5_sink_sink_valid = main_basesoc_sdram_bankmachine5_source_valid;
assign main_basesoc_sdram_bankmachine5_source_ready = main_basesoc_sdram_bankmachine5_sink_sink_ready;
assign main_basesoc_sdram_bankmachine5_sink_sink_first = main_basesoc_sdram_bankmachine5_source_first;
assign main_basesoc_sdram_bankmachine5_sink_sink_last = main_basesoc_sdram_bankmachine5_source_last;
assign main_basesoc_sdram_bankmachine5_sink_sink_payload_we = main_basesoc_sdram_bankmachine5_source_payload_we;
assign main_basesoc_sdram_bankmachine5_sink_sink_payload_addr = main_basesoc_sdram_bankmachine5_source_payload_addr;
assign main_basesoc_sdram_bankmachine5_source_source_ready = (main_basesoc_sdram_bankmachine5_req_wdata_ready | main_basesoc_sdram_bankmachine5_req_rdata_valid);
assign main_basesoc_sdram_bankmachine5_req_lock = (main_basesoc_sdram_bankmachine5_source_valid | main_basesoc_sdram_bankmachine5_source_source_valid);
assign main_basesoc_sdram_bankmachine5_row_hit = (main_basesoc_sdram_bankmachine5_row == main_basesoc_sdram_bankmachine5_source_source_payload_addr[21:7]);
assign main_basesoc_sdram_bankmachine5_cmd_payload_ba = 3'd5;
always @(*) begin
    main_basesoc_sdram_bankmachine5_cmd_payload_a <= 15'd0;
    if (main_basesoc_sdram_bankmachine5_row_col_n_addr_sel) begin
        main_basesoc_sdram_bankmachine5_cmd_payload_a <= main_basesoc_sdram_bankmachine5_source_source_payload_addr[21:7];
    end else begin
        main_basesoc_sdram_bankmachine5_cmd_payload_a <= ((main_basesoc_sdram_bankmachine5_auto_precharge <<< 4'd10) | {main_basesoc_sdram_bankmachine5_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_basesoc_sdram_bankmachine5_twtpcon_valid = ((main_basesoc_sdram_bankmachine5_cmd_valid & main_basesoc_sdram_bankmachine5_cmd_ready) & main_basesoc_sdram_bankmachine5_cmd_payload_is_write);
assign main_basesoc_sdram_bankmachine5_trccon_valid = ((main_basesoc_sdram_bankmachine5_cmd_valid & main_basesoc_sdram_bankmachine5_cmd_ready) & main_basesoc_sdram_bankmachine5_row_open);
assign main_basesoc_sdram_bankmachine5_trascon_valid = ((main_basesoc_sdram_bankmachine5_cmd_valid & main_basesoc_sdram_bankmachine5_cmd_ready) & main_basesoc_sdram_bankmachine5_row_open);
always @(*) begin
    main_basesoc_sdram_bankmachine5_auto_precharge <= 1'd0;
    if ((main_basesoc_sdram_bankmachine5_source_valid & main_basesoc_sdram_bankmachine5_source_source_valid)) begin
        if ((main_basesoc_sdram_bankmachine5_source_payload_addr[21:7] != main_basesoc_sdram_bankmachine5_source_source_payload_addr[21:7])) begin
            main_basesoc_sdram_bankmachine5_auto_precharge <= (main_basesoc_sdram_bankmachine5_row_close == 1'd0);
        end
    end
end
assign main_basesoc_sdram_bankmachine5_syncfifo5_din = {main_basesoc_sdram_bankmachine5_fifo_in_last, main_basesoc_sdram_bankmachine5_fifo_in_first, main_basesoc_sdram_bankmachine5_fifo_in_payload_addr, main_basesoc_sdram_bankmachine5_fifo_in_payload_we};
assign {main_basesoc_sdram_bankmachine5_fifo_out_last, main_basesoc_sdram_bankmachine5_fifo_out_first, main_basesoc_sdram_bankmachine5_fifo_out_payload_addr, main_basesoc_sdram_bankmachine5_fifo_out_payload_we} = main_basesoc_sdram_bankmachine5_syncfifo5_dout;
assign main_basesoc_sdram_bankmachine5_sink_ready = main_basesoc_sdram_bankmachine5_syncfifo5_writable;
assign main_basesoc_sdram_bankmachine5_syncfifo5_we = main_basesoc_sdram_bankmachine5_sink_valid;
assign main_basesoc_sdram_bankmachine5_fifo_in_first = main_basesoc_sdram_bankmachine5_sink_first;
assign main_basesoc_sdram_bankmachine5_fifo_in_last = main_basesoc_sdram_bankmachine5_sink_last;
assign main_basesoc_sdram_bankmachine5_fifo_in_payload_we = main_basesoc_sdram_bankmachine5_sink_payload_we;
assign main_basesoc_sdram_bankmachine5_fifo_in_payload_addr = main_basesoc_sdram_bankmachine5_sink_payload_addr;
assign main_basesoc_sdram_bankmachine5_source_valid = main_basesoc_sdram_bankmachine5_syncfifo5_readable;
assign main_basesoc_sdram_bankmachine5_source_first = main_basesoc_sdram_bankmachine5_fifo_out_first;
assign main_basesoc_sdram_bankmachine5_source_last = main_basesoc_sdram_bankmachine5_fifo_out_last;
assign main_basesoc_sdram_bankmachine5_source_payload_we = main_basesoc_sdram_bankmachine5_fifo_out_payload_we;
assign main_basesoc_sdram_bankmachine5_source_payload_addr = main_basesoc_sdram_bankmachine5_fifo_out_payload_addr;
assign main_basesoc_sdram_bankmachine5_syncfifo5_re = main_basesoc_sdram_bankmachine5_source_ready;
always @(*) begin
    main_basesoc_sdram_bankmachine5_wrport_adr <= 3'd0;
    if (main_basesoc_sdram_bankmachine5_replace) begin
        main_basesoc_sdram_bankmachine5_wrport_adr <= (main_basesoc_sdram_bankmachine5_produce - 1'd1);
    end else begin
        main_basesoc_sdram_bankmachine5_wrport_adr <= main_basesoc_sdram_bankmachine5_produce;
    end
end
assign main_basesoc_sdram_bankmachine5_wrport_dat_w = main_basesoc_sdram_bankmachine5_syncfifo5_din;
assign main_basesoc_sdram_bankmachine5_wrport_we = (main_basesoc_sdram_bankmachine5_syncfifo5_we & (main_basesoc_sdram_bankmachine5_syncfifo5_writable | main_basesoc_sdram_bankmachine5_replace));
assign main_basesoc_sdram_bankmachine5_do_read = (main_basesoc_sdram_bankmachine5_syncfifo5_readable & main_basesoc_sdram_bankmachine5_syncfifo5_re);
assign main_basesoc_sdram_bankmachine5_rdport_adr = main_basesoc_sdram_bankmachine5_consume;
assign main_basesoc_sdram_bankmachine5_syncfifo5_dout = main_basesoc_sdram_bankmachine5_rdport_dat_r;
assign main_basesoc_sdram_bankmachine5_syncfifo5_writable = (main_basesoc_sdram_bankmachine5_level != 4'd8);
assign main_basesoc_sdram_bankmachine5_syncfifo5_readable = (main_basesoc_sdram_bankmachine5_level != 1'd0);
assign main_basesoc_sdram_bankmachine5_pipe_valid_sink_ready = ((~main_basesoc_sdram_bankmachine5_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine5_pipe_valid_source_ready);
assign main_basesoc_sdram_bankmachine5_pipe_valid_sink_valid = main_basesoc_sdram_bankmachine5_sink_sink_valid;
assign main_basesoc_sdram_bankmachine5_sink_sink_ready = main_basesoc_sdram_bankmachine5_pipe_valid_sink_ready;
assign main_basesoc_sdram_bankmachine5_pipe_valid_sink_first = main_basesoc_sdram_bankmachine5_sink_sink_first;
assign main_basesoc_sdram_bankmachine5_pipe_valid_sink_last = main_basesoc_sdram_bankmachine5_sink_sink_last;
assign main_basesoc_sdram_bankmachine5_pipe_valid_sink_payload_we = main_basesoc_sdram_bankmachine5_sink_sink_payload_we;
assign main_basesoc_sdram_bankmachine5_pipe_valid_sink_payload_addr = main_basesoc_sdram_bankmachine5_sink_sink_payload_addr;
assign main_basesoc_sdram_bankmachine5_source_source_valid = main_basesoc_sdram_bankmachine5_pipe_valid_source_valid;
assign main_basesoc_sdram_bankmachine5_pipe_valid_source_ready = main_basesoc_sdram_bankmachine5_source_source_ready;
assign main_basesoc_sdram_bankmachine5_source_source_first = main_basesoc_sdram_bankmachine5_pipe_valid_source_first;
assign main_basesoc_sdram_bankmachine5_source_source_last = main_basesoc_sdram_bankmachine5_pipe_valid_source_last;
assign main_basesoc_sdram_bankmachine5_source_source_payload_we = main_basesoc_sdram_bankmachine5_pipe_valid_source_payload_we;
assign main_basesoc_sdram_bankmachine5_source_source_payload_addr = main_basesoc_sdram_bankmachine5_pipe_valid_source_payload_addr;
always @(*) begin
    builder_bankmachine5_next_state <= 3'd0;
    main_basesoc_sdram_bankmachine5_cmd_payload_cas <= 1'd0;
    main_basesoc_sdram_bankmachine5_cmd_payload_is_cmd <= 1'd0;
    main_basesoc_sdram_bankmachine5_cmd_payload_is_read <= 1'd0;
    main_basesoc_sdram_bankmachine5_cmd_payload_is_write <= 1'd0;
    main_basesoc_sdram_bankmachine5_cmd_payload_ras <= 1'd0;
    main_basesoc_sdram_bankmachine5_cmd_payload_we <= 1'd0;
    main_basesoc_sdram_bankmachine5_cmd_valid <= 1'd0;
    main_basesoc_sdram_bankmachine5_refresh_gnt <= 1'd0;
    main_basesoc_sdram_bankmachine5_req_rdata_valid <= 1'd0;
    main_basesoc_sdram_bankmachine5_req_wdata_ready <= 1'd0;
    main_basesoc_sdram_bankmachine5_row_close <= 1'd0;
    main_basesoc_sdram_bankmachine5_row_col_n_addr_sel <= 1'd0;
    main_basesoc_sdram_bankmachine5_row_open <= 1'd0;
    builder_bankmachine5_next_state <= builder_bankmachine5_state;
    case (builder_bankmachine5_state)
        1'd1: begin
            if ((main_basesoc_sdram_bankmachine5_twtpcon_ready & main_basesoc_sdram_bankmachine5_trascon_ready)) begin
                main_basesoc_sdram_bankmachine5_cmd_valid <= 1'd1;
                if (main_basesoc_sdram_bankmachine5_cmd_ready) begin
                    builder_bankmachine5_next_state <= 3'd5;
                end
                main_basesoc_sdram_bankmachine5_cmd_payload_ras <= 1'd1;
                main_basesoc_sdram_bankmachine5_cmd_payload_we <= 1'd1;
                main_basesoc_sdram_bankmachine5_cmd_payload_is_cmd <= 1'd1;
            end
            main_basesoc_sdram_bankmachine5_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_basesoc_sdram_bankmachine5_twtpcon_ready & main_basesoc_sdram_bankmachine5_trascon_ready)) begin
                builder_bankmachine5_next_state <= 3'd5;
            end
            main_basesoc_sdram_bankmachine5_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_basesoc_sdram_bankmachine5_trccon_ready) begin
                main_basesoc_sdram_bankmachine5_row_col_n_addr_sel <= 1'd1;
                main_basesoc_sdram_bankmachine5_row_open <= 1'd1;
                main_basesoc_sdram_bankmachine5_cmd_valid <= 1'd1;
                main_basesoc_sdram_bankmachine5_cmd_payload_is_cmd <= 1'd1;
                if (main_basesoc_sdram_bankmachine5_cmd_ready) begin
                    builder_bankmachine5_next_state <= 3'd6;
                end
                main_basesoc_sdram_bankmachine5_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_basesoc_sdram_bankmachine5_twtpcon_ready) begin
                main_basesoc_sdram_bankmachine5_refresh_gnt <= 1'd1;
            end
            main_basesoc_sdram_bankmachine5_row_close <= 1'd1;
            main_basesoc_sdram_bankmachine5_cmd_payload_is_cmd <= 1'd1;
            if ((~main_basesoc_sdram_bankmachine5_refresh_req)) begin
                builder_bankmachine5_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_bankmachine5_next_state <= 2'd3;
        end
        3'd6: begin
            builder_bankmachine5_next_state <= 1'd0;
        end
        default: begin
            if (main_basesoc_sdram_bankmachine5_refresh_req) begin
                builder_bankmachine5_next_state <= 3'd4;
            end else begin
                if (main_basesoc_sdram_bankmachine5_source_source_valid) begin
                    if (main_basesoc_sdram_bankmachine5_row_opened) begin
                        if (main_basesoc_sdram_bankmachine5_row_hit) begin
                            main_basesoc_sdram_bankmachine5_cmd_valid <= 1'd1;
                            if (main_basesoc_sdram_bankmachine5_source_source_payload_we) begin
                                main_basesoc_sdram_bankmachine5_req_wdata_ready <= main_basesoc_sdram_bankmachine5_cmd_ready;
                                main_basesoc_sdram_bankmachine5_cmd_payload_is_write <= 1'd1;
                                main_basesoc_sdram_bankmachine5_cmd_payload_we <= 1'd1;
                            end else begin
                                main_basesoc_sdram_bankmachine5_req_rdata_valid <= main_basesoc_sdram_bankmachine5_cmd_ready;
                                main_basesoc_sdram_bankmachine5_cmd_payload_is_read <= 1'd1;
                            end
                            main_basesoc_sdram_bankmachine5_cmd_payload_cas <= 1'd1;
                            if ((main_basesoc_sdram_bankmachine5_cmd_ready & main_basesoc_sdram_bankmachine5_auto_precharge)) begin
                                builder_bankmachine5_next_state <= 2'd2;
                            end
                        end else begin
                            builder_bankmachine5_next_state <= 1'd1;
                        end
                    end else begin
                        builder_bankmachine5_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_basesoc_sdram_bankmachine6_sink_valid = main_basesoc_sdram_bankmachine6_req_valid;
assign main_basesoc_sdram_bankmachine6_req_ready = main_basesoc_sdram_bankmachine6_sink_ready;
assign main_basesoc_sdram_bankmachine6_sink_payload_we = main_basesoc_sdram_bankmachine6_req_we;
assign main_basesoc_sdram_bankmachine6_sink_payload_addr = main_basesoc_sdram_bankmachine6_req_addr;
assign main_basesoc_sdram_bankmachine6_sink_sink_valid = main_basesoc_sdram_bankmachine6_source_valid;
assign main_basesoc_sdram_bankmachine6_source_ready = main_basesoc_sdram_bankmachine6_sink_sink_ready;
assign main_basesoc_sdram_bankmachine6_sink_sink_first = main_basesoc_sdram_bankmachine6_source_first;
assign main_basesoc_sdram_bankmachine6_sink_sink_last = main_basesoc_sdram_bankmachine6_source_last;
assign main_basesoc_sdram_bankmachine6_sink_sink_payload_we = main_basesoc_sdram_bankmachine6_source_payload_we;
assign main_basesoc_sdram_bankmachine6_sink_sink_payload_addr = main_basesoc_sdram_bankmachine6_source_payload_addr;
assign main_basesoc_sdram_bankmachine6_source_source_ready = (main_basesoc_sdram_bankmachine6_req_wdata_ready | main_basesoc_sdram_bankmachine6_req_rdata_valid);
assign main_basesoc_sdram_bankmachine6_req_lock = (main_basesoc_sdram_bankmachine6_source_valid | main_basesoc_sdram_bankmachine6_source_source_valid);
assign main_basesoc_sdram_bankmachine6_row_hit = (main_basesoc_sdram_bankmachine6_row == main_basesoc_sdram_bankmachine6_source_source_payload_addr[21:7]);
assign main_basesoc_sdram_bankmachine6_cmd_payload_ba = 3'd6;
always @(*) begin
    main_basesoc_sdram_bankmachine6_cmd_payload_a <= 15'd0;
    if (main_basesoc_sdram_bankmachine6_row_col_n_addr_sel) begin
        main_basesoc_sdram_bankmachine6_cmd_payload_a <= main_basesoc_sdram_bankmachine6_source_source_payload_addr[21:7];
    end else begin
        main_basesoc_sdram_bankmachine6_cmd_payload_a <= ((main_basesoc_sdram_bankmachine6_auto_precharge <<< 4'd10) | {main_basesoc_sdram_bankmachine6_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_basesoc_sdram_bankmachine6_twtpcon_valid = ((main_basesoc_sdram_bankmachine6_cmd_valid & main_basesoc_sdram_bankmachine6_cmd_ready) & main_basesoc_sdram_bankmachine6_cmd_payload_is_write);
assign main_basesoc_sdram_bankmachine6_trccon_valid = ((main_basesoc_sdram_bankmachine6_cmd_valid & main_basesoc_sdram_bankmachine6_cmd_ready) & main_basesoc_sdram_bankmachine6_row_open);
assign main_basesoc_sdram_bankmachine6_trascon_valid = ((main_basesoc_sdram_bankmachine6_cmd_valid & main_basesoc_sdram_bankmachine6_cmd_ready) & main_basesoc_sdram_bankmachine6_row_open);
always @(*) begin
    main_basesoc_sdram_bankmachine6_auto_precharge <= 1'd0;
    if ((main_basesoc_sdram_bankmachine6_source_valid & main_basesoc_sdram_bankmachine6_source_source_valid)) begin
        if ((main_basesoc_sdram_bankmachine6_source_payload_addr[21:7] != main_basesoc_sdram_bankmachine6_source_source_payload_addr[21:7])) begin
            main_basesoc_sdram_bankmachine6_auto_precharge <= (main_basesoc_sdram_bankmachine6_row_close == 1'd0);
        end
    end
end
assign main_basesoc_sdram_bankmachine6_syncfifo6_din = {main_basesoc_sdram_bankmachine6_fifo_in_last, main_basesoc_sdram_bankmachine6_fifo_in_first, main_basesoc_sdram_bankmachine6_fifo_in_payload_addr, main_basesoc_sdram_bankmachine6_fifo_in_payload_we};
assign {main_basesoc_sdram_bankmachine6_fifo_out_last, main_basesoc_sdram_bankmachine6_fifo_out_first, main_basesoc_sdram_bankmachine6_fifo_out_payload_addr, main_basesoc_sdram_bankmachine6_fifo_out_payload_we} = main_basesoc_sdram_bankmachine6_syncfifo6_dout;
assign main_basesoc_sdram_bankmachine6_sink_ready = main_basesoc_sdram_bankmachine6_syncfifo6_writable;
assign main_basesoc_sdram_bankmachine6_syncfifo6_we = main_basesoc_sdram_bankmachine6_sink_valid;
assign main_basesoc_sdram_bankmachine6_fifo_in_first = main_basesoc_sdram_bankmachine6_sink_first;
assign main_basesoc_sdram_bankmachine6_fifo_in_last = main_basesoc_sdram_bankmachine6_sink_last;
assign main_basesoc_sdram_bankmachine6_fifo_in_payload_we = main_basesoc_sdram_bankmachine6_sink_payload_we;
assign main_basesoc_sdram_bankmachine6_fifo_in_payload_addr = main_basesoc_sdram_bankmachine6_sink_payload_addr;
assign main_basesoc_sdram_bankmachine6_source_valid = main_basesoc_sdram_bankmachine6_syncfifo6_readable;
assign main_basesoc_sdram_bankmachine6_source_first = main_basesoc_sdram_bankmachine6_fifo_out_first;
assign main_basesoc_sdram_bankmachine6_source_last = main_basesoc_sdram_bankmachine6_fifo_out_last;
assign main_basesoc_sdram_bankmachine6_source_payload_we = main_basesoc_sdram_bankmachine6_fifo_out_payload_we;
assign main_basesoc_sdram_bankmachine6_source_payload_addr = main_basesoc_sdram_bankmachine6_fifo_out_payload_addr;
assign main_basesoc_sdram_bankmachine6_syncfifo6_re = main_basesoc_sdram_bankmachine6_source_ready;
always @(*) begin
    main_basesoc_sdram_bankmachine6_wrport_adr <= 3'd0;
    if (main_basesoc_sdram_bankmachine6_replace) begin
        main_basesoc_sdram_bankmachine6_wrport_adr <= (main_basesoc_sdram_bankmachine6_produce - 1'd1);
    end else begin
        main_basesoc_sdram_bankmachine6_wrport_adr <= main_basesoc_sdram_bankmachine6_produce;
    end
end
assign main_basesoc_sdram_bankmachine6_wrport_dat_w = main_basesoc_sdram_bankmachine6_syncfifo6_din;
assign main_basesoc_sdram_bankmachine6_wrport_we = (main_basesoc_sdram_bankmachine6_syncfifo6_we & (main_basesoc_sdram_bankmachine6_syncfifo6_writable | main_basesoc_sdram_bankmachine6_replace));
assign main_basesoc_sdram_bankmachine6_do_read = (main_basesoc_sdram_bankmachine6_syncfifo6_readable & main_basesoc_sdram_bankmachine6_syncfifo6_re);
assign main_basesoc_sdram_bankmachine6_rdport_adr = main_basesoc_sdram_bankmachine6_consume;
assign main_basesoc_sdram_bankmachine6_syncfifo6_dout = main_basesoc_sdram_bankmachine6_rdport_dat_r;
assign main_basesoc_sdram_bankmachine6_syncfifo6_writable = (main_basesoc_sdram_bankmachine6_level != 4'd8);
assign main_basesoc_sdram_bankmachine6_syncfifo6_readable = (main_basesoc_sdram_bankmachine6_level != 1'd0);
assign main_basesoc_sdram_bankmachine6_pipe_valid_sink_ready = ((~main_basesoc_sdram_bankmachine6_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine6_pipe_valid_source_ready);
assign main_basesoc_sdram_bankmachine6_pipe_valid_sink_valid = main_basesoc_sdram_bankmachine6_sink_sink_valid;
assign main_basesoc_sdram_bankmachine6_sink_sink_ready = main_basesoc_sdram_bankmachine6_pipe_valid_sink_ready;
assign main_basesoc_sdram_bankmachine6_pipe_valid_sink_first = main_basesoc_sdram_bankmachine6_sink_sink_first;
assign main_basesoc_sdram_bankmachine6_pipe_valid_sink_last = main_basesoc_sdram_bankmachine6_sink_sink_last;
assign main_basesoc_sdram_bankmachine6_pipe_valid_sink_payload_we = main_basesoc_sdram_bankmachine6_sink_sink_payload_we;
assign main_basesoc_sdram_bankmachine6_pipe_valid_sink_payload_addr = main_basesoc_sdram_bankmachine6_sink_sink_payload_addr;
assign main_basesoc_sdram_bankmachine6_source_source_valid = main_basesoc_sdram_bankmachine6_pipe_valid_source_valid;
assign main_basesoc_sdram_bankmachine6_pipe_valid_source_ready = main_basesoc_sdram_bankmachine6_source_source_ready;
assign main_basesoc_sdram_bankmachine6_source_source_first = main_basesoc_sdram_bankmachine6_pipe_valid_source_first;
assign main_basesoc_sdram_bankmachine6_source_source_last = main_basesoc_sdram_bankmachine6_pipe_valid_source_last;
assign main_basesoc_sdram_bankmachine6_source_source_payload_we = main_basesoc_sdram_bankmachine6_pipe_valid_source_payload_we;
assign main_basesoc_sdram_bankmachine6_source_source_payload_addr = main_basesoc_sdram_bankmachine6_pipe_valid_source_payload_addr;
always @(*) begin
    builder_bankmachine6_next_state <= 3'd0;
    main_basesoc_sdram_bankmachine6_cmd_payload_cas <= 1'd0;
    main_basesoc_sdram_bankmachine6_cmd_payload_is_cmd <= 1'd0;
    main_basesoc_sdram_bankmachine6_cmd_payload_is_read <= 1'd0;
    main_basesoc_sdram_bankmachine6_cmd_payload_is_write <= 1'd0;
    main_basesoc_sdram_bankmachine6_cmd_payload_ras <= 1'd0;
    main_basesoc_sdram_bankmachine6_cmd_payload_we <= 1'd0;
    main_basesoc_sdram_bankmachine6_cmd_valid <= 1'd0;
    main_basesoc_sdram_bankmachine6_refresh_gnt <= 1'd0;
    main_basesoc_sdram_bankmachine6_req_rdata_valid <= 1'd0;
    main_basesoc_sdram_bankmachine6_req_wdata_ready <= 1'd0;
    main_basesoc_sdram_bankmachine6_row_close <= 1'd0;
    main_basesoc_sdram_bankmachine6_row_col_n_addr_sel <= 1'd0;
    main_basesoc_sdram_bankmachine6_row_open <= 1'd0;
    builder_bankmachine6_next_state <= builder_bankmachine6_state;
    case (builder_bankmachine6_state)
        1'd1: begin
            if ((main_basesoc_sdram_bankmachine6_twtpcon_ready & main_basesoc_sdram_bankmachine6_trascon_ready)) begin
                main_basesoc_sdram_bankmachine6_cmd_valid <= 1'd1;
                if (main_basesoc_sdram_bankmachine6_cmd_ready) begin
                    builder_bankmachine6_next_state <= 3'd5;
                end
                main_basesoc_sdram_bankmachine6_cmd_payload_ras <= 1'd1;
                main_basesoc_sdram_bankmachine6_cmd_payload_we <= 1'd1;
                main_basesoc_sdram_bankmachine6_cmd_payload_is_cmd <= 1'd1;
            end
            main_basesoc_sdram_bankmachine6_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_basesoc_sdram_bankmachine6_twtpcon_ready & main_basesoc_sdram_bankmachine6_trascon_ready)) begin
                builder_bankmachine6_next_state <= 3'd5;
            end
            main_basesoc_sdram_bankmachine6_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_basesoc_sdram_bankmachine6_trccon_ready) begin
                main_basesoc_sdram_bankmachine6_row_col_n_addr_sel <= 1'd1;
                main_basesoc_sdram_bankmachine6_row_open <= 1'd1;
                main_basesoc_sdram_bankmachine6_cmd_valid <= 1'd1;
                main_basesoc_sdram_bankmachine6_cmd_payload_is_cmd <= 1'd1;
                if (main_basesoc_sdram_bankmachine6_cmd_ready) begin
                    builder_bankmachine6_next_state <= 3'd6;
                end
                main_basesoc_sdram_bankmachine6_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_basesoc_sdram_bankmachine6_twtpcon_ready) begin
                main_basesoc_sdram_bankmachine6_refresh_gnt <= 1'd1;
            end
            main_basesoc_sdram_bankmachine6_row_close <= 1'd1;
            main_basesoc_sdram_bankmachine6_cmd_payload_is_cmd <= 1'd1;
            if ((~main_basesoc_sdram_bankmachine6_refresh_req)) begin
                builder_bankmachine6_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_bankmachine6_next_state <= 2'd3;
        end
        3'd6: begin
            builder_bankmachine6_next_state <= 1'd0;
        end
        default: begin
            if (main_basesoc_sdram_bankmachine6_refresh_req) begin
                builder_bankmachine6_next_state <= 3'd4;
            end else begin
                if (main_basesoc_sdram_bankmachine6_source_source_valid) begin
                    if (main_basesoc_sdram_bankmachine6_row_opened) begin
                        if (main_basesoc_sdram_bankmachine6_row_hit) begin
                            main_basesoc_sdram_bankmachine6_cmd_valid <= 1'd1;
                            if (main_basesoc_sdram_bankmachine6_source_source_payload_we) begin
                                main_basesoc_sdram_bankmachine6_req_wdata_ready <= main_basesoc_sdram_bankmachine6_cmd_ready;
                                main_basesoc_sdram_bankmachine6_cmd_payload_is_write <= 1'd1;
                                main_basesoc_sdram_bankmachine6_cmd_payload_we <= 1'd1;
                            end else begin
                                main_basesoc_sdram_bankmachine6_req_rdata_valid <= main_basesoc_sdram_bankmachine6_cmd_ready;
                                main_basesoc_sdram_bankmachine6_cmd_payload_is_read <= 1'd1;
                            end
                            main_basesoc_sdram_bankmachine6_cmd_payload_cas <= 1'd1;
                            if ((main_basesoc_sdram_bankmachine6_cmd_ready & main_basesoc_sdram_bankmachine6_auto_precharge)) begin
                                builder_bankmachine6_next_state <= 2'd2;
                            end
                        end else begin
                            builder_bankmachine6_next_state <= 1'd1;
                        end
                    end else begin
                        builder_bankmachine6_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_basesoc_sdram_bankmachine7_sink_valid = main_basesoc_sdram_bankmachine7_req_valid;
assign main_basesoc_sdram_bankmachine7_req_ready = main_basesoc_sdram_bankmachine7_sink_ready;
assign main_basesoc_sdram_bankmachine7_sink_payload_we = main_basesoc_sdram_bankmachine7_req_we;
assign main_basesoc_sdram_bankmachine7_sink_payload_addr = main_basesoc_sdram_bankmachine7_req_addr;
assign main_basesoc_sdram_bankmachine7_sink_sink_valid = main_basesoc_sdram_bankmachine7_source_valid;
assign main_basesoc_sdram_bankmachine7_source_ready = main_basesoc_sdram_bankmachine7_sink_sink_ready;
assign main_basesoc_sdram_bankmachine7_sink_sink_first = main_basesoc_sdram_bankmachine7_source_first;
assign main_basesoc_sdram_bankmachine7_sink_sink_last = main_basesoc_sdram_bankmachine7_source_last;
assign main_basesoc_sdram_bankmachine7_sink_sink_payload_we = main_basesoc_sdram_bankmachine7_source_payload_we;
assign main_basesoc_sdram_bankmachine7_sink_sink_payload_addr = main_basesoc_sdram_bankmachine7_source_payload_addr;
assign main_basesoc_sdram_bankmachine7_source_source_ready = (main_basesoc_sdram_bankmachine7_req_wdata_ready | main_basesoc_sdram_bankmachine7_req_rdata_valid);
assign main_basesoc_sdram_bankmachine7_req_lock = (main_basesoc_sdram_bankmachine7_source_valid | main_basesoc_sdram_bankmachine7_source_source_valid);
assign main_basesoc_sdram_bankmachine7_row_hit = (main_basesoc_sdram_bankmachine7_row == main_basesoc_sdram_bankmachine7_source_source_payload_addr[21:7]);
assign main_basesoc_sdram_bankmachine7_cmd_payload_ba = 3'd7;
always @(*) begin
    main_basesoc_sdram_bankmachine7_cmd_payload_a <= 15'd0;
    if (main_basesoc_sdram_bankmachine7_row_col_n_addr_sel) begin
        main_basesoc_sdram_bankmachine7_cmd_payload_a <= main_basesoc_sdram_bankmachine7_source_source_payload_addr[21:7];
    end else begin
        main_basesoc_sdram_bankmachine7_cmd_payload_a <= ((main_basesoc_sdram_bankmachine7_auto_precharge <<< 4'd10) | {main_basesoc_sdram_bankmachine7_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_basesoc_sdram_bankmachine7_twtpcon_valid = ((main_basesoc_sdram_bankmachine7_cmd_valid & main_basesoc_sdram_bankmachine7_cmd_ready) & main_basesoc_sdram_bankmachine7_cmd_payload_is_write);
assign main_basesoc_sdram_bankmachine7_trccon_valid = ((main_basesoc_sdram_bankmachine7_cmd_valid & main_basesoc_sdram_bankmachine7_cmd_ready) & main_basesoc_sdram_bankmachine7_row_open);
assign main_basesoc_sdram_bankmachine7_trascon_valid = ((main_basesoc_sdram_bankmachine7_cmd_valid & main_basesoc_sdram_bankmachine7_cmd_ready) & main_basesoc_sdram_bankmachine7_row_open);
always @(*) begin
    main_basesoc_sdram_bankmachine7_auto_precharge <= 1'd0;
    if ((main_basesoc_sdram_bankmachine7_source_valid & main_basesoc_sdram_bankmachine7_source_source_valid)) begin
        if ((main_basesoc_sdram_bankmachine7_source_payload_addr[21:7] != main_basesoc_sdram_bankmachine7_source_source_payload_addr[21:7])) begin
            main_basesoc_sdram_bankmachine7_auto_precharge <= (main_basesoc_sdram_bankmachine7_row_close == 1'd0);
        end
    end
end
assign main_basesoc_sdram_bankmachine7_syncfifo7_din = {main_basesoc_sdram_bankmachine7_fifo_in_last, main_basesoc_sdram_bankmachine7_fifo_in_first, main_basesoc_sdram_bankmachine7_fifo_in_payload_addr, main_basesoc_sdram_bankmachine7_fifo_in_payload_we};
assign {main_basesoc_sdram_bankmachine7_fifo_out_last, main_basesoc_sdram_bankmachine7_fifo_out_first, main_basesoc_sdram_bankmachine7_fifo_out_payload_addr, main_basesoc_sdram_bankmachine7_fifo_out_payload_we} = main_basesoc_sdram_bankmachine7_syncfifo7_dout;
assign main_basesoc_sdram_bankmachine7_sink_ready = main_basesoc_sdram_bankmachine7_syncfifo7_writable;
assign main_basesoc_sdram_bankmachine7_syncfifo7_we = main_basesoc_sdram_bankmachine7_sink_valid;
assign main_basesoc_sdram_bankmachine7_fifo_in_first = main_basesoc_sdram_bankmachine7_sink_first;
assign main_basesoc_sdram_bankmachine7_fifo_in_last = main_basesoc_sdram_bankmachine7_sink_last;
assign main_basesoc_sdram_bankmachine7_fifo_in_payload_we = main_basesoc_sdram_bankmachine7_sink_payload_we;
assign main_basesoc_sdram_bankmachine7_fifo_in_payload_addr = main_basesoc_sdram_bankmachine7_sink_payload_addr;
assign main_basesoc_sdram_bankmachine7_source_valid = main_basesoc_sdram_bankmachine7_syncfifo7_readable;
assign main_basesoc_sdram_bankmachine7_source_first = main_basesoc_sdram_bankmachine7_fifo_out_first;
assign main_basesoc_sdram_bankmachine7_source_last = main_basesoc_sdram_bankmachine7_fifo_out_last;
assign main_basesoc_sdram_bankmachine7_source_payload_we = main_basesoc_sdram_bankmachine7_fifo_out_payload_we;
assign main_basesoc_sdram_bankmachine7_source_payload_addr = main_basesoc_sdram_bankmachine7_fifo_out_payload_addr;
assign main_basesoc_sdram_bankmachine7_syncfifo7_re = main_basesoc_sdram_bankmachine7_source_ready;
always @(*) begin
    main_basesoc_sdram_bankmachine7_wrport_adr <= 3'd0;
    if (main_basesoc_sdram_bankmachine7_replace) begin
        main_basesoc_sdram_bankmachine7_wrport_adr <= (main_basesoc_sdram_bankmachine7_produce - 1'd1);
    end else begin
        main_basesoc_sdram_bankmachine7_wrport_adr <= main_basesoc_sdram_bankmachine7_produce;
    end
end
assign main_basesoc_sdram_bankmachine7_wrport_dat_w = main_basesoc_sdram_bankmachine7_syncfifo7_din;
assign main_basesoc_sdram_bankmachine7_wrport_we = (main_basesoc_sdram_bankmachine7_syncfifo7_we & (main_basesoc_sdram_bankmachine7_syncfifo7_writable | main_basesoc_sdram_bankmachine7_replace));
assign main_basesoc_sdram_bankmachine7_do_read = (main_basesoc_sdram_bankmachine7_syncfifo7_readable & main_basesoc_sdram_bankmachine7_syncfifo7_re);
assign main_basesoc_sdram_bankmachine7_rdport_adr = main_basesoc_sdram_bankmachine7_consume;
assign main_basesoc_sdram_bankmachine7_syncfifo7_dout = main_basesoc_sdram_bankmachine7_rdport_dat_r;
assign main_basesoc_sdram_bankmachine7_syncfifo7_writable = (main_basesoc_sdram_bankmachine7_level != 4'd8);
assign main_basesoc_sdram_bankmachine7_syncfifo7_readable = (main_basesoc_sdram_bankmachine7_level != 1'd0);
assign main_basesoc_sdram_bankmachine7_pipe_valid_sink_ready = ((~main_basesoc_sdram_bankmachine7_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine7_pipe_valid_source_ready);
assign main_basesoc_sdram_bankmachine7_pipe_valid_sink_valid = main_basesoc_sdram_bankmachine7_sink_sink_valid;
assign main_basesoc_sdram_bankmachine7_sink_sink_ready = main_basesoc_sdram_bankmachine7_pipe_valid_sink_ready;
assign main_basesoc_sdram_bankmachine7_pipe_valid_sink_first = main_basesoc_sdram_bankmachine7_sink_sink_first;
assign main_basesoc_sdram_bankmachine7_pipe_valid_sink_last = main_basesoc_sdram_bankmachine7_sink_sink_last;
assign main_basesoc_sdram_bankmachine7_pipe_valid_sink_payload_we = main_basesoc_sdram_bankmachine7_sink_sink_payload_we;
assign main_basesoc_sdram_bankmachine7_pipe_valid_sink_payload_addr = main_basesoc_sdram_bankmachine7_sink_sink_payload_addr;
assign main_basesoc_sdram_bankmachine7_source_source_valid = main_basesoc_sdram_bankmachine7_pipe_valid_source_valid;
assign main_basesoc_sdram_bankmachine7_pipe_valid_source_ready = main_basesoc_sdram_bankmachine7_source_source_ready;
assign main_basesoc_sdram_bankmachine7_source_source_first = main_basesoc_sdram_bankmachine7_pipe_valid_source_first;
assign main_basesoc_sdram_bankmachine7_source_source_last = main_basesoc_sdram_bankmachine7_pipe_valid_source_last;
assign main_basesoc_sdram_bankmachine7_source_source_payload_we = main_basesoc_sdram_bankmachine7_pipe_valid_source_payload_we;
assign main_basesoc_sdram_bankmachine7_source_source_payload_addr = main_basesoc_sdram_bankmachine7_pipe_valid_source_payload_addr;
always @(*) begin
    builder_bankmachine7_next_state <= 3'd0;
    main_basesoc_sdram_bankmachine7_cmd_payload_cas <= 1'd0;
    main_basesoc_sdram_bankmachine7_cmd_payload_is_cmd <= 1'd0;
    main_basesoc_sdram_bankmachine7_cmd_payload_is_read <= 1'd0;
    main_basesoc_sdram_bankmachine7_cmd_payload_is_write <= 1'd0;
    main_basesoc_sdram_bankmachine7_cmd_payload_ras <= 1'd0;
    main_basesoc_sdram_bankmachine7_cmd_payload_we <= 1'd0;
    main_basesoc_sdram_bankmachine7_cmd_valid <= 1'd0;
    main_basesoc_sdram_bankmachine7_refresh_gnt <= 1'd0;
    main_basesoc_sdram_bankmachine7_req_rdata_valid <= 1'd0;
    main_basesoc_sdram_bankmachine7_req_wdata_ready <= 1'd0;
    main_basesoc_sdram_bankmachine7_row_close <= 1'd0;
    main_basesoc_sdram_bankmachine7_row_col_n_addr_sel <= 1'd0;
    main_basesoc_sdram_bankmachine7_row_open <= 1'd0;
    builder_bankmachine7_next_state <= builder_bankmachine7_state;
    case (builder_bankmachine7_state)
        1'd1: begin
            if ((main_basesoc_sdram_bankmachine7_twtpcon_ready & main_basesoc_sdram_bankmachine7_trascon_ready)) begin
                main_basesoc_sdram_bankmachine7_cmd_valid <= 1'd1;
                if (main_basesoc_sdram_bankmachine7_cmd_ready) begin
                    builder_bankmachine7_next_state <= 3'd5;
                end
                main_basesoc_sdram_bankmachine7_cmd_payload_ras <= 1'd1;
                main_basesoc_sdram_bankmachine7_cmd_payload_we <= 1'd1;
                main_basesoc_sdram_bankmachine7_cmd_payload_is_cmd <= 1'd1;
            end
            main_basesoc_sdram_bankmachine7_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_basesoc_sdram_bankmachine7_twtpcon_ready & main_basesoc_sdram_bankmachine7_trascon_ready)) begin
                builder_bankmachine7_next_state <= 3'd5;
            end
            main_basesoc_sdram_bankmachine7_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_basesoc_sdram_bankmachine7_trccon_ready) begin
                main_basesoc_sdram_bankmachine7_row_col_n_addr_sel <= 1'd1;
                main_basesoc_sdram_bankmachine7_row_open <= 1'd1;
                main_basesoc_sdram_bankmachine7_cmd_valid <= 1'd1;
                main_basesoc_sdram_bankmachine7_cmd_payload_is_cmd <= 1'd1;
                if (main_basesoc_sdram_bankmachine7_cmd_ready) begin
                    builder_bankmachine7_next_state <= 3'd6;
                end
                main_basesoc_sdram_bankmachine7_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_basesoc_sdram_bankmachine7_twtpcon_ready) begin
                main_basesoc_sdram_bankmachine7_refresh_gnt <= 1'd1;
            end
            main_basesoc_sdram_bankmachine7_row_close <= 1'd1;
            main_basesoc_sdram_bankmachine7_cmd_payload_is_cmd <= 1'd1;
            if ((~main_basesoc_sdram_bankmachine7_refresh_req)) begin
                builder_bankmachine7_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_bankmachine7_next_state <= 2'd3;
        end
        3'd6: begin
            builder_bankmachine7_next_state <= 1'd0;
        end
        default: begin
            if (main_basesoc_sdram_bankmachine7_refresh_req) begin
                builder_bankmachine7_next_state <= 3'd4;
            end else begin
                if (main_basesoc_sdram_bankmachine7_source_source_valid) begin
                    if (main_basesoc_sdram_bankmachine7_row_opened) begin
                        if (main_basesoc_sdram_bankmachine7_row_hit) begin
                            main_basesoc_sdram_bankmachine7_cmd_valid <= 1'd1;
                            if (main_basesoc_sdram_bankmachine7_source_source_payload_we) begin
                                main_basesoc_sdram_bankmachine7_req_wdata_ready <= main_basesoc_sdram_bankmachine7_cmd_ready;
                                main_basesoc_sdram_bankmachine7_cmd_payload_is_write <= 1'd1;
                                main_basesoc_sdram_bankmachine7_cmd_payload_we <= 1'd1;
                            end else begin
                                main_basesoc_sdram_bankmachine7_req_rdata_valid <= main_basesoc_sdram_bankmachine7_cmd_ready;
                                main_basesoc_sdram_bankmachine7_cmd_payload_is_read <= 1'd1;
                            end
                            main_basesoc_sdram_bankmachine7_cmd_payload_cas <= 1'd1;
                            if ((main_basesoc_sdram_bankmachine7_cmd_ready & main_basesoc_sdram_bankmachine7_auto_precharge)) begin
                                builder_bankmachine7_next_state <= 2'd2;
                            end
                        end else begin
                            builder_bankmachine7_next_state <= 1'd1;
                        end
                    end else begin
                        builder_bankmachine7_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_basesoc_sdram_settings = (main_a7ddrphy_rdphase_storage - 1'd1);
assign main_basesoc_sdram_interface = (main_a7ddrphy_wrphase_storage - 1'd1);
assign main_basesoc_sdram_trrdcon_valid = ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & ((main_basesoc_sdram_choose_cmd_cmd_payload_ras & (~main_basesoc_sdram_choose_cmd_cmd_payload_cas)) & (~main_basesoc_sdram_choose_cmd_cmd_payload_we)));
assign main_basesoc_sdram_tfawcon_valid = ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & ((main_basesoc_sdram_choose_cmd_cmd_payload_ras & (~main_basesoc_sdram_choose_cmd_cmd_payload_cas)) & (~main_basesoc_sdram_choose_cmd_cmd_payload_we)));
assign main_basesoc_sdram_ras_allowed = (main_basesoc_sdram_trrdcon_ready & main_basesoc_sdram_tfawcon_ready);
assign main_basesoc_sdram_tccdcon_valid = ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & (main_basesoc_sdram_choose_req_cmd_payload_is_write | main_basesoc_sdram_choose_req_cmd_payload_is_read));
assign main_basesoc_sdram_cas_allowed = main_basesoc_sdram_tccdcon_ready;
assign main_basesoc_sdram_twtrcon_valid = ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_is_write);
assign main_basesoc_sdram_read_available = ((((((((main_basesoc_sdram_bankmachine0_cmd_valid & main_basesoc_sdram_bankmachine0_cmd_payload_is_read) | (main_basesoc_sdram_bankmachine1_cmd_valid & main_basesoc_sdram_bankmachine1_cmd_payload_is_read)) | (main_basesoc_sdram_bankmachine2_cmd_valid & main_basesoc_sdram_bankmachine2_cmd_payload_is_read)) | (main_basesoc_sdram_bankmachine3_cmd_valid & main_basesoc_sdram_bankmachine3_cmd_payload_is_read)) | (main_basesoc_sdram_bankmachine4_cmd_valid & main_basesoc_sdram_bankmachine4_cmd_payload_is_read)) | (main_basesoc_sdram_bankmachine5_cmd_valid & main_basesoc_sdram_bankmachine5_cmd_payload_is_read)) | (main_basesoc_sdram_bankmachine6_cmd_valid & main_basesoc_sdram_bankmachine6_cmd_payload_is_read)) | (main_basesoc_sdram_bankmachine7_cmd_valid & main_basesoc_sdram_bankmachine7_cmd_payload_is_read));
assign main_basesoc_sdram_write_available = ((((((((main_basesoc_sdram_bankmachine0_cmd_valid & main_basesoc_sdram_bankmachine0_cmd_payload_is_write) | (main_basesoc_sdram_bankmachine1_cmd_valid & main_basesoc_sdram_bankmachine1_cmd_payload_is_write)) | (main_basesoc_sdram_bankmachine2_cmd_valid & main_basesoc_sdram_bankmachine2_cmd_payload_is_write)) | (main_basesoc_sdram_bankmachine3_cmd_valid & main_basesoc_sdram_bankmachine3_cmd_payload_is_write)) | (main_basesoc_sdram_bankmachine4_cmd_valid & main_basesoc_sdram_bankmachine4_cmd_payload_is_write)) | (main_basesoc_sdram_bankmachine5_cmd_valid & main_basesoc_sdram_bankmachine5_cmd_payload_is_write)) | (main_basesoc_sdram_bankmachine6_cmd_valid & main_basesoc_sdram_bankmachine6_cmd_payload_is_write)) | (main_basesoc_sdram_bankmachine7_cmd_valid & main_basesoc_sdram_bankmachine7_cmd_payload_is_write));
assign main_basesoc_sdram_max_time0 = (main_basesoc_sdram_time0 == 1'd0);
assign main_basesoc_sdram_max_time1 = (main_basesoc_sdram_time1 == 1'd0);
assign main_basesoc_sdram_bankmachine0_refresh_req = main_basesoc_sdram_cmd_valid;
assign main_basesoc_sdram_bankmachine1_refresh_req = main_basesoc_sdram_cmd_valid;
assign main_basesoc_sdram_bankmachine2_refresh_req = main_basesoc_sdram_cmd_valid;
assign main_basesoc_sdram_bankmachine3_refresh_req = main_basesoc_sdram_cmd_valid;
assign main_basesoc_sdram_bankmachine4_refresh_req = main_basesoc_sdram_cmd_valid;
assign main_basesoc_sdram_bankmachine5_refresh_req = main_basesoc_sdram_cmd_valid;
assign main_basesoc_sdram_bankmachine6_refresh_req = main_basesoc_sdram_cmd_valid;
assign main_basesoc_sdram_bankmachine7_refresh_req = main_basesoc_sdram_cmd_valid;
assign main_basesoc_sdram_go_to_refresh = (((((((main_basesoc_sdram_bankmachine0_refresh_gnt & main_basesoc_sdram_bankmachine1_refresh_gnt) & main_basesoc_sdram_bankmachine2_refresh_gnt) & main_basesoc_sdram_bankmachine3_refresh_gnt) & main_basesoc_sdram_bankmachine4_refresh_gnt) & main_basesoc_sdram_bankmachine5_refresh_gnt) & main_basesoc_sdram_bankmachine6_refresh_gnt) & main_basesoc_sdram_bankmachine7_refresh_gnt);
assign main_basesoc_sdram_interface_rdata = {main_basesoc_sdram_dfi_p3_rddata, main_basesoc_sdram_dfi_p2_rddata, main_basesoc_sdram_dfi_p1_rddata, main_basesoc_sdram_dfi_p0_rddata};
assign {main_basesoc_sdram_dfi_p3_wrdata, main_basesoc_sdram_dfi_p2_wrdata, main_basesoc_sdram_dfi_p1_wrdata, main_basesoc_sdram_dfi_p0_wrdata} = main_basesoc_sdram_interface_wdata;
assign {main_basesoc_sdram_dfi_p3_wrdata_mask, main_basesoc_sdram_dfi_p2_wrdata_mask, main_basesoc_sdram_dfi_p1_wrdata_mask, main_basesoc_sdram_dfi_p0_wrdata_mask} = (~main_basesoc_sdram_interface_wdata_we);
always @(*) begin
    main_basesoc_sdram_choose_cmd_requests <= 8'd0;
    main_basesoc_sdram_choose_cmd_requests[0] <= (main_basesoc_sdram_bankmachine0_cmd_valid & (((main_basesoc_sdram_bankmachine0_cmd_payload_is_cmd & main_basesoc_sdram_choose_cmd_want_cmds) & ((~((main_basesoc_sdram_bankmachine0_cmd_payload_ras & (~main_basesoc_sdram_bankmachine0_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine0_cmd_payload_we))) | main_basesoc_sdram_choose_cmd_want_activates)) | ((main_basesoc_sdram_bankmachine0_cmd_payload_is_read == main_basesoc_sdram_choose_cmd_want_reads) & (main_basesoc_sdram_bankmachine0_cmd_payload_is_write == main_basesoc_sdram_choose_cmd_want_writes))));
    main_basesoc_sdram_choose_cmd_requests[1] <= (main_basesoc_sdram_bankmachine1_cmd_valid & (((main_basesoc_sdram_bankmachine1_cmd_payload_is_cmd & main_basesoc_sdram_choose_cmd_want_cmds) & ((~((main_basesoc_sdram_bankmachine1_cmd_payload_ras & (~main_basesoc_sdram_bankmachine1_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine1_cmd_payload_we))) | main_basesoc_sdram_choose_cmd_want_activates)) | ((main_basesoc_sdram_bankmachine1_cmd_payload_is_read == main_basesoc_sdram_choose_cmd_want_reads) & (main_basesoc_sdram_bankmachine1_cmd_payload_is_write == main_basesoc_sdram_choose_cmd_want_writes))));
    main_basesoc_sdram_choose_cmd_requests[2] <= (main_basesoc_sdram_bankmachine2_cmd_valid & (((main_basesoc_sdram_bankmachine2_cmd_payload_is_cmd & main_basesoc_sdram_choose_cmd_want_cmds) & ((~((main_basesoc_sdram_bankmachine2_cmd_payload_ras & (~main_basesoc_sdram_bankmachine2_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine2_cmd_payload_we))) | main_basesoc_sdram_choose_cmd_want_activates)) | ((main_basesoc_sdram_bankmachine2_cmd_payload_is_read == main_basesoc_sdram_choose_cmd_want_reads) & (main_basesoc_sdram_bankmachine2_cmd_payload_is_write == main_basesoc_sdram_choose_cmd_want_writes))));
    main_basesoc_sdram_choose_cmd_requests[3] <= (main_basesoc_sdram_bankmachine3_cmd_valid & (((main_basesoc_sdram_bankmachine3_cmd_payload_is_cmd & main_basesoc_sdram_choose_cmd_want_cmds) & ((~((main_basesoc_sdram_bankmachine3_cmd_payload_ras & (~main_basesoc_sdram_bankmachine3_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine3_cmd_payload_we))) | main_basesoc_sdram_choose_cmd_want_activates)) | ((main_basesoc_sdram_bankmachine3_cmd_payload_is_read == main_basesoc_sdram_choose_cmd_want_reads) & (main_basesoc_sdram_bankmachine3_cmd_payload_is_write == main_basesoc_sdram_choose_cmd_want_writes))));
    main_basesoc_sdram_choose_cmd_requests[4] <= (main_basesoc_sdram_bankmachine4_cmd_valid & (((main_basesoc_sdram_bankmachine4_cmd_payload_is_cmd & main_basesoc_sdram_choose_cmd_want_cmds) & ((~((main_basesoc_sdram_bankmachine4_cmd_payload_ras & (~main_basesoc_sdram_bankmachine4_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine4_cmd_payload_we))) | main_basesoc_sdram_choose_cmd_want_activates)) | ((main_basesoc_sdram_bankmachine4_cmd_payload_is_read == main_basesoc_sdram_choose_cmd_want_reads) & (main_basesoc_sdram_bankmachine4_cmd_payload_is_write == main_basesoc_sdram_choose_cmd_want_writes))));
    main_basesoc_sdram_choose_cmd_requests[5] <= (main_basesoc_sdram_bankmachine5_cmd_valid & (((main_basesoc_sdram_bankmachine5_cmd_payload_is_cmd & main_basesoc_sdram_choose_cmd_want_cmds) & ((~((main_basesoc_sdram_bankmachine5_cmd_payload_ras & (~main_basesoc_sdram_bankmachine5_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine5_cmd_payload_we))) | main_basesoc_sdram_choose_cmd_want_activates)) | ((main_basesoc_sdram_bankmachine5_cmd_payload_is_read == main_basesoc_sdram_choose_cmd_want_reads) & (main_basesoc_sdram_bankmachine5_cmd_payload_is_write == main_basesoc_sdram_choose_cmd_want_writes))));
    main_basesoc_sdram_choose_cmd_requests[6] <= (main_basesoc_sdram_bankmachine6_cmd_valid & (((main_basesoc_sdram_bankmachine6_cmd_payload_is_cmd & main_basesoc_sdram_choose_cmd_want_cmds) & ((~((main_basesoc_sdram_bankmachine6_cmd_payload_ras & (~main_basesoc_sdram_bankmachine6_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine6_cmd_payload_we))) | main_basesoc_sdram_choose_cmd_want_activates)) | ((main_basesoc_sdram_bankmachine6_cmd_payload_is_read == main_basesoc_sdram_choose_cmd_want_reads) & (main_basesoc_sdram_bankmachine6_cmd_payload_is_write == main_basesoc_sdram_choose_cmd_want_writes))));
    main_basesoc_sdram_choose_cmd_requests[7] <= (main_basesoc_sdram_bankmachine7_cmd_valid & (((main_basesoc_sdram_bankmachine7_cmd_payload_is_cmd & main_basesoc_sdram_choose_cmd_want_cmds) & ((~((main_basesoc_sdram_bankmachine7_cmd_payload_ras & (~main_basesoc_sdram_bankmachine7_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine7_cmd_payload_we))) | main_basesoc_sdram_choose_cmd_want_activates)) | ((main_basesoc_sdram_bankmachine7_cmd_payload_is_read == main_basesoc_sdram_choose_cmd_want_reads) & (main_basesoc_sdram_bankmachine7_cmd_payload_is_write == main_basesoc_sdram_choose_cmd_want_writes))));
end
assign main_basesoc_sdram_choose_cmd_request = main_basesoc_sdram_choose_cmd_requests;
assign main_basesoc_sdram_choose_cmd_cmd_valid = builder_rhs_self8;
assign main_basesoc_sdram_choose_cmd_cmd_payload_a = builder_rhs_self9;
assign main_basesoc_sdram_choose_cmd_cmd_payload_ba = builder_rhs_self10;
assign main_basesoc_sdram_choose_cmd_cmd_payload_is_read = builder_rhs_self11;
assign main_basesoc_sdram_choose_cmd_cmd_payload_is_write = builder_rhs_self12;
assign main_basesoc_sdram_choose_cmd_cmd_payload_is_cmd = builder_rhs_self13;
always @(*) begin
    main_basesoc_sdram_choose_cmd_cmd_payload_cas <= 1'd0;
    if (main_basesoc_sdram_choose_cmd_cmd_valid) begin
        main_basesoc_sdram_choose_cmd_cmd_payload_cas <= builder_t_self0;
    end
end
always @(*) begin
    main_basesoc_sdram_choose_cmd_cmd_payload_ras <= 1'd0;
    if (main_basesoc_sdram_choose_cmd_cmd_valid) begin
        main_basesoc_sdram_choose_cmd_cmd_payload_ras <= builder_t_self1;
    end
end
always @(*) begin
    main_basesoc_sdram_choose_cmd_cmd_payload_we <= 1'd0;
    if (main_basesoc_sdram_choose_cmd_cmd_valid) begin
        main_basesoc_sdram_choose_cmd_cmd_payload_we <= builder_t_self2;
    end
end
assign main_basesoc_sdram_choose_cmd_ce = (main_basesoc_sdram_choose_cmd_cmd_ready | (~main_basesoc_sdram_choose_cmd_cmd_valid));
always @(*) begin
    main_basesoc_sdram_choose_req_requests <= 8'd0;
    main_basesoc_sdram_choose_req_requests[0] <= (main_basesoc_sdram_bankmachine0_cmd_valid & (((main_basesoc_sdram_bankmachine0_cmd_payload_is_cmd & main_basesoc_sdram_choose_req_want_cmds) & ((~((main_basesoc_sdram_bankmachine0_cmd_payload_ras & (~main_basesoc_sdram_bankmachine0_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine0_cmd_payload_we))) | main_basesoc_sdram_choose_req_want_activates)) | ((main_basesoc_sdram_bankmachine0_cmd_payload_is_read == main_basesoc_sdram_choose_req_want_reads) & (main_basesoc_sdram_bankmachine0_cmd_payload_is_write == main_basesoc_sdram_choose_req_want_writes))));
    main_basesoc_sdram_choose_req_requests[1] <= (main_basesoc_sdram_bankmachine1_cmd_valid & (((main_basesoc_sdram_bankmachine1_cmd_payload_is_cmd & main_basesoc_sdram_choose_req_want_cmds) & ((~((main_basesoc_sdram_bankmachine1_cmd_payload_ras & (~main_basesoc_sdram_bankmachine1_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine1_cmd_payload_we))) | main_basesoc_sdram_choose_req_want_activates)) | ((main_basesoc_sdram_bankmachine1_cmd_payload_is_read == main_basesoc_sdram_choose_req_want_reads) & (main_basesoc_sdram_bankmachine1_cmd_payload_is_write == main_basesoc_sdram_choose_req_want_writes))));
    main_basesoc_sdram_choose_req_requests[2] <= (main_basesoc_sdram_bankmachine2_cmd_valid & (((main_basesoc_sdram_bankmachine2_cmd_payload_is_cmd & main_basesoc_sdram_choose_req_want_cmds) & ((~((main_basesoc_sdram_bankmachine2_cmd_payload_ras & (~main_basesoc_sdram_bankmachine2_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine2_cmd_payload_we))) | main_basesoc_sdram_choose_req_want_activates)) | ((main_basesoc_sdram_bankmachine2_cmd_payload_is_read == main_basesoc_sdram_choose_req_want_reads) & (main_basesoc_sdram_bankmachine2_cmd_payload_is_write == main_basesoc_sdram_choose_req_want_writes))));
    main_basesoc_sdram_choose_req_requests[3] <= (main_basesoc_sdram_bankmachine3_cmd_valid & (((main_basesoc_sdram_bankmachine3_cmd_payload_is_cmd & main_basesoc_sdram_choose_req_want_cmds) & ((~((main_basesoc_sdram_bankmachine3_cmd_payload_ras & (~main_basesoc_sdram_bankmachine3_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine3_cmd_payload_we))) | main_basesoc_sdram_choose_req_want_activates)) | ((main_basesoc_sdram_bankmachine3_cmd_payload_is_read == main_basesoc_sdram_choose_req_want_reads) & (main_basesoc_sdram_bankmachine3_cmd_payload_is_write == main_basesoc_sdram_choose_req_want_writes))));
    main_basesoc_sdram_choose_req_requests[4] <= (main_basesoc_sdram_bankmachine4_cmd_valid & (((main_basesoc_sdram_bankmachine4_cmd_payload_is_cmd & main_basesoc_sdram_choose_req_want_cmds) & ((~((main_basesoc_sdram_bankmachine4_cmd_payload_ras & (~main_basesoc_sdram_bankmachine4_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine4_cmd_payload_we))) | main_basesoc_sdram_choose_req_want_activates)) | ((main_basesoc_sdram_bankmachine4_cmd_payload_is_read == main_basesoc_sdram_choose_req_want_reads) & (main_basesoc_sdram_bankmachine4_cmd_payload_is_write == main_basesoc_sdram_choose_req_want_writes))));
    main_basesoc_sdram_choose_req_requests[5] <= (main_basesoc_sdram_bankmachine5_cmd_valid & (((main_basesoc_sdram_bankmachine5_cmd_payload_is_cmd & main_basesoc_sdram_choose_req_want_cmds) & ((~((main_basesoc_sdram_bankmachine5_cmd_payload_ras & (~main_basesoc_sdram_bankmachine5_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine5_cmd_payload_we))) | main_basesoc_sdram_choose_req_want_activates)) | ((main_basesoc_sdram_bankmachine5_cmd_payload_is_read == main_basesoc_sdram_choose_req_want_reads) & (main_basesoc_sdram_bankmachine5_cmd_payload_is_write == main_basesoc_sdram_choose_req_want_writes))));
    main_basesoc_sdram_choose_req_requests[6] <= (main_basesoc_sdram_bankmachine6_cmd_valid & (((main_basesoc_sdram_bankmachine6_cmd_payload_is_cmd & main_basesoc_sdram_choose_req_want_cmds) & ((~((main_basesoc_sdram_bankmachine6_cmd_payload_ras & (~main_basesoc_sdram_bankmachine6_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine6_cmd_payload_we))) | main_basesoc_sdram_choose_req_want_activates)) | ((main_basesoc_sdram_bankmachine6_cmd_payload_is_read == main_basesoc_sdram_choose_req_want_reads) & (main_basesoc_sdram_bankmachine6_cmd_payload_is_write == main_basesoc_sdram_choose_req_want_writes))));
    main_basesoc_sdram_choose_req_requests[7] <= (main_basesoc_sdram_bankmachine7_cmd_valid & (((main_basesoc_sdram_bankmachine7_cmd_payload_is_cmd & main_basesoc_sdram_choose_req_want_cmds) & ((~((main_basesoc_sdram_bankmachine7_cmd_payload_ras & (~main_basesoc_sdram_bankmachine7_cmd_payload_cas)) & (~main_basesoc_sdram_bankmachine7_cmd_payload_we))) | main_basesoc_sdram_choose_req_want_activates)) | ((main_basesoc_sdram_bankmachine7_cmd_payload_is_read == main_basesoc_sdram_choose_req_want_reads) & (main_basesoc_sdram_bankmachine7_cmd_payload_is_write == main_basesoc_sdram_choose_req_want_writes))));
end
assign main_basesoc_sdram_choose_req_request = main_basesoc_sdram_choose_req_requests;
assign main_basesoc_sdram_choose_req_cmd_valid = builder_rhs_self14;
assign main_basesoc_sdram_choose_req_cmd_payload_a = builder_rhs_self15;
assign main_basesoc_sdram_choose_req_cmd_payload_ba = builder_rhs_self16;
assign main_basesoc_sdram_choose_req_cmd_payload_is_read = builder_rhs_self17;
assign main_basesoc_sdram_choose_req_cmd_payload_is_write = builder_rhs_self18;
assign main_basesoc_sdram_choose_req_cmd_payload_is_cmd = builder_rhs_self19;
always @(*) begin
    main_basesoc_sdram_choose_req_cmd_payload_cas <= 1'd0;
    if (main_basesoc_sdram_choose_req_cmd_valid) begin
        main_basesoc_sdram_choose_req_cmd_payload_cas <= builder_t_self3;
    end
end
always @(*) begin
    main_basesoc_sdram_choose_req_cmd_payload_ras <= 1'd0;
    if (main_basesoc_sdram_choose_req_cmd_valid) begin
        main_basesoc_sdram_choose_req_cmd_payload_ras <= builder_t_self4;
    end
end
always @(*) begin
    main_basesoc_sdram_choose_req_cmd_payload_we <= 1'd0;
    if (main_basesoc_sdram_choose_req_cmd_valid) begin
        main_basesoc_sdram_choose_req_cmd_payload_we <= builder_t_self5;
    end
end
always @(*) begin
    main_basesoc_sdram_bankmachine0_cmd_ready <= 1'd0;
    if (((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & (main_basesoc_sdram_choose_cmd_grant == 1'd0))) begin
        main_basesoc_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
    if (((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & (main_basesoc_sdram_choose_req_grant == 1'd0))) begin
        main_basesoc_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_basesoc_sdram_bankmachine1_cmd_ready <= 1'd0;
    if (((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & (main_basesoc_sdram_choose_cmd_grant == 1'd1))) begin
        main_basesoc_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
    if (((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & (main_basesoc_sdram_choose_req_grant == 1'd1))) begin
        main_basesoc_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_basesoc_sdram_bankmachine2_cmd_ready <= 1'd0;
    if (((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & (main_basesoc_sdram_choose_cmd_grant == 2'd2))) begin
        main_basesoc_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
    if (((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & (main_basesoc_sdram_choose_req_grant == 2'd2))) begin
        main_basesoc_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_basesoc_sdram_bankmachine3_cmd_ready <= 1'd0;
    if (((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & (main_basesoc_sdram_choose_cmd_grant == 2'd3))) begin
        main_basesoc_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
    if (((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & (main_basesoc_sdram_choose_req_grant == 2'd3))) begin
        main_basesoc_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_basesoc_sdram_bankmachine4_cmd_ready <= 1'd0;
    if (((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & (main_basesoc_sdram_choose_cmd_grant == 3'd4))) begin
        main_basesoc_sdram_bankmachine4_cmd_ready <= 1'd1;
    end
    if (((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & (main_basesoc_sdram_choose_req_grant == 3'd4))) begin
        main_basesoc_sdram_bankmachine4_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_basesoc_sdram_bankmachine5_cmd_ready <= 1'd0;
    if (((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & (main_basesoc_sdram_choose_cmd_grant == 3'd5))) begin
        main_basesoc_sdram_bankmachine5_cmd_ready <= 1'd1;
    end
    if (((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & (main_basesoc_sdram_choose_req_grant == 3'd5))) begin
        main_basesoc_sdram_bankmachine5_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_basesoc_sdram_bankmachine6_cmd_ready <= 1'd0;
    if (((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & (main_basesoc_sdram_choose_cmd_grant == 3'd6))) begin
        main_basesoc_sdram_bankmachine6_cmd_ready <= 1'd1;
    end
    if (((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & (main_basesoc_sdram_choose_req_grant == 3'd6))) begin
        main_basesoc_sdram_bankmachine6_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_basesoc_sdram_bankmachine7_cmd_ready <= 1'd0;
    if (((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & (main_basesoc_sdram_choose_cmd_grant == 3'd7))) begin
        main_basesoc_sdram_bankmachine7_cmd_ready <= 1'd1;
    end
    if (((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & (main_basesoc_sdram_choose_req_grant == 3'd7))) begin
        main_basesoc_sdram_bankmachine7_cmd_ready <= 1'd1;
    end
end
assign main_basesoc_sdram_choose_req_ce = (main_basesoc_sdram_choose_req_cmd_ready | (~main_basesoc_sdram_choose_req_cmd_valid));
assign main_basesoc_sdram_dfi_p0_reset_n = 1'd1;
assign main_basesoc_sdram_dfi_p0_cke = {1{main_basesoc_sdram_steerer0}};
assign main_basesoc_sdram_dfi_p0_odt = {1{main_basesoc_sdram_steerer1}};
assign main_basesoc_sdram_dfi_p1_reset_n = 1'd1;
assign main_basesoc_sdram_dfi_p1_cke = {1{main_basesoc_sdram_steerer2}};
assign main_basesoc_sdram_dfi_p1_odt = {1{main_basesoc_sdram_steerer3}};
assign main_basesoc_sdram_dfi_p2_reset_n = 1'd1;
assign main_basesoc_sdram_dfi_p2_cke = {1{main_basesoc_sdram_steerer4}};
assign main_basesoc_sdram_dfi_p2_odt = {1{main_basesoc_sdram_steerer5}};
assign main_basesoc_sdram_dfi_p3_reset_n = 1'd1;
assign main_basesoc_sdram_dfi_p3_cke = {1{main_basesoc_sdram_steerer6}};
assign main_basesoc_sdram_dfi_p3_odt = {1{main_basesoc_sdram_steerer7}};
assign main_basesoc_sdram_tfawcon_count = ((main_basesoc_sdram_tfawcon_self[0] + main_basesoc_sdram_tfawcon_self[1]) + main_basesoc_sdram_tfawcon_self[2]);
always @(*) begin
    builder_multiplexer_next_state <= 4'd0;
    main_basesoc_sdram_choose_cmd_cmd_ready <= 1'd0;
    main_basesoc_sdram_choose_cmd_want_activates <= 1'd0;
    main_basesoc_sdram_choose_req_cmd_ready <= 1'd0;
    main_basesoc_sdram_choose_req_want_reads <= 1'd0;
    main_basesoc_sdram_choose_req_want_writes <= 1'd0;
    main_basesoc_sdram_cmd_ready <= 1'd0;
    main_basesoc_sdram_en0 <= 1'd0;
    main_basesoc_sdram_en1 <= 1'd0;
    main_basesoc_sdram_steerer_sel0 <= 2'd0;
    main_basesoc_sdram_steerer_sel1 <= 2'd0;
    main_basesoc_sdram_steerer_sel2 <= 2'd0;
    main_basesoc_sdram_steerer_sel3 <= 2'd0;
    builder_multiplexer_next_state <= builder_multiplexer_state;
    case (builder_multiplexer_state)
        1'd1: begin
            main_basesoc_sdram_en1 <= 1'd1;
            main_basesoc_sdram_choose_req_want_writes <= 1'd1;
            if (1'd0) begin
                main_basesoc_sdram_choose_req_cmd_ready <= (main_basesoc_sdram_cas_allowed & ((~((main_basesoc_sdram_choose_req_cmd_payload_ras & (~main_basesoc_sdram_choose_req_cmd_payload_cas)) & (~main_basesoc_sdram_choose_req_cmd_payload_we))) | main_basesoc_sdram_ras_allowed));
            end else begin
                main_basesoc_sdram_choose_cmd_want_activates <= main_basesoc_sdram_ras_allowed;
                main_basesoc_sdram_choose_cmd_cmd_ready <= ((~((main_basesoc_sdram_choose_cmd_cmd_payload_ras & (~main_basesoc_sdram_choose_cmd_cmd_payload_cas)) & (~main_basesoc_sdram_choose_cmd_cmd_payload_we))) | main_basesoc_sdram_ras_allowed);
                main_basesoc_sdram_choose_req_cmd_ready <= main_basesoc_sdram_cas_allowed;
            end
            main_basesoc_sdram_steerer_sel0 <= 1'd0;
            if ((main_a7ddrphy_wrphase_storage == 1'd0)) begin
                main_basesoc_sdram_steerer_sel0 <= 2'd2;
            end
            if ((main_basesoc_sdram_interface == 1'd0)) begin
                main_basesoc_sdram_steerer_sel0 <= 1'd1;
            end
            main_basesoc_sdram_steerer_sel1 <= 1'd0;
            if ((main_a7ddrphy_wrphase_storage == 1'd1)) begin
                main_basesoc_sdram_steerer_sel1 <= 2'd2;
            end
            if ((main_basesoc_sdram_interface == 1'd1)) begin
                main_basesoc_sdram_steerer_sel1 <= 1'd1;
            end
            main_basesoc_sdram_steerer_sel2 <= 1'd0;
            if ((main_a7ddrphy_wrphase_storage == 2'd2)) begin
                main_basesoc_sdram_steerer_sel2 <= 2'd2;
            end
            if ((main_basesoc_sdram_interface == 2'd2)) begin
                main_basesoc_sdram_steerer_sel2 <= 1'd1;
            end
            main_basesoc_sdram_steerer_sel3 <= 1'd0;
            if ((main_a7ddrphy_wrphase_storage == 2'd3)) begin
                main_basesoc_sdram_steerer_sel3 <= 2'd2;
            end
            if ((main_basesoc_sdram_interface == 2'd3)) begin
                main_basesoc_sdram_steerer_sel3 <= 1'd1;
            end
            if (main_basesoc_sdram_read_available) begin
                if (((~main_basesoc_sdram_write_available) | main_basesoc_sdram_max_time1)) begin
                    builder_multiplexer_next_state <= 2'd3;
                end
            end
            if (main_basesoc_sdram_go_to_refresh) begin
                builder_multiplexer_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_basesoc_sdram_steerer_sel0 <= 2'd3;
            main_basesoc_sdram_cmd_ready <= 1'd1;
            if (main_basesoc_sdram_cmd_last) begin
                builder_multiplexer_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if (main_basesoc_sdram_twtrcon_ready) begin
                builder_multiplexer_next_state <= 1'd0;
            end
        end
        3'd4: begin
            builder_multiplexer_next_state <= 3'd5;
        end
        3'd5: begin
            builder_multiplexer_next_state <= 3'd6;
        end
        3'd6: begin
            builder_multiplexer_next_state <= 3'd7;
        end
        3'd7: begin
            builder_multiplexer_next_state <= 4'd8;
        end
        4'd8: begin
            builder_multiplexer_next_state <= 4'd9;
        end
        4'd9: begin
            builder_multiplexer_next_state <= 4'd10;
        end
        4'd10: begin
            builder_multiplexer_next_state <= 1'd1;
        end
        default: begin
            main_basesoc_sdram_en0 <= 1'd1;
            main_basesoc_sdram_choose_req_want_reads <= 1'd1;
            if (1'd0) begin
                main_basesoc_sdram_choose_req_cmd_ready <= (main_basesoc_sdram_cas_allowed & ((~((main_basesoc_sdram_choose_req_cmd_payload_ras & (~main_basesoc_sdram_choose_req_cmd_payload_cas)) & (~main_basesoc_sdram_choose_req_cmd_payload_we))) | main_basesoc_sdram_ras_allowed));
            end else begin
                main_basesoc_sdram_choose_cmd_want_activates <= main_basesoc_sdram_ras_allowed;
                main_basesoc_sdram_choose_cmd_cmd_ready <= ((~((main_basesoc_sdram_choose_cmd_cmd_payload_ras & (~main_basesoc_sdram_choose_cmd_cmd_payload_cas)) & (~main_basesoc_sdram_choose_cmd_cmd_payload_we))) | main_basesoc_sdram_ras_allowed);
                main_basesoc_sdram_choose_req_cmd_ready <= main_basesoc_sdram_cas_allowed;
            end
            main_basesoc_sdram_steerer_sel0 <= 1'd0;
            if ((main_a7ddrphy_rdphase_storage == 1'd0)) begin
                main_basesoc_sdram_steerer_sel0 <= 2'd2;
            end
            if ((main_basesoc_sdram_settings == 1'd0)) begin
                main_basesoc_sdram_steerer_sel0 <= 1'd1;
            end
            main_basesoc_sdram_steerer_sel1 <= 1'd0;
            if ((main_a7ddrphy_rdphase_storage == 1'd1)) begin
                main_basesoc_sdram_steerer_sel1 <= 2'd2;
            end
            if ((main_basesoc_sdram_settings == 1'd1)) begin
                main_basesoc_sdram_steerer_sel1 <= 1'd1;
            end
            main_basesoc_sdram_steerer_sel2 <= 1'd0;
            if ((main_a7ddrphy_rdphase_storage == 2'd2)) begin
                main_basesoc_sdram_steerer_sel2 <= 2'd2;
            end
            if ((main_basesoc_sdram_settings == 2'd2)) begin
                main_basesoc_sdram_steerer_sel2 <= 1'd1;
            end
            main_basesoc_sdram_steerer_sel3 <= 1'd0;
            if ((main_a7ddrphy_rdphase_storage == 2'd3)) begin
                main_basesoc_sdram_steerer_sel3 <= 2'd2;
            end
            if ((main_basesoc_sdram_settings == 2'd3)) begin
                main_basesoc_sdram_steerer_sel3 <= 1'd1;
            end
            if (main_basesoc_sdram_write_available) begin
                if (((~main_basesoc_sdram_read_available) | main_basesoc_sdram_max_time0)) begin
                    builder_multiplexer_next_state <= 3'd4;
                end
            end
            if (main_basesoc_sdram_go_to_refresh) begin
                builder_multiplexer_next_state <= 2'd2;
            end
        end
    endcase
end
assign builder_roundrobin0_request = {(((main_basesoc_port_cmd_payload_addr[9:7] == 1'd0) & (~(((((((builder_locked0 | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0))))) & main_basesoc_port_cmd_valid)};
assign builder_roundrobin0_ce = ((~main_basesoc_sdram_interface_bank0_valid) & (~main_basesoc_sdram_interface_bank0_lock));
assign main_basesoc_sdram_interface_bank0_addr = builder_rhs_self20;
assign main_basesoc_sdram_interface_bank0_we = builder_rhs_self21;
assign main_basesoc_sdram_interface_bank0_valid = builder_rhs_self22;
assign builder_roundrobin1_request = {(((main_basesoc_port_cmd_payload_addr[9:7] == 1'd1) & (~(((((((builder_locked1 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0))))) & main_basesoc_port_cmd_valid)};
assign builder_roundrobin1_ce = ((~main_basesoc_sdram_interface_bank1_valid) & (~main_basesoc_sdram_interface_bank1_lock));
assign main_basesoc_sdram_interface_bank1_addr = builder_rhs_self23;
assign main_basesoc_sdram_interface_bank1_we = builder_rhs_self24;
assign main_basesoc_sdram_interface_bank1_valid = builder_rhs_self25;
assign builder_roundrobin2_request = {(((main_basesoc_port_cmd_payload_addr[9:7] == 2'd2) & (~(((((((builder_locked2 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0))))) & main_basesoc_port_cmd_valid)};
assign builder_roundrobin2_ce = ((~main_basesoc_sdram_interface_bank2_valid) & (~main_basesoc_sdram_interface_bank2_lock));
assign main_basesoc_sdram_interface_bank2_addr = builder_rhs_self26;
assign main_basesoc_sdram_interface_bank2_we = builder_rhs_self27;
assign main_basesoc_sdram_interface_bank2_valid = builder_rhs_self28;
assign builder_roundrobin3_request = {(((main_basesoc_port_cmd_payload_addr[9:7] == 2'd3) & (~(((((((builder_locked3 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0))))) & main_basesoc_port_cmd_valid)};
assign builder_roundrobin3_ce = ((~main_basesoc_sdram_interface_bank3_valid) & (~main_basesoc_sdram_interface_bank3_lock));
assign main_basesoc_sdram_interface_bank3_addr = builder_rhs_self29;
assign main_basesoc_sdram_interface_bank3_we = builder_rhs_self30;
assign main_basesoc_sdram_interface_bank3_valid = builder_rhs_self31;
assign builder_roundrobin4_request = {(((main_basesoc_port_cmd_payload_addr[9:7] == 3'd4) & (~(((((((builder_locked4 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0))))) & main_basesoc_port_cmd_valid)};
assign builder_roundrobin4_ce = ((~main_basesoc_sdram_interface_bank4_valid) & (~main_basesoc_sdram_interface_bank4_lock));
assign main_basesoc_sdram_interface_bank4_addr = builder_rhs_self32;
assign main_basesoc_sdram_interface_bank4_we = builder_rhs_self33;
assign main_basesoc_sdram_interface_bank4_valid = builder_rhs_self34;
assign builder_roundrobin5_request = {(((main_basesoc_port_cmd_payload_addr[9:7] == 3'd5) & (~(((((((builder_locked5 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0))))) & main_basesoc_port_cmd_valid)};
assign builder_roundrobin5_ce = ((~main_basesoc_sdram_interface_bank5_valid) & (~main_basesoc_sdram_interface_bank5_lock));
assign main_basesoc_sdram_interface_bank5_addr = builder_rhs_self35;
assign main_basesoc_sdram_interface_bank5_we = builder_rhs_self36;
assign main_basesoc_sdram_interface_bank5_valid = builder_rhs_self37;
assign builder_roundrobin6_request = {(((main_basesoc_port_cmd_payload_addr[9:7] == 3'd6) & (~(((((((builder_locked6 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0))))) & main_basesoc_port_cmd_valid)};
assign builder_roundrobin6_ce = ((~main_basesoc_sdram_interface_bank6_valid) & (~main_basesoc_sdram_interface_bank6_lock));
assign main_basesoc_sdram_interface_bank6_addr = builder_rhs_self38;
assign main_basesoc_sdram_interface_bank6_we = builder_rhs_self39;
assign main_basesoc_sdram_interface_bank6_valid = builder_rhs_self40;
assign builder_roundrobin7_request = {(((main_basesoc_port_cmd_payload_addr[9:7] == 3'd7) & (~(((((((builder_locked7 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))))) & main_basesoc_port_cmd_valid)};
assign builder_roundrobin7_ce = ((~main_basesoc_sdram_interface_bank7_valid) & (~main_basesoc_sdram_interface_bank7_lock));
assign main_basesoc_sdram_interface_bank7_addr = builder_rhs_self41;
assign main_basesoc_sdram_interface_bank7_we = builder_rhs_self42;
assign main_basesoc_sdram_interface_bank7_valid = builder_rhs_self43;
assign main_basesoc_port_cmd_ready = ((((((((1'd0 | (((builder_roundrobin0_grant == 1'd0) & ((main_basesoc_port_cmd_payload_addr[9:7] == 1'd0) & (~(((((((builder_locked0 | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0)))))) & main_basesoc_sdram_interface_bank0_ready)) | (((builder_roundrobin1_grant == 1'd0) & ((main_basesoc_port_cmd_payload_addr[9:7] == 1'd1) & (~(((((((builder_locked1 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0)))))) & main_basesoc_sdram_interface_bank1_ready)) | (((builder_roundrobin2_grant == 1'd0) & ((main_basesoc_port_cmd_payload_addr[9:7] == 2'd2) & (~(((((((builder_locked2 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0)))))) & main_basesoc_sdram_interface_bank2_ready)) | (((builder_roundrobin3_grant == 1'd0) & ((main_basesoc_port_cmd_payload_addr[9:7] == 2'd3) & (~(((((((builder_locked3 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0)))))) & main_basesoc_sdram_interface_bank3_ready)) | (((builder_roundrobin4_grant == 1'd0) & ((main_basesoc_port_cmd_payload_addr[9:7] == 3'd4) & (~(((((((builder_locked4 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0)))))) & main_basesoc_sdram_interface_bank4_ready)) | (((builder_roundrobin5_grant == 1'd0) & ((main_basesoc_port_cmd_payload_addr[9:7] == 3'd5) & (~(((((((builder_locked5 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0)))))) & main_basesoc_sdram_interface_bank5_ready)) | (((builder_roundrobin6_grant == 1'd0) & ((main_basesoc_port_cmd_payload_addr[9:7] == 3'd6) & (~(((((((builder_locked6 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0)))))) & main_basesoc_sdram_interface_bank6_ready)) | (((builder_roundrobin7_grant == 1'd0) & ((main_basesoc_port_cmd_payload_addr[9:7] == 3'd7) & (~(((((((builder_locked7 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0)))))) & main_basesoc_sdram_interface_bank7_ready));
assign main_basesoc_port_wdata_ready = builder_new_master_wdata_ready1;
assign main_basesoc_port_rdata_valid = builder_new_master_rdata_valid8;
always @(*) begin
    main_basesoc_sdram_interface_wdata <= 256'd0;
    main_basesoc_sdram_interface_wdata_we <= 32'd0;
    case ({builder_new_master_wdata_ready1})
        1'd1: begin
            main_basesoc_sdram_interface_wdata <= main_basesoc_port_wdata_payload_data;
            main_basesoc_sdram_interface_wdata_we <= main_basesoc_port_wdata_payload_we;
        end
        default: begin
            main_basesoc_sdram_interface_wdata <= 1'd0;
            main_basesoc_sdram_interface_wdata_we <= 1'd0;
        end
    endcase
end
assign main_basesoc_port_rdata_payload_data = main_basesoc_sdram_interface_rdata;
assign builder_roundrobin0_grant = 1'd0;
assign builder_roundrobin1_grant = 1'd0;
assign builder_roundrobin2_grant = 1'd0;
assign builder_roundrobin3_grant = 1'd0;
assign builder_roundrobin4_grant = 1'd0;
assign builder_roundrobin5_grant = 1'd0;
assign builder_roundrobin6_grant = 1'd0;
assign builder_roundrobin7_grant = 1'd0;
assign main_basesoc_data_port_adr = main_basesoc_wb_sdram_adr[10:3];
always @(*) begin
    main_basesoc_data_port_dat_w <= 256'd0;
    main_basesoc_data_port_we <= 32'd0;
    if (main_basesoc_write_from_slave) begin
        main_basesoc_data_port_dat_w <= main_basesoc_interface_dat_r;
        main_basesoc_data_port_we <= {32{1'd1}};
    end else begin
        main_basesoc_data_port_dat_w <= {8{main_basesoc_wb_sdram_dat_w}};
        if ((((main_basesoc_wb_sdram_cyc & main_basesoc_wb_sdram_stb) & main_basesoc_wb_sdram_we) & main_basesoc_wb_sdram_ack)) begin
            main_basesoc_data_port_we <= {({4{(main_basesoc_wb_sdram_adr[2:0] == 3'd7)}} & main_basesoc_wb_sdram_sel), ({4{(main_basesoc_wb_sdram_adr[2:0] == 3'd6)}} & main_basesoc_wb_sdram_sel), ({4{(main_basesoc_wb_sdram_adr[2:0] == 3'd5)}} & main_basesoc_wb_sdram_sel), ({4{(main_basesoc_wb_sdram_adr[2:0] == 3'd4)}} & main_basesoc_wb_sdram_sel), ({4{(main_basesoc_wb_sdram_adr[2:0] == 2'd3)}} & main_basesoc_wb_sdram_sel), ({4{(main_basesoc_wb_sdram_adr[2:0] == 2'd2)}} & main_basesoc_wb_sdram_sel), ({4{(main_basesoc_wb_sdram_adr[2:0] == 1'd1)}} & main_basesoc_wb_sdram_sel), ({4{(main_basesoc_wb_sdram_adr[2:0] == 1'd0)}} & main_basesoc_wb_sdram_sel)};
        end
    end
end
assign main_basesoc_interface_dat_w = main_basesoc_data_port_dat_r;
assign main_basesoc_interface_sel = 32'd4294967295;
always @(*) begin
    main_basesoc_wb_sdram_dat_r <= 32'd0;
    case (main_basesoc_adr_offset_r)
        1'd0: begin
            main_basesoc_wb_sdram_dat_r <= main_basesoc_data_port_dat_r[31:0];
        end
        1'd1: begin
            main_basesoc_wb_sdram_dat_r <= main_basesoc_data_port_dat_r[63:32];
        end
        2'd2: begin
            main_basesoc_wb_sdram_dat_r <= main_basesoc_data_port_dat_r[95:64];
        end
        2'd3: begin
            main_basesoc_wb_sdram_dat_r <= main_basesoc_data_port_dat_r[127:96];
        end
        3'd4: begin
            main_basesoc_wb_sdram_dat_r <= main_basesoc_data_port_dat_r[159:128];
        end
        3'd5: begin
            main_basesoc_wb_sdram_dat_r <= main_basesoc_data_port_dat_r[191:160];
        end
        3'd6: begin
            main_basesoc_wb_sdram_dat_r <= main_basesoc_data_port_dat_r[223:192];
        end
        default: begin
            main_basesoc_wb_sdram_dat_r <= main_basesoc_data_port_dat_r[255:224];
        end
    endcase
end
assign {main_basesoc_tag_do_dirty, main_basesoc_tag_do_tag} = main_basesoc_tag_port_dat_r;
assign main_basesoc_tag_port_dat_w = {main_basesoc_tag_di_dirty, main_basesoc_tag_di_tag};
assign main_basesoc_tag_port_adr = main_basesoc_wb_sdram_adr[10:3];
assign main_basesoc_tag_di_tag = main_basesoc_wb_sdram_adr[29:11];
assign main_basesoc_interface_adr = {main_basesoc_tag_do_tag, main_basesoc_wb_sdram_adr[10:3]};
always @(*) begin
    builder_fullmemorywe_next_state <= 2'd0;
    main_basesoc_interface_cyc <= 1'd0;
    main_basesoc_interface_stb <= 1'd0;
    main_basesoc_interface_we <= 1'd0;
    main_basesoc_tag_di_dirty <= 1'd0;
    main_basesoc_tag_port_we <= 1'd0;
    main_basesoc_wb_sdram_ack <= 1'd0;
    main_basesoc_word_clr <= 1'd0;
    main_basesoc_word_inc <= 1'd0;
    main_basesoc_write_from_slave <= 1'd0;
    builder_fullmemorywe_next_state <= builder_fullmemorywe_state;
    case (builder_fullmemorywe_state)
        1'd1: begin
            main_basesoc_word_clr <= 1'd1;
            if ((main_basesoc_tag_do_tag == main_basesoc_wb_sdram_adr[29:11])) begin
                main_basesoc_wb_sdram_ack <= 1'd1;
                if (main_basesoc_wb_sdram_we) begin
                    main_basesoc_tag_di_dirty <= 1'd1;
                    main_basesoc_tag_port_we <= 1'd1;
                end
                builder_fullmemorywe_next_state <= 1'd0;
            end else begin
                if (main_basesoc_tag_do_dirty) begin
                    builder_fullmemorywe_next_state <= 2'd2;
                end else begin
                    main_basesoc_tag_port_we <= 1'd1;
                    main_basesoc_word_clr <= 1'd1;
                    builder_fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            main_basesoc_interface_stb <= 1'd1;
            main_basesoc_interface_cyc <= 1'd1;
            main_basesoc_interface_we <= 1'd1;
            if (main_basesoc_interface_ack) begin
                main_basesoc_word_inc <= 1'd1;
                if (1'd1) begin
                    main_basesoc_tag_port_we <= 1'd1;
                    main_basesoc_word_clr <= 1'd1;
                    builder_fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            main_basesoc_interface_stb <= 1'd1;
            main_basesoc_interface_cyc <= 1'd1;
            main_basesoc_interface_we <= 1'd0;
            if (main_basesoc_interface_ack) begin
                main_basesoc_write_from_slave <= 1'd1;
                main_basesoc_word_inc <= 1'd1;
                if (1'd1) begin
                    builder_fullmemorywe_next_state <= 1'd1;
                end else begin
                    builder_fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        default: begin
            if ((main_basesoc_wb_sdram_cyc & main_basesoc_wb_sdram_stb)) begin
                builder_fullmemorywe_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_port_cmd_payload_addr = (main_basesoc_interface_adr - 26'd33554432);
assign main_basesoc_port_cmd_payload_we = main_basesoc_interface_we;
assign main_basesoc_port_cmd_last = (~main_basesoc_interface_we);
assign main_basesoc_port_flush = (~main_basesoc_interface_cyc);
always @(*) begin
    main_basesoc_port_wdata_valid <= 1'd0;
    main_basesoc_port_wdata_valid <= (main_basesoc_interface_stb & main_basesoc_interface_we);
    if (1'd1) begin
        if ((~main_basesoc_is_ongoing)) begin
            main_basesoc_port_wdata_valid <= 1'd0;
        end
    end
end
assign main_basesoc_port_wdata_payload_data = main_basesoc_interface_dat_w;
assign main_basesoc_port_wdata_payload_we = main_basesoc_interface_sel;
assign main_basesoc_port_rdata_ready = 1'd1;
always @(*) begin
    builder_litedramwishbone2native_next_state <= 2'd0;
    main_basesoc_aborted_litedramwishbone2native_next_value <= 1'd0;
    main_basesoc_aborted_litedramwishbone2native_next_value_ce <= 1'd0;
    main_basesoc_interface_ack <= 1'd0;
    main_basesoc_interface_dat_r <= 256'd0;
    main_basesoc_is_ongoing <= 1'd0;
    main_basesoc_port_cmd_valid <= 1'd0;
    builder_litedramwishbone2native_next_state <= builder_litedramwishbone2native_state;
    case (builder_litedramwishbone2native_state)
        1'd1: begin
            main_basesoc_is_ongoing <= 1'd1;
            main_basesoc_aborted_litedramwishbone2native_next_value <= ((~main_basesoc_interface_cyc) | main_basesoc_aborted);
            main_basesoc_aborted_litedramwishbone2native_next_value_ce <= 1'd1;
            if ((main_basesoc_port_wdata_valid & main_basesoc_port_wdata_ready)) begin
                main_basesoc_interface_ack <= (main_basesoc_interface_cyc & (~main_basesoc_aborted));
                builder_litedramwishbone2native_next_state <= 1'd0;
            end
        end
        2'd2: begin
            main_basesoc_aborted_litedramwishbone2native_next_value <= ((~main_basesoc_interface_cyc) | main_basesoc_aborted);
            main_basesoc_aborted_litedramwishbone2native_next_value_ce <= 1'd1;
            if (main_basesoc_port_rdata_valid) begin
                main_basesoc_interface_ack <= (main_basesoc_interface_cyc & (~main_basesoc_aborted));
                main_basesoc_interface_dat_r <= main_basesoc_port_rdata_payload_data;
                builder_litedramwishbone2native_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_port_cmd_valid <= (main_basesoc_interface_cyc & main_basesoc_interface_stb);
            if (((main_basesoc_port_cmd_valid & main_basesoc_port_cmd_ready) & main_basesoc_interface_we)) begin
                builder_litedramwishbone2native_next_state <= 1'd1;
            end
            if (((main_basesoc_port_cmd_valid & main_basesoc_port_cmd_ready) & (~main_basesoc_interface_we))) begin
                builder_litedramwishbone2native_next_state <= 2'd2;
            end
            main_basesoc_aborted_litedramwishbone2native_next_value <= 1'd0;
            main_basesoc_aborted_litedramwishbone2native_next_value_ce <= 1'd1;
        end
    endcase
end
assign main_ethphy_reset = (main_ethphy_reset_storage | main_ethphy_hw_reset_reset);
assign eth_rst_n = (~main_ethphy_reset);
assign main_ethphy_clkin = eth_rx_clk;
assign eth_tx_clk = main_ethphy_clkout_buf0;
assign eth_tx_delayed_clk = main_ethphy_clkout_buf1;
assign main_ethphy_hw_reset_counter_done = (main_ethphy_hw_reset_counter == 9'd256);
assign main_ethphy_hw_reset_counter_ce = (~main_ethphy_hw_reset_counter_done);
assign main_ethphy_hw_reset_reset = (~main_ethphy_hw_reset_counter_done);
assign main_ethphy_sink_ready = 1'd1;
assign main_ethphy_liteethphyrgmiirx_last = ((~main_ethphy_liteethphyrgmiirx_rx_ctl) & main_ethphy_liteethphyrgmiirx_rx_ctl_d);
assign main_ethphy_liteethphyrgmiirx_source_last = main_ethphy_liteethphyrgmiirx_last;
assign eth_mdc = main_ethphy__w_storage[0];
assign main_ethphy_data_oe = main_ethphy__w_storage[1];
assign main_ethphy_data_w = main_ethphy__w_storage[2];
assign main_basesoc_ethcore_mac_packetizer_sink_valid = main_basesoc_ethcore_mac_crossbar_source_valid;
assign main_basesoc_ethcore_mac_crossbar_source_ready = main_basesoc_ethcore_mac_packetizer_sink_ready;
assign main_basesoc_ethcore_mac_packetizer_sink_first = main_basesoc_ethcore_mac_crossbar_source_first;
assign main_basesoc_ethcore_mac_packetizer_sink_last = main_basesoc_ethcore_mac_crossbar_source_last;
assign main_basesoc_ethcore_mac_packetizer_sink_payload_ethernet_type = main_basesoc_ethcore_mac_crossbar_source_payload_ethernet_type;
assign main_basesoc_ethcore_mac_packetizer_sink_payload_sender_mac = main_basesoc_ethcore_mac_crossbar_source_payload_sender_mac;
assign main_basesoc_ethcore_mac_packetizer_sink_payload_target_mac = main_basesoc_ethcore_mac_crossbar_source_payload_target_mac;
assign main_basesoc_ethcore_mac_packetizer_sink_payload_data = main_basesoc_ethcore_mac_crossbar_source_payload_data;
assign main_basesoc_ethcore_mac_packetizer_sink_payload_last_be = main_basesoc_ethcore_mac_crossbar_source_payload_last_be;
assign main_basesoc_ethcore_mac_packetizer_sink_payload_error = main_basesoc_ethcore_mac_crossbar_source_payload_error;
assign main_basesoc_ethcore_mac_core_sink_valid = main_basesoc_ethcore_mac_packetizer_source_valid;
assign main_basesoc_ethcore_mac_packetizer_source_ready = main_basesoc_ethcore_mac_core_sink_ready;
assign main_basesoc_ethcore_mac_core_sink_first = main_basesoc_ethcore_mac_packetizer_source_first;
assign main_basesoc_ethcore_mac_core_sink_last = main_basesoc_ethcore_mac_packetizer_source_last;
assign main_basesoc_ethcore_mac_core_sink_payload_data = main_basesoc_ethcore_mac_packetizer_source_payload_data;
assign main_basesoc_ethcore_mac_core_sink_payload_last_be = main_basesoc_ethcore_mac_packetizer_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_sink_payload_error = main_basesoc_ethcore_mac_packetizer_source_payload_error;
assign main_basesoc_ethcore_mac_depacketizer_sink_valid = main_basesoc_ethcore_mac_core_source_valid;
assign main_basesoc_ethcore_mac_core_source_ready = main_basesoc_ethcore_mac_depacketizer_sink_ready;
assign main_basesoc_ethcore_mac_depacketizer_sink_first = main_basesoc_ethcore_mac_core_source_first;
assign main_basesoc_ethcore_mac_depacketizer_sink_last = main_basesoc_ethcore_mac_core_source_last;
assign main_basesoc_ethcore_mac_depacketizer_sink_payload_data = main_basesoc_ethcore_mac_core_source_payload_data;
assign main_basesoc_ethcore_mac_depacketizer_sink_payload_last_be = main_basesoc_ethcore_mac_core_source_payload_last_be;
assign main_basesoc_ethcore_mac_depacketizer_sink_payload_error = main_basesoc_ethcore_mac_core_source_payload_error;
assign main_basesoc_ethcore_mac_crossbar_sink_valid = main_basesoc_ethcore_mac_depacketizer_source_valid;
assign main_basesoc_ethcore_mac_depacketizer_source_ready = main_basesoc_ethcore_mac_crossbar_sink_ready;
assign main_basesoc_ethcore_mac_crossbar_sink_first = main_basesoc_ethcore_mac_depacketizer_source_first;
assign main_basesoc_ethcore_mac_crossbar_sink_last = main_basesoc_ethcore_mac_depacketizer_source_last;
assign main_basesoc_ethcore_mac_crossbar_sink_payload_ethernet_type = main_basesoc_ethcore_mac_depacketizer_source_payload_ethernet_type;
assign main_basesoc_ethcore_mac_crossbar_sink_payload_sender_mac = main_basesoc_ethcore_mac_depacketizer_source_payload_sender_mac;
assign main_basesoc_ethcore_mac_crossbar_sink_payload_target_mac = main_basesoc_ethcore_mac_depacketizer_source_payload_target_mac;
assign main_basesoc_ethcore_mac_crossbar_sink_payload_data = main_basesoc_ethcore_mac_depacketizer_source_payload_data;
assign main_basesoc_ethcore_mac_crossbar_sink_payload_last_be = main_basesoc_ethcore_mac_depacketizer_source_payload_last_be;
assign main_basesoc_ethcore_mac_crossbar_sink_payload_error = main_basesoc_ethcore_mac_depacketizer_source_payload_error;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_valid = main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_valid;
assign main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_ready = main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_ready;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_first = main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_first;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_last = main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_last;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_payload_data = main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_payload_data;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_payload_last_be = main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_payload_last_be;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_payload_error = main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_payload_error;
assign main_basesoc_ethcore_mac_core_tx_cdc_source_source_valid = main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_valid;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_ready = main_basesoc_ethcore_mac_core_tx_cdc_source_source_ready;
assign main_basesoc_ethcore_mac_core_tx_cdc_source_source_first = main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_first;
assign main_basesoc_ethcore_mac_core_tx_cdc_source_source_last = main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_last;
assign main_basesoc_ethcore_mac_core_tx_cdc_source_source_payload_data = main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_payload_data;
assign main_basesoc_ethcore_mac_core_tx_cdc_source_source_payload_last_be = main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_tx_cdc_source_source_payload_error = main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_payload_error;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_din = {main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_in_last, main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_in_first, main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_in_payload_error, main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_in_payload_last_be, main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_in_payload_data};
assign {main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_out_last, main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_out_first, main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_out_payload_error, main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_out_payload_last_be, main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_out_payload_data} = main_basesoc_ethcore_mac_core_tx_cdc_cdc_dout;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_ready = main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_writable;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_we = main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_valid;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_in_first = main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_first;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_in_last = main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_last;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_in_payload_data = main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_payload_data;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_in_payload_last_be = main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_payload_last_be;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_in_payload_error = main_basesoc_ethcore_mac_core_tx_cdc_cdc_sink_payload_error;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_valid = main_basesoc_ethcore_mac_core_tx_cdc_cdc_readable;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_first = main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_out_first;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_last = main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_out_last;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_payload_data = main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_out_payload_data;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_payload_last_be = main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_out_payload_last_be;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_payload_error = main_basesoc_ethcore_mac_core_tx_cdc_cdc_fifo_out_payload_error;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_re = main_basesoc_ethcore_mac_core_tx_cdc_cdc_source_ready;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_re = (main_basesoc_ethcore_mac_core_tx_cdc_cdc_re | (~main_basesoc_ethcore_mac_core_tx_cdc_cdc_readable));
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_ce = (main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_writable & main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_we);
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_ce = (main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_readable & main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_re);
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_writable = (((main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q[5] == main_basesoc_ethcore_mac_core_tx_cdc_cdc_consume_wdomain[5]) | (main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q[4] == main_basesoc_ethcore_mac_core_tx_cdc_cdc_consume_wdomain[4])) | (main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q[3:0] != main_basesoc_ethcore_mac_core_tx_cdc_cdc_consume_wdomain[3:0]));
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_readable = (main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q != main_basesoc_ethcore_mac_core_tx_cdc_cdc_produce_rdomain);
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_wrport_adr = main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_binary[4:0];
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_wrport_dat_w = main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_din;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_wrport_we = main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_ce;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_rdport_adr = main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_next_binary[4:0];
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_dout = main_basesoc_ethcore_mac_core_tx_cdc_cdc_rdport_dat_r;
always @(*) begin
    main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_next_binary <= 6'd0;
    if (main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_ce) begin
        main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_next_binary <= (main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_next_binary <= main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_binary;
    end
end
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_next = (main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_next_binary ^ main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_next_binary[5:1]);
always @(*) begin
    main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_next_binary <= 6'd0;
    if (main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_ce) begin
        main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_next_binary <= (main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_next_binary <= main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_binary;
    end
end
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_next = (main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_next_binary ^ main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_next_binary[5:1]);
assign main_basesoc_ethcore_mac_core_tx_padding_counter_done = (main_basesoc_ethcore_mac_core_tx_padding_counter >= 6'd59);
always @(*) begin
    builder_liteethmac_txdatapath_liteethmacpaddinginserter_next_state <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_padding_counter_liteethmac_clockdomainsrenamer0_next_value <= 16'd0;
    main_basesoc_ethcore_mac_core_tx_padding_counter_liteethmac_clockdomainsrenamer0_next_value_ce <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_padding_sink_ready <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_padding_source_first <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_padding_source_last <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_padding_source_payload_data <= 8'd0;
    main_basesoc_ethcore_mac_core_tx_padding_source_payload_error <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_padding_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_padding_source_valid <= 1'd0;
    builder_liteethmac_txdatapath_liteethmacpaddinginserter_next_state <= builder_liteethmac_txdatapath_liteethmacpaddinginserter_state;
    case (builder_liteethmac_txdatapath_liteethmacpaddinginserter_state)
        1'd1: begin
            main_basesoc_ethcore_mac_core_tx_padding_source_valid <= 1'd1;
            if (main_basesoc_ethcore_mac_core_tx_padding_counter_done) begin
                main_basesoc_ethcore_mac_core_tx_padding_source_payload_last_be <= 1'd1;
                main_basesoc_ethcore_mac_core_tx_padding_source_last <= 1'd1;
            end
            main_basesoc_ethcore_mac_core_tx_padding_source_payload_data <= 1'd0;
            if ((main_basesoc_ethcore_mac_core_tx_padding_source_valid & main_basesoc_ethcore_mac_core_tx_padding_source_ready)) begin
                main_basesoc_ethcore_mac_core_tx_padding_counter_liteethmac_clockdomainsrenamer0_next_value <= (main_basesoc_ethcore_mac_core_tx_padding_counter + 1'd1);
                main_basesoc_ethcore_mac_core_tx_padding_counter_liteethmac_clockdomainsrenamer0_next_value_ce <= 1'd1;
                if (main_basesoc_ethcore_mac_core_tx_padding_counter_done) begin
                    main_basesoc_ethcore_mac_core_tx_padding_counter_liteethmac_clockdomainsrenamer0_next_value <= 1'd0;
                    main_basesoc_ethcore_mac_core_tx_padding_counter_liteethmac_clockdomainsrenamer0_next_value_ce <= 1'd1;
                    builder_liteethmac_txdatapath_liteethmacpaddinginserter_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_ethcore_mac_core_tx_padding_source_valid <= main_basesoc_ethcore_mac_core_tx_padding_sink_valid;
            main_basesoc_ethcore_mac_core_tx_padding_sink_ready <= main_basesoc_ethcore_mac_core_tx_padding_source_ready;
            main_basesoc_ethcore_mac_core_tx_padding_source_first <= main_basesoc_ethcore_mac_core_tx_padding_sink_first;
            main_basesoc_ethcore_mac_core_tx_padding_source_last <= main_basesoc_ethcore_mac_core_tx_padding_sink_last;
            main_basesoc_ethcore_mac_core_tx_padding_source_payload_data <= main_basesoc_ethcore_mac_core_tx_padding_sink_payload_data;
            main_basesoc_ethcore_mac_core_tx_padding_source_payload_last_be <= main_basesoc_ethcore_mac_core_tx_padding_sink_payload_last_be;
            main_basesoc_ethcore_mac_core_tx_padding_source_payload_error <= main_basesoc_ethcore_mac_core_tx_padding_sink_payload_error;
            if ((main_basesoc_ethcore_mac_core_tx_padding_source_valid & main_basesoc_ethcore_mac_core_tx_padding_source_ready)) begin
                main_basesoc_ethcore_mac_core_tx_padding_counter_liteethmac_clockdomainsrenamer0_next_value <= (main_basesoc_ethcore_mac_core_tx_padding_counter + 1'd1);
                main_basesoc_ethcore_mac_core_tx_padding_counter_liteethmac_clockdomainsrenamer0_next_value_ce <= 1'd1;
                if (main_basesoc_ethcore_mac_core_tx_padding_sink_last) begin
                    if ((~main_basesoc_ethcore_mac_core_tx_padding_counter_done)) begin
                        main_basesoc_ethcore_mac_core_tx_padding_source_last <= 1'd0;
                        main_basesoc_ethcore_mac_core_tx_padding_source_payload_last_be <= 1'd0;
                        builder_liteethmac_txdatapath_liteethmacpaddinginserter_next_state <= 1'd1;
                    end else begin
                        if (((main_basesoc_ethcore_mac_core_tx_padding_counter == 6'd59) & (main_basesoc_ethcore_mac_core_tx_padding_sink_payload_last_be < 1'd1))) begin
                            main_basesoc_ethcore_mac_core_tx_padding_source_payload_last_be <= 1'd1;
                        end else begin
                            main_basesoc_ethcore_mac_core_tx_padding_counter_liteethmac_clockdomainsrenamer0_next_value <= 1'd0;
                            main_basesoc_ethcore_mac_core_tx_padding_counter_liteethmac_clockdomainsrenamer0_next_value_ce <= 1'd1;
                        end
                    end
                end
            end
        end
    endcase
end
assign main_basesoc_ethcore_mac_core_tx_crc_data0 = main_basesoc_ethcore_mac_core_tx_crc_sink_payload_data;
assign main_basesoc_ethcore_mac_core_tx_crc_be = main_basesoc_ethcore_mac_core_tx_crc_sink_payload_last_be;
assign main_basesoc_ethcore_mac_core_tx_crc_cnt_done = (main_basesoc_ethcore_mac_core_tx_crc_cnt == 1'd0);
assign main_basesoc_ethcore_mac_core_tx_crc_sink_valid = main_basesoc_ethcore_mac_core_tx_crc_source_source_valid;
assign main_basesoc_ethcore_mac_core_tx_crc_source_source_ready = main_basesoc_ethcore_mac_core_tx_crc_sink_ready;
assign main_basesoc_ethcore_mac_core_tx_crc_sink_first = main_basesoc_ethcore_mac_core_tx_crc_source_source_first;
assign main_basesoc_ethcore_mac_core_tx_crc_sink_last = main_basesoc_ethcore_mac_core_tx_crc_source_source_last;
assign main_basesoc_ethcore_mac_core_tx_crc_sink_payload_data = main_basesoc_ethcore_mac_core_tx_crc_source_source_payload_data;
assign main_basesoc_ethcore_mac_core_tx_crc_sink_payload_last_be = main_basesoc_ethcore_mac_core_tx_crc_source_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_tx_crc_sink_payload_error = main_basesoc_ethcore_mac_core_tx_crc_source_source_payload_error;
assign main_basesoc_ethcore_mac_core_tx_crc_data1 = main_basesoc_ethcore_mac_core_tx_crc_data0;
assign main_basesoc_ethcore_mac_core_tx_crc_crc_prev = main_basesoc_ethcore_mac_core_tx_crc_reg;
always @(*) begin
    main_basesoc_ethcore_mac_core_tx_crc_error <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_crc_value <= 32'd0;
    if (main_basesoc_ethcore_mac_core_tx_crc_be) begin
        main_basesoc_ethcore_mac_core_tx_crc_value <= ({main_basesoc_ethcore_mac_core_tx_crc_crc_next[0], main_basesoc_ethcore_mac_core_tx_crc_crc_next[1], main_basesoc_ethcore_mac_core_tx_crc_crc_next[2], main_basesoc_ethcore_mac_core_tx_crc_crc_next[3], main_basesoc_ethcore_mac_core_tx_crc_crc_next[4], main_basesoc_ethcore_mac_core_tx_crc_crc_next[5], main_basesoc_ethcore_mac_core_tx_crc_crc_next[6], main_basesoc_ethcore_mac_core_tx_crc_crc_next[7], main_basesoc_ethcore_mac_core_tx_crc_crc_next[8], main_basesoc_ethcore_mac_core_tx_crc_crc_next[9], main_basesoc_ethcore_mac_core_tx_crc_crc_next[10], main_basesoc_ethcore_mac_core_tx_crc_crc_next[11], main_basesoc_ethcore_mac_core_tx_crc_crc_next[12], main_basesoc_ethcore_mac_core_tx_crc_crc_next[13], main_basesoc_ethcore_mac_core_tx_crc_crc_next[14], main_basesoc_ethcore_mac_core_tx_crc_crc_next[15], main_basesoc_ethcore_mac_core_tx_crc_crc_next[16], main_basesoc_ethcore_mac_core_tx_crc_crc_next[17], main_basesoc_ethcore_mac_core_tx_crc_crc_next[18], main_basesoc_ethcore_mac_core_tx_crc_crc_next[19], main_basesoc_ethcore_mac_core_tx_crc_crc_next[20], main_basesoc_ethcore_mac_core_tx_crc_crc_next[21], main_basesoc_ethcore_mac_core_tx_crc_crc_next[22], main_basesoc_ethcore_mac_core_tx_crc_crc_next[23], main_basesoc_ethcore_mac_core_tx_crc_crc_next[24], main_basesoc_ethcore_mac_core_tx_crc_crc_next[25], main_basesoc_ethcore_mac_core_tx_crc_crc_next[26], main_basesoc_ethcore_mac_core_tx_crc_crc_next[27], main_basesoc_ethcore_mac_core_tx_crc_crc_next[28], main_basesoc_ethcore_mac_core_tx_crc_crc_next[29], main_basesoc_ethcore_mac_core_tx_crc_crc_next[30], main_basesoc_ethcore_mac_core_tx_crc_crc_next[31]} ^ 32'd4294967295);
        main_basesoc_ethcore_mac_core_tx_crc_error <= (main_basesoc_ethcore_mac_core_tx_crc_crc_next != 32'd3338984827);
    end
end
always @(*) begin
    main_basesoc_ethcore_mac_core_tx_crc_crc_next <= 32'd0;
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[0] <= (((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[24] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[7]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[1] <= (((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[25] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[6]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[7]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[2] <= (((((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[26] ^ main_basesoc_ethcore_mac_core_tx_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[6]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[7]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[3] <= (((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[27] ^ main_basesoc_ethcore_mac_core_tx_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[6]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[4] <= (((((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[28] ^ main_basesoc_ethcore_mac_core_tx_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[7]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[5] <= (((((((((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[29] ^ main_basesoc_ethcore_mac_core_tx_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[6]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[7]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[6] <= (((((((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[30] ^ main_basesoc_ethcore_mac_core_tx_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[6]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[7] <= (((((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[31] ^ main_basesoc_ethcore_mac_core_tx_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[7]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[8] <= ((((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[0] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[6]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[7]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[9] <= ((((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[1] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[6]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[10] <= ((((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[2] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[7]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[11] <= ((((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[3] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[6]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[7]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[12] <= ((((((((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[4] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[6]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[7]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[13] <= ((((((((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[5] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[6]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[14] <= ((((((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[6] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[5]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[15] <= ((((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[7] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[4]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[16] <= ((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[8] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[7]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[17] <= ((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[9] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[6]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[18] <= ((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[10] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[5]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[19] <= ((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[11] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[4]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[20] <= ((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[12] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[3]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[21] <= ((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[13] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[2]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[22] <= ((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[14] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[7]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[23] <= ((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[15] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[6]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[7]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[24] <= ((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[16] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[6]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[25] <= ((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[17] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[5]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[26] <= ((((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[18] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[7]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[27] <= ((((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[19] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[6]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[28] <= ((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[20] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[5]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[29] <= ((((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[21] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[4]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[30] <= ((((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[22] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[3]);
    main_basesoc_ethcore_mac_core_tx_crc_crc_next[31] <= ((main_basesoc_ethcore_mac_core_tx_crc_crc_prev[23] ^ main_basesoc_ethcore_mac_core_tx_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_tx_crc_data1[2]);
end
always @(*) begin
    builder_liteethmac_txdatapath_bufferizeendpoints_next_state <= 2'd0;
    main_basesoc_ethcore_mac_core_tx_crc_ce <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_crc_description_liteethmac_clockdomainsrenamer1_next_value0 <= 32'd0;
    main_basesoc_ethcore_mac_core_tx_crc_description_liteethmac_clockdomainsrenamer1_next_value_ce0 <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_crc_fsm0_liteethmac_clockdomainsrenamer1_next_value1 <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_crc_fsm0_liteethmac_clockdomainsrenamer1_next_value_ce1 <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_crc_is_ongoing0 <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_crc_is_ongoing1 <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_crc_reset <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_crc_sink_ready <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_crc_source_first <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_crc_source_last <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_crc_source_payload_data <= 8'd0;
    main_basesoc_ethcore_mac_core_tx_crc_source_payload_error <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_crc_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_crc_source_valid <= 1'd0;
    builder_liteethmac_txdatapath_bufferizeendpoints_next_state <= builder_liteethmac_txdatapath_bufferizeendpoints_state;
    case (builder_liteethmac_txdatapath_bufferizeendpoints_state)
        1'd1: begin
            main_basesoc_ethcore_mac_core_tx_crc_ce <= (main_basesoc_ethcore_mac_core_tx_crc_sink_valid & main_basesoc_ethcore_mac_core_tx_crc_source_ready);
            main_basesoc_ethcore_mac_core_tx_crc_source_valid <= main_basesoc_ethcore_mac_core_tx_crc_sink_valid;
            main_basesoc_ethcore_mac_core_tx_crc_sink_ready <= main_basesoc_ethcore_mac_core_tx_crc_source_ready;
            main_basesoc_ethcore_mac_core_tx_crc_source_first <= main_basesoc_ethcore_mac_core_tx_crc_sink_first;
            main_basesoc_ethcore_mac_core_tx_crc_source_last <= main_basesoc_ethcore_mac_core_tx_crc_sink_last;
            main_basesoc_ethcore_mac_core_tx_crc_source_payload_data <= main_basesoc_ethcore_mac_core_tx_crc_sink_payload_data;
            main_basesoc_ethcore_mac_core_tx_crc_source_payload_last_be <= main_basesoc_ethcore_mac_core_tx_crc_sink_payload_last_be;
            main_basesoc_ethcore_mac_core_tx_crc_source_payload_error <= main_basesoc_ethcore_mac_core_tx_crc_sink_payload_error;
            main_basesoc_ethcore_mac_core_tx_crc_source_last <= 1'd0;
            main_basesoc_ethcore_mac_core_tx_crc_source_payload_last_be <= 1'd0;
            if (main_basesoc_ethcore_mac_core_tx_crc_sink_last) begin
                if (main_basesoc_ethcore_mac_core_tx_crc_sink_payload_last_be) begin
                    main_basesoc_ethcore_mac_core_tx_crc_source_payload_data <= main_basesoc_ethcore_mac_core_tx_crc_sink_payload_data;
                end
                if ((1'd0 & (main_basesoc_ethcore_mac_core_tx_crc_sink_payload_last_be <= 4'd15))) begin
                    main_basesoc_ethcore_mac_core_tx_crc_source_last <= 1'd1;
                    main_basesoc_ethcore_mac_core_tx_crc_source_payload_last_be <= (main_basesoc_ethcore_mac_core_tx_crc_sink_payload_last_be <<< -3'd3);
                end
            end
            if (((main_basesoc_ethcore_mac_core_tx_crc_sink_valid & main_basesoc_ethcore_mac_core_tx_crc_sink_last) & main_basesoc_ethcore_mac_core_tx_crc_source_ready)) begin
                if ((1'd0 & (main_basesoc_ethcore_mac_core_tx_crc_sink_payload_last_be <= 4'd15))) begin
                    builder_liteethmac_txdatapath_bufferizeendpoints_next_state <= 1'd0;
                end else begin
                    main_basesoc_ethcore_mac_core_tx_crc_description_liteethmac_clockdomainsrenamer1_next_value0 <= main_basesoc_ethcore_mac_core_tx_crc_value;
                    main_basesoc_ethcore_mac_core_tx_crc_description_liteethmac_clockdomainsrenamer1_next_value_ce0 <= 1'd1;
                    if (1'd0) begin
                        main_basesoc_ethcore_mac_core_tx_crc_fsm0_liteethmac_clockdomainsrenamer1_next_value1 <= (main_basesoc_ethcore_mac_core_tx_crc_sink_payload_last_be >>> 3'd4);
                        main_basesoc_ethcore_mac_core_tx_crc_fsm0_liteethmac_clockdomainsrenamer1_next_value_ce1 <= 1'd1;
                    end else begin
                        main_basesoc_ethcore_mac_core_tx_crc_fsm0_liteethmac_clockdomainsrenamer1_next_value1 <= main_basesoc_ethcore_mac_core_tx_crc_sink_payload_last_be;
                        main_basesoc_ethcore_mac_core_tx_crc_fsm0_liteethmac_clockdomainsrenamer1_next_value_ce1 <= 1'd1;
                    end
                    builder_liteethmac_txdatapath_bufferizeendpoints_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            main_basesoc_ethcore_mac_core_tx_crc_source_valid <= 1'd1;
            case (main_basesoc_ethcore_mac_core_tx_crc_cnt)
                1'd0: begin
                    main_basesoc_ethcore_mac_core_tx_crc_source_payload_data <= main_basesoc_ethcore_mac_core_tx_crc_description[31:24];
                end
                1'd1: begin
                    main_basesoc_ethcore_mac_core_tx_crc_source_payload_data <= main_basesoc_ethcore_mac_core_tx_crc_description[23:16];
                end
                2'd2: begin
                    main_basesoc_ethcore_mac_core_tx_crc_source_payload_data <= main_basesoc_ethcore_mac_core_tx_crc_description[15:8];
                end
                default: begin
                    main_basesoc_ethcore_mac_core_tx_crc_source_payload_data <= main_basesoc_ethcore_mac_core_tx_crc_description[7:0];
                end
            endcase
            if (main_basesoc_ethcore_mac_core_tx_crc_cnt_done) begin
                main_basesoc_ethcore_mac_core_tx_crc_source_last <= 1'd1;
                if (main_basesoc_ethcore_mac_core_tx_crc_source_ready) begin
                    builder_liteethmac_txdatapath_bufferizeendpoints_next_state <= 1'd0;
                end
            end
            main_basesoc_ethcore_mac_core_tx_crc_is_ongoing1 <= 1'd1;
        end
        default: begin
            main_basesoc_ethcore_mac_core_tx_crc_reset <= 1'd1;
            main_basesoc_ethcore_mac_core_tx_crc_sink_ready <= 1'd1;
            if (main_basesoc_ethcore_mac_core_tx_crc_sink_valid) begin
                main_basesoc_ethcore_mac_core_tx_crc_sink_ready <= 1'd0;
                builder_liteethmac_txdatapath_bufferizeendpoints_next_state <= 1'd1;
            end
            main_basesoc_ethcore_mac_core_tx_crc_is_ongoing0 <= 1'd1;
        end
    endcase
end
assign main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_ready = ((~main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_valid) | main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_ready);
assign main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_valid = main_basesoc_ethcore_mac_core_tx_crc_sink_sink_valid;
assign main_basesoc_ethcore_mac_core_tx_crc_sink_sink_ready = main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_ready;
assign main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_first = main_basesoc_ethcore_mac_core_tx_crc_sink_sink_first;
assign main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_last = main_basesoc_ethcore_mac_core_tx_crc_sink_sink_last;
assign main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_payload_data = main_basesoc_ethcore_mac_core_tx_crc_sink_sink_payload_data;
assign main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_payload_last_be = main_basesoc_ethcore_mac_core_tx_crc_sink_sink_payload_last_be;
assign main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_payload_error = main_basesoc_ethcore_mac_core_tx_crc_sink_sink_payload_error;
assign main_basesoc_ethcore_mac_core_tx_crc_source_source_valid = main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_valid;
assign main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_ready = main_basesoc_ethcore_mac_core_tx_crc_source_source_ready;
assign main_basesoc_ethcore_mac_core_tx_crc_source_source_first = main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_first;
assign main_basesoc_ethcore_mac_core_tx_crc_source_source_last = main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_last;
assign main_basesoc_ethcore_mac_core_tx_crc_source_source_payload_data = main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_payload_data;
assign main_basesoc_ethcore_mac_core_tx_crc_source_source_payload_last_be = main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_tx_crc_source_source_payload_error = main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_payload_error;
assign main_basesoc_ethcore_mac_core_tx_preamble_source_payload_last_be = main_basesoc_ethcore_mac_core_tx_preamble_sink_payload_last_be;
always @(*) begin
    builder_liteethmac_txdatapath_liteethmacpreambleinserter_next_state <= 2'd0;
    main_basesoc_ethcore_mac_core_tx_preamble_count_liteethmac_clockdomainsrenamer2_next_value <= 3'd0;
    main_basesoc_ethcore_mac_core_tx_preamble_count_liteethmac_clockdomainsrenamer2_next_value_ce <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_preamble_sink_ready <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_preamble_source_first <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_preamble_source_last <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_preamble_source_payload_data <= 8'd0;
    main_basesoc_ethcore_mac_core_tx_preamble_source_payload_error <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_preamble_source_valid <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_preamble_source_payload_data <= main_basesoc_ethcore_mac_core_tx_preamble_sink_payload_data;
    builder_liteethmac_txdatapath_liteethmacpreambleinserter_next_state <= builder_liteethmac_txdatapath_liteethmacpreambleinserter_state;
    case (builder_liteethmac_txdatapath_liteethmacpreambleinserter_state)
        1'd1: begin
            main_basesoc_ethcore_mac_core_tx_preamble_source_valid <= 1'd1;
            case (main_basesoc_ethcore_mac_core_tx_preamble_count)
                1'd0: begin
                    main_basesoc_ethcore_mac_core_tx_preamble_source_payload_data <= main_basesoc_ethcore_mac_core_tx_preamble_preamble[7:0];
                end
                1'd1: begin
                    main_basesoc_ethcore_mac_core_tx_preamble_source_payload_data <= main_basesoc_ethcore_mac_core_tx_preamble_preamble[15:8];
                end
                2'd2: begin
                    main_basesoc_ethcore_mac_core_tx_preamble_source_payload_data <= main_basesoc_ethcore_mac_core_tx_preamble_preamble[23:16];
                end
                2'd3: begin
                    main_basesoc_ethcore_mac_core_tx_preamble_source_payload_data <= main_basesoc_ethcore_mac_core_tx_preamble_preamble[31:24];
                end
                3'd4: begin
                    main_basesoc_ethcore_mac_core_tx_preamble_source_payload_data <= main_basesoc_ethcore_mac_core_tx_preamble_preamble[39:32];
                end
                3'd5: begin
                    main_basesoc_ethcore_mac_core_tx_preamble_source_payload_data <= main_basesoc_ethcore_mac_core_tx_preamble_preamble[47:40];
                end
                3'd6: begin
                    main_basesoc_ethcore_mac_core_tx_preamble_source_payload_data <= main_basesoc_ethcore_mac_core_tx_preamble_preamble[55:48];
                end
                default: begin
                    main_basesoc_ethcore_mac_core_tx_preamble_source_payload_data <= main_basesoc_ethcore_mac_core_tx_preamble_preamble[63:56];
                end
            endcase
            if (main_basesoc_ethcore_mac_core_tx_preamble_source_ready) begin
                if ((main_basesoc_ethcore_mac_core_tx_preamble_count == 3'd7)) begin
                    builder_liteethmac_txdatapath_liteethmacpreambleinserter_next_state <= 2'd2;
                end else begin
                    main_basesoc_ethcore_mac_core_tx_preamble_count_liteethmac_clockdomainsrenamer2_next_value <= (main_basesoc_ethcore_mac_core_tx_preamble_count + 1'd1);
                    main_basesoc_ethcore_mac_core_tx_preamble_count_liteethmac_clockdomainsrenamer2_next_value_ce <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_ethcore_mac_core_tx_preamble_source_valid <= main_basesoc_ethcore_mac_core_tx_preamble_sink_valid;
            main_basesoc_ethcore_mac_core_tx_preamble_sink_ready <= main_basesoc_ethcore_mac_core_tx_preamble_source_ready;
            main_basesoc_ethcore_mac_core_tx_preamble_source_first <= main_basesoc_ethcore_mac_core_tx_preamble_sink_first;
            main_basesoc_ethcore_mac_core_tx_preamble_source_last <= main_basesoc_ethcore_mac_core_tx_preamble_sink_last;
            main_basesoc_ethcore_mac_core_tx_preamble_source_payload_error <= main_basesoc_ethcore_mac_core_tx_preamble_sink_payload_error;
            if (((main_basesoc_ethcore_mac_core_tx_preamble_sink_valid & main_basesoc_ethcore_mac_core_tx_preamble_sink_last) & main_basesoc_ethcore_mac_core_tx_preamble_source_ready)) begin
                builder_liteethmac_txdatapath_liteethmacpreambleinserter_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_ethcore_mac_core_tx_preamble_sink_ready <= 1'd1;
            main_basesoc_ethcore_mac_core_tx_preamble_count_liteethmac_clockdomainsrenamer2_next_value <= 1'd0;
            main_basesoc_ethcore_mac_core_tx_preamble_count_liteethmac_clockdomainsrenamer2_next_value_ce <= 1'd1;
            if (main_basesoc_ethcore_mac_core_tx_preamble_sink_valid) begin
                main_basesoc_ethcore_mac_core_tx_preamble_sink_ready <= 1'd0;
                builder_liteethmac_txdatapath_liteethmacpreambleinserter_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_liteethmac_txdatapath_liteethmacgap_next_state <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_gap_counter_liteethmac_clockdomainsrenamer3_next_value <= 4'd0;
    main_basesoc_ethcore_mac_core_tx_gap_counter_liteethmac_clockdomainsrenamer3_next_value_ce <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_gap_sink_ready <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_gap_source_first <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_gap_source_last <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_gap_source_payload_data <= 8'd0;
    main_basesoc_ethcore_mac_core_tx_gap_source_payload_error <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_gap_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_mac_core_tx_gap_source_valid <= 1'd0;
    builder_liteethmac_txdatapath_liteethmacgap_next_state <= builder_liteethmac_txdatapath_liteethmacgap_state;
    case (builder_liteethmac_txdatapath_liteethmacgap_state)
        1'd1: begin
            main_basesoc_ethcore_mac_core_tx_gap_counter_liteethmac_clockdomainsrenamer3_next_value <= (main_basesoc_ethcore_mac_core_tx_gap_counter + 1'd1);
            main_basesoc_ethcore_mac_core_tx_gap_counter_liteethmac_clockdomainsrenamer3_next_value_ce <= 1'd1;
            if ((main_basesoc_ethcore_mac_core_tx_gap_counter == 4'd11)) begin
                builder_liteethmac_txdatapath_liteethmacgap_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_ethcore_mac_core_tx_gap_counter_liteethmac_clockdomainsrenamer3_next_value <= 1'd0;
            main_basesoc_ethcore_mac_core_tx_gap_counter_liteethmac_clockdomainsrenamer3_next_value_ce <= 1'd1;
            main_basesoc_ethcore_mac_core_tx_gap_source_valid <= main_basesoc_ethcore_mac_core_tx_gap_sink_valid;
            main_basesoc_ethcore_mac_core_tx_gap_sink_ready <= main_basesoc_ethcore_mac_core_tx_gap_source_ready;
            main_basesoc_ethcore_mac_core_tx_gap_source_first <= main_basesoc_ethcore_mac_core_tx_gap_sink_first;
            main_basesoc_ethcore_mac_core_tx_gap_source_last <= main_basesoc_ethcore_mac_core_tx_gap_sink_last;
            main_basesoc_ethcore_mac_core_tx_gap_source_payload_data <= main_basesoc_ethcore_mac_core_tx_gap_sink_payload_data;
            main_basesoc_ethcore_mac_core_tx_gap_source_payload_last_be <= main_basesoc_ethcore_mac_core_tx_gap_sink_payload_last_be;
            main_basesoc_ethcore_mac_core_tx_gap_source_payload_error <= main_basesoc_ethcore_mac_core_tx_gap_sink_payload_error;
            if (((main_basesoc_ethcore_mac_core_tx_gap_sink_valid & main_basesoc_ethcore_mac_core_tx_gap_sink_last) & main_basesoc_ethcore_mac_core_tx_gap_sink_ready)) begin
                builder_liteethmac_txdatapath_liteethmacgap_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_valid = main_basesoc_ethcore_mac_core_sink_valid;
assign main_basesoc_ethcore_mac_core_sink_ready = main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_ready;
assign main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_first = main_basesoc_ethcore_mac_core_sink_first;
assign main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_last = main_basesoc_ethcore_mac_core_sink_last;
assign main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_payload_data = main_basesoc_ethcore_mac_core_sink_payload_data;
assign main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_payload_last_be = main_basesoc_ethcore_mac_core_sink_payload_last_be;
assign main_basesoc_ethcore_mac_core_tx_cdc_sink_sink_payload_error = main_basesoc_ethcore_mac_core_sink_payload_error;
assign main_basesoc_ethcore_mac_core_tx_padding_sink_valid = main_basesoc_ethcore_mac_core_tx_cdc_source_source_valid;
assign main_basesoc_ethcore_mac_core_tx_cdc_source_source_ready = main_basesoc_ethcore_mac_core_tx_padding_sink_ready;
assign main_basesoc_ethcore_mac_core_tx_padding_sink_first = main_basesoc_ethcore_mac_core_tx_cdc_source_source_first;
assign main_basesoc_ethcore_mac_core_tx_padding_sink_last = main_basesoc_ethcore_mac_core_tx_cdc_source_source_last;
assign main_basesoc_ethcore_mac_core_tx_padding_sink_payload_data = main_basesoc_ethcore_mac_core_tx_cdc_source_source_payload_data;
assign main_basesoc_ethcore_mac_core_tx_padding_sink_payload_last_be = main_basesoc_ethcore_mac_core_tx_cdc_source_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_tx_padding_sink_payload_error = main_basesoc_ethcore_mac_core_tx_cdc_source_source_payload_error;
assign main_basesoc_ethcore_mac_core_tx_crc_sink_sink_valid = main_basesoc_ethcore_mac_core_tx_padding_source_valid;
assign main_basesoc_ethcore_mac_core_tx_padding_source_ready = main_basesoc_ethcore_mac_core_tx_crc_sink_sink_ready;
assign main_basesoc_ethcore_mac_core_tx_crc_sink_sink_first = main_basesoc_ethcore_mac_core_tx_padding_source_first;
assign main_basesoc_ethcore_mac_core_tx_crc_sink_sink_last = main_basesoc_ethcore_mac_core_tx_padding_source_last;
assign main_basesoc_ethcore_mac_core_tx_crc_sink_sink_payload_data = main_basesoc_ethcore_mac_core_tx_padding_source_payload_data;
assign main_basesoc_ethcore_mac_core_tx_crc_sink_sink_payload_last_be = main_basesoc_ethcore_mac_core_tx_padding_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_tx_crc_sink_sink_payload_error = main_basesoc_ethcore_mac_core_tx_padding_source_payload_error;
assign main_basesoc_ethcore_mac_core_tx_preamble_sink_valid = main_basesoc_ethcore_mac_core_tx_crc_source_valid;
assign main_basesoc_ethcore_mac_core_tx_crc_source_ready = main_basesoc_ethcore_mac_core_tx_preamble_sink_ready;
assign main_basesoc_ethcore_mac_core_tx_preamble_sink_first = main_basesoc_ethcore_mac_core_tx_crc_source_first;
assign main_basesoc_ethcore_mac_core_tx_preamble_sink_last = main_basesoc_ethcore_mac_core_tx_crc_source_last;
assign main_basesoc_ethcore_mac_core_tx_preamble_sink_payload_data = main_basesoc_ethcore_mac_core_tx_crc_source_payload_data;
assign main_basesoc_ethcore_mac_core_tx_preamble_sink_payload_last_be = main_basesoc_ethcore_mac_core_tx_crc_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_tx_preamble_sink_payload_error = main_basesoc_ethcore_mac_core_tx_crc_source_payload_error;
assign main_basesoc_ethcore_mac_core_tx_gap_sink_valid = main_basesoc_ethcore_mac_core_tx_preamble_source_valid;
assign main_basesoc_ethcore_mac_core_tx_preamble_source_ready = main_basesoc_ethcore_mac_core_tx_gap_sink_ready;
assign main_basesoc_ethcore_mac_core_tx_gap_sink_first = main_basesoc_ethcore_mac_core_tx_preamble_source_first;
assign main_basesoc_ethcore_mac_core_tx_gap_sink_last = main_basesoc_ethcore_mac_core_tx_preamble_source_last;
assign main_basesoc_ethcore_mac_core_tx_gap_sink_payload_data = main_basesoc_ethcore_mac_core_tx_preamble_source_payload_data;
assign main_basesoc_ethcore_mac_core_tx_gap_sink_payload_last_be = main_basesoc_ethcore_mac_core_tx_preamble_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_tx_gap_sink_payload_error = main_basesoc_ethcore_mac_core_tx_preamble_source_payload_error;
assign main_ethphy_sink_valid = main_basesoc_ethcore_mac_core_tx_gap_source_valid;
assign main_basesoc_ethcore_mac_core_tx_gap_source_ready = main_ethphy_sink_ready;
assign main_ethphy_sink_first = main_basesoc_ethcore_mac_core_tx_gap_source_first;
assign main_ethphy_sink_last = main_basesoc_ethcore_mac_core_tx_gap_source_last;
assign main_ethphy_sink_payload_data = main_basesoc_ethcore_mac_core_tx_gap_source_payload_data;
assign main_ethphy_sink_payload_last_be = main_basesoc_ethcore_mac_core_tx_gap_source_payload_last_be;
assign main_ethphy_sink_payload_error = main_basesoc_ethcore_mac_core_tx_gap_source_payload_error;
assign main_basesoc_ethcore_mac_core_pulsesynchronizer0_i = main_basesoc_ethcore_mac_core_rx_preamble_error;
assign main_basesoc_ethcore_mac_core_pulsesynchronizer1_i = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_error;
assign main_basesoc_ethcore_mac_core_rx_preamble_source_payload_data = main_basesoc_ethcore_mac_core_rx_preamble_sink_payload_data;
assign main_basesoc_ethcore_mac_core_rx_preamble_source_payload_last_be = main_basesoc_ethcore_mac_core_rx_preamble_sink_payload_last_be;
always @(*) begin
    builder_liteethmac_rxdatapath_liteethmacpreamblechecker_next_state <= 1'd0;
    main_basesoc_ethcore_mac_core_rx_preamble_error <= 1'd0;
    main_basesoc_ethcore_mac_core_rx_preamble_sink_ready <= 1'd0;
    main_basesoc_ethcore_mac_core_rx_preamble_source_first <= 1'd0;
    main_basesoc_ethcore_mac_core_rx_preamble_source_last <= 1'd0;
    main_basesoc_ethcore_mac_core_rx_preamble_source_payload_error <= 1'd0;
    main_basesoc_ethcore_mac_core_rx_preamble_source_valid <= 1'd0;
    builder_liteethmac_rxdatapath_liteethmacpreamblechecker_next_state <= builder_liteethmac_rxdatapath_liteethmacpreamblechecker_state;
    case (builder_liteethmac_rxdatapath_liteethmacpreamblechecker_state)
        1'd1: begin
            main_basesoc_ethcore_mac_core_rx_preamble_source_valid <= main_basesoc_ethcore_mac_core_rx_preamble_sink_valid;
            main_basesoc_ethcore_mac_core_rx_preamble_sink_ready <= main_basesoc_ethcore_mac_core_rx_preamble_source_ready;
            main_basesoc_ethcore_mac_core_rx_preamble_source_first <= main_basesoc_ethcore_mac_core_rx_preamble_sink_first;
            main_basesoc_ethcore_mac_core_rx_preamble_source_last <= main_basesoc_ethcore_mac_core_rx_preamble_sink_last;
            main_basesoc_ethcore_mac_core_rx_preamble_source_payload_error <= main_basesoc_ethcore_mac_core_rx_preamble_sink_payload_error;
            if (((main_basesoc_ethcore_mac_core_rx_preamble_source_valid & main_basesoc_ethcore_mac_core_rx_preamble_source_last) & main_basesoc_ethcore_mac_core_rx_preamble_source_ready)) begin
                builder_liteethmac_rxdatapath_liteethmacpreamblechecker_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_ethcore_mac_core_rx_preamble_sink_ready <= 1'd1;
            if (((main_basesoc_ethcore_mac_core_rx_preamble_sink_valid & (~main_basesoc_ethcore_mac_core_rx_preamble_sink_last)) & (main_basesoc_ethcore_mac_core_rx_preamble_sink_payload_data == main_basesoc_ethcore_mac_core_rx_preamble_preamble[63:56]))) begin
                builder_liteethmac_rxdatapath_liteethmacpreamblechecker_next_state <= 1'd1;
            end
            if ((main_basesoc_ethcore_mac_core_rx_preamble_sink_valid & main_basesoc_ethcore_mac_core_rx_preamble_sink_last)) begin
                main_basesoc_ethcore_mac_core_rx_preamble_error <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_ethcore_mac_core_pulsesynchronizer0_o = (main_basesoc_ethcore_mac_core_pulsesynchronizer0_toggle_o ^ main_basesoc_ethcore_mac_core_pulsesynchronizer0_toggle_o_r);
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_full = (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_level == 3'd4);
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_in = (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_valid & ((~main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_full) | main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_out));
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_out = (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_valid & main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_ready);
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_first = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_first;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_last = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_last;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_payload_data = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_data;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_payload_last_be = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_last_be;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_payload_error = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_error;
always @(*) begin
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_valid <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_valid <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_valid;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_valid <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_in;
end
always @(*) begin
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_ready <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_ready <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_ready;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_ready <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_in;
end
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data0 = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_data;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_be = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_last_be;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_first = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_first;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_payload_data = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_payload_data;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_valid = main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_valid;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_ready = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_ready;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_first = main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_first;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_last = main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_last;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_data = main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_payload_data;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_last_be = main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_error = main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_payload_error;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1 = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data0;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_reg;
always @(*) begin
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error0 <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_value <= 32'd0;
    if (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_be) begin
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_value <= ({main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[0], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[1], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[2], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[3], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[4], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[5], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[6], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[7], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[8], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[9], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[10], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[11], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[12], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[13], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[14], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[15], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[16], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[17], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[18], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[19], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[20], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[21], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[22], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[23], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[24], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[25], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[26], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[27], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[28], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[29], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[30], main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[31]} ^ 32'd4294967295);
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error0 <= (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next != 32'd3338984827);
    end
end
always @(*) begin
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next <= 32'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[0] <= (((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[24] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[1] <= (((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[25] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[6]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[2] <= (((((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[26] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[6]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[3] <= (((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[27] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[6]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[4] <= (((((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[28] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[5] <= (((((((((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[29] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[6]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[6] <= (((((((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[30] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[6]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[7] <= (((((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[31] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[8] <= ((((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[0] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[6]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[9] <= ((((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[1] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[6]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[10] <= ((((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[2] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[11] <= ((((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[3] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[6]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[12] <= ((((((((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[4] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[6]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[13] <= ((((((((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[5] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[6]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[14] <= ((((((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[6] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[5]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[15] <= ((((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[7] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[4]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[16] <= ((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[8] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[17] <= ((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[9] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[6]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[18] <= ((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[10] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[5]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[19] <= ((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[11] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[4]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[20] <= ((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[12] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[3]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[21] <= ((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[13] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[2]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[22] <= ((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[14] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[23] <= ((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[15] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[6]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[24] <= ((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[16] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[6]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[25] <= ((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[17] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[5]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[26] <= ((((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[18] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[27] <= ((((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[19] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[6]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[28] <= ((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[20] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[5]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[29] <= ((((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[21] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[4]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[30] <= ((((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[22] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[3]);
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next[31] <= ((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[23] ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_data1[2]);
end
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_din = {main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_in_last, main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_in_first, main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_error, main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_last_be, main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_data};
assign {main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_out_last, main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_out_first, main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_error, main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_last_be, main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_data} = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_dout;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_ready = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_writable;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_we = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_valid;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_in_first = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_first;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_in_last = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_last;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_data = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_payload_data;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_last_be = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_payload_last_be;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_error = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_sink_payload_error;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_valid = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_readable;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_first = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_out_first;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_last = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_out_last;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_payload_data = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_data;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_payload_last_be = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_last_be;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_payload_error = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_error;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_re = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_ready;
always @(*) begin
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_wrport_adr <= 3'd0;
    if (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_replace) begin
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_wrport_adr <= (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_produce - 1'd1);
    end else begin
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_wrport_adr <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_produce;
    end
end
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_wrport_dat_w = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_din;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_wrport_we = (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_we & (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_writable | main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_replace));
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_do_read = (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_readable & main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_re);
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_rdport_adr = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_consume;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_dout = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_rdport_dat_r;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_writable = (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_level != 3'd5);
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_readable = (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_level != 1'd0);
always @(*) begin
    builder_liteethmac_rxdatapath_bufferizeendpoints_next_state <= 2'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_ce <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error1_liteethmac_next_value1 <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error1_liteethmac_next_value_ce1 <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_reset <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_error <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_reset <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_last_be_liteethmac_next_value0 <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_last_be_liteethmac_next_value_ce0 <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_last <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_payload_error <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_valid <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_ready <= 1'd0;
    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_payload_error <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_payload_error;
    builder_liteethmac_rxdatapath_bufferizeendpoints_next_state <= builder_liteethmac_rxdatapath_bufferizeendpoints_state;
    case (builder_liteethmac_rxdatapath_bufferizeendpoints_state)
        1'd1: begin
            if ((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_valid & main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_ready)) begin
                main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_ce <= 1'd1;
                builder_liteethmac_rxdatapath_bufferizeendpoints_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_ready <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_out;
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_valid <= (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_valid & main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_full);
            if (1'd1) begin
                main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_last <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_last;
                main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_payload_last_be <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_last_be;
            end else begin
                if ((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_last_be & 4'd15)) begin
                    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_last <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_last;
                    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_payload_last_be <= (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_last_be <<< -3'd3);
                end else begin
                    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_last_be_liteethmac_next_value0 <= (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_last_be >>> 3'd4);
                    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_last_be_liteethmac_next_value_ce0 <= 1'd1;
                    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error1_liteethmac_next_value1 <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error0;
                    main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error1_liteethmac_next_value_ce1 <= 1'd1;
                end
            end
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_payload_error <= (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_error | {1{(main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error0 & main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_last)}});
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_error <= ((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_valid & main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_last) & main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error0);
            if ((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_valid & main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_ready)) begin
                main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_ce <= 1'd1;
                if ((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_last & (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_payload_last_be > 4'd15))) begin
                    builder_liteethmac_rxdatapath_bufferizeendpoints_next_state <= 2'd3;
                end else begin
                    if (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_sink_sink_last) begin
                        builder_liteethmac_rxdatapath_bufferizeendpoints_next_state <= 1'd0;
                    end
                end
            end
        end
        2'd3: begin
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_valid <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_valid;
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_ready <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_ready;
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_last <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_last;
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_payload_error <= (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_source_payload_error | {1{main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error1}});
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_payload_last_be <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_last_be;
            if ((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_valid & main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_ready)) begin
                builder_liteethmac_rxdatapath_bufferizeendpoints_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_reset <= 1'd1;
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_reset <= 1'd1;
            builder_liteethmac_rxdatapath_bufferizeendpoints_next_state <= 1'd1;
        end
    endcase
end
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_ready = ((~main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_valid) | main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_ready);
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_valid = main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_valid;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_ready = main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_ready;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_first = main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_first;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_last = main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_last;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_payload_data = main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_payload_data;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_payload_last_be = main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_payload_last_be;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_payload_error = main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_payload_error;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_valid = main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_valid;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_ready = main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_ready;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_first = main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_first;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_last = main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_last;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_payload_data = main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_payload_data;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_payload_last_be = main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_source_source_payload_error = main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_payload_error;
assign main_basesoc_ethcore_mac_core_pulsesynchronizer1_o = (main_basesoc_ethcore_mac_core_pulsesynchronizer1_toggle_o ^ main_basesoc_ethcore_mac_core_pulsesynchronizer1_toggle_o_r);
assign main_basesoc_ethcore_mac_core_rx_padding_source_valid = main_basesoc_ethcore_mac_core_rx_padding_sink_valid;
assign main_basesoc_ethcore_mac_core_rx_padding_sink_ready = main_basesoc_ethcore_mac_core_rx_padding_source_ready;
assign main_basesoc_ethcore_mac_core_rx_padding_source_first = main_basesoc_ethcore_mac_core_rx_padding_sink_first;
assign main_basesoc_ethcore_mac_core_rx_padding_source_last = main_basesoc_ethcore_mac_core_rx_padding_sink_last;
assign main_basesoc_ethcore_mac_core_rx_padding_source_payload_data = main_basesoc_ethcore_mac_core_rx_padding_sink_payload_data;
assign main_basesoc_ethcore_mac_core_rx_padding_source_payload_last_be = main_basesoc_ethcore_mac_core_rx_padding_sink_payload_last_be;
assign main_basesoc_ethcore_mac_core_rx_padding_source_payload_error = main_basesoc_ethcore_mac_core_rx_padding_sink_payload_error;
assign main_basesoc_ethcore_mac_core_cdc_sink_valid = main_basesoc_ethcore_mac_core_sink_sink_valid;
assign main_basesoc_ethcore_mac_core_sink_sink_ready = main_basesoc_ethcore_mac_core_cdc_sink_ready;
assign main_basesoc_ethcore_mac_core_cdc_sink_first = main_basesoc_ethcore_mac_core_sink_sink_first;
assign main_basesoc_ethcore_mac_core_cdc_sink_last = main_basesoc_ethcore_mac_core_sink_sink_last;
assign main_basesoc_ethcore_mac_core_cdc_sink_payload_data = main_basesoc_ethcore_mac_core_sink_sink_payload_data;
assign main_basesoc_ethcore_mac_core_cdc_sink_payload_last_be = main_basesoc_ethcore_mac_core_sink_sink_payload_last_be;
assign main_basesoc_ethcore_mac_core_cdc_sink_payload_error = main_basesoc_ethcore_mac_core_sink_sink_payload_error;
assign main_basesoc_ethcore_mac_core_source_source_valid = main_basesoc_ethcore_mac_core_cdc_source_valid;
assign main_basesoc_ethcore_mac_core_cdc_source_ready = main_basesoc_ethcore_mac_core_source_source_ready;
assign main_basesoc_ethcore_mac_core_source_source_first = main_basesoc_ethcore_mac_core_cdc_source_first;
assign main_basesoc_ethcore_mac_core_source_source_last = main_basesoc_ethcore_mac_core_cdc_source_last;
assign main_basesoc_ethcore_mac_core_source_source_payload_data = main_basesoc_ethcore_mac_core_cdc_source_payload_data;
assign main_basesoc_ethcore_mac_core_source_source_payload_last_be = main_basesoc_ethcore_mac_core_cdc_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_source_source_payload_error = main_basesoc_ethcore_mac_core_cdc_source_payload_error;
assign main_basesoc_ethcore_mac_core_cdc_asyncfifo_din = {main_basesoc_ethcore_mac_core_cdc_fifo_in_last, main_basesoc_ethcore_mac_core_cdc_fifo_in_first, main_basesoc_ethcore_mac_core_cdc_fifo_in_payload_error, main_basesoc_ethcore_mac_core_cdc_fifo_in_payload_last_be, main_basesoc_ethcore_mac_core_cdc_fifo_in_payload_data};
assign {main_basesoc_ethcore_mac_core_cdc_fifo_out_last, main_basesoc_ethcore_mac_core_cdc_fifo_out_first, main_basesoc_ethcore_mac_core_cdc_fifo_out_payload_error, main_basesoc_ethcore_mac_core_cdc_fifo_out_payload_last_be, main_basesoc_ethcore_mac_core_cdc_fifo_out_payload_data} = main_basesoc_ethcore_mac_core_cdc_dout;
assign main_basesoc_ethcore_mac_core_cdc_sink_ready = main_basesoc_ethcore_mac_core_cdc_asyncfifo_writable;
assign main_basesoc_ethcore_mac_core_cdc_asyncfifo_we = main_basesoc_ethcore_mac_core_cdc_sink_valid;
assign main_basesoc_ethcore_mac_core_cdc_fifo_in_first = main_basesoc_ethcore_mac_core_cdc_sink_first;
assign main_basesoc_ethcore_mac_core_cdc_fifo_in_last = main_basesoc_ethcore_mac_core_cdc_sink_last;
assign main_basesoc_ethcore_mac_core_cdc_fifo_in_payload_data = main_basesoc_ethcore_mac_core_cdc_sink_payload_data;
assign main_basesoc_ethcore_mac_core_cdc_fifo_in_payload_last_be = main_basesoc_ethcore_mac_core_cdc_sink_payload_last_be;
assign main_basesoc_ethcore_mac_core_cdc_fifo_in_payload_error = main_basesoc_ethcore_mac_core_cdc_sink_payload_error;
assign main_basesoc_ethcore_mac_core_cdc_source_valid = main_basesoc_ethcore_mac_core_cdc_readable;
assign main_basesoc_ethcore_mac_core_cdc_source_first = main_basesoc_ethcore_mac_core_cdc_fifo_out_first;
assign main_basesoc_ethcore_mac_core_cdc_source_last = main_basesoc_ethcore_mac_core_cdc_fifo_out_last;
assign main_basesoc_ethcore_mac_core_cdc_source_payload_data = main_basesoc_ethcore_mac_core_cdc_fifo_out_payload_data;
assign main_basesoc_ethcore_mac_core_cdc_source_payload_last_be = main_basesoc_ethcore_mac_core_cdc_fifo_out_payload_last_be;
assign main_basesoc_ethcore_mac_core_cdc_source_payload_error = main_basesoc_ethcore_mac_core_cdc_fifo_out_payload_error;
assign main_basesoc_ethcore_mac_core_cdc_re = main_basesoc_ethcore_mac_core_cdc_source_ready;
assign main_basesoc_ethcore_mac_core_cdc_asyncfifo_re = (main_basesoc_ethcore_mac_core_cdc_re | (~main_basesoc_ethcore_mac_core_cdc_readable));
assign main_basesoc_ethcore_mac_core_cdc_graycounter0_ce = (main_basesoc_ethcore_mac_core_cdc_asyncfifo_writable & main_basesoc_ethcore_mac_core_cdc_asyncfifo_we);
assign main_basesoc_ethcore_mac_core_cdc_graycounter1_ce = (main_basesoc_ethcore_mac_core_cdc_asyncfifo_readable & main_basesoc_ethcore_mac_core_cdc_asyncfifo_re);
assign main_basesoc_ethcore_mac_core_cdc_asyncfifo_writable = (((main_basesoc_ethcore_mac_core_cdc_graycounter0_q[5] == main_basesoc_ethcore_mac_core_cdc_consume_wdomain[5]) | (main_basesoc_ethcore_mac_core_cdc_graycounter0_q[4] == main_basesoc_ethcore_mac_core_cdc_consume_wdomain[4])) | (main_basesoc_ethcore_mac_core_cdc_graycounter0_q[3:0] != main_basesoc_ethcore_mac_core_cdc_consume_wdomain[3:0]));
assign main_basesoc_ethcore_mac_core_cdc_asyncfifo_readable = (main_basesoc_ethcore_mac_core_cdc_graycounter1_q != main_basesoc_ethcore_mac_core_cdc_produce_rdomain);
assign main_basesoc_ethcore_mac_core_cdc_wrport_adr = main_basesoc_ethcore_mac_core_cdc_graycounter0_q_binary[4:0];
assign main_basesoc_ethcore_mac_core_cdc_wrport_dat_w = main_basesoc_ethcore_mac_core_cdc_asyncfifo_din;
assign main_basesoc_ethcore_mac_core_cdc_wrport_we = main_basesoc_ethcore_mac_core_cdc_graycounter0_ce;
assign main_basesoc_ethcore_mac_core_cdc_rdport_adr = main_basesoc_ethcore_mac_core_cdc_graycounter1_q_next_binary[4:0];
assign main_basesoc_ethcore_mac_core_cdc_asyncfifo_dout = main_basesoc_ethcore_mac_core_cdc_rdport_dat_r;
always @(*) begin
    main_basesoc_ethcore_mac_core_cdc_graycounter0_q_next_binary <= 6'd0;
    if (main_basesoc_ethcore_mac_core_cdc_graycounter0_ce) begin
        main_basesoc_ethcore_mac_core_cdc_graycounter0_q_next_binary <= (main_basesoc_ethcore_mac_core_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        main_basesoc_ethcore_mac_core_cdc_graycounter0_q_next_binary <= main_basesoc_ethcore_mac_core_cdc_graycounter0_q_binary;
    end
end
assign main_basesoc_ethcore_mac_core_cdc_graycounter0_q_next = (main_basesoc_ethcore_mac_core_cdc_graycounter0_q_next_binary ^ main_basesoc_ethcore_mac_core_cdc_graycounter0_q_next_binary[5:1]);
always @(*) begin
    main_basesoc_ethcore_mac_core_cdc_graycounter1_q_next_binary <= 6'd0;
    if (main_basesoc_ethcore_mac_core_cdc_graycounter1_ce) begin
        main_basesoc_ethcore_mac_core_cdc_graycounter1_q_next_binary <= (main_basesoc_ethcore_mac_core_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        main_basesoc_ethcore_mac_core_cdc_graycounter1_q_next_binary <= main_basesoc_ethcore_mac_core_cdc_graycounter1_q_binary;
    end
end
assign main_basesoc_ethcore_mac_core_cdc_graycounter1_q_next = (main_basesoc_ethcore_mac_core_cdc_graycounter1_q_next_binary ^ main_basesoc_ethcore_mac_core_cdc_graycounter1_q_next_binary[5:1]);
assign main_basesoc_ethcore_mac_core_rx_preamble_sink_valid = main_ethphy_liteethphyrgmiirx_source_valid;
assign main_ethphy_liteethphyrgmiirx_source_ready = main_basesoc_ethcore_mac_core_rx_preamble_sink_ready;
assign main_basesoc_ethcore_mac_core_rx_preamble_sink_first = main_ethphy_liteethphyrgmiirx_source_first;
assign main_basesoc_ethcore_mac_core_rx_preamble_sink_last = main_ethphy_liteethphyrgmiirx_source_last;
assign main_basesoc_ethcore_mac_core_rx_preamble_sink_payload_data = main_ethphy_liteethphyrgmiirx_source_payload_data;
assign main_basesoc_ethcore_mac_core_rx_preamble_sink_payload_last_be = main_ethphy_liteethphyrgmiirx_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_rx_preamble_sink_payload_error = main_ethphy_liteethphyrgmiirx_source_payload_error;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_valid = main_basesoc_ethcore_mac_core_rx_preamble_source_valid;
assign main_basesoc_ethcore_mac_core_rx_preamble_source_ready = main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_ready;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_first = main_basesoc_ethcore_mac_core_rx_preamble_source_first;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_last = main_basesoc_ethcore_mac_core_rx_preamble_source_last;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_payload_data = main_basesoc_ethcore_mac_core_rx_preamble_source_payload_data;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_payload_last_be = main_basesoc_ethcore_mac_core_rx_preamble_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_bufferizeendpoints_sink_sink_payload_error = main_basesoc_ethcore_mac_core_rx_preamble_source_payload_error;
assign main_basesoc_ethcore_mac_core_rx_padding_sink_valid = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_valid;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_ready = main_basesoc_ethcore_mac_core_rx_padding_sink_ready;
assign main_basesoc_ethcore_mac_core_rx_padding_sink_first = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_first;
assign main_basesoc_ethcore_mac_core_rx_padding_sink_last = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_last;
assign main_basesoc_ethcore_mac_core_rx_padding_sink_payload_data = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_payload_data;
assign main_basesoc_ethcore_mac_core_rx_padding_sink_payload_last_be = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_rx_padding_sink_payload_error = main_basesoc_ethcore_mac_core_liteethmaccrc32checker_source_source_payload_error;
assign main_basesoc_ethcore_mac_core_sink_sink_valid = main_basesoc_ethcore_mac_core_rx_padding_source_valid;
assign main_basesoc_ethcore_mac_core_rx_padding_source_ready = main_basesoc_ethcore_mac_core_sink_sink_ready;
assign main_basesoc_ethcore_mac_core_sink_sink_first = main_basesoc_ethcore_mac_core_rx_padding_source_first;
assign main_basesoc_ethcore_mac_core_sink_sink_last = main_basesoc_ethcore_mac_core_rx_padding_source_last;
assign main_basesoc_ethcore_mac_core_sink_sink_payload_data = main_basesoc_ethcore_mac_core_rx_padding_source_payload_data;
assign main_basesoc_ethcore_mac_core_sink_sink_payload_last_be = main_basesoc_ethcore_mac_core_rx_padding_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_sink_sink_payload_error = main_basesoc_ethcore_mac_core_rx_padding_source_payload_error;
assign main_basesoc_ethcore_mac_core_source_valid = main_basesoc_ethcore_mac_core_source_source_valid;
assign main_basesoc_ethcore_mac_core_source_source_ready = main_basesoc_ethcore_mac_core_source_ready;
assign main_basesoc_ethcore_mac_core_source_first = main_basesoc_ethcore_mac_core_source_source_first;
assign main_basesoc_ethcore_mac_core_source_last = main_basesoc_ethcore_mac_core_source_source_last;
assign main_basesoc_ethcore_mac_core_source_payload_data = main_basesoc_ethcore_mac_core_source_source_payload_data;
assign main_basesoc_ethcore_mac_core_source_payload_last_be = main_basesoc_ethcore_mac_core_source_source_payload_last_be;
assign main_basesoc_ethcore_mac_core_source_payload_error = main_basesoc_ethcore_mac_core_source_source_payload_error;
always @(*) begin
    builder_liteethmac_sel0 <= 2'd0;
    if ((main_basesoc_ethcore_mac_crossbar_sink_payload_ethernet_type == 12'd2054)) begin
        builder_liteethmac_sel0 <= 1'd1;
    end
    if ((main_basesoc_ethcore_mac_crossbar_sink_payload_ethernet_type == 12'd2048)) begin
        builder_liteethmac_sel0 <= 2'd2;
    end
end
always @(*) begin
    builder_liteethmac_request <= 2'd0;
    builder_liteethmac_request[0] <= builder_liteethmac_status0_ongoing0;
    builder_liteethmac_request[1] <= builder_liteethmac_status1_ongoing0;
end
always @(*) begin
    main_basesoc_ethcore_arp_mac_port_sink_ready <= 1'd0;
    main_basesoc_ethcore_ip_mac_port_sink_ready <= 1'd0;
    main_basesoc_ethcore_mac_crossbar_source_first <= 1'd0;
    main_basesoc_ethcore_mac_crossbar_source_last <= 1'd0;
    main_basesoc_ethcore_mac_crossbar_source_payload_data <= 8'd0;
    main_basesoc_ethcore_mac_crossbar_source_payload_error <= 1'd0;
    main_basesoc_ethcore_mac_crossbar_source_payload_ethernet_type <= 16'd0;
    main_basesoc_ethcore_mac_crossbar_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_mac_crossbar_source_payload_sender_mac <= 48'd0;
    main_basesoc_ethcore_mac_crossbar_source_payload_target_mac <= 48'd0;
    main_basesoc_ethcore_mac_crossbar_source_valid <= 1'd0;
    case (builder_liteethmac_grant)
        1'd0: begin
            main_basesoc_ethcore_mac_crossbar_source_valid <= main_basesoc_ethcore_arp_mac_port_sink_valid;
            main_basesoc_ethcore_arp_mac_port_sink_ready <= main_basesoc_ethcore_mac_crossbar_source_ready;
            main_basesoc_ethcore_mac_crossbar_source_first <= main_basesoc_ethcore_arp_mac_port_sink_first;
            main_basesoc_ethcore_mac_crossbar_source_last <= main_basesoc_ethcore_arp_mac_port_sink_last;
            main_basesoc_ethcore_mac_crossbar_source_payload_ethernet_type <= main_basesoc_ethcore_arp_mac_port_sink_payload_ethernet_type;
            main_basesoc_ethcore_mac_crossbar_source_payload_sender_mac <= main_basesoc_ethcore_arp_mac_port_sink_payload_sender_mac;
            main_basesoc_ethcore_mac_crossbar_source_payload_target_mac <= main_basesoc_ethcore_arp_mac_port_sink_payload_target_mac;
            main_basesoc_ethcore_mac_crossbar_source_payload_data <= main_basesoc_ethcore_arp_mac_port_sink_payload_data;
            main_basesoc_ethcore_mac_crossbar_source_payload_last_be <= main_basesoc_ethcore_arp_mac_port_sink_payload_last_be;
            main_basesoc_ethcore_mac_crossbar_source_payload_error <= main_basesoc_ethcore_arp_mac_port_sink_payload_error;
        end
        1'd1: begin
            main_basesoc_ethcore_mac_crossbar_source_valid <= main_basesoc_ethcore_ip_mac_port_sink_valid;
            main_basesoc_ethcore_ip_mac_port_sink_ready <= main_basesoc_ethcore_mac_crossbar_source_ready;
            main_basesoc_ethcore_mac_crossbar_source_first <= main_basesoc_ethcore_ip_mac_port_sink_first;
            main_basesoc_ethcore_mac_crossbar_source_last <= main_basesoc_ethcore_ip_mac_port_sink_last;
            main_basesoc_ethcore_mac_crossbar_source_payload_ethernet_type <= main_basesoc_ethcore_ip_mac_port_sink_payload_ethernet_type;
            main_basesoc_ethcore_mac_crossbar_source_payload_sender_mac <= main_basesoc_ethcore_ip_mac_port_sink_payload_sender_mac;
            main_basesoc_ethcore_mac_crossbar_source_payload_target_mac <= main_basesoc_ethcore_ip_mac_port_sink_payload_target_mac;
            main_basesoc_ethcore_mac_crossbar_source_payload_data <= main_basesoc_ethcore_ip_mac_port_sink_payload_data;
            main_basesoc_ethcore_mac_crossbar_source_payload_last_be <= main_basesoc_ethcore_ip_mac_port_sink_payload_last_be;
            main_basesoc_ethcore_mac_crossbar_source_payload_error <= main_basesoc_ethcore_ip_mac_port_sink_payload_error;
        end
    endcase
end
assign builder_liteethmac_status0_last = ((main_basesoc_ethcore_arp_mac_port_sink_valid & main_basesoc_ethcore_arp_mac_port_sink_last) & main_basesoc_ethcore_arp_mac_port_sink_ready);
assign builder_liteethmac_status0_ongoing0 = ((main_basesoc_ethcore_arp_mac_port_sink_valid | builder_liteethmac_status0_ongoing1) & (~builder_liteethmac_status0_last));
assign builder_liteethmac_status1_last = ((main_basesoc_ethcore_ip_mac_port_sink_valid & main_basesoc_ethcore_ip_mac_port_sink_last) & main_basesoc_ethcore_ip_mac_port_sink_ready);
assign builder_liteethmac_status1_ongoing0 = ((main_basesoc_ethcore_ip_mac_port_sink_valid | builder_liteethmac_status1_ongoing1) & (~builder_liteethmac_status1_last));
always @(*) begin
    builder_liteethmac_sel1 <= 2'd0;
    if (builder_liteethmac_first) begin
        builder_liteethmac_sel1 <= builder_liteethmac_sel0;
    end else begin
        builder_liteethmac_sel1 <= builder_liteethmac_sel_ongoing;
    end
end
always @(*) begin
    main_basesoc_ethcore_arp_mac_port_source_first <= 1'd0;
    main_basesoc_ethcore_arp_mac_port_source_last <= 1'd0;
    main_basesoc_ethcore_arp_mac_port_source_payload_data <= 8'd0;
    main_basesoc_ethcore_arp_mac_port_source_payload_error <= 1'd0;
    main_basesoc_ethcore_arp_mac_port_source_payload_ethernet_type <= 16'd0;
    main_basesoc_ethcore_arp_mac_port_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_arp_mac_port_source_payload_sender_mac <= 48'd0;
    main_basesoc_ethcore_arp_mac_port_source_payload_target_mac <= 48'd0;
    main_basesoc_ethcore_arp_mac_port_source_valid <= 1'd0;
    main_basesoc_ethcore_ip_mac_port_source_first <= 1'd0;
    main_basesoc_ethcore_ip_mac_port_source_last <= 1'd0;
    main_basesoc_ethcore_ip_mac_port_source_payload_data <= 8'd0;
    main_basesoc_ethcore_ip_mac_port_source_payload_error <= 1'd0;
    main_basesoc_ethcore_ip_mac_port_source_payload_ethernet_type <= 16'd0;
    main_basesoc_ethcore_ip_mac_port_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_ip_mac_port_source_payload_sender_mac <= 48'd0;
    main_basesoc_ethcore_ip_mac_port_source_payload_target_mac <= 48'd0;
    main_basesoc_ethcore_ip_mac_port_source_valid <= 1'd0;
    main_basesoc_ethcore_mac_crossbar_sink_ready <= 1'd0;
    case (builder_liteethmac_sel1)
        1'd1: begin
            main_basesoc_ethcore_arp_mac_port_source_valid <= main_basesoc_ethcore_mac_crossbar_sink_valid;
            main_basesoc_ethcore_mac_crossbar_sink_ready <= main_basesoc_ethcore_arp_mac_port_source_ready;
            main_basesoc_ethcore_arp_mac_port_source_first <= main_basesoc_ethcore_mac_crossbar_sink_first;
            main_basesoc_ethcore_arp_mac_port_source_last <= main_basesoc_ethcore_mac_crossbar_sink_last;
            main_basesoc_ethcore_arp_mac_port_source_payload_ethernet_type <= main_basesoc_ethcore_mac_crossbar_sink_payload_ethernet_type;
            main_basesoc_ethcore_arp_mac_port_source_payload_sender_mac <= main_basesoc_ethcore_mac_crossbar_sink_payload_sender_mac;
            main_basesoc_ethcore_arp_mac_port_source_payload_target_mac <= main_basesoc_ethcore_mac_crossbar_sink_payload_target_mac;
            main_basesoc_ethcore_arp_mac_port_source_payload_data <= main_basesoc_ethcore_mac_crossbar_sink_payload_data;
            main_basesoc_ethcore_arp_mac_port_source_payload_last_be <= main_basesoc_ethcore_mac_crossbar_sink_payload_last_be;
            main_basesoc_ethcore_arp_mac_port_source_payload_error <= main_basesoc_ethcore_mac_crossbar_sink_payload_error;
        end
        2'd2: begin
            main_basesoc_ethcore_ip_mac_port_source_valid <= main_basesoc_ethcore_mac_crossbar_sink_valid;
            main_basesoc_ethcore_mac_crossbar_sink_ready <= main_basesoc_ethcore_ip_mac_port_source_ready;
            main_basesoc_ethcore_ip_mac_port_source_first <= main_basesoc_ethcore_mac_crossbar_sink_first;
            main_basesoc_ethcore_ip_mac_port_source_last <= main_basesoc_ethcore_mac_crossbar_sink_last;
            main_basesoc_ethcore_ip_mac_port_source_payload_ethernet_type <= main_basesoc_ethcore_mac_crossbar_sink_payload_ethernet_type;
            main_basesoc_ethcore_ip_mac_port_source_payload_sender_mac <= main_basesoc_ethcore_mac_crossbar_sink_payload_sender_mac;
            main_basesoc_ethcore_ip_mac_port_source_payload_target_mac <= main_basesoc_ethcore_mac_crossbar_sink_payload_target_mac;
            main_basesoc_ethcore_ip_mac_port_source_payload_data <= main_basesoc_ethcore_mac_crossbar_sink_payload_data;
            main_basesoc_ethcore_ip_mac_port_source_payload_last_be <= main_basesoc_ethcore_mac_crossbar_sink_payload_last_be;
            main_basesoc_ethcore_ip_mac_port_source_payload_error <= main_basesoc_ethcore_mac_crossbar_sink_payload_error;
        end
        default: begin
            main_basesoc_ethcore_mac_crossbar_sink_ready <= 1'd1;
        end
    endcase
end
assign builder_liteethmac_last = ((main_basesoc_ethcore_mac_crossbar_sink_valid & main_basesoc_ethcore_mac_crossbar_sink_last) & main_basesoc_ethcore_mac_crossbar_sink_ready);
assign builder_liteethmac_ongoing0 = ((main_basesoc_ethcore_mac_crossbar_sink_valid | builder_liteethmac_ongoing1) & (~builder_liteethmac_last));
always @(*) begin
    main_basesoc_ethcore_mac_packetizer_header <= 112'd0;
    main_basesoc_ethcore_mac_packetizer_header[111:96] <= {main_basesoc_ethcore_mac_packetizer_sink_payload_ethernet_type[7:0], main_basesoc_ethcore_mac_packetizer_sink_payload_ethernet_type[15:8]};
    main_basesoc_ethcore_mac_packetizer_header[95:48] <= {main_basesoc_ethcore_mac_packetizer_sink_payload_sender_mac[7:0], main_basesoc_ethcore_mac_packetizer_sink_payload_sender_mac[15:8], main_basesoc_ethcore_mac_packetizer_sink_payload_sender_mac[23:16], main_basesoc_ethcore_mac_packetizer_sink_payload_sender_mac[31:24], main_basesoc_ethcore_mac_packetizer_sink_payload_sender_mac[39:32], main_basesoc_ethcore_mac_packetizer_sink_payload_sender_mac[47:40]};
    main_basesoc_ethcore_mac_packetizer_header[47:0] <= {main_basesoc_ethcore_mac_packetizer_sink_payload_target_mac[7:0], main_basesoc_ethcore_mac_packetizer_sink_payload_target_mac[15:8], main_basesoc_ethcore_mac_packetizer_sink_payload_target_mac[23:16], main_basesoc_ethcore_mac_packetizer_sink_payload_target_mac[31:24], main_basesoc_ethcore_mac_packetizer_sink_payload_target_mac[39:32], main_basesoc_ethcore_mac_packetizer_sink_payload_target_mac[47:40]};
end
assign main_basesoc_ethcore_mac_packetizer_source_description = main_basesoc_ethcore_mac_packetizer_sink_last;
assign main_basesoc_ethcore_mac_packetizer_new_last_be = {main_basesoc_ethcore_mac_packetizer_source_description};
assign main_basesoc_ethcore_mac_packetizer_in_data_copy = (main_basesoc_ethcore_mac_packetizer_is_ongoing0 | main_basesoc_ethcore_mac_packetizer_is_ongoing1);
always @(*) begin
    main_basesoc_ethcore_mac_packetizer_source_last <= 1'd0;
    if (main_basesoc_ethcore_mac_packetizer_source_last_s) begin
        main_basesoc_ethcore_mac_packetizer_source_last <= main_basesoc_ethcore_mac_packetizer_source_last_b;
    end else begin
        main_basesoc_ethcore_mac_packetizer_source_last <= main_basesoc_ethcore_mac_packetizer_source_last_a;
    end
end
assign main_basesoc_ethcore_mac_packetizer_source_payload_error = main_basesoc_ethcore_mac_packetizer_sink_payload_error;
always @(*) begin
    builder_liteethmac_fsm0_next_state0 <= 2'd0;
    builder_liteethmac_fsm1_next_state0 <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_count_liteethmac_fsm0_next_value0 <= 4'd0;
    main_basesoc_ethcore_mac_packetizer_count_liteethmac_fsm0_next_value_ce0 <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_delayed_last_be_liteethmac_fsm1_next_value0 <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_delayed_last_be_liteethmac_fsm1_next_value_ce0 <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_fsm_from_idle_liteethmac_fsm0_next_value1 <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_fsm_from_idle_liteethmac_fsm0_next_value_ce1 <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_is_ongoing0 <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_is_ongoing1 <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_is_ongoing2 <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_sink_ready <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_source_last_a <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_source_last_b <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_source_last_s <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_source_payload_data <= 8'd0;
    main_basesoc_ethcore_mac_packetizer_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_source_valid <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_sr_load <= 1'd0;
    main_basesoc_ethcore_mac_packetizer_sr_shift <= 1'd0;
    builder_liteethmac_fsm0_next_state0 <= builder_liteethmac_fsm0_state0;
    case (builder_liteethmac_fsm0_state0)
        1'd1: begin
            main_basesoc_ethcore_mac_packetizer_source_valid <= 1'd1;
            main_basesoc_ethcore_mac_packetizer_source_last_a <= 1'd0;
            main_basesoc_ethcore_mac_packetizer_source_payload_data <= main_basesoc_ethcore_mac_packetizer_sr[111:8];
            if ((main_basesoc_ethcore_mac_packetizer_source_valid & main_basesoc_ethcore_mac_packetizer_source_ready)) begin
                main_basesoc_ethcore_mac_packetizer_sr_shift <= 1'd1;
                if ((main_basesoc_ethcore_mac_packetizer_count == 4'd13)) begin
                    main_basesoc_ethcore_mac_packetizer_sr_shift <= 1'd0;
                    builder_liteethmac_fsm0_next_state0 <= 2'd2;
                    main_basesoc_ethcore_mac_packetizer_count_liteethmac_fsm0_next_value0 <= (main_basesoc_ethcore_mac_packetizer_count + 1'd1);
                    main_basesoc_ethcore_mac_packetizer_count_liteethmac_fsm0_next_value_ce0 <= 1'd1;
                end else begin
                    main_basesoc_ethcore_mac_packetizer_count_liteethmac_fsm0_next_value0 <= (main_basesoc_ethcore_mac_packetizer_count + 1'd1);
                    main_basesoc_ethcore_mac_packetizer_count_liteethmac_fsm0_next_value_ce0 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_ethcore_mac_packetizer_source_valid <= main_basesoc_ethcore_mac_packetizer_sink_valid;
            main_basesoc_ethcore_mac_packetizer_source_last_a <= main_basesoc_ethcore_mac_packetizer_sink_last;
            main_basesoc_ethcore_mac_packetizer_source_payload_data <= main_basesoc_ethcore_mac_packetizer_sink_payload_data;
            if ((main_basesoc_ethcore_mac_packetizer_source_valid & main_basesoc_ethcore_mac_packetizer_source_ready)) begin
                main_basesoc_ethcore_mac_packetizer_sink_ready <= 1'd1;
                if (main_basesoc_ethcore_mac_packetizer_source_last) begin
                    builder_liteethmac_fsm0_next_state0 <= 1'd0;
                end
            end
            main_basesoc_ethcore_mac_packetizer_is_ongoing0 <= 1'd1;
        end
        2'd3: begin
            main_basesoc_ethcore_mac_packetizer_is_ongoing1 <= 1'd1;
        end
        default: begin
            main_basesoc_ethcore_mac_packetizer_sink_ready <= 1'd1;
            main_basesoc_ethcore_mac_packetizer_count_liteethmac_fsm0_next_value0 <= 1'd1;
            main_basesoc_ethcore_mac_packetizer_count_liteethmac_fsm0_next_value_ce0 <= 1'd1;
            if (main_basesoc_ethcore_mac_packetizer_sink_valid) begin
                main_basesoc_ethcore_mac_packetizer_sink_ready <= 1'd0;
                main_basesoc_ethcore_mac_packetizer_source_valid <= 1'd1;
                main_basesoc_ethcore_mac_packetizer_source_last_a <= 1'd0;
                main_basesoc_ethcore_mac_packetizer_source_payload_data <= main_basesoc_ethcore_mac_packetizer_header[7:0];
                if ((main_basesoc_ethcore_mac_packetizer_source_valid & main_basesoc_ethcore_mac_packetizer_source_ready)) begin
                    main_basesoc_ethcore_mac_packetizer_sr_load <= 1'd1;
                    main_basesoc_ethcore_mac_packetizer_fsm_from_idle_liteethmac_fsm0_next_value1 <= 1'd1;
                    main_basesoc_ethcore_mac_packetizer_fsm_from_idle_liteethmac_fsm0_next_value_ce1 <= 1'd1;
                    if (1'd0) begin
                        builder_liteethmac_fsm0_next_state0 <= 2'd2;
                    end else begin
                        builder_liteethmac_fsm0_next_state0 <= 1'd1;
                    end
                end
            end
            main_basesoc_ethcore_mac_packetizer_is_ongoing2 <= 1'd1;
        end
    endcase
    builder_liteethmac_fsm1_next_state0 <= builder_liteethmac_fsm1_state0;
    case (builder_liteethmac_fsm1_state0)
        1'd1: begin
            main_basesoc_ethcore_mac_packetizer_source_last_b <= 1'd1;
            main_basesoc_ethcore_mac_packetizer_source_last_s <= 1'd1;
            main_basesoc_ethcore_mac_packetizer_source_payload_last_be <= main_basesoc_ethcore_mac_packetizer_delayed_last_be;
            main_basesoc_ethcore_mac_packetizer_sink_ready <= 1'd0;
            if (main_basesoc_ethcore_mac_packetizer_source_ready) begin
                builder_liteethmac_fsm1_next_state0 <= 1'd0;
            end
        end
        default: begin
            if (((main_basesoc_ethcore_mac_packetizer_in_data_copy & main_basesoc_ethcore_mac_packetizer_sink_last) & (main_basesoc_ethcore_mac_packetizer_source_description > main_basesoc_ethcore_mac_packetizer_new_last_be))) begin
                main_basesoc_ethcore_mac_packetizer_source_last_b <= 1'd0;
                main_basesoc_ethcore_mac_packetizer_source_last_s <= 1'd1;
                main_basesoc_ethcore_mac_packetizer_source_payload_last_be <= 1'd0;
                if ((main_basesoc_ethcore_mac_packetizer_source_ready & main_basesoc_ethcore_mac_packetizer_source_valid)) begin
                    main_basesoc_ethcore_mac_packetizer_delayed_last_be_liteethmac_fsm1_next_value0 <= main_basesoc_ethcore_mac_packetizer_new_last_be;
                    main_basesoc_ethcore_mac_packetizer_delayed_last_be_liteethmac_fsm1_next_value_ce0 <= 1'd1;
                    builder_liteethmac_fsm1_next_state0 <= 1'd1;
                end
            end else begin
                if (main_basesoc_ethcore_mac_packetizer_in_data_copy) begin
                    main_basesoc_ethcore_mac_packetizer_source_last_b <= main_basesoc_ethcore_mac_packetizer_sink_last;
                    main_basesoc_ethcore_mac_packetizer_source_last_s <= 1'd1;
                    main_basesoc_ethcore_mac_packetizer_source_payload_last_be <= main_basesoc_ethcore_mac_packetizer_new_last_be;
                end
            end
            if (main_basesoc_ethcore_mac_packetizer_in_data_copy) begin
                main_basesoc_ethcore_mac_packetizer_sink_ready <= main_basesoc_ethcore_mac_packetizer_source_ready;
            end else begin
                if (main_basesoc_ethcore_mac_packetizer_is_ongoing2) begin
                    main_basesoc_ethcore_mac_packetizer_sink_ready <= (~main_basesoc_ethcore_mac_packetizer_sink_valid);
                end
            end
        end
    endcase
end
assign main_basesoc_ethcore_mac_depacketizer_header = main_basesoc_ethcore_mac_depacketizer_sr;
assign main_basesoc_ethcore_mac_depacketizer_source_payload_ethernet_type = {main_basesoc_ethcore_mac_depacketizer_header[103:96], main_basesoc_ethcore_mac_depacketizer_header[111:104]};
assign main_basesoc_ethcore_mac_depacketizer_source_payload_sender_mac = {main_basesoc_ethcore_mac_depacketizer_header[55:48], main_basesoc_ethcore_mac_depacketizer_header[63:56], main_basesoc_ethcore_mac_depacketizer_header[71:64], main_basesoc_ethcore_mac_depacketizer_header[79:72], main_basesoc_ethcore_mac_depacketizer_header[87:80], main_basesoc_ethcore_mac_depacketizer_header[95:88]};
assign main_basesoc_ethcore_mac_depacketizer_source_payload_target_mac = {main_basesoc_ethcore_mac_depacketizer_header[7:0], main_basesoc_ethcore_mac_depacketizer_header[15:8], main_basesoc_ethcore_mac_depacketizer_header[23:16], main_basesoc_ethcore_mac_depacketizer_header[31:24], main_basesoc_ethcore_mac_depacketizer_header[39:32], main_basesoc_ethcore_mac_depacketizer_header[47:40]};
assign main_basesoc_ethcore_mac_depacketizer_source_payload_error = main_basesoc_ethcore_mac_depacketizer_sink_payload_error;
assign main_basesoc_ethcore_mac_depacketizer_source_description = main_basesoc_ethcore_mac_depacketizer_sink_last;
assign main_basesoc_ethcore_mac_depacketizer_new_last_be = {main_basesoc_ethcore_mac_depacketizer_source_description};
assign main_basesoc_ethcore_mac_depacketizer_is_in_copy = (main_basesoc_ethcore_mac_depacketizer_is_ongoing0 | main_basesoc_ethcore_mac_depacketizer_is_ongoing1);
always @(*) begin
    main_basesoc_ethcore_mac_depacketizer_source_last <= 1'd0;
    if (main_basesoc_ethcore_mac_depacketizer_source_last_s) begin
        main_basesoc_ethcore_mac_depacketizer_source_last <= main_basesoc_ethcore_mac_depacketizer_source_last_b;
    end else begin
        main_basesoc_ethcore_mac_depacketizer_source_last <= main_basesoc_ethcore_mac_depacketizer_source_last_a;
    end
end
always @(*) begin
    builder_liteethmac_fsm0_next_state1 <= 2'd0;
    builder_liteethmac_fsm1_next_state1 <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_count_liteethmac_fsm0_next_value2 <= 4'd0;
    main_basesoc_ethcore_mac_depacketizer_count_liteethmac_fsm0_next_value_ce2 <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_delayed_last_be_liteethmac_fsm1_next_value1 <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_delayed_last_be_liteethmac_fsm1_next_value_ce1 <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_fsm_from_idle_liteethmac_fsm0_next_value3 <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_fsm_from_idle_liteethmac_fsm0_next_value_ce3 <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_is_ongoing0 <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_is_ongoing1 <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_is_ongoing2 <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_is_ongoing3 <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_sink_ready <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_source_last_a <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_source_last_b <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_source_last_s <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_source_payload_data <= 8'd0;
    main_basesoc_ethcore_mac_depacketizer_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_source_valid <= 1'd0;
    main_basesoc_ethcore_mac_depacketizer_sr_shift <= 1'd0;
    builder_liteethmac_fsm0_next_state1 <= builder_liteethmac_fsm0_state1;
    case (builder_liteethmac_fsm0_state1)
        1'd1: begin
            main_basesoc_ethcore_mac_depacketizer_sink_ready <= 1'd1;
            if (main_basesoc_ethcore_mac_depacketizer_sink_valid) begin
                main_basesoc_ethcore_mac_depacketizer_count_liteethmac_fsm0_next_value2 <= (main_basesoc_ethcore_mac_depacketizer_count + 1'd1);
                main_basesoc_ethcore_mac_depacketizer_count_liteethmac_fsm0_next_value_ce2 <= 1'd1;
                main_basesoc_ethcore_mac_depacketizer_sr_shift <= 1'd1;
                if ((main_basesoc_ethcore_mac_depacketizer_count == 4'd13)) begin
                    builder_liteethmac_fsm0_next_state1 <= 2'd2;
                    main_basesoc_ethcore_mac_depacketizer_count_liteethmac_fsm0_next_value2 <= (main_basesoc_ethcore_mac_depacketizer_count + 1'd1);
                    main_basesoc_ethcore_mac_depacketizer_count_liteethmac_fsm0_next_value_ce2 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_ethcore_mac_depacketizer_source_valid <= (main_basesoc_ethcore_mac_depacketizer_sink_valid | main_basesoc_ethcore_mac_depacketizer_sink_d_last);
            main_basesoc_ethcore_mac_depacketizer_source_last_a <= (main_basesoc_ethcore_mac_depacketizer_sink_last | main_basesoc_ethcore_mac_depacketizer_sink_d_last);
            main_basesoc_ethcore_mac_depacketizer_sink_ready <= main_basesoc_ethcore_mac_depacketizer_source_ready;
            main_basesoc_ethcore_mac_depacketizer_source_payload_data <= main_basesoc_ethcore_mac_depacketizer_sink_payload_data;
            if ((main_basesoc_ethcore_mac_depacketizer_source_valid & main_basesoc_ethcore_mac_depacketizer_source_ready)) begin
                if (main_basesoc_ethcore_mac_depacketizer_source_last) begin
                    builder_liteethmac_fsm0_next_state1 <= 1'd0;
                end
            end
            main_basesoc_ethcore_mac_depacketizer_is_ongoing0 <= 1'd1;
            main_basesoc_ethcore_mac_depacketizer_is_ongoing2 <= 1'd1;
        end
        2'd3: begin
            main_basesoc_ethcore_mac_depacketizer_is_ongoing1 <= 1'd1;
            main_basesoc_ethcore_mac_depacketizer_is_ongoing3 <= 1'd1;
        end
        default: begin
            main_basesoc_ethcore_mac_depacketizer_sink_ready <= 1'd1;
            main_basesoc_ethcore_mac_depacketizer_count_liteethmac_fsm0_next_value2 <= 1'd1;
            main_basesoc_ethcore_mac_depacketizer_count_liteethmac_fsm0_next_value_ce2 <= 1'd1;
            if (main_basesoc_ethcore_mac_depacketizer_sink_valid) begin
                main_basesoc_ethcore_mac_depacketizer_sr_shift <= 1'd1;
                main_basesoc_ethcore_mac_depacketizer_fsm_from_idle_liteethmac_fsm0_next_value3 <= 1'd1;
                main_basesoc_ethcore_mac_depacketizer_fsm_from_idle_liteethmac_fsm0_next_value_ce3 <= 1'd1;
                if (1'd0) begin
                    builder_liteethmac_fsm0_next_state1 <= 2'd2;
                end else begin
                    builder_liteethmac_fsm0_next_state1 <= 1'd1;
                end
            end
        end
    endcase
    builder_liteethmac_fsm1_next_state1 <= builder_liteethmac_fsm1_state1;
    case (builder_liteethmac_fsm1_state1)
        1'd1: begin
            main_basesoc_ethcore_mac_depacketizer_source_last_b <= 1'd1;
            main_basesoc_ethcore_mac_depacketizer_source_last_s <= 1'd1;
            main_basesoc_ethcore_mac_depacketizer_source_payload_last_be <= main_basesoc_ethcore_mac_depacketizer_delayed_last_be;
            main_basesoc_ethcore_mac_depacketizer_sink_ready <= 1'd0;
            if ((main_basesoc_ethcore_mac_depacketizer_source_ready & main_basesoc_ethcore_mac_depacketizer_source_valid)) begin
                builder_liteethmac_fsm1_next_state1 <= 1'd0;
            end
        end
        default: begin
            if (((main_basesoc_ethcore_mac_depacketizer_sink_valid & main_basesoc_ethcore_mac_depacketizer_sink_last) & (main_basesoc_ethcore_mac_depacketizer_source_description > main_basesoc_ethcore_mac_depacketizer_new_last_be))) begin
                main_basesoc_ethcore_mac_depacketizer_source_last_b <= 1'd0;
                main_basesoc_ethcore_mac_depacketizer_source_last_s <= 1'd1;
                main_basesoc_ethcore_mac_depacketizer_source_payload_last_be <= 1'd0;
                if (((main_basesoc_ethcore_mac_depacketizer_source_ready & main_basesoc_ethcore_mac_depacketizer_source_valid) | ((~main_basesoc_ethcore_mac_depacketizer_was_in_copy) & main_basesoc_ethcore_mac_depacketizer_is_in_copy))) begin
                    main_basesoc_ethcore_mac_depacketizer_delayed_last_be_liteethmac_fsm1_next_value1 <= main_basesoc_ethcore_mac_depacketizer_new_last_be;
                    main_basesoc_ethcore_mac_depacketizer_delayed_last_be_liteethmac_fsm1_next_value_ce1 <= 1'd1;
                    builder_liteethmac_fsm1_next_state1 <= 1'd1;
                end
            end else begin
                if (main_basesoc_ethcore_mac_depacketizer_sink_last) begin
                    main_basesoc_ethcore_mac_depacketizer_source_last_b <= 1'd1;
                    main_basesoc_ethcore_mac_depacketizer_source_last_s <= 1'd1;
                    main_basesoc_ethcore_mac_depacketizer_source_payload_last_be <= main_basesoc_ethcore_mac_depacketizer_new_last_be;
                end
            end
            if ((main_basesoc_ethcore_mac_depacketizer_is_ongoing2 | (main_basesoc_ethcore_mac_depacketizer_is_ongoing3 & (~main_basesoc_ethcore_mac_depacketizer_fsm_from_idle)))) begin
                main_basesoc_ethcore_mac_depacketizer_sink_ready <= main_basesoc_ethcore_mac_depacketizer_source_ready;
            end else begin
                main_basesoc_ethcore_mac_depacketizer_sink_ready <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_ethcore_arp_table_sink_valid = main_basesoc_ethcore_arp_rx_source_source_valid;
assign main_basesoc_ethcore_arp_rx_source_source_ready = main_basesoc_ethcore_arp_table_sink_ready;
assign main_basesoc_ethcore_arp_table_sink_first = main_basesoc_ethcore_arp_rx_source_source_first;
assign main_basesoc_ethcore_arp_table_sink_last = main_basesoc_ethcore_arp_rx_source_source_last;
assign main_basesoc_ethcore_arp_table_sink_payload_reply = main_basesoc_ethcore_arp_rx_source_source_payload_reply;
assign main_basesoc_ethcore_arp_table_sink_payload_request = main_basesoc_ethcore_arp_rx_source_source_payload_request;
assign main_basesoc_ethcore_arp_table_sink_payload_ip_address = main_basesoc_ethcore_arp_rx_source_source_payload_ip_address;
assign main_basesoc_ethcore_arp_table_sink_payload_mac_address = main_basesoc_ethcore_arp_rx_source_source_payload_mac_address;
assign main_basesoc_ethcore_arp_tx_sink_sink_valid = main_basesoc_ethcore_arp_table_source_valid;
assign main_basesoc_ethcore_arp_table_source_ready = main_basesoc_ethcore_arp_tx_sink_sink_ready;
assign main_basesoc_ethcore_arp_tx_sink_sink_first = main_basesoc_ethcore_arp_table_source_first;
assign main_basesoc_ethcore_arp_tx_sink_sink_last = main_basesoc_ethcore_arp_table_source_last;
assign main_basesoc_ethcore_arp_tx_sink_sink_payload_reply = main_basesoc_ethcore_arp_table_source_payload_reply;
assign main_basesoc_ethcore_arp_tx_sink_sink_payload_request = main_basesoc_ethcore_arp_table_source_payload_request;
assign main_basesoc_ethcore_arp_tx_sink_sink_payload_ip_address = main_basesoc_ethcore_arp_table_source_payload_ip_address;
assign main_basesoc_ethcore_arp_tx_sink_sink_payload_mac_address = main_basesoc_ethcore_arp_table_source_payload_mac_address;
assign main_basesoc_ethcore_arp_mac_port_sink_valid = main_basesoc_ethcore_arp_tx_source_source_valid;
assign main_basesoc_ethcore_arp_tx_source_source_ready = main_basesoc_ethcore_arp_mac_port_sink_ready;
assign main_basesoc_ethcore_arp_mac_port_sink_first = main_basesoc_ethcore_arp_tx_source_source_first;
assign main_basesoc_ethcore_arp_mac_port_sink_last = main_basesoc_ethcore_arp_tx_source_source_last;
assign main_basesoc_ethcore_arp_mac_port_sink_payload_ethernet_type = main_basesoc_ethcore_arp_tx_source_source_payload_ethernet_type;
assign main_basesoc_ethcore_arp_mac_port_sink_payload_sender_mac = main_basesoc_ethcore_arp_tx_source_source_payload_sender_mac;
assign main_basesoc_ethcore_arp_mac_port_sink_payload_target_mac = main_basesoc_ethcore_arp_tx_source_source_payload_target_mac;
assign main_basesoc_ethcore_arp_mac_port_sink_payload_data = main_basesoc_ethcore_arp_tx_source_source_payload_data;
assign main_basesoc_ethcore_arp_mac_port_sink_payload_last_be = main_basesoc_ethcore_arp_tx_source_source_payload_last_be;
assign main_basesoc_ethcore_arp_mac_port_sink_payload_error = main_basesoc_ethcore_arp_tx_source_source_payload_error;
assign main_basesoc_ethcore_arp_rx_sink_sink_valid = main_basesoc_ethcore_arp_mac_port_source_valid;
assign main_basesoc_ethcore_arp_mac_port_source_ready = main_basesoc_ethcore_arp_rx_sink_sink_ready;
assign main_basesoc_ethcore_arp_rx_sink_sink_first = main_basesoc_ethcore_arp_mac_port_source_first;
assign main_basesoc_ethcore_arp_rx_sink_sink_last = main_basesoc_ethcore_arp_mac_port_source_last;
assign main_basesoc_ethcore_arp_rx_sink_sink_payload_ethernet_type = main_basesoc_ethcore_arp_mac_port_source_payload_ethernet_type;
assign main_basesoc_ethcore_arp_rx_sink_sink_payload_sender_mac = main_basesoc_ethcore_arp_mac_port_source_payload_sender_mac;
assign main_basesoc_ethcore_arp_rx_sink_sink_payload_target_mac = main_basesoc_ethcore_arp_mac_port_source_payload_target_mac;
assign main_basesoc_ethcore_arp_rx_sink_sink_payload_data = main_basesoc_ethcore_arp_mac_port_source_payload_data;
assign main_basesoc_ethcore_arp_rx_sink_sink_payload_last_be = main_basesoc_ethcore_arp_mac_port_source_payload_last_be;
assign main_basesoc_ethcore_arp_rx_sink_sink_payload_error = main_basesoc_ethcore_arp_mac_port_source_payload_error;
assign main_basesoc_ethcore_arp_tx_packetizer_sink_last = (main_basesoc_ethcore_arp_tx_counter == 6'd45);
always @(*) begin
    main_basesoc_ethcore_arp_tx_packetizer_sink_payload_last_be <= 1'd0;
    if (main_basesoc_ethcore_arp_tx_packetizer_sink_last) begin
        main_basesoc_ethcore_arp_tx_packetizer_sink_payload_last_be <= 1'd1;
    end
end
assign main_basesoc_ethcore_arp_tx_packetizer_sink_param_hwtype = 1'd1;
assign main_basesoc_ethcore_arp_tx_packetizer_sink_param_proto = 12'd2048;
assign main_basesoc_ethcore_arp_tx_packetizer_sink_param_hwsize = 3'd6;
assign main_basesoc_ethcore_arp_tx_packetizer_sink_param_protosize = 3'd4;
assign main_basesoc_ethcore_arp_tx_packetizer_sink_param_sender_mac = 45'd18566422200321;
assign main_basesoc_ethcore_arp_tx_packetizer_sink_param_sender_ip = 32'd3232235826;
assign main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_ip = main_basesoc_ethcore_arp_tx_sink_sink_payload_ip_address;
always @(*) begin
    main_basesoc_ethcore_arp_tx_packetizer_sink_param_opcode <= 16'd0;
    main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_mac <= 48'd0;
    if (main_basesoc_ethcore_arp_tx_sink_sink_payload_reply) begin
        main_basesoc_ethcore_arp_tx_packetizer_sink_param_opcode <= 2'd2;
        main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_mac <= main_basesoc_ethcore_arp_tx_sink_sink_payload_mac_address;
    end else begin
        if (main_basesoc_ethcore_arp_tx_sink_sink_payload_request) begin
            main_basesoc_ethcore_arp_tx_packetizer_sink_param_opcode <= 1'd1;
            main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_mac <= 48'd281474976710655;
        end
    end
end
assign main_basesoc_ethcore_arp_tx_source_source_first = main_basesoc_ethcore_arp_tx_packetizer_source_first;
assign main_basesoc_ethcore_arp_tx_source_source_last = main_basesoc_ethcore_arp_tx_packetizer_source_last;
assign main_basesoc_ethcore_arp_tx_source_source_payload_data = main_basesoc_ethcore_arp_tx_packetizer_source_payload_data;
assign main_basesoc_ethcore_arp_tx_source_source_payload_last_be = main_basesoc_ethcore_arp_tx_packetizer_source_payload_last_be;
assign main_basesoc_ethcore_arp_tx_source_source_payload_error = main_basesoc_ethcore_arp_tx_packetizer_source_payload_error;
always @(*) begin
    main_basesoc_ethcore_arp_tx_source_source_payload_target_mac <= 48'd0;
    main_basesoc_ethcore_arp_tx_source_source_payload_target_mac <= main_basesoc_ethcore_arp_tx_packetizer_source_payload_target_mac;
    main_basesoc_ethcore_arp_tx_source_source_payload_target_mac <= main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_mac;
end
always @(*) begin
    main_basesoc_ethcore_arp_tx_source_source_payload_sender_mac <= 48'd0;
    main_basesoc_ethcore_arp_tx_source_source_payload_sender_mac <= main_basesoc_ethcore_arp_tx_packetizer_source_payload_sender_mac;
    main_basesoc_ethcore_arp_tx_source_source_payload_sender_mac <= 45'd18566422200321;
end
always @(*) begin
    main_basesoc_ethcore_arp_tx_source_source_payload_ethernet_type <= 16'd0;
    main_basesoc_ethcore_arp_tx_source_source_payload_ethernet_type <= main_basesoc_ethcore_arp_tx_packetizer_source_payload_ethernet_type;
    main_basesoc_ethcore_arp_tx_source_source_payload_ethernet_type <= 12'd2054;
end
always @(*) begin
    main_basesoc_ethcore_arp_tx_packetizer_header <= 224'd0;
    main_basesoc_ethcore_arp_tx_packetizer_header[39:32] <= {main_basesoc_ethcore_arp_tx_packetizer_sink_param_hwsize};
    main_basesoc_ethcore_arp_tx_packetizer_header[15:0] <= {main_basesoc_ethcore_arp_tx_packetizer_sink_param_hwtype[7:0], main_basesoc_ethcore_arp_tx_packetizer_sink_param_hwtype[15:8]};
    main_basesoc_ethcore_arp_tx_packetizer_header[63:48] <= {main_basesoc_ethcore_arp_tx_packetizer_sink_param_opcode[7:0], main_basesoc_ethcore_arp_tx_packetizer_sink_param_opcode[15:8]};
    main_basesoc_ethcore_arp_tx_packetizer_header[31:16] <= {main_basesoc_ethcore_arp_tx_packetizer_sink_param_proto[7:0], main_basesoc_ethcore_arp_tx_packetizer_sink_param_proto[15:8]};
    main_basesoc_ethcore_arp_tx_packetizer_header[47:40] <= {main_basesoc_ethcore_arp_tx_packetizer_sink_param_protosize};
    main_basesoc_ethcore_arp_tx_packetizer_header[143:112] <= {main_basesoc_ethcore_arp_tx_packetizer_sink_param_sender_ip[7:0], main_basesoc_ethcore_arp_tx_packetizer_sink_param_sender_ip[15:8], main_basesoc_ethcore_arp_tx_packetizer_sink_param_sender_ip[23:16], main_basesoc_ethcore_arp_tx_packetizer_sink_param_sender_ip[31:24]};
    main_basesoc_ethcore_arp_tx_packetizer_header[111:64] <= {main_basesoc_ethcore_arp_tx_packetizer_sink_param_sender_mac[7:0], main_basesoc_ethcore_arp_tx_packetizer_sink_param_sender_mac[15:8], main_basesoc_ethcore_arp_tx_packetizer_sink_param_sender_mac[23:16], main_basesoc_ethcore_arp_tx_packetizer_sink_param_sender_mac[31:24], main_basesoc_ethcore_arp_tx_packetizer_sink_param_sender_mac[39:32], main_basesoc_ethcore_arp_tx_packetizer_sink_param_sender_mac[47:40]};
    main_basesoc_ethcore_arp_tx_packetizer_header[223:192] <= {main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_ip[7:0], main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_ip[15:8], main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_ip[23:16], main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_ip[31:24]};
    main_basesoc_ethcore_arp_tx_packetizer_header[191:144] <= {main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_mac[7:0], main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_mac[15:8], main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_mac[23:16], main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_mac[31:24], main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_mac[39:32], main_basesoc_ethcore_arp_tx_packetizer_sink_param_target_mac[47:40]};
end
assign main_basesoc_ethcore_arp_tx_packetizer_source_description = main_basesoc_ethcore_arp_tx_packetizer_sink_last;
assign main_basesoc_ethcore_arp_tx_packetizer_new_last_be = {main_basesoc_ethcore_arp_tx_packetizer_source_description};
assign main_basesoc_ethcore_arp_tx_packetizer_in_data_copy = (main_basesoc_ethcore_arp_tx_packetizer_is_ongoing0 | main_basesoc_ethcore_arp_tx_packetizer_is_ongoing1);
always @(*) begin
    main_basesoc_ethcore_arp_tx_packetizer_source_last <= 1'd0;
    if (main_basesoc_ethcore_arp_tx_packetizer_source_last_s) begin
        main_basesoc_ethcore_arp_tx_packetizer_source_last <= main_basesoc_ethcore_arp_tx_packetizer_source_last_b;
    end else begin
        main_basesoc_ethcore_arp_tx_packetizer_source_last <= main_basesoc_ethcore_arp_tx_packetizer_source_last_a;
    end
end
assign main_basesoc_ethcore_arp_tx_packetizer_source_payload_error = main_basesoc_ethcore_arp_tx_packetizer_sink_payload_error;
always @(*) begin
    builder_liteetharptx_fsm0_next_state <= 2'd0;
    builder_liteetharptx_fsm1_next_state <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_count_liteetharp_fsm0_next_value0 <= 5'd0;
    main_basesoc_ethcore_arp_tx_packetizer_count_liteetharp_fsm0_next_value_ce0 <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_delayed_last_be_liteetharp_fsm1_next_value0 <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_delayed_last_be_liteetharp_fsm1_next_value_ce0 <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_fsm0_next_value1 <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_fsm0_next_value_ce1 <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_is_ongoing0 <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_is_ongoing1 <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_is_ongoing2 <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_sink_ready <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_source_last_a <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_source_last_b <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_source_last_s <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_source_payload_data <= 8'd0;
    main_basesoc_ethcore_arp_tx_packetizer_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_source_valid <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_sr_load <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_sr_shift <= 1'd0;
    builder_liteetharptx_fsm0_next_state <= builder_liteetharptx_fsm0_state;
    case (builder_liteetharptx_fsm0_state)
        1'd1: begin
            main_basesoc_ethcore_arp_tx_packetizer_source_valid <= 1'd1;
            main_basesoc_ethcore_arp_tx_packetizer_source_last_a <= 1'd0;
            main_basesoc_ethcore_arp_tx_packetizer_source_payload_data <= main_basesoc_ethcore_arp_tx_packetizer_sr[223:8];
            if ((main_basesoc_ethcore_arp_tx_packetizer_source_valid & main_basesoc_ethcore_arp_tx_packetizer_source_ready)) begin
                main_basesoc_ethcore_arp_tx_packetizer_sr_shift <= 1'd1;
                if ((main_basesoc_ethcore_arp_tx_packetizer_count == 5'd27)) begin
                    main_basesoc_ethcore_arp_tx_packetizer_sr_shift <= 1'd0;
                    builder_liteetharptx_fsm0_next_state <= 2'd2;
                    main_basesoc_ethcore_arp_tx_packetizer_count_liteetharp_fsm0_next_value0 <= (main_basesoc_ethcore_arp_tx_packetizer_count + 1'd1);
                    main_basesoc_ethcore_arp_tx_packetizer_count_liteetharp_fsm0_next_value_ce0 <= 1'd1;
                end else begin
                    main_basesoc_ethcore_arp_tx_packetizer_count_liteetharp_fsm0_next_value0 <= (main_basesoc_ethcore_arp_tx_packetizer_count + 1'd1);
                    main_basesoc_ethcore_arp_tx_packetizer_count_liteetharp_fsm0_next_value_ce0 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_ethcore_arp_tx_packetizer_source_valid <= main_basesoc_ethcore_arp_tx_packetizer_sink_valid;
            main_basesoc_ethcore_arp_tx_packetizer_source_last_a <= main_basesoc_ethcore_arp_tx_packetizer_sink_last;
            main_basesoc_ethcore_arp_tx_packetizer_source_payload_data <= main_basesoc_ethcore_arp_tx_packetizer_sink_payload_data;
            if ((main_basesoc_ethcore_arp_tx_packetizer_source_valid & main_basesoc_ethcore_arp_tx_packetizer_source_ready)) begin
                main_basesoc_ethcore_arp_tx_packetizer_sink_ready <= 1'd1;
                if (main_basesoc_ethcore_arp_tx_packetizer_source_last) begin
                    builder_liteetharptx_fsm0_next_state <= 1'd0;
                end
            end
            main_basesoc_ethcore_arp_tx_packetizer_is_ongoing0 <= 1'd1;
        end
        2'd3: begin
            main_basesoc_ethcore_arp_tx_packetizer_is_ongoing1 <= 1'd1;
        end
        default: begin
            main_basesoc_ethcore_arp_tx_packetizer_sink_ready <= 1'd1;
            main_basesoc_ethcore_arp_tx_packetizer_count_liteetharp_fsm0_next_value0 <= 1'd1;
            main_basesoc_ethcore_arp_tx_packetizer_count_liteetharp_fsm0_next_value_ce0 <= 1'd1;
            if (main_basesoc_ethcore_arp_tx_packetizer_sink_valid) begin
                main_basesoc_ethcore_arp_tx_packetizer_sink_ready <= 1'd0;
                main_basesoc_ethcore_arp_tx_packetizer_source_valid <= 1'd1;
                main_basesoc_ethcore_arp_tx_packetizer_source_last_a <= 1'd0;
                main_basesoc_ethcore_arp_tx_packetizer_source_payload_data <= main_basesoc_ethcore_arp_tx_packetizer_header[7:0];
                if ((main_basesoc_ethcore_arp_tx_packetizer_source_valid & main_basesoc_ethcore_arp_tx_packetizer_source_ready)) begin
                    main_basesoc_ethcore_arp_tx_packetizer_sr_load <= 1'd1;
                    main_basesoc_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_fsm0_next_value1 <= 1'd1;
                    main_basesoc_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_fsm0_next_value_ce1 <= 1'd1;
                    if (1'd0) begin
                        builder_liteetharptx_fsm0_next_state <= 2'd2;
                    end else begin
                        builder_liteetharptx_fsm0_next_state <= 1'd1;
                    end
                end
            end
            main_basesoc_ethcore_arp_tx_packetizer_is_ongoing2 <= 1'd1;
        end
    endcase
    builder_liteetharptx_fsm1_next_state <= builder_liteetharptx_fsm1_state;
    case (builder_liteetharptx_fsm1_state)
        1'd1: begin
            main_basesoc_ethcore_arp_tx_packetizer_source_last_b <= 1'd1;
            main_basesoc_ethcore_arp_tx_packetizer_source_last_s <= 1'd1;
            main_basesoc_ethcore_arp_tx_packetizer_source_payload_last_be <= main_basesoc_ethcore_arp_tx_packetizer_delayed_last_be;
            main_basesoc_ethcore_arp_tx_packetizer_sink_ready <= 1'd0;
            if (main_basesoc_ethcore_arp_tx_packetizer_source_ready) begin
                builder_liteetharptx_fsm1_next_state <= 1'd0;
            end
        end
        default: begin
            if (((main_basesoc_ethcore_arp_tx_packetizer_in_data_copy & main_basesoc_ethcore_arp_tx_packetizer_sink_last) & (main_basesoc_ethcore_arp_tx_packetizer_source_description > main_basesoc_ethcore_arp_tx_packetizer_new_last_be))) begin
                main_basesoc_ethcore_arp_tx_packetizer_source_last_b <= 1'd0;
                main_basesoc_ethcore_arp_tx_packetizer_source_last_s <= 1'd1;
                main_basesoc_ethcore_arp_tx_packetizer_source_payload_last_be <= 1'd0;
                if ((main_basesoc_ethcore_arp_tx_packetizer_source_ready & main_basesoc_ethcore_arp_tx_packetizer_source_valid)) begin
                    main_basesoc_ethcore_arp_tx_packetizer_delayed_last_be_liteetharp_fsm1_next_value0 <= main_basesoc_ethcore_arp_tx_packetizer_new_last_be;
                    main_basesoc_ethcore_arp_tx_packetizer_delayed_last_be_liteetharp_fsm1_next_value_ce0 <= 1'd1;
                    builder_liteetharptx_fsm1_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_ethcore_arp_tx_packetizer_in_data_copy) begin
                    main_basesoc_ethcore_arp_tx_packetizer_source_last_b <= main_basesoc_ethcore_arp_tx_packetizer_sink_last;
                    main_basesoc_ethcore_arp_tx_packetizer_source_last_s <= 1'd1;
                    main_basesoc_ethcore_arp_tx_packetizer_source_payload_last_be <= main_basesoc_ethcore_arp_tx_packetizer_new_last_be;
                end
            end
            if (main_basesoc_ethcore_arp_tx_packetizer_in_data_copy) begin
                main_basesoc_ethcore_arp_tx_packetizer_sink_ready <= main_basesoc_ethcore_arp_tx_packetizer_source_ready;
            end else begin
                if (main_basesoc_ethcore_arp_tx_packetizer_is_ongoing2) begin
                    main_basesoc_ethcore_arp_tx_packetizer_sink_ready <= (~main_basesoc_ethcore_arp_tx_packetizer_sink_valid);
                end
            end
        end
    endcase
end
always @(*) begin
    builder_liteetharptx_next_state <= 1'd0;
    main_basesoc_ethcore_arp_tx_counter_liteetharp_next_value <= 6'd0;
    main_basesoc_ethcore_arp_tx_counter_liteetharp_next_value_ce <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_sink_valid <= 1'd0;
    main_basesoc_ethcore_arp_tx_packetizer_source_ready <= 1'd0;
    main_basesoc_ethcore_arp_tx_sink_sink_ready <= 1'd0;
    main_basesoc_ethcore_arp_tx_source_source_valid <= 1'd0;
    builder_liteetharptx_next_state <= builder_liteetharptx_state;
    case (builder_liteetharptx_state)
        1'd1: begin
            main_basesoc_ethcore_arp_tx_packetizer_sink_valid <= 1'd1;
            main_basesoc_ethcore_arp_tx_source_source_valid <= main_basesoc_ethcore_arp_tx_packetizer_source_valid;
            main_basesoc_ethcore_arp_tx_packetizer_source_ready <= main_basesoc_ethcore_arp_tx_source_source_ready;
            if ((main_basesoc_ethcore_arp_tx_source_source_valid & main_basesoc_ethcore_arp_tx_source_source_ready)) begin
                main_basesoc_ethcore_arp_tx_counter_liteetharp_next_value <= (main_basesoc_ethcore_arp_tx_counter + 1'd1);
                main_basesoc_ethcore_arp_tx_counter_liteetharp_next_value_ce <= 1'd1;
                if (main_basesoc_ethcore_arp_tx_source_source_last) begin
                    main_basesoc_ethcore_arp_tx_sink_sink_ready <= 1'd1;
                    builder_liteetharptx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_ethcore_arp_tx_counter_liteetharp_next_value <= 1'd0;
            main_basesoc_ethcore_arp_tx_counter_liteetharp_next_value_ce <= 1'd1;
            if (main_basesoc_ethcore_arp_tx_sink_sink_valid) begin
                builder_liteetharptx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_ethcore_arp_rx_depacketizer_sink_valid = main_basesoc_ethcore_arp_rx_sink_sink_valid;
assign main_basesoc_ethcore_arp_rx_sink_sink_ready = main_basesoc_ethcore_arp_rx_depacketizer_sink_ready;
assign main_basesoc_ethcore_arp_rx_depacketizer_sink_first = main_basesoc_ethcore_arp_rx_sink_sink_first;
assign main_basesoc_ethcore_arp_rx_depacketizer_sink_last = main_basesoc_ethcore_arp_rx_sink_sink_last;
assign main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_ethernet_type = main_basesoc_ethcore_arp_rx_sink_sink_payload_ethernet_type;
assign main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_sender_mac = main_basesoc_ethcore_arp_rx_sink_sink_payload_sender_mac;
assign main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_target_mac = main_basesoc_ethcore_arp_rx_sink_sink_payload_target_mac;
assign main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_data = main_basesoc_ethcore_arp_rx_sink_sink_payload_data;
assign main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_last_be = main_basesoc_ethcore_arp_rx_sink_sink_payload_last_be;
assign main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_error = main_basesoc_ethcore_arp_rx_sink_sink_payload_error;
always @(*) begin
    main_basesoc_ethcore_arp_rx_reply <= 1'd0;
    main_basesoc_ethcore_arp_rx_request <= 1'd0;
    case (main_basesoc_ethcore_arp_rx_depacketizer_source_param_opcode)
        1'd1: begin
            main_basesoc_ethcore_arp_rx_request <= 1'd1;
        end
        2'd2: begin
            main_basesoc_ethcore_arp_rx_reply <= 1'd1;
        end
        default: begin
        end
    endcase
end
assign main_basesoc_ethcore_arp_rx_source_source_payload_ip_address = main_basesoc_ethcore_arp_rx_depacketizer_source_param_sender_ip;
assign main_basesoc_ethcore_arp_rx_source_source_payload_mac_address = main_basesoc_ethcore_arp_rx_depacketizer_source_param_sender_mac;
assign main_basesoc_ethcore_arp_rx_depacketizer_header = main_basesoc_ethcore_arp_rx_depacketizer_sr;
assign main_basesoc_ethcore_arp_rx_depacketizer_source_param_hwsize = {main_basesoc_ethcore_arp_rx_depacketizer_header[39:32]};
assign main_basesoc_ethcore_arp_rx_depacketizer_source_param_hwtype = {main_basesoc_ethcore_arp_rx_depacketizer_header[7:0], main_basesoc_ethcore_arp_rx_depacketizer_header[15:8]};
assign main_basesoc_ethcore_arp_rx_depacketizer_source_param_opcode = {main_basesoc_ethcore_arp_rx_depacketizer_header[55:48], main_basesoc_ethcore_arp_rx_depacketizer_header[63:56]};
assign main_basesoc_ethcore_arp_rx_depacketizer_source_param_proto = {main_basesoc_ethcore_arp_rx_depacketizer_header[23:16], main_basesoc_ethcore_arp_rx_depacketizer_header[31:24]};
assign main_basesoc_ethcore_arp_rx_depacketizer_source_param_protosize = {main_basesoc_ethcore_arp_rx_depacketizer_header[47:40]};
assign main_basesoc_ethcore_arp_rx_depacketizer_source_param_sender_ip = {main_basesoc_ethcore_arp_rx_depacketizer_header[119:112], main_basesoc_ethcore_arp_rx_depacketizer_header[127:120], main_basesoc_ethcore_arp_rx_depacketizer_header[135:128], main_basesoc_ethcore_arp_rx_depacketizer_header[143:136]};
assign main_basesoc_ethcore_arp_rx_depacketizer_source_param_sender_mac = {main_basesoc_ethcore_arp_rx_depacketizer_header[71:64], main_basesoc_ethcore_arp_rx_depacketizer_header[79:72], main_basesoc_ethcore_arp_rx_depacketizer_header[87:80], main_basesoc_ethcore_arp_rx_depacketizer_header[95:88], main_basesoc_ethcore_arp_rx_depacketizer_header[103:96], main_basesoc_ethcore_arp_rx_depacketizer_header[111:104]};
assign main_basesoc_ethcore_arp_rx_depacketizer_source_param_target_ip = {main_basesoc_ethcore_arp_rx_depacketizer_header[199:192], main_basesoc_ethcore_arp_rx_depacketizer_header[207:200], main_basesoc_ethcore_arp_rx_depacketizer_header[215:208], main_basesoc_ethcore_arp_rx_depacketizer_header[223:216]};
assign main_basesoc_ethcore_arp_rx_depacketizer_source_param_target_mac = {main_basesoc_ethcore_arp_rx_depacketizer_header[151:144], main_basesoc_ethcore_arp_rx_depacketizer_header[159:152], main_basesoc_ethcore_arp_rx_depacketizer_header[167:160], main_basesoc_ethcore_arp_rx_depacketizer_header[175:168], main_basesoc_ethcore_arp_rx_depacketizer_header[183:176], main_basesoc_ethcore_arp_rx_depacketizer_header[191:184]};
assign main_basesoc_ethcore_arp_rx_depacketizer_source_payload_error = main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_error;
assign main_basesoc_ethcore_arp_rx_depacketizer_source_description = main_basesoc_ethcore_arp_rx_depacketizer_sink_last;
assign main_basesoc_ethcore_arp_rx_depacketizer_new_last_be = {main_basesoc_ethcore_arp_rx_depacketizer_source_description};
assign main_basesoc_ethcore_arp_rx_depacketizer_is_in_copy = (main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing0 | main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing1);
always @(*) begin
    main_basesoc_ethcore_arp_rx_depacketizer_source_last <= 1'd0;
    if (main_basesoc_ethcore_arp_rx_depacketizer_source_last_s) begin
        main_basesoc_ethcore_arp_rx_depacketizer_source_last <= main_basesoc_ethcore_arp_rx_depacketizer_source_last_b;
    end else begin
        main_basesoc_ethcore_arp_rx_depacketizer_source_last <= main_basesoc_ethcore_arp_rx_depacketizer_source_last_a;
    end
end
always @(*) begin
    builder_liteetharprx_fsm0_next_state <= 2'd0;
    builder_liteetharprx_fsm1_next_state <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_count_liteetharp_fsm0_next_value2 <= 5'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_count_liteetharp_fsm0_next_value_ce2 <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_delayed_last_be_liteetharp_fsm1_next_value1 <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_delayed_last_be_liteetharp_fsm1_next_value_ce1 <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_fsm0_next_value3 <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_fsm0_next_value_ce3 <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing0 <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing1 <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing2 <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing3 <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_sink_ready <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_source_last_a <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_source_last_b <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_source_last_s <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_source_payload_data <= 8'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_source_valid <= 1'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_sr_shift <= 1'd0;
    builder_liteetharprx_fsm0_next_state <= builder_liteetharprx_fsm0_state;
    case (builder_liteetharprx_fsm0_state)
        1'd1: begin
            main_basesoc_ethcore_arp_rx_depacketizer_sink_ready <= 1'd1;
            if (main_basesoc_ethcore_arp_rx_depacketizer_sink_valid) begin
                main_basesoc_ethcore_arp_rx_depacketizer_count_liteetharp_fsm0_next_value2 <= (main_basesoc_ethcore_arp_rx_depacketizer_count + 1'd1);
                main_basesoc_ethcore_arp_rx_depacketizer_count_liteetharp_fsm0_next_value_ce2 <= 1'd1;
                main_basesoc_ethcore_arp_rx_depacketizer_sr_shift <= 1'd1;
                if ((main_basesoc_ethcore_arp_rx_depacketizer_count == 5'd27)) begin
                    builder_liteetharprx_fsm0_next_state <= 2'd2;
                    main_basesoc_ethcore_arp_rx_depacketizer_count_liteetharp_fsm0_next_value2 <= (main_basesoc_ethcore_arp_rx_depacketizer_count + 1'd1);
                    main_basesoc_ethcore_arp_rx_depacketizer_count_liteetharp_fsm0_next_value_ce2 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_ethcore_arp_rx_depacketizer_source_valid <= (main_basesoc_ethcore_arp_rx_depacketizer_sink_valid | main_basesoc_ethcore_arp_rx_depacketizer_sink_d_last);
            main_basesoc_ethcore_arp_rx_depacketizer_source_last_a <= (main_basesoc_ethcore_arp_rx_depacketizer_sink_last | main_basesoc_ethcore_arp_rx_depacketizer_sink_d_last);
            main_basesoc_ethcore_arp_rx_depacketizer_sink_ready <= main_basesoc_ethcore_arp_rx_depacketizer_source_ready;
            main_basesoc_ethcore_arp_rx_depacketizer_source_payload_data <= main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_data;
            if ((main_basesoc_ethcore_arp_rx_depacketizer_source_valid & main_basesoc_ethcore_arp_rx_depacketizer_source_ready)) begin
                if (main_basesoc_ethcore_arp_rx_depacketizer_source_last) begin
                    builder_liteetharprx_fsm0_next_state <= 1'd0;
                end
            end
            main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing0 <= 1'd1;
            main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing2 <= 1'd1;
        end
        2'd3: begin
            main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing1 <= 1'd1;
            main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing3 <= 1'd1;
        end
        default: begin
            main_basesoc_ethcore_arp_rx_depacketizer_sink_ready <= 1'd1;
            main_basesoc_ethcore_arp_rx_depacketizer_count_liteetharp_fsm0_next_value2 <= 1'd1;
            main_basesoc_ethcore_arp_rx_depacketizer_count_liteetharp_fsm0_next_value_ce2 <= 1'd1;
            if (main_basesoc_ethcore_arp_rx_depacketizer_sink_valid) begin
                main_basesoc_ethcore_arp_rx_depacketizer_sr_shift <= 1'd1;
                main_basesoc_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_fsm0_next_value3 <= 1'd1;
                main_basesoc_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_fsm0_next_value_ce3 <= 1'd1;
                if (1'd0) begin
                    builder_liteetharprx_fsm0_next_state <= 2'd2;
                end else begin
                    builder_liteetharprx_fsm0_next_state <= 1'd1;
                end
            end
        end
    endcase
    builder_liteetharprx_fsm1_next_state <= builder_liteetharprx_fsm1_state;
    case (builder_liteetharprx_fsm1_state)
        1'd1: begin
            main_basesoc_ethcore_arp_rx_depacketizer_source_last_b <= 1'd1;
            main_basesoc_ethcore_arp_rx_depacketizer_source_last_s <= 1'd1;
            main_basesoc_ethcore_arp_rx_depacketizer_source_payload_last_be <= main_basesoc_ethcore_arp_rx_depacketizer_delayed_last_be;
            main_basesoc_ethcore_arp_rx_depacketizer_sink_ready <= 1'd0;
            if ((main_basesoc_ethcore_arp_rx_depacketizer_source_ready & main_basesoc_ethcore_arp_rx_depacketizer_source_valid)) begin
                builder_liteetharprx_fsm1_next_state <= 1'd0;
            end
        end
        default: begin
            if (((main_basesoc_ethcore_arp_rx_depacketizer_sink_valid & main_basesoc_ethcore_arp_rx_depacketizer_sink_last) & (main_basesoc_ethcore_arp_rx_depacketizer_source_description > main_basesoc_ethcore_arp_rx_depacketizer_new_last_be))) begin
                main_basesoc_ethcore_arp_rx_depacketizer_source_last_b <= 1'd0;
                main_basesoc_ethcore_arp_rx_depacketizer_source_last_s <= 1'd1;
                main_basesoc_ethcore_arp_rx_depacketizer_source_payload_last_be <= 1'd0;
                if (((main_basesoc_ethcore_arp_rx_depacketizer_source_ready & main_basesoc_ethcore_arp_rx_depacketizer_source_valid) | ((~main_basesoc_ethcore_arp_rx_depacketizer_was_in_copy) & main_basesoc_ethcore_arp_rx_depacketizer_is_in_copy))) begin
                    main_basesoc_ethcore_arp_rx_depacketizer_delayed_last_be_liteetharp_fsm1_next_value1 <= main_basesoc_ethcore_arp_rx_depacketizer_new_last_be;
                    main_basesoc_ethcore_arp_rx_depacketizer_delayed_last_be_liteetharp_fsm1_next_value_ce1 <= 1'd1;
                    builder_liteetharprx_fsm1_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_ethcore_arp_rx_depacketizer_sink_last) begin
                    main_basesoc_ethcore_arp_rx_depacketizer_source_last_b <= 1'd1;
                    main_basesoc_ethcore_arp_rx_depacketizer_source_last_s <= 1'd1;
                    main_basesoc_ethcore_arp_rx_depacketizer_source_payload_last_be <= main_basesoc_ethcore_arp_rx_depacketizer_new_last_be;
                end
            end
            if ((main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing2 | (main_basesoc_ethcore_arp_rx_depacketizer_is_ongoing3 & (~main_basesoc_ethcore_arp_rx_depacketizer_fsm_from_idle)))) begin
                main_basesoc_ethcore_arp_rx_depacketizer_sink_ready <= main_basesoc_ethcore_arp_rx_depacketizer_source_ready;
            end else begin
                main_basesoc_ethcore_arp_rx_depacketizer_sink_ready <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_liteetharprx_next_state <= 2'd0;
    main_basesoc_ethcore_arp_rx_depacketizer_source_ready <= 1'd0;
    main_basesoc_ethcore_arp_rx_source_source_payload_reply <= 1'd0;
    main_basesoc_ethcore_arp_rx_source_source_payload_request <= 1'd0;
    main_basesoc_ethcore_arp_rx_source_source_valid <= 1'd0;
    builder_liteetharprx_next_state <= builder_liteetharprx_state;
    case (builder_liteetharprx_state)
        1'd1: begin
            if (main_basesoc_ethcore_arp_rx_valid) begin
                main_basesoc_ethcore_arp_rx_source_source_valid <= 1'd1;
                main_basesoc_ethcore_arp_rx_source_source_payload_reply <= main_basesoc_ethcore_arp_rx_reply;
                main_basesoc_ethcore_arp_rx_source_source_payload_request <= main_basesoc_ethcore_arp_rx_request;
            end
            builder_liteetharprx_next_state <= 2'd2;
        end
        2'd2: begin
            main_basesoc_ethcore_arp_rx_depacketizer_source_ready <= 1'd1;
            if ((main_basesoc_ethcore_arp_rx_depacketizer_source_valid & main_basesoc_ethcore_arp_rx_depacketizer_source_last)) begin
                builder_liteetharprx_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_ethcore_arp_rx_depacketizer_source_ready <= 1'd1;
            if (main_basesoc_ethcore_arp_rx_depacketizer_source_valid) begin
                main_basesoc_ethcore_arp_rx_depacketizer_source_ready <= 1'd0;
                builder_liteetharprx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_ethcore_arp_table_request_timer_wait = (main_basesoc_ethcore_arp_table_request_pending & (~main_basesoc_ethcore_arp_table_request_timer_done));
assign main_basesoc_ethcore_arp_table_request_timer_done = (main_basesoc_ethcore_arp_table_request_timer_count == 1'd0);
always @(*) begin
    main_basesoc_ethcore_arp_table_cache_mem_wr_port_dat_w <= 81'd0;
    main_basesoc_ethcore_arp_table_cache_mem_wr_port_dat_w[80] <= main_basesoc_ethcore_arp_table_cache_mem_wr_port_valid;
    main_basesoc_ethcore_arp_table_cache_mem_wr_port_dat_w[31:0] <= main_basesoc_ethcore_arp_table_cache_mem_wr_port_ip_address;
    main_basesoc_ethcore_arp_table_cache_mem_wr_port_dat_w[79:32] <= main_basesoc_ethcore_arp_table_cache_mem_wr_port_mac_address;
end
assign main_basesoc_ethcore_arp_table_cache_mem_rd_port_valid = main_basesoc_ethcore_arp_table_cache_mem_rd_port_dat_r[80];
assign main_basesoc_ethcore_arp_table_cache_mem_rd_port_ip_address = main_basesoc_ethcore_arp_table_cache_mem_rd_port_dat_r[31:0];
assign main_basesoc_ethcore_arp_table_cache_mem_rd_port_mac_address = main_basesoc_ethcore_arp_table_cache_mem_rd_port_dat_r[79:32];
assign main_basesoc_ethcore_arp_table_cache_done = (main_basesoc_ethcore_arp_table_cache_count == 1'd0);
always @(*) begin
    builder_liteetharpcache_next_state <= 3'd0;
    main_basesoc_ethcore_arp_table_cache_error_liteetharp_liteetharpcache_next_value2 <= 1'd0;
    main_basesoc_ethcore_arp_table_cache_error_liteetharp_liteetharpcache_next_value_ce2 <= 1'd0;
    main_basesoc_ethcore_arp_table_cache_mem_rd_port_adr <= 1'd0;
    main_basesoc_ethcore_arp_table_cache_mem_wr_port_adr <= 1'd0;
    main_basesoc_ethcore_arp_table_cache_mem_wr_port_ip_address <= 32'd0;
    main_basesoc_ethcore_arp_table_cache_mem_wr_port_mac_address <= 48'd0;
    main_basesoc_ethcore_arp_table_cache_mem_wr_port_valid <= 1'd0;
    main_basesoc_ethcore_arp_table_cache_mem_wr_port_we <= 1'd0;
    main_basesoc_ethcore_arp_table_cache_request_ready <= 1'd0;
    main_basesoc_ethcore_arp_table_cache_response_payload_error <= 1'd0;
    main_basesoc_ethcore_arp_table_cache_response_payload_mac_address <= 48'd0;
    main_basesoc_ethcore_arp_table_cache_response_valid <= 1'd0;
    main_basesoc_ethcore_arp_table_cache_search_count_liteetharp_liteetharpcache_next_value1 <= 1'd0;
    main_basesoc_ethcore_arp_table_cache_search_count_liteetharp_liteetharpcache_next_value_ce1 <= 1'd0;
    main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value0 <= 1'd0;
    main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value_ce0 <= 1'd0;
    main_basesoc_ethcore_arp_table_cache_update_ready <= 1'd0;
    main_basesoc_ethcore_arp_table_cache_wait <= 1'd0;
    builder_liteetharpcache_next_state <= builder_liteetharpcache_state;
    case (builder_liteetharpcache_state)
        1'd1: begin
            if ((main_basesoc_ethcore_arp_table_cache_enable & main_basesoc_ethcore_arp_table_cache_update_valid)) begin
                builder_liteetharpcache_next_state <= 2'd2;
            end
            if ((main_basesoc_ethcore_arp_table_cache_enable & main_basesoc_ethcore_arp_table_cache_request_valid)) begin
                main_basesoc_ethcore_arp_table_cache_search_count_liteetharp_liteetharpcache_next_value1 <= 1'd0;
                main_basesoc_ethcore_arp_table_cache_search_count_liteetharp_liteetharpcache_next_value_ce1 <= 1'd1;
                builder_liteetharpcache_next_state <= 2'd3;
            end
            main_basesoc_ethcore_arp_table_cache_wait <= main_basesoc_ethcore_arp_table_cache_clear_enable;
            if (main_basesoc_ethcore_arp_table_cache_done) begin
                main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value0 <= 1'd0;
                main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value_ce0 <= 1'd1;
                builder_liteetharpcache_next_state <= 1'd0;
            end
        end
        2'd2: begin
            main_basesoc_ethcore_arp_table_cache_mem_wr_port_we <= 1'd1;
            main_basesoc_ethcore_arp_table_cache_mem_wr_port_adr <= main_basesoc_ethcore_arp_table_cache_update_count;
            main_basesoc_ethcore_arp_table_cache_mem_wr_port_valid <= 1'd1;
            main_basesoc_ethcore_arp_table_cache_mem_wr_port_ip_address <= main_basesoc_ethcore_arp_table_cache_update_payload_ip_address;
            main_basesoc_ethcore_arp_table_cache_mem_wr_port_mac_address <= main_basesoc_ethcore_arp_table_cache_update_payload_mac_address;
            main_basesoc_ethcore_arp_table_cache_update_ready <= 1'd1;
            if ((main_basesoc_ethcore_arp_table_cache_update_count == 1'd1)) begin
                main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value0 <= 1'd0;
                main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value_ce0 <= 1'd1;
            end else begin
                main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value0 <= (main_basesoc_ethcore_arp_table_cache_update_count + 1'd1);
                main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value_ce0 <= 1'd1;
            end
            builder_liteetharpcache_next_state <= 1'd1;
        end
        2'd3: begin
            main_basesoc_ethcore_arp_table_cache_mem_rd_port_adr <= main_basesoc_ethcore_arp_table_cache_search_count;
            if ((main_basesoc_ethcore_arp_table_cache_mem_rd_port_valid & (main_basesoc_ethcore_arp_table_cache_mem_rd_port_ip_address == main_basesoc_ethcore_arp_table_cache_request_payload_ip_address))) begin
                main_basesoc_ethcore_arp_table_cache_error_liteetharp_liteetharpcache_next_value2 <= 1'd0;
                main_basesoc_ethcore_arp_table_cache_error_liteetharp_liteetharpcache_next_value_ce2 <= 1'd1;
                builder_liteetharpcache_next_state <= 3'd4;
            end else begin
                if ((main_basesoc_ethcore_arp_table_cache_search_count == 1'd1)) begin
                    main_basesoc_ethcore_arp_table_cache_error_liteetharp_liteetharpcache_next_value2 <= 1'd1;
                    main_basesoc_ethcore_arp_table_cache_error_liteetharp_liteetharpcache_next_value_ce2 <= 1'd1;
                    builder_liteetharpcache_next_state <= 3'd4;
                end else begin
                    main_basesoc_ethcore_arp_table_cache_search_count_liteetharp_liteetharpcache_next_value1 <= (main_basesoc_ethcore_arp_table_cache_search_count + 1'd1);
                    main_basesoc_ethcore_arp_table_cache_search_count_liteetharp_liteetharpcache_next_value_ce1 <= 1'd1;
                end
            end
        end
        3'd4: begin
            main_basesoc_ethcore_arp_table_cache_request_ready <= 1'd1;
            main_basesoc_ethcore_arp_table_cache_response_valid <= 1'd1;
            main_basesoc_ethcore_arp_table_cache_response_payload_error <= main_basesoc_ethcore_arp_table_cache_error;
            main_basesoc_ethcore_arp_table_cache_response_payload_mac_address <= main_basesoc_ethcore_arp_table_cache_mem_rd_port_mac_address;
            builder_liteetharpcache_next_state <= 1'd1;
        end
        default: begin
            main_basesoc_ethcore_arp_table_cache_mem_wr_port_we <= 1'd1;
            main_basesoc_ethcore_arp_table_cache_mem_wr_port_adr <= main_basesoc_ethcore_arp_table_cache_update_count;
            main_basesoc_ethcore_arp_table_cache_mem_wr_port_valid <= 1'd0;
            main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value0 <= (main_basesoc_ethcore_arp_table_cache_update_count + 1'd1);
            main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value_ce0 <= 1'd1;
            if ((main_basesoc_ethcore_arp_table_cache_update_count == 1'd1)) begin
                main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value0 <= 1'd0;
                main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value_ce0 <= 1'd1;
                builder_liteetharpcache_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_fsm_next_state <= 3'd0;
    main_basesoc_ethcore_arp_table_cache_request_payload_ip_address <= 32'd0;
    main_basesoc_ethcore_arp_table_cache_request_valid <= 1'd0;
    main_basesoc_ethcore_arp_table_cache_update_payload_ip_address <= 32'd0;
    main_basesoc_ethcore_arp_table_cache_update_payload_mac_address <= 48'd0;
    main_basesoc_ethcore_arp_table_cache_update_valid <= 1'd0;
    main_basesoc_ethcore_arp_table_request_counter_liteetharp_fsm_next_value3 <= 3'd0;
    main_basesoc_ethcore_arp_table_request_counter_liteetharp_fsm_next_value_ce3 <= 1'd0;
    main_basesoc_ethcore_arp_table_request_ip_address_liteetharp_fsm_next_value4 <= 32'd0;
    main_basesoc_ethcore_arp_table_request_ip_address_liteetharp_fsm_next_value_ce4 <= 1'd0;
    main_basesoc_ethcore_arp_table_request_pending_liteetharp_fsm_next_value0 <= 1'd0;
    main_basesoc_ethcore_arp_table_request_pending_liteetharp_fsm_next_value_ce0 <= 1'd0;
    main_basesoc_ethcore_arp_table_request_request_ready <= 1'd0;
    main_basesoc_ethcore_arp_table_response_response_payload_failed_liteetharp_fsm_next_value2 <= 1'd0;
    main_basesoc_ethcore_arp_table_response_response_payload_failed_liteetharp_fsm_next_value_ce2 <= 1'd0;
    main_basesoc_ethcore_arp_table_response_response_payload_mac_address_liteetharp_fsm_next_value1 <= 48'd0;
    main_basesoc_ethcore_arp_table_response_response_payload_mac_address_liteetharp_fsm_next_value_ce1 <= 1'd0;
    main_basesoc_ethcore_arp_table_response_response_valid <= 1'd0;
    main_basesoc_ethcore_arp_table_source_payload_ip_address <= 32'd0;
    main_basesoc_ethcore_arp_table_source_payload_mac_address <= 48'd0;
    main_basesoc_ethcore_arp_table_source_payload_reply <= 1'd0;
    main_basesoc_ethcore_arp_table_source_payload_request <= 1'd0;
    main_basesoc_ethcore_arp_table_source_valid <= 1'd0;
    builder_fsm_next_state <= builder_fsm_state;
    case (builder_fsm_state)
        1'd1: begin
            main_basesoc_ethcore_arp_table_source_valid <= 1'd1;
            main_basesoc_ethcore_arp_table_source_payload_reply <= 1'd1;
            main_basesoc_ethcore_arp_table_source_payload_ip_address <= main_basesoc_ethcore_arp_table_sink_payload_ip_address;
            main_basesoc_ethcore_arp_table_source_payload_mac_address <= main_basesoc_ethcore_arp_table_sink_payload_mac_address;
            if (main_basesoc_ethcore_arp_table_source_ready) begin
                builder_fsm_next_state <= 1'd0;
            end
        end
        2'd2: begin
            if ((main_basesoc_ethcore_arp_table_request_pending & (main_basesoc_ethcore_arp_table_request_ip_address == main_basesoc_ethcore_arp_table_sink_payload_ip_address))) begin
                main_basesoc_ethcore_arp_table_cache_update_valid <= 1'd1;
                main_basesoc_ethcore_arp_table_cache_update_payload_ip_address <= main_basesoc_ethcore_arp_table_sink_payload_ip_address;
                main_basesoc_ethcore_arp_table_cache_update_payload_mac_address <= main_basesoc_ethcore_arp_table_sink_payload_mac_address;
                if (main_basesoc_ethcore_arp_table_cache_update_ready) begin
                    main_basesoc_ethcore_arp_table_request_pending_liteetharp_fsm_next_value0 <= 1'd0;
                    main_basesoc_ethcore_arp_table_request_pending_liteetharp_fsm_next_value_ce0 <= 1'd1;
                    main_basesoc_ethcore_arp_table_response_response_payload_mac_address_liteetharp_fsm_next_value1 <= main_basesoc_ethcore_arp_table_sink_payload_mac_address;
                    main_basesoc_ethcore_arp_table_response_response_payload_mac_address_liteetharp_fsm_next_value_ce1 <= 1'd1;
                    builder_fsm_next_state <= 3'd6;
                end
            end else begin
                builder_fsm_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if ((main_basesoc_ethcore_arp_table_request_counter == 3'd7)) begin
                main_basesoc_ethcore_arp_table_response_response_payload_failed_liteetharp_fsm_next_value2 <= 1'd1;
                main_basesoc_ethcore_arp_table_response_response_payload_failed_liteetharp_fsm_next_value_ce2 <= 1'd1;
                main_basesoc_ethcore_arp_table_request_counter_liteetharp_fsm_next_value3 <= 1'd0;
                main_basesoc_ethcore_arp_table_request_counter_liteetharp_fsm_next_value_ce3 <= 1'd1;
                main_basesoc_ethcore_arp_table_request_pending_liteetharp_fsm_next_value0 <= 1'd0;
                main_basesoc_ethcore_arp_table_request_pending_liteetharp_fsm_next_value_ce0 <= 1'd1;
                builder_fsm_next_state <= 3'd6;
            end else begin
                builder_fsm_next_state <= 3'd5;
            end
        end
        3'd4: begin
            main_basesoc_ethcore_arp_table_cache_request_valid <= 1'd1;
            main_basesoc_ethcore_arp_table_cache_request_payload_ip_address <= main_basesoc_ethcore_arp_table_request_request_payload_ip_address;
            if (main_basesoc_ethcore_arp_table_cache_response_valid) begin
                main_basesoc_ethcore_arp_table_request_request_ready <= 1'd1;
                if (main_basesoc_ethcore_arp_table_cache_response_payload_error) begin
                    main_basesoc_ethcore_arp_table_request_counter_liteetharp_fsm_next_value3 <= 1'd0;
                    main_basesoc_ethcore_arp_table_request_counter_liteetharp_fsm_next_value_ce3 <= 1'd1;
                    main_basesoc_ethcore_arp_table_request_pending_liteetharp_fsm_next_value0 <= 1'd1;
                    main_basesoc_ethcore_arp_table_request_pending_liteetharp_fsm_next_value_ce0 <= 1'd1;
                    main_basesoc_ethcore_arp_table_request_ip_address_liteetharp_fsm_next_value4 <= main_basesoc_ethcore_arp_table_request_request_payload_ip_address;
                    main_basesoc_ethcore_arp_table_request_ip_address_liteetharp_fsm_next_value_ce4 <= 1'd1;
                    builder_fsm_next_state <= 3'd5;
                end else begin
                    main_basesoc_ethcore_arp_table_response_response_payload_mac_address_liteetharp_fsm_next_value1 <= main_basesoc_ethcore_arp_table_cache_response_payload_mac_address;
                    main_basesoc_ethcore_arp_table_response_response_payload_mac_address_liteetharp_fsm_next_value_ce1 <= 1'd1;
                    builder_fsm_next_state <= 3'd6;
                end
            end
        end
        3'd5: begin
            main_basesoc_ethcore_arp_table_source_valid <= 1'd1;
            main_basesoc_ethcore_arp_table_source_payload_request <= 1'd1;
            main_basesoc_ethcore_arp_table_source_payload_ip_address <= main_basesoc_ethcore_arp_table_request_ip_address;
            if (main_basesoc_ethcore_arp_table_source_ready) begin
                main_basesoc_ethcore_arp_table_request_counter_liteetharp_fsm_next_value3 <= (main_basesoc_ethcore_arp_table_request_counter + 1'd1);
                main_basesoc_ethcore_arp_table_request_counter_liteetharp_fsm_next_value_ce3 <= 1'd1;
                builder_fsm_next_state <= 1'd0;
            end
        end
        3'd6: begin
            main_basesoc_ethcore_arp_table_response_response_valid <= 1'd1;
            if (main_basesoc_ethcore_arp_table_response_response_ready) begin
                main_basesoc_ethcore_arp_table_response_response_payload_failed_liteetharp_fsm_next_value2 <= 1'd0;
                main_basesoc_ethcore_arp_table_response_response_payload_failed_liteetharp_fsm_next_value_ce2 <= 1'd1;
                builder_fsm_next_state <= 1'd0;
            end
        end
        default: begin
            if ((main_basesoc_ethcore_arp_table_sink_valid & main_basesoc_ethcore_arp_table_sink_payload_request)) begin
                builder_fsm_next_state <= 1'd1;
            end else begin
                if ((main_basesoc_ethcore_arp_table_sink_valid & main_basesoc_ethcore_arp_table_sink_payload_reply)) begin
                    builder_fsm_next_state <= 2'd2;
                end else begin
                    if (main_basesoc_ethcore_arp_table_request_request_valid) begin
                        builder_fsm_next_state <= 3'd4;
                    end else begin
                        if (main_basesoc_ethcore_arp_table_request_timer_done) begin
                            builder_fsm_next_state <= 2'd3;
                        end
                    end
                end
            end
        end
    endcase
end
assign main_basesoc_ethcore_ip_mac_port_sink_valid = main_basesoc_ethcore_ip_tx_source_source_valid0;
assign main_basesoc_ethcore_ip_tx_source_source_ready0 = main_basesoc_ethcore_ip_mac_port_sink_ready;
assign main_basesoc_ethcore_ip_mac_port_sink_first = main_basesoc_ethcore_ip_tx_source_source_first0;
assign main_basesoc_ethcore_ip_mac_port_sink_last = main_basesoc_ethcore_ip_tx_source_source_last0;
assign main_basesoc_ethcore_ip_mac_port_sink_payload_ethernet_type = main_basesoc_ethcore_ip_tx_source_source_payload_ethernet_type;
assign main_basesoc_ethcore_ip_mac_port_sink_payload_sender_mac = main_basesoc_ethcore_ip_tx_source_source_payload_sender_mac;
assign main_basesoc_ethcore_ip_mac_port_sink_payload_target_mac = main_basesoc_ethcore_ip_tx_source_source_payload_target_mac;
assign main_basesoc_ethcore_ip_mac_port_sink_payload_data = main_basesoc_ethcore_ip_tx_source_source_payload_data0;
assign main_basesoc_ethcore_ip_mac_port_sink_payload_last_be = main_basesoc_ethcore_ip_tx_source_source_payload_last_be0;
assign main_basesoc_ethcore_ip_mac_port_sink_payload_error = main_basesoc_ethcore_ip_tx_source_source_payload_error0;
assign main_basesoc_ethcore_ip_rx_sink_sink_valid = main_basesoc_ethcore_ip_mac_port_source_valid;
assign main_basesoc_ethcore_ip_mac_port_source_ready = main_basesoc_ethcore_ip_rx_sink_sink_ready;
assign main_basesoc_ethcore_ip_rx_sink_sink_first = main_basesoc_ethcore_ip_mac_port_source_first;
assign main_basesoc_ethcore_ip_rx_sink_sink_last = main_basesoc_ethcore_ip_mac_port_source_last;
assign main_basesoc_ethcore_ip_rx_sink_sink_payload_ethernet_type = main_basesoc_ethcore_ip_mac_port_source_payload_ethernet_type;
assign main_basesoc_ethcore_ip_rx_sink_sink_payload_sender_mac = main_basesoc_ethcore_ip_mac_port_source_payload_sender_mac;
assign main_basesoc_ethcore_ip_rx_sink_sink_payload_target_mac = main_basesoc_ethcore_ip_mac_port_source_payload_target_mac;
assign main_basesoc_ethcore_ip_rx_sink_sink_payload_data = main_basesoc_ethcore_ip_mac_port_source_payload_data;
assign main_basesoc_ethcore_ip_rx_sink_sink_payload_last_be = main_basesoc_ethcore_ip_mac_port_source_payload_last_be;
assign main_basesoc_ethcore_ip_rx_sink_sink_payload_error = main_basesoc_ethcore_ip_mac_port_source_payload_error;
assign main_basesoc_ethcore_ip_tx_sink_sink_valid0 = main_basesoc_ethcore_ip_crossbar_source_valid;
assign main_basesoc_ethcore_ip_crossbar_source_ready = main_basesoc_ethcore_ip_tx_sink_sink_ready0;
assign main_basesoc_ethcore_ip_tx_sink_sink_first0 = main_basesoc_ethcore_ip_crossbar_source_first;
assign main_basesoc_ethcore_ip_tx_sink_sink_last0 = main_basesoc_ethcore_ip_crossbar_source_last;
assign main_basesoc_ethcore_ip_tx_sink_sink_payload_data0 = main_basesoc_ethcore_ip_crossbar_source_payload_data;
assign main_basesoc_ethcore_ip_tx_sink_sink_payload_last_be0 = main_basesoc_ethcore_ip_crossbar_source_payload_last_be;
assign main_basesoc_ethcore_ip_tx_sink_sink_payload_error0 = main_basesoc_ethcore_ip_crossbar_source_payload_error;
assign main_basesoc_ethcore_ip_tx_sink_sink_param_length0 = main_basesoc_ethcore_ip_crossbar_source_param_length;
assign main_basesoc_ethcore_ip_tx_sink_sink_param_protocol0 = main_basesoc_ethcore_ip_crossbar_source_param_protocol;
assign main_basesoc_ethcore_ip_tx_sink_sink_param_ip_address0 = main_basesoc_ethcore_ip_crossbar_source_param_ip_address;
assign main_basesoc_ethcore_ip_crossbar_sink_valid = main_basesoc_ethcore_ip_rx_source_source_valid;
assign main_basesoc_ethcore_ip_rx_source_source_ready = main_basesoc_ethcore_ip_crossbar_sink_ready;
assign main_basesoc_ethcore_ip_crossbar_sink_first = main_basesoc_ethcore_ip_rx_source_source_first;
assign main_basesoc_ethcore_ip_crossbar_sink_last = main_basesoc_ethcore_ip_rx_source_source_last;
assign main_basesoc_ethcore_ip_crossbar_sink_payload_data = main_basesoc_ethcore_ip_rx_source_source_payload_data;
assign main_basesoc_ethcore_ip_crossbar_sink_payload_last_be = main_basesoc_ethcore_ip_rx_source_source_payload_last_be;
assign main_basesoc_ethcore_ip_crossbar_sink_payload_error = main_basesoc_ethcore_ip_rx_source_source_payload_error;
assign main_basesoc_ethcore_ip_crossbar_sink_param_length = main_basesoc_ethcore_ip_rx_source_source_param_length;
assign main_basesoc_ethcore_ip_crossbar_sink_param_protocol = main_basesoc_ethcore_ip_rx_source_source_param_protocol;
assign main_basesoc_ethcore_ip_crossbar_sink_param_ip_address = main_basesoc_ethcore_ip_rx_source_source_param_ip_address;
assign main_basesoc_ethcore_ip_tx_sink_sink_valid1 = main_basesoc_ethcore_ip_tx_sink_sink_valid0;
assign main_basesoc_ethcore_ip_tx_sink_sink_ready0 = main_basesoc_ethcore_ip_tx_sink_sink_ready1;
assign main_basesoc_ethcore_ip_tx_sink_sink_first1 = main_basesoc_ethcore_ip_tx_sink_sink_first0;
assign main_basesoc_ethcore_ip_tx_sink_sink_last1 = main_basesoc_ethcore_ip_tx_sink_sink_last0;
assign main_basesoc_ethcore_ip_tx_sink_sink_payload_data1 = main_basesoc_ethcore_ip_tx_sink_sink_payload_data0;
assign main_basesoc_ethcore_ip_tx_sink_sink_payload_last_be1 = main_basesoc_ethcore_ip_tx_sink_sink_payload_last_be0;
assign main_basesoc_ethcore_ip_tx_sink_sink_payload_error1 = main_basesoc_ethcore_ip_tx_sink_sink_payload_error0;
assign main_basesoc_ethcore_ip_tx_sink_sink_param_length1 = main_basesoc_ethcore_ip_tx_sink_sink_param_length0;
assign main_basesoc_ethcore_ip_tx_sink_sink_param_protocol1 = main_basesoc_ethcore_ip_tx_sink_sink_param_protocol0;
assign main_basesoc_ethcore_ip_tx_sink_sink_param_ip_address1 = main_basesoc_ethcore_ip_tx_sink_sink_param_ip_address0;
assign main_basesoc_ethcore_ip_tx_ce = main_basesoc_ethcore_ip_tx_source_source_valid1;
assign main_basesoc_ethcore_ip_tx_reset = ((main_basesoc_ethcore_ip_tx_source_source_valid0 & main_basesoc_ethcore_ip_tx_source_source_last0) & main_basesoc_ethcore_ip_tx_source_source_ready0);
assign main_basesoc_ethcore_ip_tx_packetizer_sink_last = main_basesoc_ethcore_ip_tx_source_source_last1;
assign main_basesoc_ethcore_ip_tx_packetizer_sink_payload_data = main_basesoc_ethcore_ip_tx_source_source_payload_data1;
assign main_basesoc_ethcore_ip_tx_packetizer_sink_payload_last_be = main_basesoc_ethcore_ip_tx_source_source_payload_last_be1;
assign main_basesoc_ethcore_ip_tx_packetizer_sink_param_protocol = main_basesoc_ethcore_ip_tx_source_source_param_protocol;
assign main_basesoc_ethcore_ip_tx_packetizer_sink_valid = (main_basesoc_ethcore_ip_tx_source_source_valid1 & main_basesoc_ethcore_ip_tx_liteethipv4checksum_done);
assign main_basesoc_ethcore_ip_tx_source_source_ready1 = (main_basesoc_ethcore_ip_tx_packetizer_sink_ready & main_basesoc_ethcore_ip_tx_liteethipv4checksum_done);
assign main_basesoc_ethcore_ip_tx_packetizer_sink_param_target_ip = main_basesoc_ethcore_ip_tx_source_source_param_ip_address;
assign main_basesoc_ethcore_ip_tx_packetizer_sink_param_total_length = (5'd20 + main_basesoc_ethcore_ip_tx_source_source_param_length);
assign main_basesoc_ethcore_ip_tx_packetizer_sink_param_version = 3'd4;
assign main_basesoc_ethcore_ip_tx_packetizer_sink_param_ihl = 3'd5;
assign main_basesoc_ethcore_ip_tx_packetizer_sink_param_identification = 1'd0;
assign main_basesoc_ethcore_ip_tx_packetizer_sink_param_ttl = 8'd128;
assign main_basesoc_ethcore_ip_tx_packetizer_sink_param_sender_ip = 32'd3232235826;
assign main_basesoc_ethcore_ip_tx_liteethipv4checksum_header = main_basesoc_ethcore_ip_tx_packetizer_header;
assign main_basesoc_ethcore_ip_tx_packetizer_sink_param_checksum = main_basesoc_ethcore_ip_tx_liteethipv4checksum_value;
assign main_basesoc_ethcore_arp_table_request_request_payload_ip_address = main_basesoc_ethcore_ip_tx_source_source_param_ip_address;
assign main_basesoc_ethcore_ip_tx_pipe_valid_sink_ready = ((~main_basesoc_ethcore_ip_tx_pipe_valid_source_valid) | main_basesoc_ethcore_ip_tx_pipe_valid_source_ready);
assign main_basesoc_ethcore_ip_tx_pipe_valid_sink_valid = main_basesoc_ethcore_ip_tx_sink_sink_valid1;
assign main_basesoc_ethcore_ip_tx_sink_sink_ready1 = main_basesoc_ethcore_ip_tx_pipe_valid_sink_ready;
assign main_basesoc_ethcore_ip_tx_pipe_valid_sink_first = main_basesoc_ethcore_ip_tx_sink_sink_first1;
assign main_basesoc_ethcore_ip_tx_pipe_valid_sink_last = main_basesoc_ethcore_ip_tx_sink_sink_last1;
assign main_basesoc_ethcore_ip_tx_pipe_valid_sink_payload_data = main_basesoc_ethcore_ip_tx_sink_sink_payload_data1;
assign main_basesoc_ethcore_ip_tx_pipe_valid_sink_payload_last_be = main_basesoc_ethcore_ip_tx_sink_sink_payload_last_be1;
assign main_basesoc_ethcore_ip_tx_pipe_valid_sink_payload_error = main_basesoc_ethcore_ip_tx_sink_sink_payload_error1;
assign main_basesoc_ethcore_ip_tx_pipe_valid_sink_param_length = main_basesoc_ethcore_ip_tx_sink_sink_param_length1;
assign main_basesoc_ethcore_ip_tx_pipe_valid_sink_param_protocol = main_basesoc_ethcore_ip_tx_sink_sink_param_protocol1;
assign main_basesoc_ethcore_ip_tx_pipe_valid_sink_param_ip_address = main_basesoc_ethcore_ip_tx_sink_sink_param_ip_address1;
assign main_basesoc_ethcore_ip_tx_source_source_valid1 = main_basesoc_ethcore_ip_tx_pipe_valid_source_valid;
assign main_basesoc_ethcore_ip_tx_pipe_valid_source_ready = main_basesoc_ethcore_ip_tx_source_source_ready1;
assign main_basesoc_ethcore_ip_tx_source_source_first1 = main_basesoc_ethcore_ip_tx_pipe_valid_source_first;
assign main_basesoc_ethcore_ip_tx_source_source_last1 = main_basesoc_ethcore_ip_tx_pipe_valid_source_last;
assign main_basesoc_ethcore_ip_tx_source_source_payload_data1 = main_basesoc_ethcore_ip_tx_pipe_valid_source_payload_data;
assign main_basesoc_ethcore_ip_tx_source_source_payload_last_be1 = main_basesoc_ethcore_ip_tx_pipe_valid_source_payload_last_be;
assign main_basesoc_ethcore_ip_tx_source_source_payload_error1 = main_basesoc_ethcore_ip_tx_pipe_valid_source_payload_error;
assign main_basesoc_ethcore_ip_tx_source_source_param_length = main_basesoc_ethcore_ip_tx_pipe_valid_source_param_length;
assign main_basesoc_ethcore_ip_tx_source_source_param_protocol = main_basesoc_ethcore_ip_tx_pipe_valid_source_param_protocol;
assign main_basesoc_ethcore_ip_tx_source_source_param_ip_address = main_basesoc_ethcore_ip_tx_pipe_valid_source_param_ip_address;
assign main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next0 = (main_basesoc_ethcore_ip_tx_liteethipv4checksum_r + main_basesoc_ethcore_ip_tx_liteethipv4checksum_header[15:0]);
assign main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next1 = (main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next0 + main_basesoc_ethcore_ip_tx_liteethipv4checksum_header[31:16]);
assign main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next2 = (main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next1 + main_basesoc_ethcore_ip_tx_liteethipv4checksum_header[47:32]);
assign main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next3 = (main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next2 + main_basesoc_ethcore_ip_tx_liteethipv4checksum_header[63:48]);
assign main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next4 = (main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next3 + main_basesoc_ethcore_ip_tx_liteethipv4checksum_header[79:64]);
assign main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next5 = (main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next4 + main_basesoc_ethcore_ip_tx_liteethipv4checksum_header[111:96]);
assign main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next6 = (main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next5 + main_basesoc_ethcore_ip_tx_liteethipv4checksum_header[127:112]);
assign main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next7 = (main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next6 + main_basesoc_ethcore_ip_tx_liteethipv4checksum_header[143:128]);
assign main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next8 = (main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next7 + main_basesoc_ethcore_ip_tx_liteethipv4checksum_header[159:144]);
assign main_basesoc_ethcore_ip_tx_liteethipv4checksum_value = (~{main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next8[7:0], main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next8[15:8]});
assign main_basesoc_ethcore_ip_tx_liteethipv4checksum_counter_ce = (~main_basesoc_ethcore_ip_tx_liteethipv4checksum_done);
assign main_basesoc_ethcore_ip_tx_liteethipv4checksum_done = (main_basesoc_ethcore_ip_tx_liteethipv4checksum_counter == 4'd9);
always @(*) begin
    main_basesoc_ethcore_ip_tx_packetizer_header <= 160'd0;
    main_basesoc_ethcore_ip_tx_packetizer_header[95:80] <= {main_basesoc_ethcore_ip_tx_packetizer_sink_param_checksum[7:0], main_basesoc_ethcore_ip_tx_packetizer_sink_param_checksum[15:8]};
    main_basesoc_ethcore_ip_tx_packetizer_header[47:32] <= {main_basesoc_ethcore_ip_tx_packetizer_sink_param_identification[7:0], main_basesoc_ethcore_ip_tx_packetizer_sink_param_identification[15:8]};
    main_basesoc_ethcore_ip_tx_packetizer_header[3:0] <= {main_basesoc_ethcore_ip_tx_packetizer_sink_param_ihl};
    main_basesoc_ethcore_ip_tx_packetizer_header[79:72] <= {main_basesoc_ethcore_ip_tx_packetizer_sink_param_protocol};
    main_basesoc_ethcore_ip_tx_packetizer_header[127:96] <= {main_basesoc_ethcore_ip_tx_packetizer_sink_param_sender_ip[7:0], main_basesoc_ethcore_ip_tx_packetizer_sink_param_sender_ip[15:8], main_basesoc_ethcore_ip_tx_packetizer_sink_param_sender_ip[23:16], main_basesoc_ethcore_ip_tx_packetizer_sink_param_sender_ip[31:24]};
    main_basesoc_ethcore_ip_tx_packetizer_header[159:128] <= {main_basesoc_ethcore_ip_tx_packetizer_sink_param_target_ip[7:0], main_basesoc_ethcore_ip_tx_packetizer_sink_param_target_ip[15:8], main_basesoc_ethcore_ip_tx_packetizer_sink_param_target_ip[23:16], main_basesoc_ethcore_ip_tx_packetizer_sink_param_target_ip[31:24]};
    main_basesoc_ethcore_ip_tx_packetizer_header[31:16] <= {main_basesoc_ethcore_ip_tx_packetizer_sink_param_total_length[7:0], main_basesoc_ethcore_ip_tx_packetizer_sink_param_total_length[15:8]};
    main_basesoc_ethcore_ip_tx_packetizer_header[71:64] <= {main_basesoc_ethcore_ip_tx_packetizer_sink_param_ttl};
    main_basesoc_ethcore_ip_tx_packetizer_header[7:4] <= {main_basesoc_ethcore_ip_tx_packetizer_sink_param_version};
end
assign main_basesoc_ethcore_ip_tx_packetizer_source_description = main_basesoc_ethcore_ip_tx_packetizer_sink_last;
assign main_basesoc_ethcore_ip_tx_packetizer_new_last_be = {main_basesoc_ethcore_ip_tx_packetizer_source_description};
assign main_basesoc_ethcore_ip_tx_packetizer_in_data_copy = (main_basesoc_ethcore_ip_tx_packetizer_is_ongoing0 | main_basesoc_ethcore_ip_tx_packetizer_is_ongoing1);
always @(*) begin
    main_basesoc_ethcore_ip_tx_packetizer_source_last <= 1'd0;
    if (main_basesoc_ethcore_ip_tx_packetizer_source_last_s) begin
        main_basesoc_ethcore_ip_tx_packetizer_source_last <= main_basesoc_ethcore_ip_tx_packetizer_source_last_b;
    end else begin
        main_basesoc_ethcore_ip_tx_packetizer_source_last <= main_basesoc_ethcore_ip_tx_packetizer_source_last_a;
    end
end
assign main_basesoc_ethcore_ip_tx_packetizer_source_payload_error = main_basesoc_ethcore_ip_tx_packetizer_sink_payload_error;
always @(*) begin
    builder_liteethip_liteethiptx_fsm0_next_state <= 2'd0;
    builder_liteethip_liteethiptx_fsm1_next_state <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_count_liteethip_fsm0_next_value0 <= 5'd0;
    main_basesoc_ethcore_ip_tx_packetizer_count_liteethip_fsm0_next_value_ce0 <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_delayed_last_be_liteethip_fsm1_next_value0 <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_delayed_last_be_liteethip_fsm1_next_value_ce0 <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_fsm0_next_value1 <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_fsm0_next_value_ce1 <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_is_ongoing0 <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_is_ongoing1 <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_is_ongoing2 <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_sink_ready <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_source_last_a <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_source_last_b <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_source_last_s <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_source_payload_data <= 8'd0;
    main_basesoc_ethcore_ip_tx_packetizer_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_source_valid <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_sr_load <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_sr_shift <= 1'd0;
    builder_liteethip_liteethiptx_fsm0_next_state <= builder_liteethip_liteethiptx_fsm0_state;
    case (builder_liteethip_liteethiptx_fsm0_state)
        1'd1: begin
            main_basesoc_ethcore_ip_tx_packetizer_source_valid <= 1'd1;
            main_basesoc_ethcore_ip_tx_packetizer_source_last_a <= 1'd0;
            main_basesoc_ethcore_ip_tx_packetizer_source_payload_data <= main_basesoc_ethcore_ip_tx_packetizer_sr[159:8];
            if ((main_basesoc_ethcore_ip_tx_packetizer_source_valid & main_basesoc_ethcore_ip_tx_packetizer_source_ready)) begin
                main_basesoc_ethcore_ip_tx_packetizer_sr_shift <= 1'd1;
                if ((main_basesoc_ethcore_ip_tx_packetizer_count == 5'd19)) begin
                    main_basesoc_ethcore_ip_tx_packetizer_sr_shift <= 1'd0;
                    builder_liteethip_liteethiptx_fsm0_next_state <= 2'd2;
                    main_basesoc_ethcore_ip_tx_packetizer_count_liteethip_fsm0_next_value0 <= (main_basesoc_ethcore_ip_tx_packetizer_count + 1'd1);
                    main_basesoc_ethcore_ip_tx_packetizer_count_liteethip_fsm0_next_value_ce0 <= 1'd1;
                end else begin
                    main_basesoc_ethcore_ip_tx_packetizer_count_liteethip_fsm0_next_value0 <= (main_basesoc_ethcore_ip_tx_packetizer_count + 1'd1);
                    main_basesoc_ethcore_ip_tx_packetizer_count_liteethip_fsm0_next_value_ce0 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_ethcore_ip_tx_packetizer_source_valid <= main_basesoc_ethcore_ip_tx_packetizer_sink_valid;
            main_basesoc_ethcore_ip_tx_packetizer_source_last_a <= main_basesoc_ethcore_ip_tx_packetizer_sink_last;
            main_basesoc_ethcore_ip_tx_packetizer_source_payload_data <= main_basesoc_ethcore_ip_tx_packetizer_sink_payload_data;
            if ((main_basesoc_ethcore_ip_tx_packetizer_source_valid & main_basesoc_ethcore_ip_tx_packetizer_source_ready)) begin
                main_basesoc_ethcore_ip_tx_packetizer_sink_ready <= 1'd1;
                if (main_basesoc_ethcore_ip_tx_packetizer_source_last) begin
                    builder_liteethip_liteethiptx_fsm0_next_state <= 1'd0;
                end
            end
            main_basesoc_ethcore_ip_tx_packetizer_is_ongoing0 <= 1'd1;
        end
        2'd3: begin
            main_basesoc_ethcore_ip_tx_packetizer_is_ongoing1 <= 1'd1;
        end
        default: begin
            main_basesoc_ethcore_ip_tx_packetizer_sink_ready <= 1'd1;
            main_basesoc_ethcore_ip_tx_packetizer_count_liteethip_fsm0_next_value0 <= 1'd1;
            main_basesoc_ethcore_ip_tx_packetizer_count_liteethip_fsm0_next_value_ce0 <= 1'd1;
            if (main_basesoc_ethcore_ip_tx_packetizer_sink_valid) begin
                main_basesoc_ethcore_ip_tx_packetizer_sink_ready <= 1'd0;
                main_basesoc_ethcore_ip_tx_packetizer_source_valid <= 1'd1;
                main_basesoc_ethcore_ip_tx_packetizer_source_last_a <= 1'd0;
                main_basesoc_ethcore_ip_tx_packetizer_source_payload_data <= main_basesoc_ethcore_ip_tx_packetizer_header[7:0];
                if ((main_basesoc_ethcore_ip_tx_packetizer_source_valid & main_basesoc_ethcore_ip_tx_packetizer_source_ready)) begin
                    main_basesoc_ethcore_ip_tx_packetizer_sr_load <= 1'd1;
                    main_basesoc_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_fsm0_next_value1 <= 1'd1;
                    main_basesoc_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_fsm0_next_value_ce1 <= 1'd1;
                    if (1'd0) begin
                        builder_liteethip_liteethiptx_fsm0_next_state <= 2'd2;
                    end else begin
                        builder_liteethip_liteethiptx_fsm0_next_state <= 1'd1;
                    end
                end
            end
            main_basesoc_ethcore_ip_tx_packetizer_is_ongoing2 <= 1'd1;
        end
    endcase
    builder_liteethip_liteethiptx_fsm1_next_state <= builder_liteethip_liteethiptx_fsm1_state;
    case (builder_liteethip_liteethiptx_fsm1_state)
        1'd1: begin
            main_basesoc_ethcore_ip_tx_packetizer_source_last_b <= 1'd1;
            main_basesoc_ethcore_ip_tx_packetizer_source_last_s <= 1'd1;
            main_basesoc_ethcore_ip_tx_packetizer_source_payload_last_be <= main_basesoc_ethcore_ip_tx_packetizer_delayed_last_be;
            main_basesoc_ethcore_ip_tx_packetizer_sink_ready <= 1'd0;
            if (main_basesoc_ethcore_ip_tx_packetizer_source_ready) begin
                builder_liteethip_liteethiptx_fsm1_next_state <= 1'd0;
            end
        end
        default: begin
            if (((main_basesoc_ethcore_ip_tx_packetizer_in_data_copy & main_basesoc_ethcore_ip_tx_packetizer_sink_last) & (main_basesoc_ethcore_ip_tx_packetizer_source_description > main_basesoc_ethcore_ip_tx_packetizer_new_last_be))) begin
                main_basesoc_ethcore_ip_tx_packetizer_source_last_b <= 1'd0;
                main_basesoc_ethcore_ip_tx_packetizer_source_last_s <= 1'd1;
                main_basesoc_ethcore_ip_tx_packetizer_source_payload_last_be <= 1'd0;
                if ((main_basesoc_ethcore_ip_tx_packetizer_source_ready & main_basesoc_ethcore_ip_tx_packetizer_source_valid)) begin
                    main_basesoc_ethcore_ip_tx_packetizer_delayed_last_be_liteethip_fsm1_next_value0 <= main_basesoc_ethcore_ip_tx_packetizer_new_last_be;
                    main_basesoc_ethcore_ip_tx_packetizer_delayed_last_be_liteethip_fsm1_next_value_ce0 <= 1'd1;
                    builder_liteethip_liteethiptx_fsm1_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_ethcore_ip_tx_packetizer_in_data_copy) begin
                    main_basesoc_ethcore_ip_tx_packetizer_source_last_b <= main_basesoc_ethcore_ip_tx_packetizer_sink_last;
                    main_basesoc_ethcore_ip_tx_packetizer_source_last_s <= 1'd1;
                    main_basesoc_ethcore_ip_tx_packetizer_source_payload_last_be <= main_basesoc_ethcore_ip_tx_packetizer_new_last_be;
                end
            end
            if (main_basesoc_ethcore_ip_tx_packetizer_in_data_copy) begin
                main_basesoc_ethcore_ip_tx_packetizer_sink_ready <= main_basesoc_ethcore_ip_tx_packetizer_source_ready;
            end else begin
                if (main_basesoc_ethcore_ip_tx_packetizer_is_ongoing2) begin
                    main_basesoc_ethcore_ip_tx_packetizer_sink_ready <= (~main_basesoc_ethcore_ip_tx_packetizer_sink_valid);
                end
            end
        end
    endcase
end
always @(*) begin
    builder_liteethip_liteethiptx_next_state <= 3'd0;
    main_basesoc_ethcore_arp_table_request_request_valid <= 1'd0;
    main_basesoc_ethcore_arp_table_response_response_ready <= 1'd0;
    main_basesoc_ethcore_ip_tx_packetizer_source_ready <= 1'd0;
    main_basesoc_ethcore_ip_tx_source_source_first0 <= 1'd0;
    main_basesoc_ethcore_ip_tx_source_source_last0 <= 1'd0;
    main_basesoc_ethcore_ip_tx_source_source_payload_data0 <= 8'd0;
    main_basesoc_ethcore_ip_tx_source_source_payload_error0 <= 1'd0;
    main_basesoc_ethcore_ip_tx_source_source_payload_ethernet_type <= 16'd0;
    main_basesoc_ethcore_ip_tx_source_source_payload_last_be0 <= 1'd0;
    main_basesoc_ethcore_ip_tx_source_source_payload_sender_mac <= 48'd0;
    main_basesoc_ethcore_ip_tx_source_source_payload_target_mac <= 48'd0;
    main_basesoc_ethcore_ip_tx_source_source_valid0 <= 1'd0;
    main_basesoc_ethcore_ip_tx_target_mac_liteethip_next_value <= 48'd0;
    main_basesoc_ethcore_ip_tx_target_mac_liteethip_next_value_ce <= 1'd0;
    main_basesoc_ethcore_ip_tx_target_unreachable <= 1'd0;
    builder_liteethip_liteethiptx_next_state <= builder_liteethip_liteethiptx_state;
    case (builder_liteethip_liteethiptx_state)
        1'd1: begin
            main_basesoc_ethcore_arp_table_request_request_valid <= 1'd1;
            if ((main_basesoc_ethcore_arp_table_request_request_valid & main_basesoc_ethcore_arp_table_request_request_ready)) begin
                builder_liteethip_liteethiptx_next_state <= 2'd2;
            end
        end
        2'd2: begin
            if (main_basesoc_ethcore_arp_table_response_response_valid) begin
                main_basesoc_ethcore_ip_tx_target_mac_liteethip_next_value <= main_basesoc_ethcore_arp_table_response_response_payload_mac_address;
                main_basesoc_ethcore_ip_tx_target_mac_liteethip_next_value_ce <= 1'd1;
                main_basesoc_ethcore_arp_table_response_response_ready <= 1'd1;
                if (main_basesoc_ethcore_arp_table_response_response_payload_failed) begin
                    main_basesoc_ethcore_ip_tx_target_unreachable <= 1'd1;
                    builder_liteethip_liteethiptx_next_state <= 3'd4;
                end else begin
                    builder_liteethip_liteethiptx_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            main_basesoc_ethcore_ip_tx_source_source_valid0 <= main_basesoc_ethcore_ip_tx_packetizer_source_valid;
            main_basesoc_ethcore_ip_tx_packetizer_source_ready <= main_basesoc_ethcore_ip_tx_source_source_ready0;
            main_basesoc_ethcore_ip_tx_source_source_first0 <= main_basesoc_ethcore_ip_tx_packetizer_source_first;
            main_basesoc_ethcore_ip_tx_source_source_last0 <= main_basesoc_ethcore_ip_tx_packetizer_source_last;
            main_basesoc_ethcore_ip_tx_source_source_payload_ethernet_type <= main_basesoc_ethcore_ip_tx_packetizer_source_payload_ethernet_type;
            main_basesoc_ethcore_ip_tx_source_source_payload_sender_mac <= main_basesoc_ethcore_ip_tx_packetizer_source_payload_sender_mac;
            main_basesoc_ethcore_ip_tx_source_source_payload_target_mac <= main_basesoc_ethcore_ip_tx_packetizer_source_payload_target_mac;
            main_basesoc_ethcore_ip_tx_source_source_payload_data0 <= main_basesoc_ethcore_ip_tx_packetizer_source_payload_data;
            main_basesoc_ethcore_ip_tx_source_source_payload_last_be0 <= main_basesoc_ethcore_ip_tx_packetizer_source_payload_last_be;
            main_basesoc_ethcore_ip_tx_source_source_payload_error0 <= main_basesoc_ethcore_ip_tx_packetizer_source_payload_error;
            main_basesoc_ethcore_ip_tx_source_source_payload_ethernet_type <= 12'd2048;
            main_basesoc_ethcore_ip_tx_source_source_payload_target_mac <= main_basesoc_ethcore_ip_tx_target_mac;
            main_basesoc_ethcore_ip_tx_source_source_payload_sender_mac <= 45'd18566422200321;
            if (((main_basesoc_ethcore_ip_tx_source_source_valid0 & main_basesoc_ethcore_ip_tx_source_source_last0) & main_basesoc_ethcore_ip_tx_source_source_ready0)) begin
                builder_liteethip_liteethiptx_next_state <= 1'd0;
            end
        end
        3'd4: begin
            main_basesoc_ethcore_ip_tx_packetizer_source_ready <= 1'd1;
            if (((main_basesoc_ethcore_ip_tx_packetizer_source_valid & main_basesoc_ethcore_ip_tx_packetizer_source_last) & main_basesoc_ethcore_ip_tx_packetizer_source_ready)) begin
                builder_liteethip_liteethiptx_next_state <= 1'd0;
            end
        end
        default: begin
            if (main_basesoc_ethcore_ip_tx_packetizer_source_valid) begin
                if ((main_basesoc_ethcore_ip_tx_source_source_param_ip_address[7:0] == 8'd255)) begin
                    main_basesoc_ethcore_ip_tx_target_mac_liteethip_next_value <= 48'd281474976710655;
                    main_basesoc_ethcore_ip_tx_target_mac_liteethip_next_value_ce <= 1'd1;
                    builder_liteethip_liteethiptx_next_state <= 2'd3;
                end else begin
                    if ((main_basesoc_ethcore_ip_tx_source_source_param_ip_address[31:28] == 4'd14)) begin
                        main_basesoc_ethcore_ip_tx_target_mac_liteethip_next_value <= {24'd65630, 1'd0, main_basesoc_ethcore_ip_tx_source_source_param_ip_address[22:0]};
                        main_basesoc_ethcore_ip_tx_target_mac_liteethip_next_value_ce <= 1'd1;
                        builder_liteethip_liteethiptx_next_state <= 2'd3;
                    end else begin
                        builder_liteethip_liteethiptx_next_state <= 1'd1;
                    end
                end
            end
        end
    endcase
end
assign main_basesoc_ethcore_ip_rx_depacketizer_sink_valid = main_basesoc_ethcore_ip_rx_sink_sink_valid;
assign main_basesoc_ethcore_ip_rx_sink_sink_ready = main_basesoc_ethcore_ip_rx_depacketizer_sink_ready;
assign main_basesoc_ethcore_ip_rx_depacketizer_sink_first = main_basesoc_ethcore_ip_rx_sink_sink_first;
assign main_basesoc_ethcore_ip_rx_depacketizer_sink_last = main_basesoc_ethcore_ip_rx_sink_sink_last;
assign main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_ethernet_type = main_basesoc_ethcore_ip_rx_sink_sink_payload_ethernet_type;
assign main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_sender_mac = main_basesoc_ethcore_ip_rx_sink_sink_payload_sender_mac;
assign main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_target_mac = main_basesoc_ethcore_ip_rx_sink_sink_payload_target_mac;
assign main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_data = main_basesoc_ethcore_ip_rx_sink_sink_payload_data;
assign main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_last_be = main_basesoc_ethcore_ip_rx_sink_sink_payload_last_be;
assign main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_error = main_basesoc_ethcore_ip_rx_sink_sink_payload_error;
assign main_basesoc_ethcore_ip_rx_liteethipv4checksum_header = main_basesoc_ethcore_ip_rx_depacketizer_header;
assign main_basesoc_ethcore_ip_rx_reset = (~main_basesoc_ethcore_ip_rx_depacketizer_source_valid);
assign main_basesoc_ethcore_ip_rx_ce = 1'd1;
assign main_basesoc_ethcore_ip_rx_source_source_last = main_basesoc_ethcore_ip_rx_depacketizer_source_last;
assign main_basesoc_ethcore_ip_rx_source_source_payload_data = main_basesoc_ethcore_ip_rx_depacketizer_source_payload_data;
assign main_basesoc_ethcore_ip_rx_source_source_payload_last_be = main_basesoc_ethcore_ip_rx_depacketizer_source_payload_last_be;
assign main_basesoc_ethcore_ip_rx_source_source_payload_error = main_basesoc_ethcore_ip_rx_depacketizer_source_payload_error;
assign main_basesoc_ethcore_ip_rx_source_source_param_protocol = main_basesoc_ethcore_ip_rx_depacketizer_source_param_protocol;
assign main_basesoc_ethcore_ip_rx_source_source_param_length = (main_basesoc_ethcore_ip_rx_depacketizer_source_param_total_length - 5'd20);
assign main_basesoc_ethcore_ip_rx_source_source_param_ip_address = main_basesoc_ethcore_ip_rx_depacketizer_source_param_sender_ip;
assign main_basesoc_ethcore_ip_rx_depacketizer_header = main_basesoc_ethcore_ip_rx_depacketizer_sr;
assign main_basesoc_ethcore_ip_rx_depacketizer_source_param_checksum = {main_basesoc_ethcore_ip_rx_depacketizer_header[87:80], main_basesoc_ethcore_ip_rx_depacketizer_header[95:88]};
assign main_basesoc_ethcore_ip_rx_depacketizer_source_param_identification = {main_basesoc_ethcore_ip_rx_depacketizer_header[39:32], main_basesoc_ethcore_ip_rx_depacketizer_header[47:40]};
assign main_basesoc_ethcore_ip_rx_depacketizer_source_param_ihl = {main_basesoc_ethcore_ip_rx_depacketizer_header[3:0]};
assign main_basesoc_ethcore_ip_rx_depacketizer_source_param_protocol = {main_basesoc_ethcore_ip_rx_depacketizer_header[79:72]};
assign main_basesoc_ethcore_ip_rx_depacketizer_source_param_sender_ip = {main_basesoc_ethcore_ip_rx_depacketizer_header[103:96], main_basesoc_ethcore_ip_rx_depacketizer_header[111:104], main_basesoc_ethcore_ip_rx_depacketizer_header[119:112], main_basesoc_ethcore_ip_rx_depacketizer_header[127:120]};
assign main_basesoc_ethcore_ip_rx_depacketizer_source_param_target_ip = {main_basesoc_ethcore_ip_rx_depacketizer_header[135:128], main_basesoc_ethcore_ip_rx_depacketizer_header[143:136], main_basesoc_ethcore_ip_rx_depacketizer_header[151:144], main_basesoc_ethcore_ip_rx_depacketizer_header[159:152]};
assign main_basesoc_ethcore_ip_rx_depacketizer_source_param_total_length = {main_basesoc_ethcore_ip_rx_depacketizer_header[23:16], main_basesoc_ethcore_ip_rx_depacketizer_header[31:24]};
assign main_basesoc_ethcore_ip_rx_depacketizer_source_param_ttl = {main_basesoc_ethcore_ip_rx_depacketizer_header[71:64]};
assign main_basesoc_ethcore_ip_rx_depacketizer_source_param_version = {main_basesoc_ethcore_ip_rx_depacketizer_header[7:4]};
assign main_basesoc_ethcore_ip_rx_depacketizer_source_payload_error = main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_error;
assign main_basesoc_ethcore_ip_rx_depacketizer_source_description = main_basesoc_ethcore_ip_rx_depacketizer_sink_last;
assign main_basesoc_ethcore_ip_rx_depacketizer_new_last_be = {main_basesoc_ethcore_ip_rx_depacketizer_source_description};
assign main_basesoc_ethcore_ip_rx_depacketizer_is_in_copy = (main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing0 | main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing1);
always @(*) begin
    main_basesoc_ethcore_ip_rx_depacketizer_source_last <= 1'd0;
    if (main_basesoc_ethcore_ip_rx_depacketizer_source_last_s) begin
        main_basesoc_ethcore_ip_rx_depacketizer_source_last <= main_basesoc_ethcore_ip_rx_depacketizer_source_last_b;
    end else begin
        main_basesoc_ethcore_ip_rx_depacketizer_source_last <= main_basesoc_ethcore_ip_rx_depacketizer_source_last_a;
    end
end
always @(*) begin
    builder_liteethip_liteethiprx_fsm0_next_state <= 2'd0;
    builder_liteethip_liteethiprx_fsm1_next_state <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_count_liteethip_fsm0_next_value2 <= 5'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_count_liteethip_fsm0_next_value_ce2 <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_delayed_last_be_liteethip_fsm1_next_value1 <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_delayed_last_be_liteethip_fsm1_next_value_ce1 <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_fsm0_next_value3 <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_fsm0_next_value_ce3 <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing0 <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing1 <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing2 <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing3 <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_sink_ready <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_source_last_a <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_source_last_b <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_source_last_s <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_source_payload_data <= 8'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_source_valid <= 1'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_sr_shift <= 1'd0;
    builder_liteethip_liteethiprx_fsm0_next_state <= builder_liteethip_liteethiprx_fsm0_state;
    case (builder_liteethip_liteethiprx_fsm0_state)
        1'd1: begin
            main_basesoc_ethcore_ip_rx_depacketizer_sink_ready <= 1'd1;
            if (main_basesoc_ethcore_ip_rx_depacketizer_sink_valid) begin
                main_basesoc_ethcore_ip_rx_depacketizer_count_liteethip_fsm0_next_value2 <= (main_basesoc_ethcore_ip_rx_depacketizer_count + 1'd1);
                main_basesoc_ethcore_ip_rx_depacketizer_count_liteethip_fsm0_next_value_ce2 <= 1'd1;
                main_basesoc_ethcore_ip_rx_depacketizer_sr_shift <= 1'd1;
                if ((main_basesoc_ethcore_ip_rx_depacketizer_count == 5'd19)) begin
                    builder_liteethip_liteethiprx_fsm0_next_state <= 2'd2;
                    main_basesoc_ethcore_ip_rx_depacketizer_count_liteethip_fsm0_next_value2 <= (main_basesoc_ethcore_ip_rx_depacketizer_count + 1'd1);
                    main_basesoc_ethcore_ip_rx_depacketizer_count_liteethip_fsm0_next_value_ce2 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_ethcore_ip_rx_depacketizer_source_valid <= (main_basesoc_ethcore_ip_rx_depacketizer_sink_valid | main_basesoc_ethcore_ip_rx_depacketizer_sink_d_last);
            main_basesoc_ethcore_ip_rx_depacketizer_source_last_a <= (main_basesoc_ethcore_ip_rx_depacketizer_sink_last | main_basesoc_ethcore_ip_rx_depacketizer_sink_d_last);
            main_basesoc_ethcore_ip_rx_depacketizer_sink_ready <= main_basesoc_ethcore_ip_rx_depacketizer_source_ready;
            main_basesoc_ethcore_ip_rx_depacketizer_source_payload_data <= main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_data;
            if ((main_basesoc_ethcore_ip_rx_depacketizer_source_valid & main_basesoc_ethcore_ip_rx_depacketizer_source_ready)) begin
                if (main_basesoc_ethcore_ip_rx_depacketizer_source_last) begin
                    builder_liteethip_liteethiprx_fsm0_next_state <= 1'd0;
                end
            end
            main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing0 <= 1'd1;
            main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing2 <= 1'd1;
        end
        2'd3: begin
            main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing1 <= 1'd1;
            main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing3 <= 1'd1;
        end
        default: begin
            main_basesoc_ethcore_ip_rx_depacketizer_sink_ready <= 1'd1;
            main_basesoc_ethcore_ip_rx_depacketizer_count_liteethip_fsm0_next_value2 <= 1'd1;
            main_basesoc_ethcore_ip_rx_depacketizer_count_liteethip_fsm0_next_value_ce2 <= 1'd1;
            if (main_basesoc_ethcore_ip_rx_depacketizer_sink_valid) begin
                main_basesoc_ethcore_ip_rx_depacketizer_sr_shift <= 1'd1;
                main_basesoc_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_fsm0_next_value3 <= 1'd1;
                main_basesoc_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_fsm0_next_value_ce3 <= 1'd1;
                if (1'd0) begin
                    builder_liteethip_liteethiprx_fsm0_next_state <= 2'd2;
                end else begin
                    builder_liteethip_liteethiprx_fsm0_next_state <= 1'd1;
                end
            end
        end
    endcase
    builder_liteethip_liteethiprx_fsm1_next_state <= builder_liteethip_liteethiprx_fsm1_state;
    case (builder_liteethip_liteethiprx_fsm1_state)
        1'd1: begin
            main_basesoc_ethcore_ip_rx_depacketizer_source_last_b <= 1'd1;
            main_basesoc_ethcore_ip_rx_depacketizer_source_last_s <= 1'd1;
            main_basesoc_ethcore_ip_rx_depacketizer_source_payload_last_be <= main_basesoc_ethcore_ip_rx_depacketizer_delayed_last_be;
            main_basesoc_ethcore_ip_rx_depacketizer_sink_ready <= 1'd0;
            if ((main_basesoc_ethcore_ip_rx_depacketizer_source_ready & main_basesoc_ethcore_ip_rx_depacketizer_source_valid)) begin
                builder_liteethip_liteethiprx_fsm1_next_state <= 1'd0;
            end
        end
        default: begin
            if (((main_basesoc_ethcore_ip_rx_depacketizer_sink_valid & main_basesoc_ethcore_ip_rx_depacketizer_sink_last) & (main_basesoc_ethcore_ip_rx_depacketizer_source_description > main_basesoc_ethcore_ip_rx_depacketizer_new_last_be))) begin
                main_basesoc_ethcore_ip_rx_depacketizer_source_last_b <= 1'd0;
                main_basesoc_ethcore_ip_rx_depacketizer_source_last_s <= 1'd1;
                main_basesoc_ethcore_ip_rx_depacketizer_source_payload_last_be <= 1'd0;
                if (((main_basesoc_ethcore_ip_rx_depacketizer_source_ready & main_basesoc_ethcore_ip_rx_depacketizer_source_valid) | ((~main_basesoc_ethcore_ip_rx_depacketizer_was_in_copy) & main_basesoc_ethcore_ip_rx_depacketizer_is_in_copy))) begin
                    main_basesoc_ethcore_ip_rx_depacketizer_delayed_last_be_liteethip_fsm1_next_value1 <= main_basesoc_ethcore_ip_rx_depacketizer_new_last_be;
                    main_basesoc_ethcore_ip_rx_depacketizer_delayed_last_be_liteethip_fsm1_next_value_ce1 <= 1'd1;
                    builder_liteethip_liteethiprx_fsm1_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_ethcore_ip_rx_depacketizer_sink_last) begin
                    main_basesoc_ethcore_ip_rx_depacketizer_source_last_b <= 1'd1;
                    main_basesoc_ethcore_ip_rx_depacketizer_source_last_s <= 1'd1;
                    main_basesoc_ethcore_ip_rx_depacketizer_source_payload_last_be <= main_basesoc_ethcore_ip_rx_depacketizer_new_last_be;
                end
            end
            if ((main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing2 | (main_basesoc_ethcore_ip_rx_depacketizer_is_ongoing3 & (~main_basesoc_ethcore_ip_rx_depacketizer_fsm_from_idle)))) begin
                main_basesoc_ethcore_ip_rx_depacketizer_sink_ready <= main_basesoc_ethcore_ip_rx_depacketizer_source_ready;
            end else begin
                main_basesoc_ethcore_ip_rx_depacketizer_sink_ready <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next0 = (main_basesoc_ethcore_ip_rx_liteethipv4checksum_r + main_basesoc_ethcore_ip_rx_liteethipv4checksum_header[15:0]);
assign main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next1 = (main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next0 + main_basesoc_ethcore_ip_rx_liteethipv4checksum_header[31:16]);
assign main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next2 = (main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next1 + main_basesoc_ethcore_ip_rx_liteethipv4checksum_header[47:32]);
assign main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next3 = (main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next2 + main_basesoc_ethcore_ip_rx_liteethipv4checksum_header[63:48]);
assign main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next4 = (main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next3 + main_basesoc_ethcore_ip_rx_liteethipv4checksum_header[79:64]);
assign main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next5 = (main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next4 + main_basesoc_ethcore_ip_rx_liteethipv4checksum_header[95:80]);
assign main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next6 = (main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next5 + main_basesoc_ethcore_ip_rx_liteethipv4checksum_header[111:96]);
assign main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next7 = (main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next6 + main_basesoc_ethcore_ip_rx_liteethipv4checksum_header[127:112]);
assign main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next8 = (main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next7 + main_basesoc_ethcore_ip_rx_liteethipv4checksum_header[143:128]);
assign main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next9 = (main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next8 + main_basesoc_ethcore_ip_rx_liteethipv4checksum_header[159:144]);
assign main_basesoc_ethcore_ip_rx_liteethipv4checksum_value = (~{main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next9[7:0], main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next9[15:8]});
assign main_basesoc_ethcore_ip_rx_liteethipv4checksum_counter_ce = (~main_basesoc_ethcore_ip_rx_liteethipv4checksum_done);
assign main_basesoc_ethcore_ip_rx_liteethipv4checksum_done = (main_basesoc_ethcore_ip_rx_liteethipv4checksum_counter == 4'd11);
always @(*) begin
    builder_liteethip_liteethiprx_next_state <= 2'd0;
    main_basesoc_ethcore_ip_rx_depacketizer_source_ready <= 1'd0;
    main_basesoc_ethcore_ip_rx_source_source_valid <= 1'd0;
    builder_liteethip_liteethiprx_next_state <= builder_liteethip_liteethiprx_state;
    case (builder_liteethip_liteethiprx_state)
        1'd1: begin
            main_basesoc_ethcore_ip_rx_source_source_valid <= main_basesoc_ethcore_ip_rx_depacketizer_source_valid;
            main_basesoc_ethcore_ip_rx_depacketizer_source_ready <= main_basesoc_ethcore_ip_rx_source_source_ready;
            if ((main_basesoc_ethcore_ip_rx_source_source_valid & main_basesoc_ethcore_ip_rx_source_source_ready)) begin
                if (main_basesoc_ethcore_ip_rx_source_source_last) begin
                    builder_liteethip_liteethiprx_next_state <= 1'd0;
                end
            end
        end
        2'd2: begin
            main_basesoc_ethcore_ip_rx_depacketizer_source_ready <= 1'd1;
            if (((main_basesoc_ethcore_ip_rx_depacketizer_source_valid & main_basesoc_ethcore_ip_rx_depacketizer_source_last) & main_basesoc_ethcore_ip_rx_depacketizer_source_ready)) begin
                builder_liteethip_liteethiprx_next_state <= 1'd0;
            end
        end
        default: begin
            if ((main_basesoc_ethcore_ip_rx_depacketizer_source_valid & main_basesoc_ethcore_ip_rx_liteethipv4checksum_done)) begin
                builder_liteethip_liteethiprx_next_state <= 2'd2;
                if ((((((main_basesoc_ethcore_ip_rx_depacketizer_source_param_target_ip == 32'd3232235826) | 1'd1) & (main_basesoc_ethcore_ip_rx_depacketizer_source_param_version == 3'd4)) & (main_basesoc_ethcore_ip_rx_depacketizer_source_param_ihl == 3'd5)) & (main_basesoc_ethcore_ip_rx_liteethipv4checksum_value == 1'd0))) begin
                    builder_liteethip_liteethiprx_next_state <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    builder_liteethip_sel0 <= 2'd0;
    if ((main_basesoc_ethcore_ip_crossbar_sink_param_protocol == 1'd1)) begin
        builder_liteethip_sel0 <= 1'd1;
    end
    if ((main_basesoc_ethcore_ip_crossbar_sink_param_protocol == 5'd17)) begin
        builder_liteethip_sel0 <= 2'd2;
    end
end
always @(*) begin
    builder_liteethip_request <= 2'd0;
    builder_liteethip_request[0] <= builder_liteethip_status0_ongoing0;
    builder_liteethip_request[1] <= builder_liteethip_status1_ongoing0;
end
always @(*) begin
    main_basesoc_ethcore_icmp_ip_port_sink_ready <= 1'd0;
    main_basesoc_ethcore_ip_crossbar_source_first <= 1'd0;
    main_basesoc_ethcore_ip_crossbar_source_last <= 1'd0;
    main_basesoc_ethcore_ip_crossbar_source_param_ip_address <= 32'd0;
    main_basesoc_ethcore_ip_crossbar_source_param_length <= 16'd0;
    main_basesoc_ethcore_ip_crossbar_source_param_protocol <= 8'd0;
    main_basesoc_ethcore_ip_crossbar_source_payload_data <= 8'd0;
    main_basesoc_ethcore_ip_crossbar_source_payload_error <= 1'd0;
    main_basesoc_ethcore_ip_crossbar_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_ip_crossbar_source_valid <= 1'd0;
    main_basesoc_ethcore_ip_port_sink_ready <= 1'd0;
    case (builder_liteethip_grant)
        1'd0: begin
            main_basesoc_ethcore_ip_crossbar_source_valid <= main_basesoc_ethcore_icmp_ip_port_sink_valid;
            main_basesoc_ethcore_icmp_ip_port_sink_ready <= main_basesoc_ethcore_ip_crossbar_source_ready;
            main_basesoc_ethcore_ip_crossbar_source_first <= main_basesoc_ethcore_icmp_ip_port_sink_first;
            main_basesoc_ethcore_ip_crossbar_source_last <= main_basesoc_ethcore_icmp_ip_port_sink_last;
            main_basesoc_ethcore_ip_crossbar_source_payload_data <= main_basesoc_ethcore_icmp_ip_port_sink_payload_data;
            main_basesoc_ethcore_ip_crossbar_source_payload_last_be <= main_basesoc_ethcore_icmp_ip_port_sink_payload_last_be;
            main_basesoc_ethcore_ip_crossbar_source_payload_error <= main_basesoc_ethcore_icmp_ip_port_sink_payload_error;
            main_basesoc_ethcore_ip_crossbar_source_param_length <= main_basesoc_ethcore_icmp_ip_port_sink_param_length;
            main_basesoc_ethcore_ip_crossbar_source_param_protocol <= main_basesoc_ethcore_icmp_ip_port_sink_param_protocol;
            main_basesoc_ethcore_ip_crossbar_source_param_ip_address <= main_basesoc_ethcore_icmp_ip_port_sink_param_ip_address;
        end
        1'd1: begin
            main_basesoc_ethcore_ip_crossbar_source_valid <= main_basesoc_ethcore_ip_port_sink_valid;
            main_basesoc_ethcore_ip_port_sink_ready <= main_basesoc_ethcore_ip_crossbar_source_ready;
            main_basesoc_ethcore_ip_crossbar_source_first <= main_basesoc_ethcore_ip_port_sink_first;
            main_basesoc_ethcore_ip_crossbar_source_last <= main_basesoc_ethcore_ip_port_sink_last;
            main_basesoc_ethcore_ip_crossbar_source_payload_data <= main_basesoc_ethcore_ip_port_sink_payload_data;
            main_basesoc_ethcore_ip_crossbar_source_payload_last_be <= main_basesoc_ethcore_ip_port_sink_payload_last_be;
            main_basesoc_ethcore_ip_crossbar_source_payload_error <= main_basesoc_ethcore_ip_port_sink_payload_error;
            main_basesoc_ethcore_ip_crossbar_source_param_length <= main_basesoc_ethcore_ip_port_sink_param_length;
            main_basesoc_ethcore_ip_crossbar_source_param_protocol <= main_basesoc_ethcore_ip_port_sink_param_protocol;
            main_basesoc_ethcore_ip_crossbar_source_param_ip_address <= main_basesoc_ethcore_ip_port_sink_param_ip_address;
        end
    endcase
end
assign builder_liteethip_status0_last = ((main_basesoc_ethcore_icmp_ip_port_sink_valid & main_basesoc_ethcore_icmp_ip_port_sink_last) & main_basesoc_ethcore_icmp_ip_port_sink_ready);
assign builder_liteethip_status0_ongoing0 = ((main_basesoc_ethcore_icmp_ip_port_sink_valid | builder_liteethip_status0_ongoing1) & (~builder_liteethip_status0_last));
assign builder_liteethip_status1_last = ((main_basesoc_ethcore_ip_port_sink_valid & main_basesoc_ethcore_ip_port_sink_last) & main_basesoc_ethcore_ip_port_sink_ready);
assign builder_liteethip_status1_ongoing0 = ((main_basesoc_ethcore_ip_port_sink_valid | builder_liteethip_status1_ongoing1) & (~builder_liteethip_status1_last));
always @(*) begin
    builder_liteethip_sel1 <= 2'd0;
    if (builder_liteethip_first) begin
        builder_liteethip_sel1 <= builder_liteethip_sel0;
    end else begin
        builder_liteethip_sel1 <= builder_liteethip_sel_ongoing;
    end
end
always @(*) begin
    main_basesoc_ethcore_icmp_ip_port_source_first <= 1'd0;
    main_basesoc_ethcore_icmp_ip_port_source_last <= 1'd0;
    main_basesoc_ethcore_icmp_ip_port_source_param_ip_address <= 32'd0;
    main_basesoc_ethcore_icmp_ip_port_source_param_length <= 16'd0;
    main_basesoc_ethcore_icmp_ip_port_source_param_protocol <= 8'd0;
    main_basesoc_ethcore_icmp_ip_port_source_payload_data <= 8'd0;
    main_basesoc_ethcore_icmp_ip_port_source_payload_error <= 1'd0;
    main_basesoc_ethcore_icmp_ip_port_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_icmp_ip_port_source_valid <= 1'd0;
    main_basesoc_ethcore_ip_crossbar_sink_ready <= 1'd0;
    main_basesoc_ethcore_ip_port_source_first <= 1'd0;
    main_basesoc_ethcore_ip_port_source_last <= 1'd0;
    main_basesoc_ethcore_ip_port_source_param_ip_address <= 32'd0;
    main_basesoc_ethcore_ip_port_source_param_length <= 16'd0;
    main_basesoc_ethcore_ip_port_source_param_protocol <= 8'd0;
    main_basesoc_ethcore_ip_port_source_payload_data <= 8'd0;
    main_basesoc_ethcore_ip_port_source_payload_error <= 1'd0;
    main_basesoc_ethcore_ip_port_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_ip_port_source_valid <= 1'd0;
    case (builder_liteethip_sel1)
        1'd1: begin
            main_basesoc_ethcore_icmp_ip_port_source_valid <= main_basesoc_ethcore_ip_crossbar_sink_valid;
            main_basesoc_ethcore_ip_crossbar_sink_ready <= main_basesoc_ethcore_icmp_ip_port_source_ready;
            main_basesoc_ethcore_icmp_ip_port_source_first <= main_basesoc_ethcore_ip_crossbar_sink_first;
            main_basesoc_ethcore_icmp_ip_port_source_last <= main_basesoc_ethcore_ip_crossbar_sink_last;
            main_basesoc_ethcore_icmp_ip_port_source_payload_data <= main_basesoc_ethcore_ip_crossbar_sink_payload_data;
            main_basesoc_ethcore_icmp_ip_port_source_payload_last_be <= main_basesoc_ethcore_ip_crossbar_sink_payload_last_be;
            main_basesoc_ethcore_icmp_ip_port_source_payload_error <= main_basesoc_ethcore_ip_crossbar_sink_payload_error;
            main_basesoc_ethcore_icmp_ip_port_source_param_length <= main_basesoc_ethcore_ip_crossbar_sink_param_length;
            main_basesoc_ethcore_icmp_ip_port_source_param_protocol <= main_basesoc_ethcore_ip_crossbar_sink_param_protocol;
            main_basesoc_ethcore_icmp_ip_port_source_param_ip_address <= main_basesoc_ethcore_ip_crossbar_sink_param_ip_address;
        end
        2'd2: begin
            main_basesoc_ethcore_ip_port_source_valid <= main_basesoc_ethcore_ip_crossbar_sink_valid;
            main_basesoc_ethcore_ip_crossbar_sink_ready <= main_basesoc_ethcore_ip_port_source_ready;
            main_basesoc_ethcore_ip_port_source_first <= main_basesoc_ethcore_ip_crossbar_sink_first;
            main_basesoc_ethcore_ip_port_source_last <= main_basesoc_ethcore_ip_crossbar_sink_last;
            main_basesoc_ethcore_ip_port_source_payload_data <= main_basesoc_ethcore_ip_crossbar_sink_payload_data;
            main_basesoc_ethcore_ip_port_source_payload_last_be <= main_basesoc_ethcore_ip_crossbar_sink_payload_last_be;
            main_basesoc_ethcore_ip_port_source_payload_error <= main_basesoc_ethcore_ip_crossbar_sink_payload_error;
            main_basesoc_ethcore_ip_port_source_param_length <= main_basesoc_ethcore_ip_crossbar_sink_param_length;
            main_basesoc_ethcore_ip_port_source_param_protocol <= main_basesoc_ethcore_ip_crossbar_sink_param_protocol;
            main_basesoc_ethcore_ip_port_source_param_ip_address <= main_basesoc_ethcore_ip_crossbar_sink_param_ip_address;
        end
        default: begin
            main_basesoc_ethcore_ip_crossbar_sink_ready <= 1'd1;
        end
    endcase
end
assign builder_liteethip_last = ((main_basesoc_ethcore_ip_crossbar_sink_valid & main_basesoc_ethcore_ip_crossbar_sink_last) & main_basesoc_ethcore_ip_crossbar_sink_ready);
assign builder_liteethip_ongoing0 = ((main_basesoc_ethcore_ip_crossbar_sink_valid | builder_liteethip_ongoing1) & (~builder_liteethip_last));
assign main_basesoc_ethcore_icmp_echo_sink_valid = main_basesoc_ethcore_icmp_rx_source_source_valid;
assign main_basesoc_ethcore_icmp_rx_source_source_ready = main_basesoc_ethcore_icmp_echo_sink_ready;
assign main_basesoc_ethcore_icmp_echo_sink_first = main_basesoc_ethcore_icmp_rx_source_source_first;
assign main_basesoc_ethcore_icmp_echo_sink_last = main_basesoc_ethcore_icmp_rx_source_source_last;
assign main_basesoc_ethcore_icmp_echo_sink_payload_data = main_basesoc_ethcore_icmp_rx_source_source_payload_data;
assign main_basesoc_ethcore_icmp_echo_sink_payload_last_be = main_basesoc_ethcore_icmp_rx_source_source_payload_last_be;
assign main_basesoc_ethcore_icmp_echo_sink_payload_error = main_basesoc_ethcore_icmp_rx_source_source_payload_error;
assign main_basesoc_ethcore_icmp_echo_sink_param_checksum = main_basesoc_ethcore_icmp_rx_source_source_param_checksum;
assign main_basesoc_ethcore_icmp_echo_sink_param_code = main_basesoc_ethcore_icmp_rx_source_source_param_code;
assign main_basesoc_ethcore_icmp_echo_sink_param_msgtype = main_basesoc_ethcore_icmp_rx_source_source_param_msgtype;
assign main_basesoc_ethcore_icmp_echo_sink_param_quench = main_basesoc_ethcore_icmp_rx_source_source_param_quench;
assign main_basesoc_ethcore_icmp_echo_sink_param_ip_address = main_basesoc_ethcore_icmp_rx_source_source_param_ip_address;
assign main_basesoc_ethcore_icmp_echo_sink_param_length = main_basesoc_ethcore_icmp_rx_source_source_param_length;
assign main_basesoc_ethcore_icmp_tx_sink_sink_valid = main_basesoc_ethcore_icmp_echo_source_valid;
assign main_basesoc_ethcore_icmp_echo_source_ready = main_basesoc_ethcore_icmp_tx_sink_sink_ready;
assign main_basesoc_ethcore_icmp_tx_sink_sink_first = main_basesoc_ethcore_icmp_echo_source_first;
assign main_basesoc_ethcore_icmp_tx_sink_sink_last = main_basesoc_ethcore_icmp_echo_source_last;
assign main_basesoc_ethcore_icmp_tx_sink_sink_payload_data = main_basesoc_ethcore_icmp_echo_source_payload_data;
assign main_basesoc_ethcore_icmp_tx_sink_sink_payload_last_be = main_basesoc_ethcore_icmp_echo_source_payload_last_be;
assign main_basesoc_ethcore_icmp_tx_sink_sink_payload_error = main_basesoc_ethcore_icmp_echo_source_payload_error;
assign main_basesoc_ethcore_icmp_tx_sink_sink_param_checksum = main_basesoc_ethcore_icmp_echo_source_param_checksum;
assign main_basesoc_ethcore_icmp_tx_sink_sink_param_code = main_basesoc_ethcore_icmp_echo_source_param_code;
assign main_basesoc_ethcore_icmp_tx_sink_sink_param_msgtype = main_basesoc_ethcore_icmp_echo_source_param_msgtype;
assign main_basesoc_ethcore_icmp_tx_sink_sink_param_quench = main_basesoc_ethcore_icmp_echo_source_param_quench;
assign main_basesoc_ethcore_icmp_tx_sink_sink_param_ip_address = main_basesoc_ethcore_icmp_echo_source_param_ip_address;
assign main_basesoc_ethcore_icmp_tx_sink_sink_param_length = main_basesoc_ethcore_icmp_echo_source_param_length;
assign main_basesoc_ethcore_icmp_ip_port_sink_valid = main_basesoc_ethcore_icmp_tx_source_source_valid;
assign main_basesoc_ethcore_icmp_tx_source_source_ready = main_basesoc_ethcore_icmp_ip_port_sink_ready;
assign main_basesoc_ethcore_icmp_ip_port_sink_first = main_basesoc_ethcore_icmp_tx_source_source_first;
assign main_basesoc_ethcore_icmp_ip_port_sink_last = main_basesoc_ethcore_icmp_tx_source_source_last;
assign main_basesoc_ethcore_icmp_ip_port_sink_payload_data = main_basesoc_ethcore_icmp_tx_source_source_payload_data;
assign main_basesoc_ethcore_icmp_ip_port_sink_payload_last_be = main_basesoc_ethcore_icmp_tx_source_source_payload_last_be;
assign main_basesoc_ethcore_icmp_ip_port_sink_payload_error = main_basesoc_ethcore_icmp_tx_source_source_payload_error;
assign main_basesoc_ethcore_icmp_ip_port_sink_param_length = main_basesoc_ethcore_icmp_tx_source_source_param_length;
assign main_basesoc_ethcore_icmp_ip_port_sink_param_protocol = main_basesoc_ethcore_icmp_tx_source_source_param_protocol;
assign main_basesoc_ethcore_icmp_ip_port_sink_param_ip_address = main_basesoc_ethcore_icmp_tx_source_source_param_ip_address;
assign main_basesoc_ethcore_icmp_rx_sink_sink_valid = main_basesoc_ethcore_icmp_ip_port_source_valid;
assign main_basesoc_ethcore_icmp_ip_port_source_ready = main_basesoc_ethcore_icmp_rx_sink_sink_ready;
assign main_basesoc_ethcore_icmp_rx_sink_sink_first = main_basesoc_ethcore_icmp_ip_port_source_first;
assign main_basesoc_ethcore_icmp_rx_sink_sink_last = main_basesoc_ethcore_icmp_ip_port_source_last;
assign main_basesoc_ethcore_icmp_rx_sink_sink_payload_data = main_basesoc_ethcore_icmp_ip_port_source_payload_data;
assign main_basesoc_ethcore_icmp_rx_sink_sink_payload_last_be = main_basesoc_ethcore_icmp_ip_port_source_payload_last_be;
assign main_basesoc_ethcore_icmp_rx_sink_sink_payload_error = main_basesoc_ethcore_icmp_ip_port_source_payload_error;
assign main_basesoc_ethcore_icmp_rx_sink_sink_param_length = main_basesoc_ethcore_icmp_ip_port_source_param_length;
assign main_basesoc_ethcore_icmp_rx_sink_sink_param_protocol = main_basesoc_ethcore_icmp_ip_port_source_param_protocol;
assign main_basesoc_ethcore_icmp_rx_sink_sink_param_ip_address = main_basesoc_ethcore_icmp_ip_port_source_param_ip_address;
assign main_basesoc_ethcore_icmp_tx_packetizer_sink_valid = main_basesoc_ethcore_icmp_tx_sink_sink_valid;
assign main_basesoc_ethcore_icmp_tx_sink_sink_ready = main_basesoc_ethcore_icmp_tx_packetizer_sink_ready;
assign main_basesoc_ethcore_icmp_tx_packetizer_sink_last = main_basesoc_ethcore_icmp_tx_sink_sink_last;
assign main_basesoc_ethcore_icmp_tx_packetizer_sink_payload_data = main_basesoc_ethcore_icmp_tx_sink_sink_payload_data;
assign main_basesoc_ethcore_icmp_tx_packetizer_sink_payload_last_be = main_basesoc_ethcore_icmp_tx_sink_sink_payload_last_be;
assign main_basesoc_ethcore_icmp_tx_packetizer_sink_param_checksum = main_basesoc_ethcore_icmp_tx_sink_sink_param_checksum;
assign main_basesoc_ethcore_icmp_tx_packetizer_sink_param_code = main_basesoc_ethcore_icmp_tx_sink_sink_param_code;
assign main_basesoc_ethcore_icmp_tx_packetizer_sink_param_msgtype = main_basesoc_ethcore_icmp_tx_sink_sink_param_msgtype;
assign main_basesoc_ethcore_icmp_tx_packetizer_sink_param_quench = main_basesoc_ethcore_icmp_tx_sink_sink_param_quench;
assign main_basesoc_ethcore_icmp_tx_source_source_first = main_basesoc_ethcore_icmp_tx_packetizer_source_first;
assign main_basesoc_ethcore_icmp_tx_source_source_last = main_basesoc_ethcore_icmp_tx_packetizer_source_last;
assign main_basesoc_ethcore_icmp_tx_source_source_payload_data = main_basesoc_ethcore_icmp_tx_packetizer_source_payload_data;
assign main_basesoc_ethcore_icmp_tx_source_source_payload_last_be = main_basesoc_ethcore_icmp_tx_packetizer_source_payload_last_be;
assign main_basesoc_ethcore_icmp_tx_source_source_payload_error = main_basesoc_ethcore_icmp_tx_packetizer_source_payload_error;
always @(*) begin
    main_basesoc_ethcore_icmp_tx_source_source_param_length <= 16'd0;
    main_basesoc_ethcore_icmp_tx_source_source_param_length <= main_basesoc_ethcore_icmp_tx_packetizer_source_param_length;
    main_basesoc_ethcore_icmp_tx_source_source_param_length <= (main_basesoc_ethcore_icmp_tx_sink_sink_param_length + 4'd8);
end
always @(*) begin
    main_basesoc_ethcore_icmp_tx_source_source_param_protocol <= 8'd0;
    main_basesoc_ethcore_icmp_tx_source_source_param_protocol <= main_basesoc_ethcore_icmp_tx_packetizer_source_param_protocol;
    main_basesoc_ethcore_icmp_tx_source_source_param_protocol <= 1'd1;
end
always @(*) begin
    main_basesoc_ethcore_icmp_tx_source_source_param_ip_address <= 32'd0;
    main_basesoc_ethcore_icmp_tx_source_source_param_ip_address <= main_basesoc_ethcore_icmp_tx_packetizer_source_param_ip_address;
    main_basesoc_ethcore_icmp_tx_source_source_param_ip_address <= main_basesoc_ethcore_icmp_tx_sink_sink_param_ip_address;
end
always @(*) begin
    main_basesoc_ethcore_icmp_tx_packetizer_header <= 64'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_header[31:16] <= {main_basesoc_ethcore_icmp_tx_packetizer_sink_param_checksum[7:0], main_basesoc_ethcore_icmp_tx_packetizer_sink_param_checksum[15:8]};
    main_basesoc_ethcore_icmp_tx_packetizer_header[15:8] <= {main_basesoc_ethcore_icmp_tx_packetizer_sink_param_code};
    main_basesoc_ethcore_icmp_tx_packetizer_header[7:0] <= {main_basesoc_ethcore_icmp_tx_packetizer_sink_param_msgtype};
    main_basesoc_ethcore_icmp_tx_packetizer_header[63:32] <= {main_basesoc_ethcore_icmp_tx_packetizer_sink_param_quench[7:0], main_basesoc_ethcore_icmp_tx_packetizer_sink_param_quench[15:8], main_basesoc_ethcore_icmp_tx_packetizer_sink_param_quench[23:16], main_basesoc_ethcore_icmp_tx_packetizer_sink_param_quench[31:24]};
end
assign main_basesoc_ethcore_icmp_tx_packetizer_source_description = main_basesoc_ethcore_icmp_tx_packetizer_sink_last;
assign main_basesoc_ethcore_icmp_tx_packetizer_new_last_be = {main_basesoc_ethcore_icmp_tx_packetizer_source_description};
assign main_basesoc_ethcore_icmp_tx_packetizer_in_data_copy = (main_basesoc_ethcore_icmp_tx_packetizer_is_ongoing0 | main_basesoc_ethcore_icmp_tx_packetizer_is_ongoing1);
always @(*) begin
    main_basesoc_ethcore_icmp_tx_packetizer_source_last <= 1'd0;
    if (main_basesoc_ethcore_icmp_tx_packetizer_source_last_s) begin
        main_basesoc_ethcore_icmp_tx_packetizer_source_last <= main_basesoc_ethcore_icmp_tx_packetizer_source_last_b;
    end else begin
        main_basesoc_ethcore_icmp_tx_packetizer_source_last <= main_basesoc_ethcore_icmp_tx_packetizer_source_last_a;
    end
end
assign main_basesoc_ethcore_icmp_tx_packetizer_source_payload_error = main_basesoc_ethcore_icmp_tx_packetizer_sink_payload_error;
always @(*) begin
    builder_liteethicmptx_fsm0_next_state <= 2'd0;
    builder_liteethicmptx_fsm1_next_state <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_count_fsm0_next_value0 <= 3'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_count_fsm0_next_value_ce0 <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_delayed_last_be_fsm1_next_value0 <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_delayed_last_be_fsm1_next_value_ce0 <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_fsm_from_idle_fsm0_next_value1 <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_fsm_from_idle_fsm0_next_value_ce1 <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_is_ongoing0 <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_is_ongoing1 <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_is_ongoing2 <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_sink_ready <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_source_last_a <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_source_last_b <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_source_last_s <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_source_payload_data <= 8'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_source_valid <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_sr_load <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_sr_shift <= 1'd0;
    builder_liteethicmptx_fsm0_next_state <= builder_liteethicmptx_fsm0_state;
    case (builder_liteethicmptx_fsm0_state)
        1'd1: begin
            main_basesoc_ethcore_icmp_tx_packetizer_source_valid <= 1'd1;
            main_basesoc_ethcore_icmp_tx_packetizer_source_last_a <= 1'd0;
            main_basesoc_ethcore_icmp_tx_packetizer_source_payload_data <= main_basesoc_ethcore_icmp_tx_packetizer_sr[63:8];
            if ((main_basesoc_ethcore_icmp_tx_packetizer_source_valid & main_basesoc_ethcore_icmp_tx_packetizer_source_ready)) begin
                main_basesoc_ethcore_icmp_tx_packetizer_sr_shift <= 1'd1;
                if ((main_basesoc_ethcore_icmp_tx_packetizer_count == 3'd7)) begin
                    main_basesoc_ethcore_icmp_tx_packetizer_sr_shift <= 1'd0;
                    builder_liteethicmptx_fsm0_next_state <= 2'd2;
                    main_basesoc_ethcore_icmp_tx_packetizer_count_fsm0_next_value0 <= (main_basesoc_ethcore_icmp_tx_packetizer_count + 1'd1);
                    main_basesoc_ethcore_icmp_tx_packetizer_count_fsm0_next_value_ce0 <= 1'd1;
                end else begin
                    main_basesoc_ethcore_icmp_tx_packetizer_count_fsm0_next_value0 <= (main_basesoc_ethcore_icmp_tx_packetizer_count + 1'd1);
                    main_basesoc_ethcore_icmp_tx_packetizer_count_fsm0_next_value_ce0 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_ethcore_icmp_tx_packetizer_source_valid <= main_basesoc_ethcore_icmp_tx_packetizer_sink_valid;
            main_basesoc_ethcore_icmp_tx_packetizer_source_last_a <= main_basesoc_ethcore_icmp_tx_packetizer_sink_last;
            main_basesoc_ethcore_icmp_tx_packetizer_source_payload_data <= main_basesoc_ethcore_icmp_tx_packetizer_sink_payload_data;
            if ((main_basesoc_ethcore_icmp_tx_packetizer_source_valid & main_basesoc_ethcore_icmp_tx_packetizer_source_ready)) begin
                main_basesoc_ethcore_icmp_tx_packetizer_sink_ready <= 1'd1;
                if (main_basesoc_ethcore_icmp_tx_packetizer_source_last) begin
                    builder_liteethicmptx_fsm0_next_state <= 1'd0;
                end
            end
            main_basesoc_ethcore_icmp_tx_packetizer_is_ongoing0 <= 1'd1;
        end
        2'd3: begin
            main_basesoc_ethcore_icmp_tx_packetizer_is_ongoing1 <= 1'd1;
        end
        default: begin
            main_basesoc_ethcore_icmp_tx_packetizer_sink_ready <= 1'd1;
            main_basesoc_ethcore_icmp_tx_packetizer_count_fsm0_next_value0 <= 1'd1;
            main_basesoc_ethcore_icmp_tx_packetizer_count_fsm0_next_value_ce0 <= 1'd1;
            if (main_basesoc_ethcore_icmp_tx_packetizer_sink_valid) begin
                main_basesoc_ethcore_icmp_tx_packetizer_sink_ready <= 1'd0;
                main_basesoc_ethcore_icmp_tx_packetizer_source_valid <= 1'd1;
                main_basesoc_ethcore_icmp_tx_packetizer_source_last_a <= 1'd0;
                main_basesoc_ethcore_icmp_tx_packetizer_source_payload_data <= main_basesoc_ethcore_icmp_tx_packetizer_header[7:0];
                if ((main_basesoc_ethcore_icmp_tx_packetizer_source_valid & main_basesoc_ethcore_icmp_tx_packetizer_source_ready)) begin
                    main_basesoc_ethcore_icmp_tx_packetizer_sr_load <= 1'd1;
                    main_basesoc_ethcore_icmp_tx_packetizer_fsm_from_idle_fsm0_next_value1 <= 1'd1;
                    main_basesoc_ethcore_icmp_tx_packetizer_fsm_from_idle_fsm0_next_value_ce1 <= 1'd1;
                    if (1'd0) begin
                        builder_liteethicmptx_fsm0_next_state <= 2'd2;
                    end else begin
                        builder_liteethicmptx_fsm0_next_state <= 1'd1;
                    end
                end
            end
            main_basesoc_ethcore_icmp_tx_packetizer_is_ongoing2 <= 1'd1;
        end
    endcase
    builder_liteethicmptx_fsm1_next_state <= builder_liteethicmptx_fsm1_state;
    case (builder_liteethicmptx_fsm1_state)
        1'd1: begin
            main_basesoc_ethcore_icmp_tx_packetizer_source_last_b <= 1'd1;
            main_basesoc_ethcore_icmp_tx_packetizer_source_last_s <= 1'd1;
            main_basesoc_ethcore_icmp_tx_packetizer_source_payload_last_be <= main_basesoc_ethcore_icmp_tx_packetizer_delayed_last_be;
            main_basesoc_ethcore_icmp_tx_packetizer_sink_ready <= 1'd0;
            if (main_basesoc_ethcore_icmp_tx_packetizer_source_ready) begin
                builder_liteethicmptx_fsm1_next_state <= 1'd0;
            end
        end
        default: begin
            if (((main_basesoc_ethcore_icmp_tx_packetizer_in_data_copy & main_basesoc_ethcore_icmp_tx_packetizer_sink_last) & (main_basesoc_ethcore_icmp_tx_packetizer_source_description > main_basesoc_ethcore_icmp_tx_packetizer_new_last_be))) begin
                main_basesoc_ethcore_icmp_tx_packetizer_source_last_b <= 1'd0;
                main_basesoc_ethcore_icmp_tx_packetizer_source_last_s <= 1'd1;
                main_basesoc_ethcore_icmp_tx_packetizer_source_payload_last_be <= 1'd0;
                if ((main_basesoc_ethcore_icmp_tx_packetizer_source_ready & main_basesoc_ethcore_icmp_tx_packetizer_source_valid)) begin
                    main_basesoc_ethcore_icmp_tx_packetizer_delayed_last_be_fsm1_next_value0 <= main_basesoc_ethcore_icmp_tx_packetizer_new_last_be;
                    main_basesoc_ethcore_icmp_tx_packetizer_delayed_last_be_fsm1_next_value_ce0 <= 1'd1;
                    builder_liteethicmptx_fsm1_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_ethcore_icmp_tx_packetizer_in_data_copy) begin
                    main_basesoc_ethcore_icmp_tx_packetizer_source_last_b <= main_basesoc_ethcore_icmp_tx_packetizer_sink_last;
                    main_basesoc_ethcore_icmp_tx_packetizer_source_last_s <= 1'd1;
                    main_basesoc_ethcore_icmp_tx_packetizer_source_payload_last_be <= main_basesoc_ethcore_icmp_tx_packetizer_new_last_be;
                end
            end
            if (main_basesoc_ethcore_icmp_tx_packetizer_in_data_copy) begin
                main_basesoc_ethcore_icmp_tx_packetizer_sink_ready <= main_basesoc_ethcore_icmp_tx_packetizer_source_ready;
            end else begin
                if (main_basesoc_ethcore_icmp_tx_packetizer_is_ongoing2) begin
                    main_basesoc_ethcore_icmp_tx_packetizer_sink_ready <= (~main_basesoc_ethcore_icmp_tx_packetizer_sink_valid);
                end
            end
        end
    endcase
end
always @(*) begin
    builder_liteethicmptx_next_state <= 1'd0;
    main_basesoc_ethcore_icmp_tx_packetizer_source_ready <= 1'd0;
    main_basesoc_ethcore_icmp_tx_source_source_valid <= 1'd0;
    builder_liteethicmptx_next_state <= builder_liteethicmptx_state;
    case (builder_liteethicmptx_state)
        1'd1: begin
            main_basesoc_ethcore_icmp_tx_source_source_valid <= main_basesoc_ethcore_icmp_tx_packetizer_source_valid;
            main_basesoc_ethcore_icmp_tx_packetizer_source_ready <= main_basesoc_ethcore_icmp_tx_source_source_ready;
            if (((main_basesoc_ethcore_icmp_tx_source_source_valid & main_basesoc_ethcore_icmp_tx_source_source_last) & main_basesoc_ethcore_icmp_tx_source_source_ready)) begin
                builder_liteethicmptx_next_state <= 1'd0;
            end
        end
        default: begin
            if (main_basesoc_ethcore_icmp_tx_packetizer_source_valid) begin
                builder_liteethicmptx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_ethcore_icmp_rx_depacketizer_sink_valid = main_basesoc_ethcore_icmp_rx_sink_sink_valid;
assign main_basesoc_ethcore_icmp_rx_sink_sink_ready = main_basesoc_ethcore_icmp_rx_depacketizer_sink_ready;
assign main_basesoc_ethcore_icmp_rx_depacketizer_sink_first = main_basesoc_ethcore_icmp_rx_sink_sink_first;
assign main_basesoc_ethcore_icmp_rx_depacketizer_sink_last = main_basesoc_ethcore_icmp_rx_sink_sink_last;
assign main_basesoc_ethcore_icmp_rx_depacketizer_sink_payload_data = main_basesoc_ethcore_icmp_rx_sink_sink_payload_data;
assign main_basesoc_ethcore_icmp_rx_depacketizer_sink_payload_last_be = main_basesoc_ethcore_icmp_rx_sink_sink_payload_last_be;
assign main_basesoc_ethcore_icmp_rx_depacketizer_sink_payload_error = main_basesoc_ethcore_icmp_rx_sink_sink_payload_error;
assign main_basesoc_ethcore_icmp_rx_depacketizer_sink_param_length = main_basesoc_ethcore_icmp_rx_sink_sink_param_length;
assign main_basesoc_ethcore_icmp_rx_depacketizer_sink_param_protocol = main_basesoc_ethcore_icmp_rx_sink_sink_param_protocol;
assign main_basesoc_ethcore_icmp_rx_depacketizer_sink_param_ip_address = main_basesoc_ethcore_icmp_rx_sink_sink_param_ip_address;
assign main_basesoc_ethcore_icmp_rx_source_source_last = main_basesoc_ethcore_icmp_rx_depacketizer_source_last;
assign main_basesoc_ethcore_icmp_rx_source_source_payload_data = main_basesoc_ethcore_icmp_rx_depacketizer_source_payload_data;
assign main_basesoc_ethcore_icmp_rx_source_source_payload_last_be = main_basesoc_ethcore_icmp_rx_depacketizer_source_payload_last_be;
assign main_basesoc_ethcore_icmp_rx_source_source_payload_error = main_basesoc_ethcore_icmp_rx_depacketizer_source_payload_error;
assign main_basesoc_ethcore_icmp_rx_source_source_param_checksum = main_basesoc_ethcore_icmp_rx_depacketizer_source_param_checksum;
assign main_basesoc_ethcore_icmp_rx_source_source_param_code = main_basesoc_ethcore_icmp_rx_depacketizer_source_param_code;
assign main_basesoc_ethcore_icmp_rx_source_source_param_msgtype = main_basesoc_ethcore_icmp_rx_depacketizer_source_param_msgtype;
assign main_basesoc_ethcore_icmp_rx_source_source_param_quench = main_basesoc_ethcore_icmp_rx_depacketizer_source_param_quench;
assign main_basesoc_ethcore_icmp_rx_source_source_param_ip_address = main_basesoc_ethcore_icmp_rx_sink_sink_param_ip_address;
assign main_basesoc_ethcore_icmp_rx_source_source_param_length = (main_basesoc_ethcore_icmp_rx_sink_sink_param_length - 4'd8);
assign main_basesoc_ethcore_icmp_rx_depacketizer_header = main_basesoc_ethcore_icmp_rx_depacketizer_sr;
assign main_basesoc_ethcore_icmp_rx_depacketizer_source_param_checksum = {main_basesoc_ethcore_icmp_rx_depacketizer_header[23:16], main_basesoc_ethcore_icmp_rx_depacketizer_header[31:24]};
assign main_basesoc_ethcore_icmp_rx_depacketizer_source_param_code = {main_basesoc_ethcore_icmp_rx_depacketizer_header[15:8]};
assign main_basesoc_ethcore_icmp_rx_depacketizer_source_param_msgtype = {main_basesoc_ethcore_icmp_rx_depacketizer_header[7:0]};
assign main_basesoc_ethcore_icmp_rx_depacketizer_source_param_quench = {main_basesoc_ethcore_icmp_rx_depacketizer_header[39:32], main_basesoc_ethcore_icmp_rx_depacketizer_header[47:40], main_basesoc_ethcore_icmp_rx_depacketizer_header[55:48], main_basesoc_ethcore_icmp_rx_depacketizer_header[63:56]};
assign main_basesoc_ethcore_icmp_rx_depacketizer_source_payload_error = main_basesoc_ethcore_icmp_rx_depacketizer_sink_payload_error;
assign main_basesoc_ethcore_icmp_rx_depacketizer_source_description = main_basesoc_ethcore_icmp_rx_depacketizer_sink_last;
assign main_basesoc_ethcore_icmp_rx_depacketizer_new_last_be = {main_basesoc_ethcore_icmp_rx_depacketizer_source_description};
assign main_basesoc_ethcore_icmp_rx_depacketizer_is_in_copy = (main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing0 | main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing1);
always @(*) begin
    main_basesoc_ethcore_icmp_rx_depacketizer_source_last <= 1'd0;
    if (main_basesoc_ethcore_icmp_rx_depacketizer_source_last_s) begin
        main_basesoc_ethcore_icmp_rx_depacketizer_source_last <= main_basesoc_ethcore_icmp_rx_depacketizer_source_last_b;
    end else begin
        main_basesoc_ethcore_icmp_rx_depacketizer_source_last <= main_basesoc_ethcore_icmp_rx_depacketizer_source_last_a;
    end
end
always @(*) begin
    builder_liteethicmprx_fsm0_next_state <= 2'd0;
    builder_liteethicmprx_fsm1_next_state <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_count_fsm0_next_value2 <= 3'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_count_fsm0_next_value_ce2 <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_delayed_last_be_fsm1_next_value1 <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_delayed_last_be_fsm1_next_value_ce1 <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_fsm_from_idle_fsm0_next_value3 <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_fsm_from_idle_fsm0_next_value_ce3 <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing0 <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing1 <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing2 <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing3 <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_sink_ready <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_source_last_a <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_source_last_b <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_source_last_s <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_source_payload_data <= 8'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_source_valid <= 1'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_sr_shift <= 1'd0;
    builder_liteethicmprx_fsm0_next_state <= builder_liteethicmprx_fsm0_state;
    case (builder_liteethicmprx_fsm0_state)
        1'd1: begin
            main_basesoc_ethcore_icmp_rx_depacketizer_sink_ready <= 1'd1;
            if (main_basesoc_ethcore_icmp_rx_depacketizer_sink_valid) begin
                main_basesoc_ethcore_icmp_rx_depacketizer_count_fsm0_next_value2 <= (main_basesoc_ethcore_icmp_rx_depacketizer_count + 1'd1);
                main_basesoc_ethcore_icmp_rx_depacketizer_count_fsm0_next_value_ce2 <= 1'd1;
                main_basesoc_ethcore_icmp_rx_depacketizer_sr_shift <= 1'd1;
                if ((main_basesoc_ethcore_icmp_rx_depacketizer_count == 3'd7)) begin
                    builder_liteethicmprx_fsm0_next_state <= 2'd2;
                    main_basesoc_ethcore_icmp_rx_depacketizer_count_fsm0_next_value2 <= (main_basesoc_ethcore_icmp_rx_depacketizer_count + 1'd1);
                    main_basesoc_ethcore_icmp_rx_depacketizer_count_fsm0_next_value_ce2 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_ethcore_icmp_rx_depacketizer_source_valid <= (main_basesoc_ethcore_icmp_rx_depacketizer_sink_valid | main_basesoc_ethcore_icmp_rx_depacketizer_sink_d_last);
            main_basesoc_ethcore_icmp_rx_depacketizer_source_last_a <= (main_basesoc_ethcore_icmp_rx_depacketizer_sink_last | main_basesoc_ethcore_icmp_rx_depacketizer_sink_d_last);
            main_basesoc_ethcore_icmp_rx_depacketizer_sink_ready <= main_basesoc_ethcore_icmp_rx_depacketizer_source_ready;
            main_basesoc_ethcore_icmp_rx_depacketizer_source_payload_data <= main_basesoc_ethcore_icmp_rx_depacketizer_sink_payload_data;
            if ((main_basesoc_ethcore_icmp_rx_depacketizer_source_valid & main_basesoc_ethcore_icmp_rx_depacketizer_source_ready)) begin
                if (main_basesoc_ethcore_icmp_rx_depacketizer_source_last) begin
                    builder_liteethicmprx_fsm0_next_state <= 1'd0;
                end
            end
            main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing0 <= 1'd1;
            main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing2 <= 1'd1;
        end
        2'd3: begin
            main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing1 <= 1'd1;
            main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing3 <= 1'd1;
        end
        default: begin
            main_basesoc_ethcore_icmp_rx_depacketizer_sink_ready <= 1'd1;
            main_basesoc_ethcore_icmp_rx_depacketizer_count_fsm0_next_value2 <= 1'd1;
            main_basesoc_ethcore_icmp_rx_depacketizer_count_fsm0_next_value_ce2 <= 1'd1;
            if (main_basesoc_ethcore_icmp_rx_depacketizer_sink_valid) begin
                main_basesoc_ethcore_icmp_rx_depacketizer_sr_shift <= 1'd1;
                main_basesoc_ethcore_icmp_rx_depacketizer_fsm_from_idle_fsm0_next_value3 <= 1'd1;
                main_basesoc_ethcore_icmp_rx_depacketizer_fsm_from_idle_fsm0_next_value_ce3 <= 1'd1;
                if (1'd0) begin
                    builder_liteethicmprx_fsm0_next_state <= 2'd2;
                end else begin
                    builder_liteethicmprx_fsm0_next_state <= 1'd1;
                end
            end
        end
    endcase
    builder_liteethicmprx_fsm1_next_state <= builder_liteethicmprx_fsm1_state;
    case (builder_liteethicmprx_fsm1_state)
        1'd1: begin
            main_basesoc_ethcore_icmp_rx_depacketizer_source_last_b <= 1'd1;
            main_basesoc_ethcore_icmp_rx_depacketizer_source_last_s <= 1'd1;
            main_basesoc_ethcore_icmp_rx_depacketizer_source_payload_last_be <= main_basesoc_ethcore_icmp_rx_depacketizer_delayed_last_be;
            main_basesoc_ethcore_icmp_rx_depacketizer_sink_ready <= 1'd0;
            if ((main_basesoc_ethcore_icmp_rx_depacketizer_source_ready & main_basesoc_ethcore_icmp_rx_depacketizer_source_valid)) begin
                builder_liteethicmprx_fsm1_next_state <= 1'd0;
            end
        end
        default: begin
            if (((main_basesoc_ethcore_icmp_rx_depacketizer_sink_valid & main_basesoc_ethcore_icmp_rx_depacketizer_sink_last) & (main_basesoc_ethcore_icmp_rx_depacketizer_source_description > main_basesoc_ethcore_icmp_rx_depacketizer_new_last_be))) begin
                main_basesoc_ethcore_icmp_rx_depacketizer_source_last_b <= 1'd0;
                main_basesoc_ethcore_icmp_rx_depacketizer_source_last_s <= 1'd1;
                main_basesoc_ethcore_icmp_rx_depacketizer_source_payload_last_be <= 1'd0;
                if (((main_basesoc_ethcore_icmp_rx_depacketizer_source_ready & main_basesoc_ethcore_icmp_rx_depacketizer_source_valid) | ((~main_basesoc_ethcore_icmp_rx_depacketizer_was_in_copy) & main_basesoc_ethcore_icmp_rx_depacketizer_is_in_copy))) begin
                    main_basesoc_ethcore_icmp_rx_depacketizer_delayed_last_be_fsm1_next_value1 <= main_basesoc_ethcore_icmp_rx_depacketizer_new_last_be;
                    main_basesoc_ethcore_icmp_rx_depacketizer_delayed_last_be_fsm1_next_value_ce1 <= 1'd1;
                    builder_liteethicmprx_fsm1_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_ethcore_icmp_rx_depacketizer_sink_last) begin
                    main_basesoc_ethcore_icmp_rx_depacketizer_source_last_b <= 1'd1;
                    main_basesoc_ethcore_icmp_rx_depacketizer_source_last_s <= 1'd1;
                    main_basesoc_ethcore_icmp_rx_depacketizer_source_payload_last_be <= main_basesoc_ethcore_icmp_rx_depacketizer_new_last_be;
                end
            end
            if ((main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing2 | (main_basesoc_ethcore_icmp_rx_depacketizer_is_ongoing3 & (~main_basesoc_ethcore_icmp_rx_depacketizer_fsm_from_idle)))) begin
                main_basesoc_ethcore_icmp_rx_depacketizer_sink_ready <= main_basesoc_ethcore_icmp_rx_depacketizer_source_ready;
            end else begin
                main_basesoc_ethcore_icmp_rx_depacketizer_sink_ready <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_liteethicmprx_next_state <= 2'd0;
    main_basesoc_ethcore_icmp_rx_depacketizer_source_ready <= 1'd0;
    main_basesoc_ethcore_icmp_rx_source_source_valid <= 1'd0;
    builder_liteethicmprx_next_state <= builder_liteethicmprx_state;
    case (builder_liteethicmprx_state)
        1'd1: begin
            main_basesoc_ethcore_icmp_rx_source_source_valid <= main_basesoc_ethcore_icmp_rx_depacketizer_source_valid;
            main_basesoc_ethcore_icmp_rx_depacketizer_source_ready <= main_basesoc_ethcore_icmp_rx_source_source_ready;
            if ((main_basesoc_ethcore_icmp_rx_source_source_valid & main_basesoc_ethcore_icmp_rx_source_source_ready)) begin
                if (main_basesoc_ethcore_icmp_rx_source_source_last) begin
                    builder_liteethicmprx_next_state <= 1'd0;
                end
            end
        end
        2'd2: begin
            main_basesoc_ethcore_icmp_rx_depacketizer_source_ready <= 1'd1;
            if (((main_basesoc_ethcore_icmp_rx_depacketizer_source_valid & main_basesoc_ethcore_icmp_rx_depacketizer_source_last) & main_basesoc_ethcore_icmp_rx_depacketizer_source_ready)) begin
                builder_liteethicmprx_next_state <= 1'd0;
            end
        end
        default: begin
            if (main_basesoc_ethcore_icmp_rx_depacketizer_source_valid) begin
                builder_liteethicmprx_next_state <= 2'd2;
                if ((main_basesoc_ethcore_icmp_rx_sink_sink_param_protocol == 1'd1)) begin
                    if ((main_basesoc_ethcore_icmp_rx_depacketizer_source_param_msgtype == 4'd8)) begin
                        builder_liteethicmprx_next_state <= 1'd1;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_basesoc_ethcore_icmp_echo_sink_ready <= 1'd0;
    main_basesoc_ethcore_icmp_echo_sink_sink_first <= 1'd0;
    main_basesoc_ethcore_icmp_echo_sink_sink_last <= 1'd0;
    main_basesoc_ethcore_icmp_echo_sink_sink_param_checksum <= 16'd0;
    main_basesoc_ethcore_icmp_echo_sink_sink_param_code <= 8'd0;
    main_basesoc_ethcore_icmp_echo_sink_sink_param_ip_address <= 32'd0;
    main_basesoc_ethcore_icmp_echo_sink_sink_param_length <= 16'd0;
    main_basesoc_ethcore_icmp_echo_sink_sink_param_msgtype <= 8'd0;
    main_basesoc_ethcore_icmp_echo_sink_sink_param_quench <= 32'd0;
    main_basesoc_ethcore_icmp_echo_sink_sink_payload_data <= 8'd0;
    main_basesoc_ethcore_icmp_echo_sink_sink_payload_error <= 1'd0;
    main_basesoc_ethcore_icmp_echo_sink_sink_payload_last_be <= 1'd0;
    main_basesoc_ethcore_icmp_echo_sink_sink_valid <= 1'd0;
    if ((main_basesoc_ethcore_icmp_echo_sink_param_length <= 8'd128)) begin
        main_basesoc_ethcore_icmp_echo_sink_sink_valid <= main_basesoc_ethcore_icmp_echo_sink_valid;
        main_basesoc_ethcore_icmp_echo_sink_ready <= main_basesoc_ethcore_icmp_echo_sink_sink_ready;
        main_basesoc_ethcore_icmp_echo_sink_sink_first <= main_basesoc_ethcore_icmp_echo_sink_first;
        main_basesoc_ethcore_icmp_echo_sink_sink_last <= main_basesoc_ethcore_icmp_echo_sink_last;
        main_basesoc_ethcore_icmp_echo_sink_sink_payload_data <= main_basesoc_ethcore_icmp_echo_sink_payload_data;
        main_basesoc_ethcore_icmp_echo_sink_sink_payload_last_be <= main_basesoc_ethcore_icmp_echo_sink_payload_last_be;
        main_basesoc_ethcore_icmp_echo_sink_sink_payload_error <= main_basesoc_ethcore_icmp_echo_sink_payload_error;
        main_basesoc_ethcore_icmp_echo_sink_sink_param_checksum <= main_basesoc_ethcore_icmp_echo_sink_param_checksum;
        main_basesoc_ethcore_icmp_echo_sink_sink_param_code <= main_basesoc_ethcore_icmp_echo_sink_param_code;
        main_basesoc_ethcore_icmp_echo_sink_sink_param_msgtype <= main_basesoc_ethcore_icmp_echo_sink_param_msgtype;
        main_basesoc_ethcore_icmp_echo_sink_sink_param_quench <= main_basesoc_ethcore_icmp_echo_sink_param_quench;
        main_basesoc_ethcore_icmp_echo_sink_sink_param_ip_address <= main_basesoc_ethcore_icmp_echo_sink_param_ip_address;
        main_basesoc_ethcore_icmp_echo_sink_sink_param_length <= main_basesoc_ethcore_icmp_echo_sink_param_length;
    end else begin
        main_basesoc_ethcore_icmp_echo_sink_ready <= 1'd1;
    end
end
assign main_basesoc_ethcore_icmp_echo_source_valid = main_basesoc_ethcore_icmp_echo_source_source_valid;
assign main_basesoc_ethcore_icmp_echo_source_source_ready = main_basesoc_ethcore_icmp_echo_source_ready;
assign main_basesoc_ethcore_icmp_echo_source_first = main_basesoc_ethcore_icmp_echo_source_source_first;
assign main_basesoc_ethcore_icmp_echo_source_last = main_basesoc_ethcore_icmp_echo_source_source_last;
assign main_basesoc_ethcore_icmp_echo_source_payload_data = main_basesoc_ethcore_icmp_echo_source_source_payload_data;
assign main_basesoc_ethcore_icmp_echo_source_payload_last_be = main_basesoc_ethcore_icmp_echo_source_source_payload_last_be;
assign main_basesoc_ethcore_icmp_echo_source_payload_error = main_basesoc_ethcore_icmp_echo_source_source_payload_error;
assign main_basesoc_ethcore_icmp_echo_source_param_code = main_basesoc_ethcore_icmp_echo_source_source_param_code;
assign main_basesoc_ethcore_icmp_echo_source_param_quench = main_basesoc_ethcore_icmp_echo_source_source_param_quench;
assign main_basesoc_ethcore_icmp_echo_source_param_ip_address = main_basesoc_ethcore_icmp_echo_source_source_param_ip_address;
assign main_basesoc_ethcore_icmp_echo_source_param_length = main_basesoc_ethcore_icmp_echo_source_source_param_length;
always @(*) begin
    main_basesoc_ethcore_icmp_echo_source_param_msgtype <= 8'd0;
    main_basesoc_ethcore_icmp_echo_source_param_msgtype <= main_basesoc_ethcore_icmp_echo_source_source_param_msgtype;
    main_basesoc_ethcore_icmp_echo_source_param_msgtype <= 1'd0;
end
assign main_basesoc_ethcore_icmp_echo_source_param_checksum = ((main_basesoc_ethcore_icmp_echo_source_source_param_checksum + 12'd2048) + (main_basesoc_ethcore_icmp_echo_source_source_param_checksum >= 16'd63488));
assign main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_checksum = main_basesoc_ethcore_icmp_echo_sink_sink_param_checksum;
assign main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_code = main_basesoc_ethcore_icmp_echo_sink_sink_param_code;
assign main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_msgtype = main_basesoc_ethcore_icmp_echo_sink_sink_param_msgtype;
assign main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_quench = main_basesoc_ethcore_icmp_echo_sink_sink_param_quench;
assign main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_ip_address = main_basesoc_ethcore_icmp_echo_sink_sink_param_ip_address;
assign main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_length = main_basesoc_ethcore_icmp_echo_sink_sink_param_length;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_sink_last = main_basesoc_ethcore_icmp_echo_sink_sink_last;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_sink_payload_data = main_basesoc_ethcore_icmp_echo_sink_sink_payload_data;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_sink_payload_last_be = main_basesoc_ethcore_icmp_echo_sink_sink_payload_last_be;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_sink_payload_error = main_basesoc_ethcore_icmp_echo_sink_sink_payload_error;
assign main_basesoc_ethcore_icmp_echo_param_fifo_sink_valid = (main_basesoc_ethcore_icmp_echo_sink_sink_valid & main_basesoc_ethcore_icmp_echo_sink_sink_last);
assign main_basesoc_ethcore_icmp_echo_payload_fifo_sink_valid = (main_basesoc_ethcore_icmp_echo_sink_sink_valid & main_basesoc_ethcore_icmp_echo_param_fifo_sink_ready);
assign main_basesoc_ethcore_icmp_echo_sink_sink_ready = (main_basesoc_ethcore_icmp_echo_param_fifo_sink_ready & main_basesoc_ethcore_icmp_echo_payload_fifo_sink_ready);
assign main_basesoc_ethcore_icmp_echo_source_source_valid = main_basesoc_ethcore_icmp_echo_param_fifo_source_valid;
assign main_basesoc_ethcore_icmp_echo_source_source_param_checksum = main_basesoc_ethcore_icmp_echo_param_fifo_source_param_checksum;
assign main_basesoc_ethcore_icmp_echo_source_source_param_code = main_basesoc_ethcore_icmp_echo_param_fifo_source_param_code;
assign main_basesoc_ethcore_icmp_echo_source_source_param_msgtype = main_basesoc_ethcore_icmp_echo_param_fifo_source_param_msgtype;
assign main_basesoc_ethcore_icmp_echo_source_source_param_quench = main_basesoc_ethcore_icmp_echo_param_fifo_source_param_quench;
assign main_basesoc_ethcore_icmp_echo_source_source_param_ip_address = main_basesoc_ethcore_icmp_echo_param_fifo_source_param_ip_address;
assign main_basesoc_ethcore_icmp_echo_source_source_param_length = main_basesoc_ethcore_icmp_echo_param_fifo_source_param_length;
always @(*) begin
    main_basesoc_ethcore_icmp_echo_source_source_first <= 1'd0;
    main_basesoc_ethcore_icmp_echo_source_source_first <= main_basesoc_ethcore_icmp_echo_param_fifo_source_first;
    main_basesoc_ethcore_icmp_echo_source_source_first <= main_basesoc_ethcore_icmp_echo_payload_fifo_source_first;
end
assign main_basesoc_ethcore_icmp_echo_source_source_last = main_basesoc_ethcore_icmp_echo_payload_fifo_source_last;
assign main_basesoc_ethcore_icmp_echo_source_source_payload_data = main_basesoc_ethcore_icmp_echo_payload_fifo_source_payload_data;
assign main_basesoc_ethcore_icmp_echo_source_source_payload_last_be = main_basesoc_ethcore_icmp_echo_payload_fifo_source_payload_last_be;
assign main_basesoc_ethcore_icmp_echo_source_source_payload_error = main_basesoc_ethcore_icmp_echo_payload_fifo_source_payload_error;
assign main_basesoc_ethcore_icmp_echo_param_fifo_source_ready = ((main_basesoc_ethcore_icmp_echo_source_source_valid & main_basesoc_ethcore_icmp_echo_source_source_last) & main_basesoc_ethcore_icmp_echo_source_source_ready);
assign main_basesoc_ethcore_icmp_echo_payload_fifo_source_ready = (main_basesoc_ethcore_icmp_echo_source_source_valid & main_basesoc_ethcore_icmp_echo_source_source_ready);
assign main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_din = {main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_in_last, main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_in_first, main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_in_payload_error, main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_in_payload_last_be, main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_in_payload_data};
assign {main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_out_last, main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_out_first, main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_out_payload_error, main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_out_payload_last_be, main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_out_payload_data} = main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_dout;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_sink_ready = main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_writable;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_we = main_basesoc_ethcore_icmp_echo_payload_fifo_sink_valid;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_in_first = main_basesoc_ethcore_icmp_echo_payload_fifo_sink_first;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_in_last = main_basesoc_ethcore_icmp_echo_payload_fifo_sink_last;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_in_payload_data = main_basesoc_ethcore_icmp_echo_payload_fifo_sink_payload_data;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_in_payload_last_be = main_basesoc_ethcore_icmp_echo_payload_fifo_sink_payload_last_be;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_in_payload_error = main_basesoc_ethcore_icmp_echo_payload_fifo_sink_payload_error;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_source_valid = main_basesoc_ethcore_icmp_echo_payload_fifo_readable;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_source_first = main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_out_first;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_source_last = main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_out_last;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_source_payload_data = main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_out_payload_data;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_source_payload_last_be = main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_out_payload_last_be;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_source_payload_error = main_basesoc_ethcore_icmp_echo_payload_fifo_fifo_out_payload_error;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_re = main_basesoc_ethcore_icmp_echo_payload_fifo_source_ready;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_re = (main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_readable & ((~main_basesoc_ethcore_icmp_echo_payload_fifo_readable) | main_basesoc_ethcore_icmp_echo_payload_fifo_re));
assign main_basesoc_ethcore_icmp_echo_payload_fifo_level1 = (main_basesoc_ethcore_icmp_echo_payload_fifo_level0 + main_basesoc_ethcore_icmp_echo_payload_fifo_readable);
always @(*) begin
    main_basesoc_ethcore_icmp_echo_payload_fifo_wrport_adr <= 7'd0;
    if (main_basesoc_ethcore_icmp_echo_payload_fifo_replace) begin
        main_basesoc_ethcore_icmp_echo_payload_fifo_wrport_adr <= (main_basesoc_ethcore_icmp_echo_payload_fifo_produce - 1'd1);
    end else begin
        main_basesoc_ethcore_icmp_echo_payload_fifo_wrport_adr <= main_basesoc_ethcore_icmp_echo_payload_fifo_produce;
    end
end
assign main_basesoc_ethcore_icmp_echo_payload_fifo_wrport_dat_w = main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_din;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_wrport_we = (main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_we & (main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_writable | main_basesoc_ethcore_icmp_echo_payload_fifo_replace));
assign main_basesoc_ethcore_icmp_echo_payload_fifo_do_read = (main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_readable & main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_re);
assign main_basesoc_ethcore_icmp_echo_payload_fifo_rdport_adr = main_basesoc_ethcore_icmp_echo_payload_fifo_consume;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_dout = main_basesoc_ethcore_icmp_echo_payload_fifo_rdport_dat_r;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_rdport_re = main_basesoc_ethcore_icmp_echo_payload_fifo_do_read;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_writable = (main_basesoc_ethcore_icmp_echo_payload_fifo_level0 != 8'd128);
assign main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_readable = (main_basesoc_ethcore_icmp_echo_payload_fifo_level0 != 1'd0);
assign main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_din = {main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_last, main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_first, main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_length, main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_ip_address, main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_quench, main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_msgtype, main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_code, main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_checksum};
assign {main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_last, main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_first, main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_length, main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_ip_address, main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_quench, main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_msgtype, main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_code, main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_checksum} = main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_dout;
assign main_basesoc_ethcore_icmp_echo_param_fifo_sink_ready = main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_writable;
assign main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_we = main_basesoc_ethcore_icmp_echo_param_fifo_sink_valid;
assign main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_first = main_basesoc_ethcore_icmp_echo_param_fifo_sink_first;
assign main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_last = main_basesoc_ethcore_icmp_echo_param_fifo_sink_last;
assign main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_checksum = main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_checksum;
assign main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_code = main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_code;
assign main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_msgtype = main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_msgtype;
assign main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_quench = main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_quench;
assign main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_ip_address = main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_ip_address;
assign main_basesoc_ethcore_icmp_echo_param_fifo_fifo_in_param_length = main_basesoc_ethcore_icmp_echo_param_fifo_sink_param_length;
assign main_basesoc_ethcore_icmp_echo_param_fifo_source_valid = main_basesoc_ethcore_icmp_echo_param_fifo_readable;
assign main_basesoc_ethcore_icmp_echo_param_fifo_source_first = main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_first;
assign main_basesoc_ethcore_icmp_echo_param_fifo_source_last = main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_last;
assign main_basesoc_ethcore_icmp_echo_param_fifo_source_param_checksum = main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_checksum;
assign main_basesoc_ethcore_icmp_echo_param_fifo_source_param_code = main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_code;
assign main_basesoc_ethcore_icmp_echo_param_fifo_source_param_msgtype = main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_msgtype;
assign main_basesoc_ethcore_icmp_echo_param_fifo_source_param_quench = main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_quench;
assign main_basesoc_ethcore_icmp_echo_param_fifo_source_param_ip_address = main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_ip_address;
assign main_basesoc_ethcore_icmp_echo_param_fifo_source_param_length = main_basesoc_ethcore_icmp_echo_param_fifo_fifo_out_param_length;
assign main_basesoc_ethcore_icmp_echo_param_fifo_re = main_basesoc_ethcore_icmp_echo_param_fifo_source_ready;
assign main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_re = (main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_readable & ((~main_basesoc_ethcore_icmp_echo_param_fifo_readable) | main_basesoc_ethcore_icmp_echo_param_fifo_re));
assign main_basesoc_ethcore_icmp_echo_param_fifo_level1 = (main_basesoc_ethcore_icmp_echo_param_fifo_level0 + main_basesoc_ethcore_icmp_echo_param_fifo_readable);
always @(*) begin
    main_basesoc_ethcore_icmp_echo_param_fifo_wrport_adr <= 1'd0;
    if (main_basesoc_ethcore_icmp_echo_param_fifo_replace) begin
        main_basesoc_ethcore_icmp_echo_param_fifo_wrport_adr <= (main_basesoc_ethcore_icmp_echo_param_fifo_produce - 1'd1);
    end else begin
        main_basesoc_ethcore_icmp_echo_param_fifo_wrport_adr <= main_basesoc_ethcore_icmp_echo_param_fifo_produce;
    end
end
assign main_basesoc_ethcore_icmp_echo_param_fifo_wrport_dat_w = main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_din;
assign main_basesoc_ethcore_icmp_echo_param_fifo_wrport_we = (main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_we & (main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_writable | main_basesoc_ethcore_icmp_echo_param_fifo_replace));
assign main_basesoc_ethcore_icmp_echo_param_fifo_do_read = (main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_readable & main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_re);
assign main_basesoc_ethcore_icmp_echo_param_fifo_rdport_adr = main_basesoc_ethcore_icmp_echo_param_fifo_consume;
assign main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_dout = main_basesoc_ethcore_icmp_echo_param_fifo_rdport_dat_r;
assign main_basesoc_ethcore_icmp_echo_param_fifo_rdport_re = main_basesoc_ethcore_icmp_echo_param_fifo_do_read;
assign main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_writable = (main_basesoc_ethcore_icmp_echo_param_fifo_level0 != 2'd2);
assign main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_readable = (main_basesoc_ethcore_icmp_echo_param_fifo_level0 != 1'd0);
assign main_basesoc_ethcore_ip_port_sink_valid = main_basesoc_ethcore_tx_source_source_valid;
assign main_basesoc_ethcore_tx_source_source_ready = main_basesoc_ethcore_ip_port_sink_ready;
assign main_basesoc_ethcore_ip_port_sink_first = main_basesoc_ethcore_tx_source_source_first;
assign main_basesoc_ethcore_ip_port_sink_last = main_basesoc_ethcore_tx_source_source_last;
assign main_basesoc_ethcore_ip_port_sink_payload_data = main_basesoc_ethcore_tx_source_source_payload_data;
assign main_basesoc_ethcore_ip_port_sink_payload_last_be = main_basesoc_ethcore_tx_source_source_payload_last_be;
assign main_basesoc_ethcore_ip_port_sink_payload_error = main_basesoc_ethcore_tx_source_source_payload_error;
assign main_basesoc_ethcore_ip_port_sink_param_length = main_basesoc_ethcore_tx_source_source_param_length;
assign main_basesoc_ethcore_ip_port_sink_param_protocol = main_basesoc_ethcore_tx_source_source_param_protocol;
assign main_basesoc_ethcore_ip_port_sink_param_ip_address = main_basesoc_ethcore_tx_source_source_param_ip_address;
assign main_basesoc_ethcore_rx_sink_sink_valid = main_basesoc_ethcore_ip_port_source_valid;
assign main_basesoc_ethcore_ip_port_source_ready = main_basesoc_ethcore_rx_sink_sink_ready;
assign main_basesoc_ethcore_rx_sink_sink_first = main_basesoc_ethcore_ip_port_source_first;
assign main_basesoc_ethcore_rx_sink_sink_last = main_basesoc_ethcore_ip_port_source_last;
assign main_basesoc_ethcore_rx_sink_sink_payload_data = main_basesoc_ethcore_ip_port_source_payload_data;
assign main_basesoc_ethcore_rx_sink_sink_payload_last_be = main_basesoc_ethcore_ip_port_source_payload_last_be;
assign main_basesoc_ethcore_rx_sink_sink_payload_error = main_basesoc_ethcore_ip_port_source_payload_error;
assign main_basesoc_ethcore_rx_sink_sink_param_length = main_basesoc_ethcore_ip_port_source_param_length;
assign main_basesoc_ethcore_rx_sink_sink_param_protocol = main_basesoc_ethcore_ip_port_source_param_protocol;
assign main_basesoc_ethcore_rx_sink_sink_param_ip_address = main_basesoc_ethcore_ip_port_source_param_ip_address;
assign main_basesoc_ethcore_tx_sink_sink_valid = main_basesoc_ethcore_crossbar_source_valid;
assign main_basesoc_ethcore_crossbar_source_ready = main_basesoc_ethcore_tx_sink_sink_ready;
assign main_basesoc_ethcore_tx_sink_sink_first = main_basesoc_ethcore_crossbar_source_first;
assign main_basesoc_ethcore_tx_sink_sink_last = main_basesoc_ethcore_crossbar_source_last;
assign main_basesoc_ethcore_tx_sink_sink_payload_data = main_basesoc_ethcore_crossbar_source_payload_data;
assign main_basesoc_ethcore_tx_sink_sink_payload_last_be = main_basesoc_ethcore_crossbar_source_payload_last_be;
assign main_basesoc_ethcore_tx_sink_sink_payload_error = main_basesoc_ethcore_crossbar_source_payload_error;
assign main_basesoc_ethcore_tx_sink_sink_param_src_port = main_basesoc_ethcore_crossbar_source_param_src_port;
assign main_basesoc_ethcore_tx_sink_sink_param_dst_port = main_basesoc_ethcore_crossbar_source_param_dst_port;
assign main_basesoc_ethcore_tx_sink_sink_param_ip_address = main_basesoc_ethcore_crossbar_source_param_ip_address;
assign main_basesoc_ethcore_tx_sink_sink_param_length = main_basesoc_ethcore_crossbar_source_param_length;
assign main_basesoc_ethcore_crossbar_sink_valid = main_basesoc_ethcore_rx_source_source_valid;
assign main_basesoc_ethcore_rx_source_source_ready = main_basesoc_ethcore_crossbar_sink_ready;
assign main_basesoc_ethcore_crossbar_sink_first = main_basesoc_ethcore_rx_source_source_first;
assign main_basesoc_ethcore_crossbar_sink_last = main_basesoc_ethcore_rx_source_source_last;
assign main_basesoc_ethcore_crossbar_sink_payload_data = main_basesoc_ethcore_rx_source_source_payload_data;
assign main_basesoc_ethcore_crossbar_sink_payload_last_be = main_basesoc_ethcore_rx_source_source_payload_last_be;
assign main_basesoc_ethcore_crossbar_sink_payload_error = main_basesoc_ethcore_rx_source_source_payload_error;
assign main_basesoc_ethcore_crossbar_sink_param_src_port = main_basesoc_ethcore_rx_source_source_param_src_port;
assign main_basesoc_ethcore_crossbar_sink_param_dst_port = main_basesoc_ethcore_rx_source_source_param_dst_port;
assign main_basesoc_ethcore_crossbar_sink_param_ip_address = main_basesoc_ethcore_rx_source_source_param_ip_address;
assign main_basesoc_ethcore_crossbar_sink_param_length = main_basesoc_ethcore_rx_source_source_param_length;
assign main_basesoc_ethcore_tx_packetizer_sink_valid = main_basesoc_ethcore_tx_sink_sink_valid;
assign main_basesoc_ethcore_tx_sink_sink_ready = main_basesoc_ethcore_tx_packetizer_sink_ready;
assign main_basesoc_ethcore_tx_packetizer_sink_last = main_basesoc_ethcore_tx_sink_sink_last;
assign main_basesoc_ethcore_tx_packetizer_sink_payload_data = main_basesoc_ethcore_tx_sink_sink_payload_data;
assign main_basesoc_ethcore_tx_packetizer_sink_payload_last_be = main_basesoc_ethcore_tx_sink_sink_payload_last_be;
assign main_basesoc_ethcore_tx_packetizer_sink_param_src_port = main_basesoc_ethcore_tx_sink_sink_param_src_port;
assign main_basesoc_ethcore_tx_packetizer_sink_param_dst_port = main_basesoc_ethcore_tx_sink_sink_param_dst_port;
assign main_basesoc_ethcore_tx_packetizer_sink_param_length = (main_basesoc_ethcore_tx_sink_sink_param_length + 4'd8);
assign main_basesoc_ethcore_tx_packetizer_sink_param_checksum = 1'd0;
always @(*) begin
    main_basesoc_ethcore_tx_packetizer_header <= 64'd0;
    main_basesoc_ethcore_tx_packetizer_header[63:48] <= {main_basesoc_ethcore_tx_packetizer_sink_param_checksum[7:0], main_basesoc_ethcore_tx_packetizer_sink_param_checksum[15:8]};
    main_basesoc_ethcore_tx_packetizer_header[31:16] <= {main_basesoc_ethcore_tx_packetizer_sink_param_dst_port[7:0], main_basesoc_ethcore_tx_packetizer_sink_param_dst_port[15:8]};
    main_basesoc_ethcore_tx_packetizer_header[47:32] <= {main_basesoc_ethcore_tx_packetizer_sink_param_length[7:0], main_basesoc_ethcore_tx_packetizer_sink_param_length[15:8]};
    main_basesoc_ethcore_tx_packetizer_header[15:0] <= {main_basesoc_ethcore_tx_packetizer_sink_param_src_port[7:0], main_basesoc_ethcore_tx_packetizer_sink_param_src_port[15:8]};
end
assign main_basesoc_ethcore_tx_packetizer_source_description = main_basesoc_ethcore_tx_packetizer_sink_last;
assign main_basesoc_ethcore_tx_packetizer_new_last_be = {main_basesoc_ethcore_tx_packetizer_source_description};
assign main_basesoc_ethcore_tx_packetizer_in_data_copy = (main_basesoc_ethcore_tx_packetizer_is_ongoing0 | main_basesoc_ethcore_tx_packetizer_is_ongoing1);
always @(*) begin
    main_basesoc_ethcore_tx_packetizer_source_last <= 1'd0;
    if (main_basesoc_ethcore_tx_packetizer_source_last_s) begin
        main_basesoc_ethcore_tx_packetizer_source_last <= main_basesoc_ethcore_tx_packetizer_source_last_b;
    end else begin
        main_basesoc_ethcore_tx_packetizer_source_last <= main_basesoc_ethcore_tx_packetizer_source_last_a;
    end
end
assign main_basesoc_ethcore_tx_packetizer_source_payload_error = main_basesoc_ethcore_tx_packetizer_sink_payload_error;
always @(*) begin
    builder_liteethudp_liteethudptx_fsm0_next_state <= 2'd0;
    builder_liteethudp_liteethudptx_fsm1_next_state <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_count_liteethudp_fsm0_next_value0 <= 3'd0;
    main_basesoc_ethcore_tx_packetizer_count_liteethudp_fsm0_next_value_ce0 <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_delayed_last_be_liteethudp_fsm1_next_value0 <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_delayed_last_be_liteethudp_fsm1_next_value_ce0 <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_fsm_from_idle_liteethudp_fsm0_next_value1 <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_fsm_from_idle_liteethudp_fsm0_next_value_ce1 <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_is_ongoing0 <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_is_ongoing1 <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_is_ongoing2 <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_sink_ready <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_source_last_a <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_source_last_b <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_source_last_s <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_source_payload_data <= 8'd0;
    main_basesoc_ethcore_tx_packetizer_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_source_valid <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_sr_load <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_sr_shift <= 1'd0;
    builder_liteethudp_liteethudptx_fsm0_next_state <= builder_liteethudp_liteethudptx_fsm0_state;
    case (builder_liteethudp_liteethudptx_fsm0_state)
        1'd1: begin
            main_basesoc_ethcore_tx_packetizer_source_valid <= 1'd1;
            main_basesoc_ethcore_tx_packetizer_source_last_a <= 1'd0;
            main_basesoc_ethcore_tx_packetizer_source_payload_data <= main_basesoc_ethcore_tx_packetizer_sr[63:8];
            if ((main_basesoc_ethcore_tx_packetizer_source_valid & main_basesoc_ethcore_tx_packetizer_source_ready)) begin
                main_basesoc_ethcore_tx_packetizer_sr_shift <= 1'd1;
                if ((main_basesoc_ethcore_tx_packetizer_count == 3'd7)) begin
                    main_basesoc_ethcore_tx_packetizer_sr_shift <= 1'd0;
                    builder_liteethudp_liteethudptx_fsm0_next_state <= 2'd2;
                    main_basesoc_ethcore_tx_packetizer_count_liteethudp_fsm0_next_value0 <= (main_basesoc_ethcore_tx_packetizer_count + 1'd1);
                    main_basesoc_ethcore_tx_packetizer_count_liteethudp_fsm0_next_value_ce0 <= 1'd1;
                end else begin
                    main_basesoc_ethcore_tx_packetizer_count_liteethudp_fsm0_next_value0 <= (main_basesoc_ethcore_tx_packetizer_count + 1'd1);
                    main_basesoc_ethcore_tx_packetizer_count_liteethudp_fsm0_next_value_ce0 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_ethcore_tx_packetizer_source_valid <= main_basesoc_ethcore_tx_packetizer_sink_valid;
            main_basesoc_ethcore_tx_packetizer_source_last_a <= main_basesoc_ethcore_tx_packetizer_sink_last;
            main_basesoc_ethcore_tx_packetizer_source_payload_data <= main_basesoc_ethcore_tx_packetizer_sink_payload_data;
            if ((main_basesoc_ethcore_tx_packetizer_source_valid & main_basesoc_ethcore_tx_packetizer_source_ready)) begin
                main_basesoc_ethcore_tx_packetizer_sink_ready <= 1'd1;
                if (main_basesoc_ethcore_tx_packetizer_source_last) begin
                    builder_liteethudp_liteethudptx_fsm0_next_state <= 1'd0;
                end
            end
            main_basesoc_ethcore_tx_packetizer_is_ongoing0 <= 1'd1;
        end
        2'd3: begin
            main_basesoc_ethcore_tx_packetizer_is_ongoing1 <= 1'd1;
        end
        default: begin
            main_basesoc_ethcore_tx_packetizer_sink_ready <= 1'd1;
            main_basesoc_ethcore_tx_packetizer_count_liteethudp_fsm0_next_value0 <= 1'd1;
            main_basesoc_ethcore_tx_packetizer_count_liteethudp_fsm0_next_value_ce0 <= 1'd1;
            if (main_basesoc_ethcore_tx_packetizer_sink_valid) begin
                main_basesoc_ethcore_tx_packetizer_sink_ready <= 1'd0;
                main_basesoc_ethcore_tx_packetizer_source_valid <= 1'd1;
                main_basesoc_ethcore_tx_packetizer_source_last_a <= 1'd0;
                main_basesoc_ethcore_tx_packetizer_source_payload_data <= main_basesoc_ethcore_tx_packetizer_header[7:0];
                if ((main_basesoc_ethcore_tx_packetizer_source_valid & main_basesoc_ethcore_tx_packetizer_source_ready)) begin
                    main_basesoc_ethcore_tx_packetizer_sr_load <= 1'd1;
                    main_basesoc_ethcore_tx_packetizer_fsm_from_idle_liteethudp_fsm0_next_value1 <= 1'd1;
                    main_basesoc_ethcore_tx_packetizer_fsm_from_idle_liteethudp_fsm0_next_value_ce1 <= 1'd1;
                    if (1'd0) begin
                        builder_liteethudp_liteethudptx_fsm0_next_state <= 2'd2;
                    end else begin
                        builder_liteethudp_liteethudptx_fsm0_next_state <= 1'd1;
                    end
                end
            end
            main_basesoc_ethcore_tx_packetizer_is_ongoing2 <= 1'd1;
        end
    endcase
    builder_liteethudp_liteethudptx_fsm1_next_state <= builder_liteethudp_liteethudptx_fsm1_state;
    case (builder_liteethudp_liteethudptx_fsm1_state)
        1'd1: begin
            main_basesoc_ethcore_tx_packetizer_source_last_b <= 1'd1;
            main_basesoc_ethcore_tx_packetizer_source_last_s <= 1'd1;
            main_basesoc_ethcore_tx_packetizer_source_payload_last_be <= main_basesoc_ethcore_tx_packetizer_delayed_last_be;
            main_basesoc_ethcore_tx_packetizer_sink_ready <= 1'd0;
            if (main_basesoc_ethcore_tx_packetizer_source_ready) begin
                builder_liteethudp_liteethudptx_fsm1_next_state <= 1'd0;
            end
        end
        default: begin
            if (((main_basesoc_ethcore_tx_packetizer_in_data_copy & main_basesoc_ethcore_tx_packetizer_sink_last) & (main_basesoc_ethcore_tx_packetizer_source_description > main_basesoc_ethcore_tx_packetizer_new_last_be))) begin
                main_basesoc_ethcore_tx_packetizer_source_last_b <= 1'd0;
                main_basesoc_ethcore_tx_packetizer_source_last_s <= 1'd1;
                main_basesoc_ethcore_tx_packetizer_source_payload_last_be <= 1'd0;
                if ((main_basesoc_ethcore_tx_packetizer_source_ready & main_basesoc_ethcore_tx_packetizer_source_valid)) begin
                    main_basesoc_ethcore_tx_packetizer_delayed_last_be_liteethudp_fsm1_next_value0 <= main_basesoc_ethcore_tx_packetizer_new_last_be;
                    main_basesoc_ethcore_tx_packetizer_delayed_last_be_liteethudp_fsm1_next_value_ce0 <= 1'd1;
                    builder_liteethudp_liteethudptx_fsm1_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_ethcore_tx_packetizer_in_data_copy) begin
                    main_basesoc_ethcore_tx_packetizer_source_last_b <= main_basesoc_ethcore_tx_packetizer_sink_last;
                    main_basesoc_ethcore_tx_packetizer_source_last_s <= 1'd1;
                    main_basesoc_ethcore_tx_packetizer_source_payload_last_be <= main_basesoc_ethcore_tx_packetizer_new_last_be;
                end
            end
            if (main_basesoc_ethcore_tx_packetizer_in_data_copy) begin
                main_basesoc_ethcore_tx_packetizer_sink_ready <= main_basesoc_ethcore_tx_packetizer_source_ready;
            end else begin
                if (main_basesoc_ethcore_tx_packetizer_is_ongoing2) begin
                    main_basesoc_ethcore_tx_packetizer_sink_ready <= (~main_basesoc_ethcore_tx_packetizer_sink_valid);
                end
            end
        end
    endcase
end
always @(*) begin
    builder_liteethudp_liteethudptx_next_state <= 1'd0;
    main_basesoc_ethcore_tx_packetizer_source_ready <= 1'd0;
    main_basesoc_ethcore_tx_source_source_first <= 1'd0;
    main_basesoc_ethcore_tx_source_source_last <= 1'd0;
    main_basesoc_ethcore_tx_source_source_param_ip_address <= 32'd0;
    main_basesoc_ethcore_tx_source_source_param_length <= 16'd0;
    main_basesoc_ethcore_tx_source_source_param_protocol <= 8'd0;
    main_basesoc_ethcore_tx_source_source_payload_data <= 8'd0;
    main_basesoc_ethcore_tx_source_source_payload_error <= 1'd0;
    main_basesoc_ethcore_tx_source_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_tx_source_source_valid <= 1'd0;
    builder_liteethudp_liteethudptx_next_state <= builder_liteethudp_liteethudptx_state;
    case (builder_liteethudp_liteethudptx_state)
        1'd1: begin
            main_basesoc_ethcore_tx_source_source_valid <= main_basesoc_ethcore_tx_packetizer_source_valid;
            main_basesoc_ethcore_tx_packetizer_source_ready <= main_basesoc_ethcore_tx_source_source_ready;
            main_basesoc_ethcore_tx_source_source_first <= main_basesoc_ethcore_tx_packetizer_source_first;
            main_basesoc_ethcore_tx_source_source_last <= main_basesoc_ethcore_tx_packetizer_source_last;
            main_basesoc_ethcore_tx_source_source_payload_data <= main_basesoc_ethcore_tx_packetizer_source_payload_data;
            main_basesoc_ethcore_tx_source_source_payload_last_be <= main_basesoc_ethcore_tx_packetizer_source_payload_last_be;
            main_basesoc_ethcore_tx_source_source_payload_error <= main_basesoc_ethcore_tx_packetizer_source_payload_error;
            main_basesoc_ethcore_tx_source_source_param_length <= main_basesoc_ethcore_tx_packetizer_source_param_length;
            main_basesoc_ethcore_tx_source_source_param_protocol <= main_basesoc_ethcore_tx_packetizer_source_param_protocol;
            main_basesoc_ethcore_tx_source_source_param_ip_address <= main_basesoc_ethcore_tx_packetizer_source_param_ip_address;
            main_basesoc_ethcore_tx_source_source_param_length <= main_basesoc_ethcore_tx_packetizer_sink_param_length;
            main_basesoc_ethcore_tx_source_source_param_protocol <= 5'd17;
            main_basesoc_ethcore_tx_source_source_param_ip_address <= main_basesoc_ethcore_tx_sink_sink_param_ip_address;
            if ((main_basesoc_ethcore_tx_source_source_valid & main_basesoc_ethcore_tx_source_source_ready)) begin
                if (main_basesoc_ethcore_tx_source_source_last) begin
                    builder_liteethudp_liteethudptx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (main_basesoc_ethcore_tx_packetizer_source_valid) begin
                builder_liteethudp_liteethudptx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_ethcore_rx_depacketizer_sink_valid = main_basesoc_ethcore_rx_sink_sink_valid;
assign main_basesoc_ethcore_rx_sink_sink_ready = main_basesoc_ethcore_rx_depacketizer_sink_ready;
assign main_basesoc_ethcore_rx_depacketizer_sink_first = main_basesoc_ethcore_rx_sink_sink_first;
assign main_basesoc_ethcore_rx_depacketizer_sink_last = main_basesoc_ethcore_rx_sink_sink_last;
assign main_basesoc_ethcore_rx_depacketizer_sink_payload_data = main_basesoc_ethcore_rx_sink_sink_payload_data;
assign main_basesoc_ethcore_rx_depacketizer_sink_payload_last_be = main_basesoc_ethcore_rx_sink_sink_payload_last_be;
assign main_basesoc_ethcore_rx_depacketizer_sink_payload_error = main_basesoc_ethcore_rx_sink_sink_payload_error;
assign main_basesoc_ethcore_rx_depacketizer_sink_param_length = main_basesoc_ethcore_rx_sink_sink_param_length;
assign main_basesoc_ethcore_rx_depacketizer_sink_param_protocol = main_basesoc_ethcore_rx_sink_sink_param_protocol;
assign main_basesoc_ethcore_rx_depacketizer_sink_param_ip_address = main_basesoc_ethcore_rx_sink_sink_param_ip_address;
assign main_basesoc_ethcore_rx_source_source_payload_data = main_basesoc_ethcore_rx_depacketizer_source_payload_data;
assign main_basesoc_ethcore_rx_source_source_payload_error = main_basesoc_ethcore_rx_depacketizer_source_payload_error;
assign main_basesoc_ethcore_rx_source_source_param_dst_port = main_basesoc_ethcore_rx_depacketizer_source_param_dst_port;
assign main_basesoc_ethcore_rx_source_source_param_src_port = main_basesoc_ethcore_rx_depacketizer_source_param_src_port;
assign main_basesoc_ethcore_rx_source_source_param_ip_address = main_basesoc_ethcore_rx_sink_sink_param_ip_address;
assign main_basesoc_ethcore_rx_source_source_param_length = (main_basesoc_ethcore_rx_depacketizer_source_param_length - 4'd8);
assign main_basesoc_ethcore_rx_depacketizer_header = main_basesoc_ethcore_rx_depacketizer_sr;
assign main_basesoc_ethcore_rx_depacketizer_source_param_checksum = {main_basesoc_ethcore_rx_depacketizer_header[55:48], main_basesoc_ethcore_rx_depacketizer_header[63:56]};
assign main_basesoc_ethcore_rx_depacketizer_source_param_dst_port = {main_basesoc_ethcore_rx_depacketizer_header[23:16], main_basesoc_ethcore_rx_depacketizer_header[31:24]};
assign main_basesoc_ethcore_rx_depacketizer_source_param_length = {main_basesoc_ethcore_rx_depacketizer_header[39:32], main_basesoc_ethcore_rx_depacketizer_header[47:40]};
assign main_basesoc_ethcore_rx_depacketizer_source_param_src_port = {main_basesoc_ethcore_rx_depacketizer_header[7:0], main_basesoc_ethcore_rx_depacketizer_header[15:8]};
assign main_basesoc_ethcore_rx_depacketizer_source_payload_error = main_basesoc_ethcore_rx_depacketizer_sink_payload_error;
assign main_basesoc_ethcore_rx_depacketizer_source_description = main_basesoc_ethcore_rx_depacketizer_sink_last;
assign main_basesoc_ethcore_rx_depacketizer_new_last_be = {main_basesoc_ethcore_rx_depacketizer_source_description};
assign main_basesoc_ethcore_rx_depacketizer_is_in_copy = (main_basesoc_ethcore_rx_depacketizer_is_ongoing0 | main_basesoc_ethcore_rx_depacketizer_is_ongoing1);
always @(*) begin
    main_basesoc_ethcore_rx_depacketizer_source_last <= 1'd0;
    if (main_basesoc_ethcore_rx_depacketizer_source_last_s) begin
        main_basesoc_ethcore_rx_depacketizer_source_last <= main_basesoc_ethcore_rx_depacketizer_source_last_b;
    end else begin
        main_basesoc_ethcore_rx_depacketizer_source_last <= main_basesoc_ethcore_rx_depacketizer_source_last_a;
    end
end
always @(*) begin
    builder_liteethudp_liteethudprx_fsm0_next_state <= 2'd0;
    builder_liteethudp_liteethudprx_fsm1_next_state <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_count_liteethudp_fsm0_next_value2 <= 3'd0;
    main_basesoc_ethcore_rx_depacketizer_count_liteethudp_fsm0_next_value_ce2 <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_delayed_last_be_liteethudp_fsm1_next_value1 <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_delayed_last_be_liteethudp_fsm1_next_value_ce1 <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_fsm_from_idle_liteethudp_fsm0_next_value3 <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_fsm_from_idle_liteethudp_fsm0_next_value_ce3 <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_is_ongoing0 <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_is_ongoing1 <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_is_ongoing2 <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_is_ongoing3 <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_sink_ready <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_source_last_a <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_source_last_b <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_source_last_s <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_source_payload_data <= 8'd0;
    main_basesoc_ethcore_rx_depacketizer_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_source_valid <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_sr_shift <= 1'd0;
    builder_liteethudp_liteethudprx_fsm0_next_state <= builder_liteethudp_liteethudprx_fsm0_state;
    case (builder_liteethudp_liteethudprx_fsm0_state)
        1'd1: begin
            main_basesoc_ethcore_rx_depacketizer_sink_ready <= 1'd1;
            if (main_basesoc_ethcore_rx_depacketizer_sink_valid) begin
                main_basesoc_ethcore_rx_depacketizer_count_liteethudp_fsm0_next_value2 <= (main_basesoc_ethcore_rx_depacketizer_count + 1'd1);
                main_basesoc_ethcore_rx_depacketizer_count_liteethudp_fsm0_next_value_ce2 <= 1'd1;
                main_basesoc_ethcore_rx_depacketizer_sr_shift <= 1'd1;
                if ((main_basesoc_ethcore_rx_depacketizer_count == 3'd7)) begin
                    builder_liteethudp_liteethudprx_fsm0_next_state <= 2'd2;
                    main_basesoc_ethcore_rx_depacketizer_count_liteethudp_fsm0_next_value2 <= (main_basesoc_ethcore_rx_depacketizer_count + 1'd1);
                    main_basesoc_ethcore_rx_depacketizer_count_liteethudp_fsm0_next_value_ce2 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_ethcore_rx_depacketizer_source_valid <= (main_basesoc_ethcore_rx_depacketizer_sink_valid | main_basesoc_ethcore_rx_depacketizer_sink_d_last);
            main_basesoc_ethcore_rx_depacketizer_source_last_a <= (main_basesoc_ethcore_rx_depacketizer_sink_last | main_basesoc_ethcore_rx_depacketizer_sink_d_last);
            main_basesoc_ethcore_rx_depacketizer_sink_ready <= main_basesoc_ethcore_rx_depacketizer_source_ready;
            main_basesoc_ethcore_rx_depacketizer_source_payload_data <= main_basesoc_ethcore_rx_depacketizer_sink_payload_data;
            if ((main_basesoc_ethcore_rx_depacketizer_source_valid & main_basesoc_ethcore_rx_depacketizer_source_ready)) begin
                if (main_basesoc_ethcore_rx_depacketizer_source_last) begin
                    builder_liteethudp_liteethudprx_fsm0_next_state <= 1'd0;
                end
            end
            main_basesoc_ethcore_rx_depacketizer_is_ongoing0 <= 1'd1;
            main_basesoc_ethcore_rx_depacketizer_is_ongoing2 <= 1'd1;
        end
        2'd3: begin
            main_basesoc_ethcore_rx_depacketizer_is_ongoing1 <= 1'd1;
            main_basesoc_ethcore_rx_depacketizer_is_ongoing3 <= 1'd1;
        end
        default: begin
            main_basesoc_ethcore_rx_depacketizer_sink_ready <= 1'd1;
            main_basesoc_ethcore_rx_depacketizer_count_liteethudp_fsm0_next_value2 <= 1'd1;
            main_basesoc_ethcore_rx_depacketizer_count_liteethudp_fsm0_next_value_ce2 <= 1'd1;
            if (main_basesoc_ethcore_rx_depacketizer_sink_valid) begin
                main_basesoc_ethcore_rx_depacketizer_sr_shift <= 1'd1;
                main_basesoc_ethcore_rx_depacketizer_fsm_from_idle_liteethudp_fsm0_next_value3 <= 1'd1;
                main_basesoc_ethcore_rx_depacketizer_fsm_from_idle_liteethudp_fsm0_next_value_ce3 <= 1'd1;
                if (1'd0) begin
                    builder_liteethudp_liteethudprx_fsm0_next_state <= 2'd2;
                end else begin
                    builder_liteethudp_liteethudprx_fsm0_next_state <= 1'd1;
                end
            end
        end
    endcase
    builder_liteethudp_liteethudprx_fsm1_next_state <= builder_liteethudp_liteethudprx_fsm1_state;
    case (builder_liteethudp_liteethudprx_fsm1_state)
        1'd1: begin
            main_basesoc_ethcore_rx_depacketizer_source_last_b <= 1'd1;
            main_basesoc_ethcore_rx_depacketizer_source_last_s <= 1'd1;
            main_basesoc_ethcore_rx_depacketizer_source_payload_last_be <= main_basesoc_ethcore_rx_depacketizer_delayed_last_be;
            main_basesoc_ethcore_rx_depacketizer_sink_ready <= 1'd0;
            if ((main_basesoc_ethcore_rx_depacketizer_source_ready & main_basesoc_ethcore_rx_depacketizer_source_valid)) begin
                builder_liteethudp_liteethudprx_fsm1_next_state <= 1'd0;
            end
        end
        default: begin
            if (((main_basesoc_ethcore_rx_depacketizer_sink_valid & main_basesoc_ethcore_rx_depacketizer_sink_last) & (main_basesoc_ethcore_rx_depacketizer_source_description > main_basesoc_ethcore_rx_depacketizer_new_last_be))) begin
                main_basesoc_ethcore_rx_depacketizer_source_last_b <= 1'd0;
                main_basesoc_ethcore_rx_depacketizer_source_last_s <= 1'd1;
                main_basesoc_ethcore_rx_depacketizer_source_payload_last_be <= 1'd0;
                if (((main_basesoc_ethcore_rx_depacketizer_source_ready & main_basesoc_ethcore_rx_depacketizer_source_valid) | ((~main_basesoc_ethcore_rx_depacketizer_was_in_copy) & main_basesoc_ethcore_rx_depacketizer_is_in_copy))) begin
                    main_basesoc_ethcore_rx_depacketizer_delayed_last_be_liteethudp_fsm1_next_value1 <= main_basesoc_ethcore_rx_depacketizer_new_last_be;
                    main_basesoc_ethcore_rx_depacketizer_delayed_last_be_liteethudp_fsm1_next_value_ce1 <= 1'd1;
                    builder_liteethudp_liteethudprx_fsm1_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_ethcore_rx_depacketizer_sink_last) begin
                    main_basesoc_ethcore_rx_depacketizer_source_last_b <= 1'd1;
                    main_basesoc_ethcore_rx_depacketizer_source_last_s <= 1'd1;
                    main_basesoc_ethcore_rx_depacketizer_source_payload_last_be <= main_basesoc_ethcore_rx_depacketizer_new_last_be;
                end
            end
            if ((main_basesoc_ethcore_rx_depacketizer_is_ongoing2 | (main_basesoc_ethcore_rx_depacketizer_is_ongoing3 & (~main_basesoc_ethcore_rx_depacketizer_fsm_from_idle)))) begin
                main_basesoc_ethcore_rx_depacketizer_sink_ready <= main_basesoc_ethcore_rx_depacketizer_source_ready;
            end else begin
                main_basesoc_ethcore_rx_depacketizer_sink_ready <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_liteethudp_liteethudprx_next_state <= 2'd0;
    main_basesoc_ethcore_rx_count_liteethudp_next_value <= 16'd0;
    main_basesoc_ethcore_rx_count_liteethudp_next_value_ce <= 1'd0;
    main_basesoc_ethcore_rx_depacketizer_source_ready <= 1'd0;
    main_basesoc_ethcore_rx_source_source_last <= 1'd0;
    main_basesoc_ethcore_rx_source_source_payload_last_be <= 1'd0;
    main_basesoc_ethcore_rx_source_source_valid <= 1'd0;
    builder_liteethudp_liteethudprx_next_state <= builder_liteethudp_liteethudprx_state;
    case (builder_liteethudp_liteethudprx_state)
        1'd1: begin
            main_basesoc_ethcore_rx_source_source_valid <= main_basesoc_ethcore_rx_depacketizer_source_valid;
            main_basesoc_ethcore_rx_depacketizer_source_ready <= main_basesoc_ethcore_rx_source_source_ready;
            main_basesoc_ethcore_rx_source_source_last <= (main_basesoc_ethcore_rx_depacketizer_source_last | (main_basesoc_ethcore_rx_count >= main_basesoc_ethcore_rx_source_source_param_length));
            if (main_basesoc_ethcore_rx_depacketizer_source_payload_last_be) begin
                main_basesoc_ethcore_rx_source_source_payload_last_be <= main_basesoc_ethcore_rx_depacketizer_source_payload_last_be;
            end else begin
                if (main_basesoc_ethcore_rx_source_source_last) begin
                    case ((main_basesoc_ethcore_rx_source_source_param_length & 1'd0))
                        1'd1: begin
                            main_basesoc_ethcore_rx_source_source_payload_last_be <= 1'd1;
                        end
                        2'd2: begin
                            main_basesoc_ethcore_rx_source_source_payload_last_be <= 2'd2;
                        end
                        2'd3: begin
                            main_basesoc_ethcore_rx_source_source_payload_last_be <= 3'd4;
                        end
                        3'd4: begin
                            main_basesoc_ethcore_rx_source_source_payload_last_be <= 4'd8;
                        end
                        3'd5: begin
                            main_basesoc_ethcore_rx_source_source_payload_last_be <= 5'd16;
                        end
                        3'd6: begin
                            main_basesoc_ethcore_rx_source_source_payload_last_be <= 6'd32;
                        end
                        3'd7: begin
                            main_basesoc_ethcore_rx_source_source_payload_last_be <= 7'd64;
                        end
                        default: begin
                            main_basesoc_ethcore_rx_source_source_payload_last_be <= 1'd1;
                        end
                    endcase
                end
            end
            if ((main_basesoc_ethcore_rx_source_source_valid & main_basesoc_ethcore_rx_source_source_ready)) begin
                main_basesoc_ethcore_rx_count_liteethudp_next_value <= (main_basesoc_ethcore_rx_count + 1'd1);
                main_basesoc_ethcore_rx_count_liteethudp_next_value_ce <= 1'd1;
                if (main_basesoc_ethcore_rx_depacketizer_source_last) begin
                    builder_liteethudp_liteethudprx_next_state <= 1'd0;
                end else begin
                    if (main_basesoc_ethcore_rx_source_source_last) begin
                        builder_liteethudp_liteethudprx_next_state <= 2'd2;
                    end
                end
            end
        end
        2'd2: begin
            main_basesoc_ethcore_rx_depacketizer_source_ready <= 1'd1;
            if (((main_basesoc_ethcore_rx_depacketizer_source_valid & main_basesoc_ethcore_rx_depacketizer_source_last) & main_basesoc_ethcore_rx_depacketizer_source_ready)) begin
                builder_liteethudp_liteethudprx_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_ethcore_rx_count_liteethudp_next_value <= 1'd1;
            main_basesoc_ethcore_rx_count_liteethudp_next_value_ce <= 1'd1;
            if (main_basesoc_ethcore_rx_depacketizer_source_valid) begin
                builder_liteethudp_liteethudprx_next_state <= 2'd2;
                if ((main_basesoc_ethcore_rx_sink_sink_param_protocol == 5'd17)) begin
                    builder_liteethudp_liteethudprx_next_state <= 1'd1;
                end
            end
        end
    endcase
end
assign main_basesoc_etherbone_tx_cdc_sink_sink_valid = main_basesoc_etherbone_user_port_sink_valid;
assign main_basesoc_etherbone_user_port_sink_ready = main_basesoc_etherbone_tx_cdc_sink_sink_ready;
assign main_basesoc_etherbone_tx_cdc_sink_sink_first = main_basesoc_etherbone_user_port_sink_first;
assign main_basesoc_etherbone_tx_cdc_sink_sink_last = main_basesoc_etherbone_user_port_sink_last;
assign main_basesoc_etherbone_tx_cdc_sink_sink_payload_data = main_basesoc_etherbone_user_port_sink_payload_data;
assign main_basesoc_etherbone_tx_cdc_sink_sink_payload_last_be = main_basesoc_etherbone_user_port_sink_payload_last_be;
assign main_basesoc_etherbone_tx_cdc_sink_sink_payload_error = main_basesoc_etherbone_user_port_sink_payload_error;
assign main_basesoc_etherbone_tx_cdc_sink_sink_param_src_port = main_basesoc_etherbone_user_port_sink_param_src_port;
assign main_basesoc_etherbone_tx_cdc_sink_sink_param_dst_port = main_basesoc_etherbone_user_port_sink_param_dst_port;
assign main_basesoc_etherbone_tx_cdc_sink_sink_param_ip_address = main_basesoc_etherbone_user_port_sink_param_ip_address;
assign main_basesoc_etherbone_tx_cdc_sink_sink_param_length = main_basesoc_etherbone_user_port_sink_param_length;
assign main_basesoc_etherbone_tx_converter_sink_valid = main_basesoc_etherbone_tx_cdc_source_source_valid;
assign main_basesoc_etherbone_tx_cdc_source_source_ready = main_basesoc_etherbone_tx_converter_sink_ready;
assign main_basesoc_etherbone_tx_converter_sink_first = main_basesoc_etherbone_tx_cdc_source_source_first;
assign main_basesoc_etherbone_tx_converter_sink_last = main_basesoc_etherbone_tx_cdc_source_source_last;
assign main_basesoc_etherbone_tx_converter_sink_payload_data = main_basesoc_etherbone_tx_cdc_source_source_payload_data;
assign main_basesoc_etherbone_tx_converter_sink_payload_last_be = main_basesoc_etherbone_tx_cdc_source_source_payload_last_be;
assign main_basesoc_etherbone_tx_converter_sink_payload_error = main_basesoc_etherbone_tx_cdc_source_source_payload_error;
assign main_basesoc_etherbone_tx_converter_sink_param_src_port = main_basesoc_etherbone_tx_cdc_source_source_param_src_port;
assign main_basesoc_etherbone_tx_converter_sink_param_dst_port = main_basesoc_etherbone_tx_cdc_source_source_param_dst_port;
assign main_basesoc_etherbone_tx_converter_sink_param_ip_address = main_basesoc_etherbone_tx_cdc_source_source_param_ip_address;
assign main_basesoc_etherbone_tx_converter_sink_param_length = main_basesoc_etherbone_tx_cdc_source_source_param_length;
assign main_basesoc_etherbone_internal_port_sink_valid = main_basesoc_etherbone_tx_converter_source_valid;
assign main_basesoc_etherbone_tx_converter_source_ready = main_basesoc_etherbone_internal_port_sink_ready;
assign main_basesoc_etherbone_internal_port_sink_first = main_basesoc_etherbone_tx_converter_source_first;
assign main_basesoc_etherbone_internal_port_sink_last = main_basesoc_etherbone_tx_converter_source_last;
assign main_basesoc_etherbone_internal_port_sink_payload_data = main_basesoc_etherbone_tx_converter_source_payload_data;
assign main_basesoc_etherbone_internal_port_sink_payload_last_be = main_basesoc_etherbone_tx_converter_source_payload_last_be;
assign main_basesoc_etherbone_internal_port_sink_payload_error = main_basesoc_etherbone_tx_converter_source_payload_error;
assign main_basesoc_etherbone_internal_port_sink_param_src_port = main_basesoc_etherbone_tx_converter_source_param_src_port;
assign main_basesoc_etherbone_internal_port_sink_param_dst_port = main_basesoc_etherbone_tx_converter_source_param_dst_port;
assign main_basesoc_etherbone_internal_port_sink_param_ip_address = main_basesoc_etherbone_tx_converter_source_param_ip_address;
assign main_basesoc_etherbone_internal_port_sink_param_length = main_basesoc_etherbone_tx_converter_source_param_length;
assign main_basesoc_etherbone_rx_converter_sink_valid = main_basesoc_etherbone_internal_port_source_valid;
assign main_basesoc_etherbone_internal_port_source_ready = main_basesoc_etherbone_rx_converter_sink_ready;
assign main_basesoc_etherbone_rx_converter_sink_first = main_basesoc_etherbone_internal_port_source_first;
assign main_basesoc_etherbone_rx_converter_sink_last = main_basesoc_etherbone_internal_port_source_last;
assign main_basesoc_etherbone_rx_converter_sink_payload_data = main_basesoc_etherbone_internal_port_source_payload_data;
assign main_basesoc_etherbone_rx_converter_sink_payload_last_be = main_basesoc_etherbone_internal_port_source_payload_last_be;
assign main_basesoc_etherbone_rx_converter_sink_payload_error = main_basesoc_etherbone_internal_port_source_payload_error;
assign main_basesoc_etherbone_rx_converter_sink_param_src_port = main_basesoc_etherbone_internal_port_source_param_src_port;
assign main_basesoc_etherbone_rx_converter_sink_param_dst_port = main_basesoc_etherbone_internal_port_source_param_dst_port;
assign main_basesoc_etherbone_rx_converter_sink_param_ip_address = main_basesoc_etherbone_internal_port_source_param_ip_address;
assign main_basesoc_etherbone_rx_converter_sink_param_length = main_basesoc_etherbone_internal_port_source_param_length;
assign main_basesoc_etherbone_rx_cdc_sink_sink_valid = main_basesoc_etherbone_rx_converter_source_valid;
assign main_basesoc_etherbone_rx_converter_source_ready = main_basesoc_etherbone_rx_cdc_sink_sink_ready;
assign main_basesoc_etherbone_rx_cdc_sink_sink_first = main_basesoc_etherbone_rx_converter_source_first;
assign main_basesoc_etherbone_rx_cdc_sink_sink_last = main_basesoc_etherbone_rx_converter_source_last;
assign main_basesoc_etherbone_rx_cdc_sink_sink_payload_data = main_basesoc_etherbone_rx_converter_source_payload_data;
assign main_basesoc_etherbone_rx_cdc_sink_sink_payload_last_be = main_basesoc_etherbone_rx_converter_source_payload_last_be;
assign main_basesoc_etherbone_rx_cdc_sink_sink_payload_error = main_basesoc_etherbone_rx_converter_source_payload_error;
assign main_basesoc_etherbone_rx_cdc_sink_sink_param_src_port = main_basesoc_etherbone_rx_converter_source_param_src_port;
assign main_basesoc_etherbone_rx_cdc_sink_sink_param_dst_port = main_basesoc_etherbone_rx_converter_source_param_dst_port;
assign main_basesoc_etherbone_rx_cdc_sink_sink_param_ip_address = main_basesoc_etherbone_rx_converter_source_param_ip_address;
assign main_basesoc_etherbone_rx_cdc_sink_sink_param_length = main_basesoc_etherbone_rx_converter_source_param_length;
assign main_basesoc_etherbone_user_port_source_valid = main_basesoc_etherbone_rx_cdc_source_source_valid;
assign main_basesoc_etherbone_rx_cdc_source_source_ready = main_basesoc_etherbone_user_port_source_ready;
assign main_basesoc_etherbone_user_port_source_first = main_basesoc_etherbone_rx_cdc_source_source_first;
assign main_basesoc_etherbone_user_port_source_last = main_basesoc_etherbone_rx_cdc_source_source_last;
assign main_basesoc_etherbone_user_port_source_payload_data = main_basesoc_etherbone_rx_cdc_source_source_payload_data;
assign main_basesoc_etherbone_user_port_source_payload_last_be = main_basesoc_etherbone_rx_cdc_source_source_payload_last_be;
assign main_basesoc_etherbone_user_port_source_payload_error = main_basesoc_etherbone_rx_cdc_source_source_payload_error;
assign main_basesoc_etherbone_user_port_source_param_src_port = main_basesoc_etherbone_rx_cdc_source_source_param_src_port;
assign main_basesoc_etherbone_user_port_source_param_dst_port = main_basesoc_etherbone_rx_cdc_source_source_param_dst_port;
assign main_basesoc_etherbone_user_port_source_param_ip_address = main_basesoc_etherbone_rx_cdc_source_source_param_ip_address;
assign main_basesoc_etherbone_user_port_source_param_length = main_basesoc_etherbone_rx_cdc_source_source_param_length;
always @(*) begin
    builder_liteethudp_sel0 <= 1'd0;
    if ((main_basesoc_ethcore_crossbar_sink_param_dst_port == 11'd1234)) begin
        builder_liteethudp_sel0 <= 1'd1;
    end
end
assign main_basesoc_etherbone_tx_cdc_cdc_sink_valid = main_basesoc_etherbone_tx_cdc_sink_sink_valid;
assign main_basesoc_etherbone_tx_cdc_sink_sink_ready = main_basesoc_etherbone_tx_cdc_cdc_sink_ready;
assign main_basesoc_etherbone_tx_cdc_cdc_sink_first = main_basesoc_etherbone_tx_cdc_sink_sink_first;
assign main_basesoc_etherbone_tx_cdc_cdc_sink_last = main_basesoc_etherbone_tx_cdc_sink_sink_last;
assign main_basesoc_etherbone_tx_cdc_cdc_sink_payload_data = main_basesoc_etherbone_tx_cdc_sink_sink_payload_data;
assign main_basesoc_etherbone_tx_cdc_cdc_sink_payload_last_be = main_basesoc_etherbone_tx_cdc_sink_sink_payload_last_be;
assign main_basesoc_etherbone_tx_cdc_cdc_sink_payload_error = main_basesoc_etherbone_tx_cdc_sink_sink_payload_error;
assign main_basesoc_etherbone_tx_cdc_cdc_sink_param_src_port = main_basesoc_etherbone_tx_cdc_sink_sink_param_src_port;
assign main_basesoc_etherbone_tx_cdc_cdc_sink_param_dst_port = main_basesoc_etherbone_tx_cdc_sink_sink_param_dst_port;
assign main_basesoc_etherbone_tx_cdc_cdc_sink_param_ip_address = main_basesoc_etherbone_tx_cdc_sink_sink_param_ip_address;
assign main_basesoc_etherbone_tx_cdc_cdc_sink_param_length = main_basesoc_etherbone_tx_cdc_sink_sink_param_length;
assign main_basesoc_etherbone_tx_cdc_source_source_valid = main_basesoc_etherbone_tx_cdc_cdc_source_valid;
assign main_basesoc_etherbone_tx_cdc_cdc_source_ready = main_basesoc_etherbone_tx_cdc_source_source_ready;
assign main_basesoc_etherbone_tx_cdc_source_source_first = main_basesoc_etherbone_tx_cdc_cdc_source_first;
assign main_basesoc_etherbone_tx_cdc_source_source_last = main_basesoc_etherbone_tx_cdc_cdc_source_last;
assign main_basesoc_etherbone_tx_cdc_source_source_payload_data = main_basesoc_etherbone_tx_cdc_cdc_source_payload_data;
assign main_basesoc_etherbone_tx_cdc_source_source_payload_last_be = main_basesoc_etherbone_tx_cdc_cdc_source_payload_last_be;
assign main_basesoc_etherbone_tx_cdc_source_source_payload_error = main_basesoc_etherbone_tx_cdc_cdc_source_payload_error;
assign main_basesoc_etherbone_tx_cdc_source_source_param_src_port = main_basesoc_etherbone_tx_cdc_cdc_source_param_src_port;
assign main_basesoc_etherbone_tx_cdc_source_source_param_dst_port = main_basesoc_etherbone_tx_cdc_cdc_source_param_dst_port;
assign main_basesoc_etherbone_tx_cdc_source_source_param_ip_address = main_basesoc_etherbone_tx_cdc_cdc_source_param_ip_address;
assign main_basesoc_etherbone_tx_cdc_source_source_param_length = main_basesoc_etherbone_tx_cdc_cdc_source_param_length;
assign main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_din = {main_basesoc_etherbone_tx_cdc_cdc_fifo_in_last, main_basesoc_etherbone_tx_cdc_cdc_fifo_in_first, main_basesoc_etherbone_tx_cdc_cdc_fifo_in_param_length, main_basesoc_etherbone_tx_cdc_cdc_fifo_in_param_ip_address, main_basesoc_etherbone_tx_cdc_cdc_fifo_in_param_dst_port, main_basesoc_etherbone_tx_cdc_cdc_fifo_in_param_src_port, main_basesoc_etherbone_tx_cdc_cdc_fifo_in_payload_error, main_basesoc_etherbone_tx_cdc_cdc_fifo_in_payload_last_be, main_basesoc_etherbone_tx_cdc_cdc_fifo_in_payload_data};
assign {main_basesoc_etherbone_tx_cdc_cdc_fifo_out_last, main_basesoc_etherbone_tx_cdc_cdc_fifo_out_first, main_basesoc_etherbone_tx_cdc_cdc_fifo_out_param_length, main_basesoc_etherbone_tx_cdc_cdc_fifo_out_param_ip_address, main_basesoc_etherbone_tx_cdc_cdc_fifo_out_param_dst_port, main_basesoc_etherbone_tx_cdc_cdc_fifo_out_param_src_port, main_basesoc_etherbone_tx_cdc_cdc_fifo_out_payload_error, main_basesoc_etherbone_tx_cdc_cdc_fifo_out_payload_last_be, main_basesoc_etherbone_tx_cdc_cdc_fifo_out_payload_data} = main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_dout;
assign main_basesoc_etherbone_tx_cdc_cdc_sink_ready = main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_writable;
assign main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_we = main_basesoc_etherbone_tx_cdc_cdc_sink_valid;
assign main_basesoc_etherbone_tx_cdc_cdc_fifo_in_first = main_basesoc_etherbone_tx_cdc_cdc_sink_first;
assign main_basesoc_etherbone_tx_cdc_cdc_fifo_in_last = main_basesoc_etherbone_tx_cdc_cdc_sink_last;
assign main_basesoc_etherbone_tx_cdc_cdc_fifo_in_payload_data = main_basesoc_etherbone_tx_cdc_cdc_sink_payload_data;
assign main_basesoc_etherbone_tx_cdc_cdc_fifo_in_payload_last_be = main_basesoc_etherbone_tx_cdc_cdc_sink_payload_last_be;
assign main_basesoc_etherbone_tx_cdc_cdc_fifo_in_payload_error = main_basesoc_etherbone_tx_cdc_cdc_sink_payload_error;
assign main_basesoc_etherbone_tx_cdc_cdc_fifo_in_param_src_port = main_basesoc_etherbone_tx_cdc_cdc_sink_param_src_port;
assign main_basesoc_etherbone_tx_cdc_cdc_fifo_in_param_dst_port = main_basesoc_etherbone_tx_cdc_cdc_sink_param_dst_port;
assign main_basesoc_etherbone_tx_cdc_cdc_fifo_in_param_ip_address = main_basesoc_etherbone_tx_cdc_cdc_sink_param_ip_address;
assign main_basesoc_etherbone_tx_cdc_cdc_fifo_in_param_length = main_basesoc_etherbone_tx_cdc_cdc_sink_param_length;
assign main_basesoc_etherbone_tx_cdc_cdc_source_valid = main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_readable;
assign main_basesoc_etherbone_tx_cdc_cdc_source_first = main_basesoc_etherbone_tx_cdc_cdc_fifo_out_first;
assign main_basesoc_etherbone_tx_cdc_cdc_source_last = main_basesoc_etherbone_tx_cdc_cdc_fifo_out_last;
assign main_basesoc_etherbone_tx_cdc_cdc_source_payload_data = main_basesoc_etherbone_tx_cdc_cdc_fifo_out_payload_data;
assign main_basesoc_etherbone_tx_cdc_cdc_source_payload_last_be = main_basesoc_etherbone_tx_cdc_cdc_fifo_out_payload_last_be;
assign main_basesoc_etherbone_tx_cdc_cdc_source_payload_error = main_basesoc_etherbone_tx_cdc_cdc_fifo_out_payload_error;
assign main_basesoc_etherbone_tx_cdc_cdc_source_param_src_port = main_basesoc_etherbone_tx_cdc_cdc_fifo_out_param_src_port;
assign main_basesoc_etherbone_tx_cdc_cdc_source_param_dst_port = main_basesoc_etherbone_tx_cdc_cdc_fifo_out_param_dst_port;
assign main_basesoc_etherbone_tx_cdc_cdc_source_param_ip_address = main_basesoc_etherbone_tx_cdc_cdc_fifo_out_param_ip_address;
assign main_basesoc_etherbone_tx_cdc_cdc_source_param_length = main_basesoc_etherbone_tx_cdc_cdc_fifo_out_param_length;
assign main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_re = main_basesoc_etherbone_tx_cdc_cdc_source_ready;
assign main_basesoc_etherbone_tx_cdc_cdc_graycounter0_ce = (main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_writable & main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_we);
assign main_basesoc_etherbone_tx_cdc_cdc_graycounter1_ce = (main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_readable & main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_re);
assign main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_writable = (((main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q[2] == main_basesoc_etherbone_tx_cdc_cdc_consume_wdomain[2]) | (main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q[1] == main_basesoc_etherbone_tx_cdc_cdc_consume_wdomain[1])) | (main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q[0] != main_basesoc_etherbone_tx_cdc_cdc_consume_wdomain[0]));
assign main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_readable = (main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q != main_basesoc_etherbone_tx_cdc_cdc_produce_rdomain);
assign main_basesoc_etherbone_tx_cdc_cdc_wrport_adr = main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_binary[1:0];
assign main_basesoc_etherbone_tx_cdc_cdc_wrport_dat_w = main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_din;
assign main_basesoc_etherbone_tx_cdc_cdc_wrport_we = main_basesoc_etherbone_tx_cdc_cdc_graycounter0_ce;
assign main_basesoc_etherbone_tx_cdc_cdc_rdport_adr = main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_next_binary[1:0];
assign main_basesoc_etherbone_tx_cdc_cdc_asyncfifo_dout = main_basesoc_etherbone_tx_cdc_cdc_rdport_dat_r;
always @(*) begin
    main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_next_binary <= 3'd0;
    if (main_basesoc_etherbone_tx_cdc_cdc_graycounter0_ce) begin
        main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_next_binary <= (main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_next_binary <= main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_binary;
    end
end
assign main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_next = (main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_next_binary ^ main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_next_binary <= 3'd0;
    if (main_basesoc_etherbone_tx_cdc_cdc_graycounter1_ce) begin
        main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_next_binary <= (main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_next_binary <= main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_binary;
    end
end
assign main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_next = (main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_next_binary ^ main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_next_binary[2:1]);
assign main_basesoc_etherbone_tx_converter_converter_sink_valid = main_basesoc_etherbone_tx_converter_sink_valid;
assign main_basesoc_etherbone_tx_converter_converter_sink_first = main_basesoc_etherbone_tx_converter_sink_first;
assign main_basesoc_etherbone_tx_converter_converter_sink_last = main_basesoc_etherbone_tx_converter_sink_last;
assign main_basesoc_etherbone_tx_converter_sink_ready = main_basesoc_etherbone_tx_converter_converter_sink_ready;
always @(*) begin
    main_basesoc_etherbone_tx_converter_converter_sink_payload_data <= 40'd0;
    main_basesoc_etherbone_tx_converter_converter_sink_payload_data[7:0] <= main_basesoc_etherbone_tx_converter_sink_payload_data[7:0];
    main_basesoc_etherbone_tx_converter_converter_sink_payload_data[8] <= main_basesoc_etherbone_tx_converter_sink_payload_last_be[0];
    main_basesoc_etherbone_tx_converter_converter_sink_payload_data[9] <= main_basesoc_etherbone_tx_converter_sink_payload_error[0];
    main_basesoc_etherbone_tx_converter_converter_sink_payload_data[17:10] <= main_basesoc_etherbone_tx_converter_sink_payload_data[15:8];
    main_basesoc_etherbone_tx_converter_converter_sink_payload_data[18] <= main_basesoc_etherbone_tx_converter_sink_payload_last_be[1];
    main_basesoc_etherbone_tx_converter_converter_sink_payload_data[19] <= main_basesoc_etherbone_tx_converter_sink_payload_error[1];
    main_basesoc_etherbone_tx_converter_converter_sink_payload_data[27:20] <= main_basesoc_etherbone_tx_converter_sink_payload_data[23:16];
    main_basesoc_etherbone_tx_converter_converter_sink_payload_data[28] <= main_basesoc_etherbone_tx_converter_sink_payload_last_be[2];
    main_basesoc_etherbone_tx_converter_converter_sink_payload_data[29] <= main_basesoc_etherbone_tx_converter_sink_payload_error[2];
    main_basesoc_etherbone_tx_converter_converter_sink_payload_data[37:30] <= main_basesoc_etherbone_tx_converter_sink_payload_data[31:24];
    main_basesoc_etherbone_tx_converter_converter_sink_payload_data[38] <= main_basesoc_etherbone_tx_converter_sink_payload_last_be[3];
    main_basesoc_etherbone_tx_converter_converter_sink_payload_data[39] <= main_basesoc_etherbone_tx_converter_sink_payload_error[3];
end
assign main_basesoc_etherbone_tx_converter_source_valid = main_basesoc_etherbone_tx_converter_source_source_valid;
assign main_basesoc_etherbone_tx_converter_source_first = main_basesoc_etherbone_tx_converter_source_source_first;
assign main_basesoc_etherbone_tx_converter_source_last = main_basesoc_etherbone_tx_converter_source_source_last;
assign main_basesoc_etherbone_tx_converter_source_source_ready = main_basesoc_etherbone_tx_converter_source_ready;
assign {main_basesoc_etherbone_tx_converter_source_payload_error, main_basesoc_etherbone_tx_converter_source_payload_last_be, main_basesoc_etherbone_tx_converter_source_payload_data} = main_basesoc_etherbone_tx_converter_source_source_payload_data;
assign main_basesoc_etherbone_tx_converter_source_param_src_port = main_basesoc_etherbone_tx_converter_sink_param_src_port;
assign main_basesoc_etherbone_tx_converter_source_param_dst_port = main_basesoc_etherbone_tx_converter_sink_param_dst_port;
assign main_basesoc_etherbone_tx_converter_source_param_ip_address = main_basesoc_etherbone_tx_converter_sink_param_ip_address;
assign main_basesoc_etherbone_tx_converter_source_param_length = main_basesoc_etherbone_tx_converter_sink_param_length;
assign main_basesoc_etherbone_tx_converter_source_source_valid = main_basesoc_etherbone_tx_converter_converter_source_valid;
assign main_basesoc_etherbone_tx_converter_converter_source_ready = main_basesoc_etherbone_tx_converter_source_source_ready;
assign main_basesoc_etherbone_tx_converter_source_source_first = main_basesoc_etherbone_tx_converter_converter_source_first;
assign main_basesoc_etherbone_tx_converter_source_source_last = main_basesoc_etherbone_tx_converter_converter_source_last;
assign main_basesoc_etherbone_tx_converter_source_source_payload_data = main_basesoc_etherbone_tx_converter_converter_source_payload_data;
assign main_basesoc_etherbone_tx_converter_converter_first = (main_basesoc_etherbone_tx_converter_converter_mux == 1'd0);
assign main_basesoc_etherbone_tx_converter_converter_last = (main_basesoc_etherbone_tx_converter_converter_mux == 2'd3);
assign main_basesoc_etherbone_tx_converter_converter_source_valid = main_basesoc_etherbone_tx_converter_converter_sink_valid;
assign main_basesoc_etherbone_tx_converter_converter_source_first = (main_basesoc_etherbone_tx_converter_converter_sink_first & main_basesoc_etherbone_tx_converter_converter_first);
assign main_basesoc_etherbone_tx_converter_converter_source_last = (main_basesoc_etherbone_tx_converter_converter_sink_last & main_basesoc_etherbone_tx_converter_converter_last);
assign main_basesoc_etherbone_tx_converter_converter_sink_ready = (main_basesoc_etherbone_tx_converter_converter_last & main_basesoc_etherbone_tx_converter_converter_source_ready);
always @(*) begin
    main_basesoc_etherbone_tx_converter_converter_source_payload_data <= 10'd0;
    case (main_basesoc_etherbone_tx_converter_converter_mux)
        1'd0: begin
            main_basesoc_etherbone_tx_converter_converter_source_payload_data <= main_basesoc_etherbone_tx_converter_converter_sink_payload_data[9:0];
        end
        1'd1: begin
            main_basesoc_etherbone_tx_converter_converter_source_payload_data <= main_basesoc_etherbone_tx_converter_converter_sink_payload_data[19:10];
        end
        2'd2: begin
            main_basesoc_etherbone_tx_converter_converter_source_payload_data <= main_basesoc_etherbone_tx_converter_converter_sink_payload_data[29:20];
        end
        default: begin
            main_basesoc_etherbone_tx_converter_converter_source_payload_data <= main_basesoc_etherbone_tx_converter_converter_sink_payload_data[39:30];
        end
    endcase
end
assign main_basesoc_etherbone_tx_converter_converter_source_payload_valid_token_count = main_basesoc_etherbone_tx_converter_converter_last;
assign main_basesoc_etherbone_rx_converter_converter_sink_valid = main_basesoc_etherbone_rx_converter_sink_valid;
assign main_basesoc_etherbone_rx_converter_converter_sink_first = main_basesoc_etherbone_rx_converter_sink_first;
assign main_basesoc_etherbone_rx_converter_converter_sink_last = main_basesoc_etherbone_rx_converter_sink_last;
assign main_basesoc_etherbone_rx_converter_sink_ready = main_basesoc_etherbone_rx_converter_converter_sink_ready;
assign main_basesoc_etherbone_rx_converter_converter_sink_payload_data = {main_basesoc_etherbone_rx_converter_sink_payload_error, main_basesoc_etherbone_rx_converter_sink_payload_last_be, main_basesoc_etherbone_rx_converter_sink_payload_data};
assign main_basesoc_etherbone_rx_converter_source_valid = main_basesoc_etherbone_rx_converter_source_source_valid;
assign main_basesoc_etherbone_rx_converter_source_first = main_basesoc_etherbone_rx_converter_source_source_first;
assign main_basesoc_etherbone_rx_converter_source_last = main_basesoc_etherbone_rx_converter_source_source_last;
assign main_basesoc_etherbone_rx_converter_source_source_ready = main_basesoc_etherbone_rx_converter_source_ready;
always @(*) begin
    main_basesoc_etherbone_rx_converter_source_payload_data <= 32'd0;
    main_basesoc_etherbone_rx_converter_source_payload_data[7:0] <= main_basesoc_etherbone_rx_converter_source_source_payload_data[7:0];
    main_basesoc_etherbone_rx_converter_source_payload_data[15:8] <= main_basesoc_etherbone_rx_converter_source_source_payload_data[17:10];
    main_basesoc_etherbone_rx_converter_source_payload_data[23:16] <= main_basesoc_etherbone_rx_converter_source_source_payload_data[27:20];
    main_basesoc_etherbone_rx_converter_source_payload_data[31:24] <= main_basesoc_etherbone_rx_converter_source_source_payload_data[37:30];
end
always @(*) begin
    main_basesoc_etherbone_rx_converter_source_payload_last_be <= 4'd0;
    main_basesoc_etherbone_rx_converter_source_payload_last_be[0] <= main_basesoc_etherbone_rx_converter_source_source_payload_data[8];
    main_basesoc_etherbone_rx_converter_source_payload_last_be[1] <= main_basesoc_etherbone_rx_converter_source_source_payload_data[18];
    main_basesoc_etherbone_rx_converter_source_payload_last_be[2] <= main_basesoc_etherbone_rx_converter_source_source_payload_data[28];
    main_basesoc_etherbone_rx_converter_source_payload_last_be[3] <= main_basesoc_etherbone_rx_converter_source_source_payload_data[38];
end
always @(*) begin
    main_basesoc_etherbone_rx_converter_source_payload_error <= 4'd0;
    main_basesoc_etherbone_rx_converter_source_payload_error[0] <= main_basesoc_etherbone_rx_converter_source_source_payload_data[9];
    main_basesoc_etherbone_rx_converter_source_payload_error[1] <= main_basesoc_etherbone_rx_converter_source_source_payload_data[19];
    main_basesoc_etherbone_rx_converter_source_payload_error[2] <= main_basesoc_etherbone_rx_converter_source_source_payload_data[29];
    main_basesoc_etherbone_rx_converter_source_payload_error[3] <= main_basesoc_etherbone_rx_converter_source_source_payload_data[39];
end
assign main_basesoc_etherbone_rx_converter_source_source_valid = main_basesoc_etherbone_rx_converter_converter_source_valid;
assign main_basesoc_etherbone_rx_converter_converter_source_ready = main_basesoc_etherbone_rx_converter_source_source_ready;
assign main_basesoc_etherbone_rx_converter_source_source_first = main_basesoc_etherbone_rx_converter_converter_source_first;
assign main_basesoc_etherbone_rx_converter_source_source_last = main_basesoc_etherbone_rx_converter_converter_source_last;
assign main_basesoc_etherbone_rx_converter_source_source_payload_data = main_basesoc_etherbone_rx_converter_converter_source_payload_data;
assign main_basesoc_etherbone_rx_converter_converter_sink_ready = ((~main_basesoc_etherbone_rx_converter_converter_strobe_all) | main_basesoc_etherbone_rx_converter_converter_source_ready);
assign main_basesoc_etherbone_rx_converter_converter_source_valid = main_basesoc_etherbone_rx_converter_converter_strobe_all;
assign main_basesoc_etherbone_rx_converter_converter_load_part = (main_basesoc_etherbone_rx_converter_converter_sink_valid & main_basesoc_etherbone_rx_converter_converter_sink_ready);
assign main_basesoc_etherbone_rx_cdc_cdc_sink_valid = main_basesoc_etherbone_rx_cdc_sink_sink_valid;
assign main_basesoc_etherbone_rx_cdc_sink_sink_ready = main_basesoc_etherbone_rx_cdc_cdc_sink_ready;
assign main_basesoc_etherbone_rx_cdc_cdc_sink_first = main_basesoc_etherbone_rx_cdc_sink_sink_first;
assign main_basesoc_etherbone_rx_cdc_cdc_sink_last = main_basesoc_etherbone_rx_cdc_sink_sink_last;
assign main_basesoc_etherbone_rx_cdc_cdc_sink_payload_data = main_basesoc_etherbone_rx_cdc_sink_sink_payload_data;
assign main_basesoc_etherbone_rx_cdc_cdc_sink_payload_last_be = main_basesoc_etherbone_rx_cdc_sink_sink_payload_last_be;
assign main_basesoc_etherbone_rx_cdc_cdc_sink_payload_error = main_basesoc_etherbone_rx_cdc_sink_sink_payload_error;
assign main_basesoc_etherbone_rx_cdc_cdc_sink_param_src_port = main_basesoc_etherbone_rx_cdc_sink_sink_param_src_port;
assign main_basesoc_etherbone_rx_cdc_cdc_sink_param_dst_port = main_basesoc_etherbone_rx_cdc_sink_sink_param_dst_port;
assign main_basesoc_etherbone_rx_cdc_cdc_sink_param_ip_address = main_basesoc_etherbone_rx_cdc_sink_sink_param_ip_address;
assign main_basesoc_etherbone_rx_cdc_cdc_sink_param_length = main_basesoc_etherbone_rx_cdc_sink_sink_param_length;
assign main_basesoc_etherbone_rx_cdc_source_source_valid = main_basesoc_etherbone_rx_cdc_cdc_source_valid;
assign main_basesoc_etherbone_rx_cdc_cdc_source_ready = main_basesoc_etherbone_rx_cdc_source_source_ready;
assign main_basesoc_etherbone_rx_cdc_source_source_first = main_basesoc_etherbone_rx_cdc_cdc_source_first;
assign main_basesoc_etherbone_rx_cdc_source_source_last = main_basesoc_etherbone_rx_cdc_cdc_source_last;
assign main_basesoc_etherbone_rx_cdc_source_source_payload_data = main_basesoc_etherbone_rx_cdc_cdc_source_payload_data;
assign main_basesoc_etherbone_rx_cdc_source_source_payload_last_be = main_basesoc_etherbone_rx_cdc_cdc_source_payload_last_be;
assign main_basesoc_etherbone_rx_cdc_source_source_payload_error = main_basesoc_etherbone_rx_cdc_cdc_source_payload_error;
assign main_basesoc_etherbone_rx_cdc_source_source_param_src_port = main_basesoc_etherbone_rx_cdc_cdc_source_param_src_port;
assign main_basesoc_etherbone_rx_cdc_source_source_param_dst_port = main_basesoc_etherbone_rx_cdc_cdc_source_param_dst_port;
assign main_basesoc_etherbone_rx_cdc_source_source_param_ip_address = main_basesoc_etherbone_rx_cdc_cdc_source_param_ip_address;
assign main_basesoc_etherbone_rx_cdc_source_source_param_length = main_basesoc_etherbone_rx_cdc_cdc_source_param_length;
assign main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_din = {main_basesoc_etherbone_rx_cdc_cdc_fifo_in_last, main_basesoc_etherbone_rx_cdc_cdc_fifo_in_first, main_basesoc_etherbone_rx_cdc_cdc_fifo_in_param_length, main_basesoc_etherbone_rx_cdc_cdc_fifo_in_param_ip_address, main_basesoc_etherbone_rx_cdc_cdc_fifo_in_param_dst_port, main_basesoc_etherbone_rx_cdc_cdc_fifo_in_param_src_port, main_basesoc_etherbone_rx_cdc_cdc_fifo_in_payload_error, main_basesoc_etherbone_rx_cdc_cdc_fifo_in_payload_last_be, main_basesoc_etherbone_rx_cdc_cdc_fifo_in_payload_data};
assign {main_basesoc_etherbone_rx_cdc_cdc_fifo_out_last, main_basesoc_etherbone_rx_cdc_cdc_fifo_out_first, main_basesoc_etherbone_rx_cdc_cdc_fifo_out_param_length, main_basesoc_etherbone_rx_cdc_cdc_fifo_out_param_ip_address, main_basesoc_etherbone_rx_cdc_cdc_fifo_out_param_dst_port, main_basesoc_etherbone_rx_cdc_cdc_fifo_out_param_src_port, main_basesoc_etherbone_rx_cdc_cdc_fifo_out_payload_error, main_basesoc_etherbone_rx_cdc_cdc_fifo_out_payload_last_be, main_basesoc_etherbone_rx_cdc_cdc_fifo_out_payload_data} = main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_dout;
assign main_basesoc_etherbone_rx_cdc_cdc_sink_ready = main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_writable;
assign main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_we = main_basesoc_etherbone_rx_cdc_cdc_sink_valid;
assign main_basesoc_etherbone_rx_cdc_cdc_fifo_in_first = main_basesoc_etherbone_rx_cdc_cdc_sink_first;
assign main_basesoc_etherbone_rx_cdc_cdc_fifo_in_last = main_basesoc_etherbone_rx_cdc_cdc_sink_last;
assign main_basesoc_etherbone_rx_cdc_cdc_fifo_in_payload_data = main_basesoc_etherbone_rx_cdc_cdc_sink_payload_data;
assign main_basesoc_etherbone_rx_cdc_cdc_fifo_in_payload_last_be = main_basesoc_etherbone_rx_cdc_cdc_sink_payload_last_be;
assign main_basesoc_etherbone_rx_cdc_cdc_fifo_in_payload_error = main_basesoc_etherbone_rx_cdc_cdc_sink_payload_error;
assign main_basesoc_etherbone_rx_cdc_cdc_fifo_in_param_src_port = main_basesoc_etherbone_rx_cdc_cdc_sink_param_src_port;
assign main_basesoc_etherbone_rx_cdc_cdc_fifo_in_param_dst_port = main_basesoc_etherbone_rx_cdc_cdc_sink_param_dst_port;
assign main_basesoc_etherbone_rx_cdc_cdc_fifo_in_param_ip_address = main_basesoc_etherbone_rx_cdc_cdc_sink_param_ip_address;
assign main_basesoc_etherbone_rx_cdc_cdc_fifo_in_param_length = main_basesoc_etherbone_rx_cdc_cdc_sink_param_length;
assign main_basesoc_etherbone_rx_cdc_cdc_source_valid = main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_readable;
assign main_basesoc_etherbone_rx_cdc_cdc_source_first = main_basesoc_etherbone_rx_cdc_cdc_fifo_out_first;
assign main_basesoc_etherbone_rx_cdc_cdc_source_last = main_basesoc_etherbone_rx_cdc_cdc_fifo_out_last;
assign main_basesoc_etherbone_rx_cdc_cdc_source_payload_data = main_basesoc_etherbone_rx_cdc_cdc_fifo_out_payload_data;
assign main_basesoc_etherbone_rx_cdc_cdc_source_payload_last_be = main_basesoc_etherbone_rx_cdc_cdc_fifo_out_payload_last_be;
assign main_basesoc_etherbone_rx_cdc_cdc_source_payload_error = main_basesoc_etherbone_rx_cdc_cdc_fifo_out_payload_error;
assign main_basesoc_etherbone_rx_cdc_cdc_source_param_src_port = main_basesoc_etherbone_rx_cdc_cdc_fifo_out_param_src_port;
assign main_basesoc_etherbone_rx_cdc_cdc_source_param_dst_port = main_basesoc_etherbone_rx_cdc_cdc_fifo_out_param_dst_port;
assign main_basesoc_etherbone_rx_cdc_cdc_source_param_ip_address = main_basesoc_etherbone_rx_cdc_cdc_fifo_out_param_ip_address;
assign main_basesoc_etherbone_rx_cdc_cdc_source_param_length = main_basesoc_etherbone_rx_cdc_cdc_fifo_out_param_length;
assign main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_re = main_basesoc_etherbone_rx_cdc_cdc_source_ready;
assign main_basesoc_etherbone_rx_cdc_cdc_graycounter0_ce = (main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_writable & main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_we);
assign main_basesoc_etherbone_rx_cdc_cdc_graycounter1_ce = (main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_readable & main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_re);
assign main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_writable = (((main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q[2] == main_basesoc_etherbone_rx_cdc_cdc_consume_wdomain[2]) | (main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q[1] == main_basesoc_etherbone_rx_cdc_cdc_consume_wdomain[1])) | (main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q[0] != main_basesoc_etherbone_rx_cdc_cdc_consume_wdomain[0]));
assign main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_readable = (main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q != main_basesoc_etherbone_rx_cdc_cdc_produce_rdomain);
assign main_basesoc_etherbone_rx_cdc_cdc_wrport_adr = main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_binary[1:0];
assign main_basesoc_etherbone_rx_cdc_cdc_wrport_dat_w = main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_din;
assign main_basesoc_etherbone_rx_cdc_cdc_wrport_we = main_basesoc_etherbone_rx_cdc_cdc_graycounter0_ce;
assign main_basesoc_etherbone_rx_cdc_cdc_rdport_adr = main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_next_binary[1:0];
assign main_basesoc_etherbone_rx_cdc_cdc_asyncfifo_dout = main_basesoc_etherbone_rx_cdc_cdc_rdport_dat_r;
always @(*) begin
    main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_next_binary <= 3'd0;
    if (main_basesoc_etherbone_rx_cdc_cdc_graycounter0_ce) begin
        main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_next_binary <= (main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_next_binary <= main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_binary;
    end
end
assign main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_next = (main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_next_binary ^ main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_next_binary <= 3'd0;
    if (main_basesoc_etherbone_rx_cdc_cdc_graycounter1_ce) begin
        main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_next_binary <= (main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_next_binary <= main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_binary;
    end
end
assign main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_next = (main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_next_binary ^ main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_next_binary[2:1]);
assign main_basesoc_ethcore_crossbar_source_valid = main_basesoc_etherbone_internal_port_sink_valid;
assign main_basesoc_etherbone_internal_port_sink_ready = main_basesoc_ethcore_crossbar_source_ready;
assign main_basesoc_ethcore_crossbar_source_first = main_basesoc_etherbone_internal_port_sink_first;
assign main_basesoc_ethcore_crossbar_source_last = main_basesoc_etherbone_internal_port_sink_last;
assign main_basesoc_ethcore_crossbar_source_payload_data = main_basesoc_etherbone_internal_port_sink_payload_data;
assign main_basesoc_ethcore_crossbar_source_payload_last_be = main_basesoc_etherbone_internal_port_sink_payload_last_be;
assign main_basesoc_ethcore_crossbar_source_payload_error = main_basesoc_etherbone_internal_port_sink_payload_error;
assign main_basesoc_ethcore_crossbar_source_param_src_port = main_basesoc_etherbone_internal_port_sink_param_src_port;
assign main_basesoc_ethcore_crossbar_source_param_dst_port = main_basesoc_etherbone_internal_port_sink_param_dst_port;
assign main_basesoc_ethcore_crossbar_source_param_ip_address = main_basesoc_etherbone_internal_port_sink_param_ip_address;
assign main_basesoc_ethcore_crossbar_source_param_length = main_basesoc_etherbone_internal_port_sink_param_length;
always @(*) begin
    builder_liteethudp_sel1 <= 1'd0;
    if (builder_liteethudp_first) begin
        builder_liteethudp_sel1 <= builder_liteethudp_sel0;
    end else begin
        builder_liteethudp_sel1 <= builder_liteethudp_sel_ongoing;
    end
end
always @(*) begin
    main_basesoc_ethcore_crossbar_sink_ready <= 1'd0;
    main_basesoc_etherbone_internal_port_source_first <= 1'd0;
    main_basesoc_etherbone_internal_port_source_last <= 1'd0;
    main_basesoc_etherbone_internal_port_source_param_dst_port <= 16'd0;
    main_basesoc_etherbone_internal_port_source_param_ip_address <= 32'd0;
    main_basesoc_etherbone_internal_port_source_param_length <= 16'd0;
    main_basesoc_etherbone_internal_port_source_param_src_port <= 16'd0;
    main_basesoc_etherbone_internal_port_source_payload_data <= 8'd0;
    main_basesoc_etherbone_internal_port_source_payload_error <= 1'd0;
    main_basesoc_etherbone_internal_port_source_payload_last_be <= 1'd0;
    main_basesoc_etherbone_internal_port_source_valid <= 1'd0;
    case (builder_liteethudp_sel1)
        1'd1: begin
            main_basesoc_etherbone_internal_port_source_valid <= main_basesoc_ethcore_crossbar_sink_valid;
            main_basesoc_ethcore_crossbar_sink_ready <= main_basesoc_etherbone_internal_port_source_ready;
            main_basesoc_etherbone_internal_port_source_first <= main_basesoc_ethcore_crossbar_sink_first;
            main_basesoc_etherbone_internal_port_source_last <= main_basesoc_ethcore_crossbar_sink_last;
            main_basesoc_etherbone_internal_port_source_payload_data <= main_basesoc_ethcore_crossbar_sink_payload_data;
            main_basesoc_etherbone_internal_port_source_payload_last_be <= main_basesoc_ethcore_crossbar_sink_payload_last_be;
            main_basesoc_etherbone_internal_port_source_payload_error <= main_basesoc_ethcore_crossbar_sink_payload_error;
            main_basesoc_etherbone_internal_port_source_param_src_port <= main_basesoc_ethcore_crossbar_sink_param_src_port;
            main_basesoc_etherbone_internal_port_source_param_dst_port <= main_basesoc_ethcore_crossbar_sink_param_dst_port;
            main_basesoc_etherbone_internal_port_source_param_ip_address <= main_basesoc_ethcore_crossbar_sink_param_ip_address;
            main_basesoc_etherbone_internal_port_source_param_length <= main_basesoc_ethcore_crossbar_sink_param_length;
        end
        default: begin
            main_basesoc_ethcore_crossbar_sink_ready <= 1'd1;
        end
    endcase
end
assign builder_liteethudp_last = ((main_basesoc_ethcore_crossbar_sink_valid & main_basesoc_ethcore_crossbar_sink_last) & main_basesoc_ethcore_crossbar_sink_ready);
assign builder_liteethudp_ongoing0 = ((main_basesoc_ethcore_crossbar_sink_valid | builder_liteethudp_ongoing1) & (~builder_liteethudp_last));
assign main_basesoc_etherbone_dispatcher_sel0 = (~main_basesoc_etherbone_rx_source_source_param_pf);
assign main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_valid = main_basesoc_etherbone_record_receiver_source_valid;
assign main_basesoc_etherbone_record_receiver_source_ready = main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_ready;
assign main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_first = main_basesoc_etherbone_record_receiver_source_first;
assign main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_last = main_basesoc_etherbone_record_receiver_source_last;
assign main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_payload_addr = main_basesoc_etherbone_record_receiver_source_payload_addr;
assign main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_payload_last_be = main_basesoc_etherbone_record_receiver_source_payload_last_be;
assign main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_payload_data = main_basesoc_etherbone_record_receiver_source_payload_data;
assign main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_param_we = main_basesoc_etherbone_record_receiver_source_param_we;
assign main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_param_count = main_basesoc_etherbone_record_receiver_source_param_count;
assign main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_param_base_addr = main_basesoc_etherbone_record_receiver_source_param_base_addr;
assign main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_param_be = main_basesoc_etherbone_record_receiver_source_param_be;
assign main_basesoc_etherbone_record_sender_sink_valid = main_basesoc_etherbone_liteethetherbonewishbonemaster_source_valid;
assign main_basesoc_etherbone_liteethetherbonewishbonemaster_source_ready = main_basesoc_etherbone_record_sender_sink_ready;
assign main_basesoc_etherbone_record_sender_sink_first = main_basesoc_etherbone_liteethetherbonewishbonemaster_source_first;
assign main_basesoc_etherbone_record_sender_sink_last = main_basesoc_etherbone_liteethetherbonewishbonemaster_source_last;
assign main_basesoc_etherbone_record_sender_sink_payload_addr = main_basesoc_etherbone_liteethetherbonewishbonemaster_source_payload_addr;
assign main_basesoc_etherbone_record_sender_sink_payload_last_be = main_basesoc_etherbone_liteethetherbonewishbonemaster_source_payload_last_be;
assign main_basesoc_etherbone_record_sender_sink_payload_data = main_basesoc_etherbone_liteethetherbonewishbonemaster_source_payload_data;
assign main_basesoc_etherbone_record_sender_sink_param_we = main_basesoc_etherbone_liteethetherbonewishbonemaster_source_param_we;
assign main_basesoc_etherbone_record_sender_sink_param_count = main_basesoc_etherbone_liteethetherbonewishbonemaster_source_param_count;
assign main_basesoc_etherbone_record_sender_sink_param_base_addr = main_basesoc_etherbone_liteethetherbonewishbonemaster_source_param_base_addr;
assign main_basesoc_etherbone_record_sender_sink_param_be = main_basesoc_etherbone_liteethetherbonewishbonemaster_source_param_be;
assign main_basesoc_etherbone_user_port_sink_valid = main_basesoc_etherbone_tx_source_source_valid;
assign main_basesoc_etherbone_tx_source_source_ready = main_basesoc_etherbone_user_port_sink_ready;
assign main_basesoc_etherbone_user_port_sink_first = main_basesoc_etherbone_tx_source_source_first;
assign main_basesoc_etherbone_user_port_sink_last = main_basesoc_etherbone_tx_source_source_last;
assign main_basesoc_etherbone_user_port_sink_payload_data = main_basesoc_etherbone_tx_source_source_payload_data;
assign main_basesoc_etherbone_user_port_sink_payload_last_be = main_basesoc_etherbone_tx_source_source_payload_last_be;
assign main_basesoc_etherbone_user_port_sink_payload_error = main_basesoc_etherbone_tx_source_source_payload_error;
assign main_basesoc_etherbone_user_port_sink_param_src_port = main_basesoc_etherbone_tx_source_source_param_src_port;
assign main_basesoc_etherbone_user_port_sink_param_dst_port = main_basesoc_etherbone_tx_source_source_param_dst_port;
assign main_basesoc_etherbone_user_port_sink_param_ip_address = main_basesoc_etherbone_tx_source_source_param_ip_address;
assign main_basesoc_etherbone_user_port_sink_param_length = main_basesoc_etherbone_tx_source_source_param_length;
assign main_basesoc_etherbone_rx_sink_sink_valid = main_basesoc_etherbone_user_port_source_valid;
assign main_basesoc_etherbone_user_port_source_ready = main_basesoc_etherbone_rx_sink_sink_ready;
assign main_basesoc_etherbone_rx_sink_sink_first = main_basesoc_etherbone_user_port_source_first;
assign main_basesoc_etherbone_rx_sink_sink_last = main_basesoc_etherbone_user_port_source_last;
assign main_basesoc_etherbone_rx_sink_sink_payload_data = main_basesoc_etherbone_user_port_source_payload_data;
assign main_basesoc_etherbone_rx_sink_sink_payload_last_be = main_basesoc_etherbone_user_port_source_payload_last_be;
assign main_basesoc_etherbone_rx_sink_sink_payload_error = main_basesoc_etherbone_user_port_source_payload_error;
assign main_basesoc_etherbone_rx_sink_sink_param_src_port = main_basesoc_etherbone_user_port_source_param_src_port;
assign main_basesoc_etherbone_rx_sink_sink_param_dst_port = main_basesoc_etherbone_user_port_source_param_dst_port;
assign main_basesoc_etherbone_rx_sink_sink_param_ip_address = main_basesoc_etherbone_user_port_source_param_ip_address;
assign main_basesoc_etherbone_rx_sink_sink_param_length = main_basesoc_etherbone_user_port_source_param_length;
assign main_basesoc_etherbone_tx_packetizer_sink_valid = main_basesoc_etherbone_tx_sink_sink_valid;
assign main_basesoc_etherbone_tx_sink_sink_ready = main_basesoc_etherbone_tx_packetizer_sink_ready;
assign main_basesoc_etherbone_tx_packetizer_sink_last = main_basesoc_etherbone_tx_sink_sink_last;
assign main_basesoc_etherbone_tx_packetizer_sink_payload_data = main_basesoc_etherbone_tx_sink_sink_payload_data;
assign main_basesoc_etherbone_tx_packetizer_sink_payload_last_be = main_basesoc_etherbone_tx_sink_sink_payload_last_be;
assign main_basesoc_etherbone_tx_packetizer_sink_param_nr = main_basesoc_etherbone_tx_sink_sink_param_nr;
assign main_basesoc_etherbone_tx_packetizer_sink_param_pf = main_basesoc_etherbone_tx_sink_sink_param_pf;
assign main_basesoc_etherbone_tx_packetizer_sink_param_pr = main_basesoc_etherbone_tx_sink_sink_param_pr;
assign main_basesoc_etherbone_tx_packetizer_sink_param_version = 1'd1;
assign main_basesoc_etherbone_tx_packetizer_sink_param_magic = 15'd20079;
assign main_basesoc_etherbone_tx_packetizer_sink_param_port_size = 3'd4;
assign main_basesoc_etherbone_tx_packetizer_sink_param_addr_size = 3'd4;
always @(*) begin
    main_basesoc_etherbone_tx_packetizer_header <= 64'd0;
    main_basesoc_etherbone_tx_packetizer_header[31:28] <= {main_basesoc_etherbone_tx_packetizer_sink_param_addr_size};
    main_basesoc_etherbone_tx_packetizer_header[15:0] <= {main_basesoc_etherbone_tx_packetizer_sink_param_magic[7:0], main_basesoc_etherbone_tx_packetizer_sink_param_magic[15:8]};
    main_basesoc_etherbone_tx_packetizer_header[18] <= {main_basesoc_etherbone_tx_packetizer_sink_param_nr};
    main_basesoc_etherbone_tx_packetizer_header[16] <= {main_basesoc_etherbone_tx_packetizer_sink_param_pf};
    main_basesoc_etherbone_tx_packetizer_header[27:24] <= {main_basesoc_etherbone_tx_packetizer_sink_param_port_size};
    main_basesoc_etherbone_tx_packetizer_header[17] <= {main_basesoc_etherbone_tx_packetizer_sink_param_pr};
    main_basesoc_etherbone_tx_packetizer_header[23:20] <= {main_basesoc_etherbone_tx_packetizer_sink_param_version};
end
assign main_basesoc_etherbone_tx_packetizer_new_last_be = {main_basesoc_etherbone_tx_packetizer_sink_payload_last_be[3], main_basesoc_etherbone_tx_packetizer_sink_payload_last_be[2], main_basesoc_etherbone_tx_packetizer_sink_payload_last_be[1], main_basesoc_etherbone_tx_packetizer_sink_payload_last_be[0]};
assign main_basesoc_etherbone_tx_packetizer_in_data_copy = (main_basesoc_etherbone_tx_packetizer_is_ongoing0 | main_basesoc_etherbone_tx_packetizer_is_ongoing1);
always @(*) begin
    main_basesoc_etherbone_tx_packetizer_source_last <= 1'd0;
    if (main_basesoc_etherbone_tx_packetizer_source_last_s) begin
        main_basesoc_etherbone_tx_packetizer_source_last <= main_basesoc_etherbone_tx_packetizer_source_last_b;
    end else begin
        main_basesoc_etherbone_tx_packetizer_source_last <= main_basesoc_etherbone_tx_packetizer_source_last_a;
    end
end
assign main_basesoc_etherbone_tx_packetizer_source_payload_error = main_basesoc_etherbone_tx_packetizer_sink_payload_error;
always @(*) begin
    builder_liteethetherbonepackettx_fsm0_next_state <= 2'd0;
    builder_liteethetherbonepackettx_fsm1_next_state <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_count_liteethetherbone_fsm0_next_value0 <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_count_liteethetherbone_fsm0_next_value_ce0 <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value0 <= 4'd0;
    main_basesoc_etherbone_tx_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce0 <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value1 <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce1 <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_is_ongoing0 <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_is_ongoing1 <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_is_ongoing2 <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_sink_ready <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_source_last_a <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_source_last_b <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_source_last_s <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_source_payload_data <= 32'd0;
    main_basesoc_etherbone_tx_packetizer_source_payload_last_be <= 4'd0;
    main_basesoc_etherbone_tx_packetizer_source_valid <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_sr_load <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_sr_shift <= 1'd0;
    builder_liteethetherbonepackettx_fsm0_next_state <= builder_liteethetherbonepackettx_fsm0_state;
    case (builder_liteethetherbonepackettx_fsm0_state)
        1'd1: begin
            main_basesoc_etherbone_tx_packetizer_source_valid <= 1'd1;
            main_basesoc_etherbone_tx_packetizer_source_last_a <= 1'd0;
            main_basesoc_etherbone_tx_packetizer_source_payload_data <= main_basesoc_etherbone_tx_packetizer_sr[63:32];
            if ((main_basesoc_etherbone_tx_packetizer_source_valid & main_basesoc_etherbone_tx_packetizer_source_ready)) begin
                main_basesoc_etherbone_tx_packetizer_sr_shift <= 1'd1;
                if ((main_basesoc_etherbone_tx_packetizer_count == 1'd1)) begin
                    main_basesoc_etherbone_tx_packetizer_sr_shift <= 1'd0;
                    builder_liteethetherbonepackettx_fsm0_next_state <= 2'd2;
                    main_basesoc_etherbone_tx_packetizer_count_liteethetherbone_fsm0_next_value0 <= (main_basesoc_etherbone_tx_packetizer_count + 1'd1);
                    main_basesoc_etherbone_tx_packetizer_count_liteethetherbone_fsm0_next_value_ce0 <= 1'd1;
                end else begin
                    main_basesoc_etherbone_tx_packetizer_count_liteethetherbone_fsm0_next_value0 <= (main_basesoc_etherbone_tx_packetizer_count + 1'd1);
                    main_basesoc_etherbone_tx_packetizer_count_liteethetherbone_fsm0_next_value_ce0 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_etherbone_tx_packetizer_source_valid <= main_basesoc_etherbone_tx_packetizer_sink_valid;
            main_basesoc_etherbone_tx_packetizer_source_last_a <= main_basesoc_etherbone_tx_packetizer_sink_last;
            main_basesoc_etherbone_tx_packetizer_source_payload_data <= main_basesoc_etherbone_tx_packetizer_sink_payload_data;
            if ((main_basesoc_etherbone_tx_packetizer_source_valid & main_basesoc_etherbone_tx_packetizer_source_ready)) begin
                main_basesoc_etherbone_tx_packetizer_sink_ready <= 1'd1;
                if (main_basesoc_etherbone_tx_packetizer_source_last) begin
                    builder_liteethetherbonepackettx_fsm0_next_state <= 1'd0;
                end
            end
            main_basesoc_etherbone_tx_packetizer_is_ongoing0 <= 1'd1;
        end
        2'd3: begin
            main_basesoc_etherbone_tx_packetizer_is_ongoing1 <= 1'd1;
        end
        default: begin
            main_basesoc_etherbone_tx_packetizer_sink_ready <= 1'd1;
            main_basesoc_etherbone_tx_packetizer_count_liteethetherbone_fsm0_next_value0 <= 1'd1;
            main_basesoc_etherbone_tx_packetizer_count_liteethetherbone_fsm0_next_value_ce0 <= 1'd1;
            if (main_basesoc_etherbone_tx_packetizer_sink_valid) begin
                main_basesoc_etherbone_tx_packetizer_sink_ready <= 1'd0;
                main_basesoc_etherbone_tx_packetizer_source_valid <= 1'd1;
                main_basesoc_etherbone_tx_packetizer_source_last_a <= 1'd0;
                main_basesoc_etherbone_tx_packetizer_source_payload_data <= main_basesoc_etherbone_tx_packetizer_header[31:0];
                if ((main_basesoc_etherbone_tx_packetizer_source_valid & main_basesoc_etherbone_tx_packetizer_source_ready)) begin
                    main_basesoc_etherbone_tx_packetizer_sr_load <= 1'd1;
                    main_basesoc_etherbone_tx_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value1 <= 1'd1;
                    main_basesoc_etherbone_tx_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce1 <= 1'd1;
                    if (1'd0) begin
                        builder_liteethetherbonepackettx_fsm0_next_state <= 2'd2;
                    end else begin
                        builder_liteethetherbonepackettx_fsm0_next_state <= 1'd1;
                    end
                end
            end
            main_basesoc_etherbone_tx_packetizer_is_ongoing2 <= 1'd1;
        end
    endcase
    builder_liteethetherbonepackettx_fsm1_next_state <= builder_liteethetherbonepackettx_fsm1_state;
    case (builder_liteethetherbonepackettx_fsm1_state)
        1'd1: begin
            main_basesoc_etherbone_tx_packetizer_source_last_b <= 1'd1;
            main_basesoc_etherbone_tx_packetizer_source_last_s <= 1'd1;
            main_basesoc_etherbone_tx_packetizer_source_payload_last_be <= main_basesoc_etherbone_tx_packetizer_delayed_last_be;
            main_basesoc_etherbone_tx_packetizer_sink_ready <= 1'd0;
            if (main_basesoc_etherbone_tx_packetizer_source_ready) begin
                builder_liteethetherbonepackettx_fsm1_next_state <= 1'd0;
            end
        end
        default: begin
            if (((main_basesoc_etherbone_tx_packetizer_in_data_copy & main_basesoc_etherbone_tx_packetizer_sink_last) & (main_basesoc_etherbone_tx_packetizer_sink_payload_last_be > main_basesoc_etherbone_tx_packetizer_new_last_be))) begin
                main_basesoc_etherbone_tx_packetizer_source_last_b <= 1'd0;
                main_basesoc_etherbone_tx_packetizer_source_last_s <= 1'd1;
                main_basesoc_etherbone_tx_packetizer_source_payload_last_be <= 1'd0;
                if ((main_basesoc_etherbone_tx_packetizer_source_ready & main_basesoc_etherbone_tx_packetizer_source_valid)) begin
                    main_basesoc_etherbone_tx_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value0 <= main_basesoc_etherbone_tx_packetizer_new_last_be;
                    main_basesoc_etherbone_tx_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce0 <= 1'd1;
                    builder_liteethetherbonepackettx_fsm1_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_etherbone_tx_packetizer_in_data_copy) begin
                    main_basesoc_etherbone_tx_packetizer_source_last_b <= main_basesoc_etherbone_tx_packetizer_sink_last;
                    main_basesoc_etherbone_tx_packetizer_source_last_s <= 1'd1;
                    main_basesoc_etherbone_tx_packetizer_source_payload_last_be <= main_basesoc_etherbone_tx_packetizer_new_last_be;
                end
            end
            if (main_basesoc_etherbone_tx_packetizer_in_data_copy) begin
                main_basesoc_etherbone_tx_packetizer_sink_ready <= main_basesoc_etherbone_tx_packetizer_source_ready;
            end else begin
                if (main_basesoc_etherbone_tx_packetizer_is_ongoing2) begin
                    main_basesoc_etherbone_tx_packetizer_sink_ready <= (~main_basesoc_etherbone_tx_packetizer_sink_valid);
                end
            end
        end
    endcase
end
always @(*) begin
    builder_liteethetherbonepackettx_next_state <= 1'd0;
    main_basesoc_etherbone_tx_packetizer_source_ready <= 1'd0;
    main_basesoc_etherbone_tx_source_source_first <= 1'd0;
    main_basesoc_etherbone_tx_source_source_last <= 1'd0;
    main_basesoc_etherbone_tx_source_source_param_dst_port <= 16'd0;
    main_basesoc_etherbone_tx_source_source_param_ip_address <= 32'd0;
    main_basesoc_etherbone_tx_source_source_param_length <= 16'd0;
    main_basesoc_etherbone_tx_source_source_param_src_port <= 16'd0;
    main_basesoc_etherbone_tx_source_source_payload_data <= 32'd0;
    main_basesoc_etherbone_tx_source_source_payload_error <= 4'd0;
    main_basesoc_etherbone_tx_source_source_payload_last_be <= 4'd0;
    main_basesoc_etherbone_tx_source_source_valid <= 1'd0;
    builder_liteethetherbonepackettx_next_state <= builder_liteethetherbonepackettx_state;
    case (builder_liteethetherbonepackettx_state)
        1'd1: begin
            main_basesoc_etherbone_tx_source_source_valid <= main_basesoc_etherbone_tx_packetizer_source_valid;
            main_basesoc_etherbone_tx_packetizer_source_ready <= main_basesoc_etherbone_tx_source_source_ready;
            main_basesoc_etherbone_tx_source_source_first <= main_basesoc_etherbone_tx_packetizer_source_first;
            main_basesoc_etherbone_tx_source_source_last <= main_basesoc_etherbone_tx_packetizer_source_last;
            main_basesoc_etherbone_tx_source_source_payload_data <= main_basesoc_etherbone_tx_packetizer_source_payload_data;
            main_basesoc_etherbone_tx_source_source_payload_last_be <= main_basesoc_etherbone_tx_packetizer_source_payload_last_be;
            main_basesoc_etherbone_tx_source_source_payload_error <= main_basesoc_etherbone_tx_packetizer_source_payload_error;
            main_basesoc_etherbone_tx_source_source_param_src_port <= main_basesoc_etherbone_tx_packetizer_source_param_src_port;
            main_basesoc_etherbone_tx_source_source_param_dst_port <= main_basesoc_etherbone_tx_packetizer_source_param_dst_port;
            main_basesoc_etherbone_tx_source_source_param_ip_address <= main_basesoc_etherbone_tx_packetizer_source_param_ip_address;
            main_basesoc_etherbone_tx_source_source_param_length <= main_basesoc_etherbone_tx_packetizer_source_param_length;
            main_basesoc_etherbone_tx_source_source_param_src_port <= 11'd1234;
            main_basesoc_etherbone_tx_source_source_param_dst_port <= 11'd1234;
            main_basesoc_etherbone_tx_source_source_param_ip_address <= main_basesoc_etherbone_tx_sink_sink_param_ip_address;
            main_basesoc_etherbone_tx_source_source_param_length <= (main_basesoc_etherbone_tx_sink_sink_param_length + 4'd8);
            if (((main_basesoc_etherbone_tx_source_source_valid & main_basesoc_etherbone_tx_source_source_last) & main_basesoc_etherbone_tx_source_source_ready)) begin
                builder_liteethetherbonepackettx_next_state <= 1'd0;
            end
        end
        default: begin
            if (main_basesoc_etherbone_tx_packetizer_source_valid) begin
                builder_liteethetherbonepackettx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_etherbone_rx_depacketizer_sink_valid = main_basesoc_etherbone_rx_sink_sink_valid;
assign main_basesoc_etherbone_rx_sink_sink_ready = main_basesoc_etherbone_rx_depacketizer_sink_ready;
assign main_basesoc_etherbone_rx_depacketizer_sink_first = main_basesoc_etherbone_rx_sink_sink_first;
assign main_basesoc_etherbone_rx_depacketizer_sink_last = main_basesoc_etherbone_rx_sink_sink_last;
assign main_basesoc_etherbone_rx_depacketizer_sink_payload_data = main_basesoc_etherbone_rx_sink_sink_payload_data;
assign main_basesoc_etherbone_rx_depacketizer_sink_payload_last_be = main_basesoc_etherbone_rx_sink_sink_payload_last_be;
assign main_basesoc_etherbone_rx_depacketizer_sink_payload_error = main_basesoc_etherbone_rx_sink_sink_payload_error;
assign main_basesoc_etherbone_rx_depacketizer_sink_param_src_port = main_basesoc_etherbone_rx_sink_sink_param_src_port;
assign main_basesoc_etherbone_rx_depacketizer_sink_param_dst_port = main_basesoc_etherbone_rx_sink_sink_param_dst_port;
assign main_basesoc_etherbone_rx_depacketizer_sink_param_ip_address = main_basesoc_etherbone_rx_sink_sink_param_ip_address;
assign main_basesoc_etherbone_rx_depacketizer_sink_param_length = main_basesoc_etherbone_rx_sink_sink_param_length;
assign main_basesoc_etherbone_rx_source_source_last = main_basesoc_etherbone_rx_depacketizer_source_last;
assign main_basesoc_etherbone_rx_source_source_payload_data = main_basesoc_etherbone_rx_depacketizer_source_payload_data;
assign main_basesoc_etherbone_rx_source_source_payload_last_be = main_basesoc_etherbone_rx_depacketizer_source_payload_last_be;
assign main_basesoc_etherbone_rx_source_source_param_nr = main_basesoc_etherbone_rx_depacketizer_source_param_nr;
assign main_basesoc_etherbone_rx_source_source_param_pf = main_basesoc_etherbone_rx_depacketizer_source_param_pf;
assign main_basesoc_etherbone_rx_source_source_param_pr = main_basesoc_etherbone_rx_depacketizer_source_param_pr;
assign main_basesoc_etherbone_rx_source_source_param_src_port = main_basesoc_etherbone_rx_sink_sink_param_src_port;
assign main_basesoc_etherbone_rx_source_source_param_dst_port = main_basesoc_etherbone_rx_sink_sink_param_dst_port;
assign main_basesoc_etherbone_rx_source_source_param_ip_address = main_basesoc_etherbone_rx_sink_sink_param_ip_address;
assign main_basesoc_etherbone_rx_source_source_param_length = (main_basesoc_etherbone_rx_sink_sink_param_length - 4'd8);
assign main_basesoc_etherbone_rx_depacketizer_header = main_basesoc_etherbone_rx_depacketizer_sr;
assign main_basesoc_etherbone_rx_depacketizer_source_param_addr_size = {main_basesoc_etherbone_rx_depacketizer_header[31:28]};
assign main_basesoc_etherbone_rx_depacketizer_source_param_magic = {main_basesoc_etherbone_rx_depacketizer_header[7:0], main_basesoc_etherbone_rx_depacketizer_header[15:8]};
assign main_basesoc_etherbone_rx_depacketizer_source_param_nr = {main_basesoc_etherbone_rx_depacketizer_header[18]};
assign main_basesoc_etherbone_rx_depacketizer_source_param_pf = {main_basesoc_etherbone_rx_depacketizer_header[16]};
assign main_basesoc_etherbone_rx_depacketizer_source_param_port_size = {main_basesoc_etherbone_rx_depacketizer_header[27:24]};
assign main_basesoc_etherbone_rx_depacketizer_source_param_pr = {main_basesoc_etherbone_rx_depacketizer_header[17]};
assign main_basesoc_etherbone_rx_depacketizer_source_param_version = {main_basesoc_etherbone_rx_depacketizer_header[23:20]};
assign main_basesoc_etherbone_rx_depacketizer_source_payload_error = main_basesoc_etherbone_rx_depacketizer_sink_payload_error;
assign main_basesoc_etherbone_rx_depacketizer_new_last_be = {main_basesoc_etherbone_rx_depacketizer_sink_payload_last_be[3], main_basesoc_etherbone_rx_depacketizer_sink_payload_last_be[2], main_basesoc_etherbone_rx_depacketizer_sink_payload_last_be[1], main_basesoc_etherbone_rx_depacketizer_sink_payload_last_be[0]};
assign main_basesoc_etherbone_rx_depacketizer_is_in_copy = (main_basesoc_etherbone_rx_depacketizer_is_ongoing0 | main_basesoc_etherbone_rx_depacketizer_is_ongoing1);
always @(*) begin
    main_basesoc_etherbone_rx_depacketizer_source_last <= 1'd0;
    if (main_basesoc_etherbone_rx_depacketizer_source_last_s) begin
        main_basesoc_etherbone_rx_depacketizer_source_last <= main_basesoc_etherbone_rx_depacketizer_source_last_b;
    end else begin
        main_basesoc_etherbone_rx_depacketizer_source_last <= main_basesoc_etherbone_rx_depacketizer_source_last_a;
    end
end
always @(*) begin
    builder_liteethetherbonepacketrx_fsm0_next_state <= 2'd0;
    builder_liteethetherbonepacketrx_fsm1_next_state <= 1'd0;
    main_basesoc_etherbone_rx_depacketizer_count_liteethetherbone_fsm0_next_value2 <= 1'd0;
    main_basesoc_etherbone_rx_depacketizer_count_liteethetherbone_fsm0_next_value_ce2 <= 1'd0;
    main_basesoc_etherbone_rx_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value1 <= 4'd0;
    main_basesoc_etherbone_rx_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce1 <= 1'd0;
    main_basesoc_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value3 <= 1'd0;
    main_basesoc_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce3 <= 1'd0;
    main_basesoc_etherbone_rx_depacketizer_is_ongoing0 <= 1'd0;
    main_basesoc_etherbone_rx_depacketizer_is_ongoing1 <= 1'd0;
    main_basesoc_etherbone_rx_depacketizer_is_ongoing2 <= 1'd0;
    main_basesoc_etherbone_rx_depacketizer_is_ongoing3 <= 1'd0;
    main_basesoc_etherbone_rx_depacketizer_sink_ready <= 1'd0;
    main_basesoc_etherbone_rx_depacketizer_source_last_a <= 1'd0;
    main_basesoc_etherbone_rx_depacketizer_source_last_b <= 1'd0;
    main_basesoc_etherbone_rx_depacketizer_source_last_s <= 1'd0;
    main_basesoc_etherbone_rx_depacketizer_source_payload_data <= 32'd0;
    main_basesoc_etherbone_rx_depacketizer_source_payload_last_be <= 4'd0;
    main_basesoc_etherbone_rx_depacketizer_source_valid <= 1'd0;
    main_basesoc_etherbone_rx_depacketizer_sr_shift <= 1'd0;
    builder_liteethetherbonepacketrx_fsm0_next_state <= builder_liteethetherbonepacketrx_fsm0_state;
    case (builder_liteethetherbonepacketrx_fsm0_state)
        1'd1: begin
            main_basesoc_etherbone_rx_depacketizer_sink_ready <= 1'd1;
            if (main_basesoc_etherbone_rx_depacketizer_sink_valid) begin
                main_basesoc_etherbone_rx_depacketizer_count_liteethetherbone_fsm0_next_value2 <= (main_basesoc_etherbone_rx_depacketizer_count + 1'd1);
                main_basesoc_etherbone_rx_depacketizer_count_liteethetherbone_fsm0_next_value_ce2 <= 1'd1;
                main_basesoc_etherbone_rx_depacketizer_sr_shift <= 1'd1;
                if ((main_basesoc_etherbone_rx_depacketizer_count == 1'd1)) begin
                    builder_liteethetherbonepacketrx_fsm0_next_state <= 2'd2;
                    main_basesoc_etherbone_rx_depacketizer_count_liteethetherbone_fsm0_next_value2 <= (main_basesoc_etherbone_rx_depacketizer_count + 1'd1);
                    main_basesoc_etherbone_rx_depacketizer_count_liteethetherbone_fsm0_next_value_ce2 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_etherbone_rx_depacketizer_source_valid <= (main_basesoc_etherbone_rx_depacketizer_sink_valid | main_basesoc_etherbone_rx_depacketizer_sink_d_last);
            main_basesoc_etherbone_rx_depacketizer_source_last_a <= (main_basesoc_etherbone_rx_depacketizer_sink_last | main_basesoc_etherbone_rx_depacketizer_sink_d_last);
            main_basesoc_etherbone_rx_depacketizer_sink_ready <= main_basesoc_etherbone_rx_depacketizer_source_ready;
            main_basesoc_etherbone_rx_depacketizer_source_payload_data <= main_basesoc_etherbone_rx_depacketizer_sink_payload_data;
            if ((main_basesoc_etherbone_rx_depacketizer_source_valid & main_basesoc_etherbone_rx_depacketizer_source_ready)) begin
                if (main_basesoc_etherbone_rx_depacketizer_source_last) begin
                    builder_liteethetherbonepacketrx_fsm0_next_state <= 1'd0;
                end
            end
            main_basesoc_etherbone_rx_depacketizer_is_ongoing0 <= 1'd1;
            main_basesoc_etherbone_rx_depacketizer_is_ongoing2 <= 1'd1;
        end
        2'd3: begin
            main_basesoc_etherbone_rx_depacketizer_is_ongoing1 <= 1'd1;
            main_basesoc_etherbone_rx_depacketizer_is_ongoing3 <= 1'd1;
        end
        default: begin
            main_basesoc_etherbone_rx_depacketizer_sink_ready <= 1'd1;
            main_basesoc_etherbone_rx_depacketizer_count_liteethetherbone_fsm0_next_value2 <= 1'd1;
            main_basesoc_etherbone_rx_depacketizer_count_liteethetherbone_fsm0_next_value_ce2 <= 1'd1;
            if (main_basesoc_etherbone_rx_depacketizer_sink_valid) begin
                main_basesoc_etherbone_rx_depacketizer_sr_shift <= 1'd1;
                main_basesoc_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value3 <= 1'd1;
                main_basesoc_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce3 <= 1'd1;
                if (1'd0) begin
                    builder_liteethetherbonepacketrx_fsm0_next_state <= 2'd2;
                end else begin
                    builder_liteethetherbonepacketrx_fsm0_next_state <= 1'd1;
                end
            end
        end
    endcase
    builder_liteethetherbonepacketrx_fsm1_next_state <= builder_liteethetherbonepacketrx_fsm1_state;
    case (builder_liteethetherbonepacketrx_fsm1_state)
        1'd1: begin
            main_basesoc_etherbone_rx_depacketizer_source_last_b <= 1'd1;
            main_basesoc_etherbone_rx_depacketizer_source_last_s <= 1'd1;
            main_basesoc_etherbone_rx_depacketizer_source_payload_last_be <= main_basesoc_etherbone_rx_depacketizer_delayed_last_be;
            main_basesoc_etherbone_rx_depacketizer_sink_ready <= 1'd0;
            if ((main_basesoc_etherbone_rx_depacketizer_source_ready & main_basesoc_etherbone_rx_depacketizer_source_valid)) begin
                builder_liteethetherbonepacketrx_fsm1_next_state <= 1'd0;
            end
        end
        default: begin
            if (((main_basesoc_etherbone_rx_depacketizer_sink_valid & main_basesoc_etherbone_rx_depacketizer_sink_last) & (main_basesoc_etherbone_rx_depacketizer_sink_payload_last_be > main_basesoc_etherbone_rx_depacketizer_new_last_be))) begin
                main_basesoc_etherbone_rx_depacketizer_source_last_b <= 1'd0;
                main_basesoc_etherbone_rx_depacketizer_source_last_s <= 1'd1;
                main_basesoc_etherbone_rx_depacketizer_source_payload_last_be <= 1'd0;
                if (((main_basesoc_etherbone_rx_depacketizer_source_ready & main_basesoc_etherbone_rx_depacketizer_source_valid) | ((~main_basesoc_etherbone_rx_depacketizer_was_in_copy) & main_basesoc_etherbone_rx_depacketizer_is_in_copy))) begin
                    main_basesoc_etherbone_rx_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value1 <= main_basesoc_etherbone_rx_depacketizer_new_last_be;
                    main_basesoc_etherbone_rx_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce1 <= 1'd1;
                    builder_liteethetherbonepacketrx_fsm1_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_etherbone_rx_depacketizer_sink_last) begin
                    main_basesoc_etherbone_rx_depacketizer_source_last_b <= 1'd1;
                    main_basesoc_etherbone_rx_depacketizer_source_last_s <= 1'd1;
                    main_basesoc_etherbone_rx_depacketizer_source_payload_last_be <= main_basesoc_etherbone_rx_depacketizer_new_last_be;
                end
            end
            if ((main_basesoc_etherbone_rx_depacketizer_is_ongoing2 | (main_basesoc_etherbone_rx_depacketizer_is_ongoing3 & (~main_basesoc_etherbone_rx_depacketizer_fsm_from_idle)))) begin
                main_basesoc_etherbone_rx_depacketizer_sink_ready <= main_basesoc_etherbone_rx_depacketizer_source_ready;
            end else begin
                main_basesoc_etherbone_rx_depacketizer_sink_ready <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_liteethetherbonepacketrx_next_state <= 2'd0;
    main_basesoc_etherbone_rx_depacketizer_source_ready <= 1'd0;
    main_basesoc_etherbone_rx_source_source_valid <= 1'd0;
    builder_liteethetherbonepacketrx_next_state <= builder_liteethetherbonepacketrx_state;
    case (builder_liteethetherbonepacketrx_state)
        1'd1: begin
            main_basesoc_etherbone_rx_source_source_valid <= main_basesoc_etherbone_rx_depacketizer_source_valid;
            main_basesoc_etherbone_rx_depacketizer_source_ready <= main_basesoc_etherbone_rx_source_source_ready;
            if ((main_basesoc_etherbone_rx_source_source_valid & main_basesoc_etherbone_rx_source_source_ready)) begin
                if (main_basesoc_etherbone_rx_source_source_last) begin
                    builder_liteethetherbonepacketrx_next_state <= 1'd0;
                end
            end
        end
        2'd2: begin
            main_basesoc_etherbone_rx_depacketizer_source_ready <= 1'd1;
            if (((main_basesoc_etherbone_rx_depacketizer_source_valid & main_basesoc_etherbone_rx_depacketizer_source_last) & main_basesoc_etherbone_rx_depacketizer_source_ready)) begin
                builder_liteethetherbonepacketrx_next_state <= 1'd0;
            end
        end
        default: begin
            if (main_basesoc_etherbone_rx_depacketizer_source_valid) begin
                builder_liteethetherbonepacketrx_next_state <= 2'd2;
                if ((main_basesoc_etherbone_rx_depacketizer_source_param_magic == 15'd20079)) begin
                    builder_liteethetherbonepacketrx_next_state <= 1'd1;
                end
            end
        end
    endcase
end
assign main_basesoc_etherbone_probe_sink_sink_valid0 = main_basesoc_etherbone_probe_sink_valid;
assign main_basesoc_etherbone_probe_sink_ready = main_basesoc_etherbone_probe_sink_sink_ready0;
assign main_basesoc_etherbone_probe_sink_sink_first0 = main_basesoc_etherbone_probe_sink_first;
assign main_basesoc_etherbone_probe_sink_sink_last0 = main_basesoc_etherbone_probe_sink_last;
assign main_basesoc_etherbone_probe_sink_sink_payload_data0 = main_basesoc_etherbone_probe_sink_payload_data;
assign main_basesoc_etherbone_probe_sink_sink_payload_last_be0 = main_basesoc_etherbone_probe_sink_payload_last_be;
assign main_basesoc_etherbone_probe_sink_sink_payload_error0 = main_basesoc_etherbone_probe_sink_payload_error;
assign main_basesoc_etherbone_probe_sink_sink_param_addr_size = main_basesoc_etherbone_probe_sink_param_addr_size;
assign main_basesoc_etherbone_probe_sink_sink_param_nr = main_basesoc_etherbone_probe_sink_param_nr;
assign main_basesoc_etherbone_probe_sink_sink_param_pf = main_basesoc_etherbone_probe_sink_param_pf;
assign main_basesoc_etherbone_probe_sink_sink_param_port_size = main_basesoc_etherbone_probe_sink_param_port_size;
assign main_basesoc_etherbone_probe_sink_sink_param_pr = main_basesoc_etherbone_probe_sink_param_pr;
assign main_basesoc_etherbone_probe_sink_sink_param_src_port = main_basesoc_etherbone_probe_sink_param_src_port;
assign main_basesoc_etherbone_probe_sink_sink_param_dst_port = main_basesoc_etherbone_probe_sink_param_dst_port;
assign main_basesoc_etherbone_probe_sink_sink_param_ip_address = main_basesoc_etherbone_probe_sink_param_ip_address;
assign main_basesoc_etherbone_probe_sink_sink_param_length = main_basesoc_etherbone_probe_sink_param_length;
assign main_basesoc_etherbone_probe_param_fifo_sink_param_addr_size = main_basesoc_etherbone_probe_sink_sink_param_addr_size;
assign main_basesoc_etherbone_probe_param_fifo_sink_param_nr = main_basesoc_etherbone_probe_sink_sink_param_nr;
assign main_basesoc_etherbone_probe_param_fifo_sink_param_pf = main_basesoc_etherbone_probe_sink_sink_param_pf;
assign main_basesoc_etherbone_probe_param_fifo_sink_param_port_size = main_basesoc_etherbone_probe_sink_sink_param_port_size;
assign main_basesoc_etherbone_probe_param_fifo_sink_param_pr = main_basesoc_etherbone_probe_sink_sink_param_pr;
assign main_basesoc_etherbone_probe_param_fifo_sink_param_src_port = main_basesoc_etherbone_probe_sink_sink_param_src_port;
assign main_basesoc_etherbone_probe_param_fifo_sink_param_dst_port = main_basesoc_etherbone_probe_sink_sink_param_dst_port;
assign main_basesoc_etherbone_probe_param_fifo_sink_param_ip_address = main_basesoc_etherbone_probe_sink_sink_param_ip_address;
assign main_basesoc_etherbone_probe_param_fifo_sink_param_length = main_basesoc_etherbone_probe_sink_sink_param_length;
assign main_basesoc_etherbone_probe_sink_sink_last1 = main_basesoc_etherbone_probe_sink_sink_last0;
assign main_basesoc_etherbone_probe_sink_sink_payload_data1 = main_basesoc_etherbone_probe_sink_sink_payload_data0;
assign main_basesoc_etherbone_probe_sink_sink_payload_last_be1 = main_basesoc_etherbone_probe_sink_sink_payload_last_be0;
assign main_basesoc_etherbone_probe_sink_sink_payload_error1 = main_basesoc_etherbone_probe_sink_sink_payload_error0;
assign main_basesoc_etherbone_probe_param_fifo_sink_valid = (main_basesoc_etherbone_probe_sink_sink_valid0 & main_basesoc_etherbone_probe_sink_sink_last0);
assign main_basesoc_etherbone_probe_sink_sink_valid1 = (main_basesoc_etherbone_probe_sink_sink_valid0 & main_basesoc_etherbone_probe_param_fifo_sink_ready);
assign main_basesoc_etherbone_probe_sink_sink_ready0 = (main_basesoc_etherbone_probe_param_fifo_sink_ready & main_basesoc_etherbone_probe_sink_sink_ready1);
assign main_basesoc_etherbone_probe_source_source_valid0 = main_basesoc_etherbone_probe_param_fifo_source_valid;
assign main_basesoc_etherbone_probe_source_source_param_addr_size = main_basesoc_etherbone_probe_param_fifo_source_param_addr_size;
assign main_basesoc_etherbone_probe_source_source_param_nr = main_basesoc_etherbone_probe_param_fifo_source_param_nr;
assign main_basesoc_etherbone_probe_source_source_param_pf = main_basesoc_etherbone_probe_param_fifo_source_param_pf;
assign main_basesoc_etherbone_probe_source_source_param_port_size = main_basesoc_etherbone_probe_param_fifo_source_param_port_size;
assign main_basesoc_etherbone_probe_source_source_param_pr = main_basesoc_etherbone_probe_param_fifo_source_param_pr;
assign main_basesoc_etherbone_probe_source_source_param_src_port = main_basesoc_etherbone_probe_param_fifo_source_param_src_port;
assign main_basesoc_etherbone_probe_source_source_param_dst_port = main_basesoc_etherbone_probe_param_fifo_source_param_dst_port;
assign main_basesoc_etherbone_probe_source_source_param_ip_address = main_basesoc_etherbone_probe_param_fifo_source_param_ip_address;
assign main_basesoc_etherbone_probe_source_source_param_length = main_basesoc_etherbone_probe_param_fifo_source_param_length;
always @(*) begin
    main_basesoc_etherbone_probe_source_source_first0 <= 1'd0;
    main_basesoc_etherbone_probe_source_source_first0 <= main_basesoc_etherbone_probe_param_fifo_source_first;
    main_basesoc_etherbone_probe_source_source_first0 <= main_basesoc_etherbone_probe_source_source_first1;
end
assign main_basesoc_etherbone_probe_source_source_last0 = main_basesoc_etherbone_probe_source_source_last1;
assign main_basesoc_etherbone_probe_source_source_payload_data0 = main_basesoc_etherbone_probe_source_source_payload_data1;
assign main_basesoc_etherbone_probe_source_source_payload_last_be0 = main_basesoc_etherbone_probe_source_source_payload_last_be1;
assign main_basesoc_etherbone_probe_source_source_payload_error0 = main_basesoc_etherbone_probe_source_source_payload_error1;
assign main_basesoc_etherbone_probe_param_fifo_source_ready = ((main_basesoc_etherbone_probe_source_source_valid0 & main_basesoc_etherbone_probe_source_source_last0) & main_basesoc_etherbone_probe_source_source_ready0);
assign main_basesoc_etherbone_probe_source_source_ready1 = (main_basesoc_etherbone_probe_source_source_valid0 & main_basesoc_etherbone_probe_source_source_ready0);
assign main_basesoc_etherbone_probe_pipe_valid_sink_ready = ((~main_basesoc_etherbone_probe_pipe_valid_source_valid) | main_basesoc_etherbone_probe_pipe_valid_source_ready);
assign main_basesoc_etherbone_probe_pipe_valid_sink_valid = main_basesoc_etherbone_probe_sink_sink_valid1;
assign main_basesoc_etherbone_probe_sink_sink_ready1 = main_basesoc_etherbone_probe_pipe_valid_sink_ready;
assign main_basesoc_etherbone_probe_pipe_valid_sink_first = main_basesoc_etherbone_probe_sink_sink_first1;
assign main_basesoc_etherbone_probe_pipe_valid_sink_last = main_basesoc_etherbone_probe_sink_sink_last1;
assign main_basesoc_etherbone_probe_pipe_valid_sink_payload_data = main_basesoc_etherbone_probe_sink_sink_payload_data1;
assign main_basesoc_etherbone_probe_pipe_valid_sink_payload_last_be = main_basesoc_etherbone_probe_sink_sink_payload_last_be1;
assign main_basesoc_etherbone_probe_pipe_valid_sink_payload_error = main_basesoc_etherbone_probe_sink_sink_payload_error1;
assign main_basesoc_etherbone_probe_source_source_valid1 = main_basesoc_etherbone_probe_pipe_valid_source_valid;
assign main_basesoc_etherbone_probe_pipe_valid_source_ready = main_basesoc_etherbone_probe_source_source_ready1;
assign main_basesoc_etherbone_probe_source_source_first1 = main_basesoc_etherbone_probe_pipe_valid_source_first;
assign main_basesoc_etherbone_probe_source_source_last1 = main_basesoc_etherbone_probe_pipe_valid_source_last;
assign main_basesoc_etherbone_probe_source_source_payload_data1 = main_basesoc_etherbone_probe_pipe_valid_source_payload_data;
assign main_basesoc_etherbone_probe_source_source_payload_last_be1 = main_basesoc_etherbone_probe_pipe_valid_source_payload_last_be;
assign main_basesoc_etherbone_probe_source_source_payload_error1 = main_basesoc_etherbone_probe_pipe_valid_source_payload_error;
assign main_basesoc_etherbone_probe_param_fifo_syncfifo_din = {main_basesoc_etherbone_probe_param_fifo_fifo_in_last, main_basesoc_etherbone_probe_param_fifo_fifo_in_first, main_basesoc_etherbone_probe_param_fifo_fifo_in_param_length, main_basesoc_etherbone_probe_param_fifo_fifo_in_param_ip_address, main_basesoc_etherbone_probe_param_fifo_fifo_in_param_dst_port, main_basesoc_etherbone_probe_param_fifo_fifo_in_param_src_port, main_basesoc_etherbone_probe_param_fifo_fifo_in_param_pr, main_basesoc_etherbone_probe_param_fifo_fifo_in_param_port_size, main_basesoc_etherbone_probe_param_fifo_fifo_in_param_pf, main_basesoc_etherbone_probe_param_fifo_fifo_in_param_nr, main_basesoc_etherbone_probe_param_fifo_fifo_in_param_addr_size};
assign {main_basesoc_etherbone_probe_param_fifo_fifo_out_last, main_basesoc_etherbone_probe_param_fifo_fifo_out_first, main_basesoc_etherbone_probe_param_fifo_fifo_out_param_length, main_basesoc_etherbone_probe_param_fifo_fifo_out_param_ip_address, main_basesoc_etherbone_probe_param_fifo_fifo_out_param_dst_port, main_basesoc_etherbone_probe_param_fifo_fifo_out_param_src_port, main_basesoc_etherbone_probe_param_fifo_fifo_out_param_pr, main_basesoc_etherbone_probe_param_fifo_fifo_out_param_port_size, main_basesoc_etherbone_probe_param_fifo_fifo_out_param_pf, main_basesoc_etherbone_probe_param_fifo_fifo_out_param_nr, main_basesoc_etherbone_probe_param_fifo_fifo_out_param_addr_size} = main_basesoc_etherbone_probe_param_fifo_syncfifo_dout;
assign main_basesoc_etherbone_probe_param_fifo_sink_ready = main_basesoc_etherbone_probe_param_fifo_syncfifo_writable;
assign main_basesoc_etherbone_probe_param_fifo_syncfifo_we = main_basesoc_etherbone_probe_param_fifo_sink_valid;
assign main_basesoc_etherbone_probe_param_fifo_fifo_in_first = main_basesoc_etherbone_probe_param_fifo_sink_first;
assign main_basesoc_etherbone_probe_param_fifo_fifo_in_last = main_basesoc_etherbone_probe_param_fifo_sink_last;
assign main_basesoc_etherbone_probe_param_fifo_fifo_in_param_addr_size = main_basesoc_etherbone_probe_param_fifo_sink_param_addr_size;
assign main_basesoc_etherbone_probe_param_fifo_fifo_in_param_nr = main_basesoc_etherbone_probe_param_fifo_sink_param_nr;
assign main_basesoc_etherbone_probe_param_fifo_fifo_in_param_pf = main_basesoc_etherbone_probe_param_fifo_sink_param_pf;
assign main_basesoc_etherbone_probe_param_fifo_fifo_in_param_port_size = main_basesoc_etherbone_probe_param_fifo_sink_param_port_size;
assign main_basesoc_etherbone_probe_param_fifo_fifo_in_param_pr = main_basesoc_etherbone_probe_param_fifo_sink_param_pr;
assign main_basesoc_etherbone_probe_param_fifo_fifo_in_param_src_port = main_basesoc_etherbone_probe_param_fifo_sink_param_src_port;
assign main_basesoc_etherbone_probe_param_fifo_fifo_in_param_dst_port = main_basesoc_etherbone_probe_param_fifo_sink_param_dst_port;
assign main_basesoc_etherbone_probe_param_fifo_fifo_in_param_ip_address = main_basesoc_etherbone_probe_param_fifo_sink_param_ip_address;
assign main_basesoc_etherbone_probe_param_fifo_fifo_in_param_length = main_basesoc_etherbone_probe_param_fifo_sink_param_length;
assign main_basesoc_etherbone_probe_param_fifo_source_valid = main_basesoc_etherbone_probe_param_fifo_syncfifo_readable;
assign main_basesoc_etherbone_probe_param_fifo_source_first = main_basesoc_etherbone_probe_param_fifo_fifo_out_first;
assign main_basesoc_etherbone_probe_param_fifo_source_last = main_basesoc_etherbone_probe_param_fifo_fifo_out_last;
assign main_basesoc_etherbone_probe_param_fifo_source_param_addr_size = main_basesoc_etherbone_probe_param_fifo_fifo_out_param_addr_size;
assign main_basesoc_etherbone_probe_param_fifo_source_param_nr = main_basesoc_etherbone_probe_param_fifo_fifo_out_param_nr;
assign main_basesoc_etherbone_probe_param_fifo_source_param_pf = main_basesoc_etherbone_probe_param_fifo_fifo_out_param_pf;
assign main_basesoc_etherbone_probe_param_fifo_source_param_port_size = main_basesoc_etherbone_probe_param_fifo_fifo_out_param_port_size;
assign main_basesoc_etherbone_probe_param_fifo_source_param_pr = main_basesoc_etherbone_probe_param_fifo_fifo_out_param_pr;
assign main_basesoc_etherbone_probe_param_fifo_source_param_src_port = main_basesoc_etherbone_probe_param_fifo_fifo_out_param_src_port;
assign main_basesoc_etherbone_probe_param_fifo_source_param_dst_port = main_basesoc_etherbone_probe_param_fifo_fifo_out_param_dst_port;
assign main_basesoc_etherbone_probe_param_fifo_source_param_ip_address = main_basesoc_etherbone_probe_param_fifo_fifo_out_param_ip_address;
assign main_basesoc_etherbone_probe_param_fifo_source_param_length = main_basesoc_etherbone_probe_param_fifo_fifo_out_param_length;
assign main_basesoc_etherbone_probe_param_fifo_syncfifo_re = main_basesoc_etherbone_probe_param_fifo_source_ready;
always @(*) begin
    main_basesoc_etherbone_probe_param_fifo_wrport_adr <= 1'd0;
    if (main_basesoc_etherbone_probe_param_fifo_replace) begin
        main_basesoc_etherbone_probe_param_fifo_wrport_adr <= (main_basesoc_etherbone_probe_param_fifo_produce - 1'd1);
    end else begin
        main_basesoc_etherbone_probe_param_fifo_wrport_adr <= main_basesoc_etherbone_probe_param_fifo_produce;
    end
end
assign main_basesoc_etherbone_probe_param_fifo_wrport_dat_w = main_basesoc_etherbone_probe_param_fifo_syncfifo_din;
assign main_basesoc_etherbone_probe_param_fifo_wrport_we = (main_basesoc_etherbone_probe_param_fifo_syncfifo_we & (main_basesoc_etherbone_probe_param_fifo_syncfifo_writable | main_basesoc_etherbone_probe_param_fifo_replace));
assign main_basesoc_etherbone_probe_param_fifo_do_read = (main_basesoc_etherbone_probe_param_fifo_syncfifo_readable & main_basesoc_etherbone_probe_param_fifo_syncfifo_re);
assign main_basesoc_etherbone_probe_param_fifo_rdport_adr = main_basesoc_etherbone_probe_param_fifo_consume;
assign main_basesoc_etherbone_probe_param_fifo_syncfifo_dout = main_basesoc_etherbone_probe_param_fifo_rdport_dat_r;
assign main_basesoc_etherbone_probe_param_fifo_syncfifo_writable = (main_basesoc_etherbone_probe_param_fifo_level != 2'd2);
assign main_basesoc_etherbone_probe_param_fifo_syncfifo_readable = (main_basesoc_etherbone_probe_param_fifo_level != 1'd0);
always @(*) begin
    builder_liteethetherboneprobe_next_state <= 1'd0;
    main_basesoc_etherbone_probe_source_first <= 1'd0;
    main_basesoc_etherbone_probe_source_last <= 1'd0;
    main_basesoc_etherbone_probe_source_param_addr_size <= 4'd0;
    main_basesoc_etherbone_probe_source_param_dst_port <= 16'd0;
    main_basesoc_etherbone_probe_source_param_ip_address <= 32'd0;
    main_basesoc_etherbone_probe_source_param_length <= 16'd0;
    main_basesoc_etherbone_probe_source_param_nr <= 1'd0;
    main_basesoc_etherbone_probe_source_param_pf <= 1'd0;
    main_basesoc_etherbone_probe_source_param_port_size <= 4'd0;
    main_basesoc_etherbone_probe_source_param_pr <= 1'd0;
    main_basesoc_etherbone_probe_source_param_src_port <= 16'd0;
    main_basesoc_etherbone_probe_source_payload_data <= 32'd0;
    main_basesoc_etherbone_probe_source_payload_error <= 4'd0;
    main_basesoc_etherbone_probe_source_payload_last_be <= 4'd0;
    main_basesoc_etherbone_probe_source_source_ready0 <= 1'd0;
    main_basesoc_etherbone_probe_source_valid <= 1'd0;
    builder_liteethetherboneprobe_next_state <= builder_liteethetherboneprobe_state;
    case (builder_liteethetherboneprobe_state)
        1'd1: begin
            main_basesoc_etherbone_probe_source_valid <= main_basesoc_etherbone_probe_source_source_valid0;
            main_basesoc_etherbone_probe_source_source_ready0 <= main_basesoc_etherbone_probe_source_ready;
            main_basesoc_etherbone_probe_source_first <= main_basesoc_etherbone_probe_source_source_first0;
            main_basesoc_etherbone_probe_source_last <= main_basesoc_etherbone_probe_source_source_last0;
            main_basesoc_etherbone_probe_source_payload_data <= main_basesoc_etherbone_probe_source_source_payload_data0;
            main_basesoc_etherbone_probe_source_payload_last_be <= main_basesoc_etherbone_probe_source_source_payload_last_be0;
            main_basesoc_etherbone_probe_source_payload_error <= main_basesoc_etherbone_probe_source_source_payload_error0;
            main_basesoc_etherbone_probe_source_param_addr_size <= main_basesoc_etherbone_probe_source_source_param_addr_size;
            main_basesoc_etherbone_probe_source_param_nr <= main_basesoc_etherbone_probe_source_source_param_nr;
            main_basesoc_etherbone_probe_source_param_pf <= main_basesoc_etherbone_probe_source_source_param_pf;
            main_basesoc_etherbone_probe_source_param_port_size <= main_basesoc_etherbone_probe_source_source_param_port_size;
            main_basesoc_etherbone_probe_source_param_pr <= main_basesoc_etherbone_probe_source_source_param_pr;
            main_basesoc_etherbone_probe_source_param_src_port <= main_basesoc_etherbone_probe_source_source_param_src_port;
            main_basesoc_etherbone_probe_source_param_dst_port <= main_basesoc_etherbone_probe_source_source_param_dst_port;
            main_basesoc_etherbone_probe_source_param_ip_address <= main_basesoc_etherbone_probe_source_source_param_ip_address;
            main_basesoc_etherbone_probe_source_param_length <= main_basesoc_etherbone_probe_source_source_param_length;
            main_basesoc_etherbone_probe_source_param_pf <= 1'd0;
            main_basesoc_etherbone_probe_source_param_pr <= 1'd1;
            if ((main_basesoc_etherbone_probe_source_valid & main_basesoc_etherbone_probe_source_ready)) begin
                if (main_basesoc_etherbone_probe_source_last) begin
                    builder_liteethetherboneprobe_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (main_basesoc_etherbone_probe_source_source_valid0) begin
                builder_liteethetherboneprobe_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_etherbone_record_depacketizer_sink_valid = main_basesoc_etherbone_record_sink_sink_valid;
assign main_basesoc_etherbone_record_sink_sink_ready = main_basesoc_etherbone_record_depacketizer_sink_ready;
assign main_basesoc_etherbone_record_depacketizer_sink_first = main_basesoc_etherbone_record_sink_sink_first;
assign main_basesoc_etherbone_record_depacketizer_sink_last = main_basesoc_etherbone_record_sink_sink_last;
assign main_basesoc_etherbone_record_depacketizer_sink_payload_data = main_basesoc_etherbone_record_sink_sink_payload_data;
assign main_basesoc_etherbone_record_depacketizer_sink_payload_last_be = main_basesoc_etherbone_record_sink_sink_payload_last_be;
assign main_basesoc_etherbone_record_depacketizer_sink_payload_error = main_basesoc_etherbone_record_sink_sink_payload_error;
assign main_basesoc_etherbone_record_depacketizer_sink_param_addr_size = main_basesoc_etherbone_record_sink_sink_param_addr_size;
assign main_basesoc_etherbone_record_depacketizer_sink_param_nr = main_basesoc_etherbone_record_sink_sink_param_nr;
assign main_basesoc_etherbone_record_depacketizer_sink_param_pf = main_basesoc_etherbone_record_sink_sink_param_pf;
assign main_basesoc_etherbone_record_depacketizer_sink_param_port_size = main_basesoc_etherbone_record_sink_sink_param_port_size;
assign main_basesoc_etherbone_record_depacketizer_sink_param_pr = main_basesoc_etherbone_record_sink_sink_param_pr;
assign main_basesoc_etherbone_record_depacketizer_sink_param_src_port = main_basesoc_etherbone_record_sink_sink_param_src_port;
assign main_basesoc_etherbone_record_depacketizer_sink_param_dst_port = main_basesoc_etherbone_record_sink_sink_param_dst_port;
assign main_basesoc_etherbone_record_depacketizer_sink_param_ip_address = main_basesoc_etherbone_record_sink_sink_param_ip_address;
assign main_basesoc_etherbone_record_depacketizer_sink_param_length = main_basesoc_etherbone_record_sink_sink_param_length;
assign main_basesoc_etherbone_record_receiver_sink_valid = main_basesoc_etherbone_record_depacketizer_source_valid;
assign main_basesoc_etherbone_record_depacketizer_source_ready = main_basesoc_etherbone_record_receiver_sink_ready;
assign main_basesoc_etherbone_record_receiver_sink_first = main_basesoc_etherbone_record_depacketizer_source_first;
assign main_basesoc_etherbone_record_receiver_sink_last = main_basesoc_etherbone_record_depacketizer_source_last;
assign main_basesoc_etherbone_record_receiver_sink_payload_last_be = main_basesoc_etherbone_record_depacketizer_source_payload_last_be;
assign main_basesoc_etherbone_record_receiver_sink_payload_error = main_basesoc_etherbone_record_depacketizer_source_payload_error;
assign main_basesoc_etherbone_record_receiver_sink_param_bca = main_basesoc_etherbone_record_depacketizer_source_param_bca;
assign main_basesoc_etherbone_record_receiver_sink_param_byte_enable = main_basesoc_etherbone_record_depacketizer_source_param_byte_enable;
assign main_basesoc_etherbone_record_receiver_sink_param_cyc = main_basesoc_etherbone_record_depacketizer_source_param_cyc;
assign main_basesoc_etherbone_record_receiver_sink_param_rca = main_basesoc_etherbone_record_depacketizer_source_param_rca;
assign main_basesoc_etherbone_record_receiver_sink_param_rcount = main_basesoc_etherbone_record_depacketizer_source_param_rcount;
assign main_basesoc_etherbone_record_receiver_sink_param_rff = main_basesoc_etherbone_record_depacketizer_source_param_rff;
assign main_basesoc_etherbone_record_receiver_sink_param_wca = main_basesoc_etherbone_record_depacketizer_source_param_wca;
assign main_basesoc_etherbone_record_receiver_sink_param_wcount = main_basesoc_etherbone_record_depacketizer_source_param_wcount;
assign main_basesoc_etherbone_record_receiver_sink_param_wff = main_basesoc_etherbone_record_depacketizer_source_param_wff;
always @(*) begin
    main_basesoc_etherbone_record_receiver_sink_payload_data <= 32'd0;
    main_basesoc_etherbone_record_receiver_sink_payload_data <= main_basesoc_etherbone_record_depacketizer_source_payload_data;
    main_basesoc_etherbone_record_receiver_sink_payload_data <= {main_basesoc_etherbone_record_depacketizer_source_payload_data[7:0], main_basesoc_etherbone_record_depacketizer_source_payload_data[15:8], main_basesoc_etherbone_record_depacketizer_source_payload_data[23:16], main_basesoc_etherbone_record_depacketizer_source_payload_data[31:24]};
end
assign main_basesoc_etherbone_record_packetizer_sink_valid = main_basesoc_etherbone_record_sender_source_valid;
assign main_basesoc_etherbone_record_sender_source_ready = main_basesoc_etherbone_record_packetizer_sink_ready;
assign main_basesoc_etherbone_record_packetizer_sink_first = main_basesoc_etherbone_record_sender_source_first;
assign main_basesoc_etherbone_record_packetizer_sink_last = main_basesoc_etherbone_record_sender_source_last;
assign main_basesoc_etherbone_record_packetizer_sink_payload_last_be = main_basesoc_etherbone_record_sender_source_payload_last_be;
assign main_basesoc_etherbone_record_packetizer_sink_payload_error = main_basesoc_etherbone_record_sender_source_payload_error;
assign main_basesoc_etherbone_record_packetizer_sink_param_bca = main_basesoc_etherbone_record_sender_source_param_bca;
assign main_basesoc_etherbone_record_packetizer_sink_param_byte_enable = main_basesoc_etherbone_record_sender_source_param_byte_enable;
assign main_basesoc_etherbone_record_packetizer_sink_param_cyc = main_basesoc_etherbone_record_sender_source_param_cyc;
assign main_basesoc_etherbone_record_packetizer_sink_param_rca = main_basesoc_etherbone_record_sender_source_param_rca;
assign main_basesoc_etherbone_record_packetizer_sink_param_rcount = main_basesoc_etherbone_record_sender_source_param_rcount;
assign main_basesoc_etherbone_record_packetizer_sink_param_rff = main_basesoc_etherbone_record_sender_source_param_rff;
assign main_basesoc_etherbone_record_packetizer_sink_param_wca = main_basesoc_etherbone_record_sender_source_param_wca;
assign main_basesoc_etherbone_record_packetizer_sink_param_wcount = main_basesoc_etherbone_record_sender_source_param_wcount;
assign main_basesoc_etherbone_record_packetizer_sink_param_wff = main_basesoc_etherbone_record_sender_source_param_wff;
assign main_basesoc_etherbone_record_source_source_valid = main_basesoc_etherbone_record_packetizer_source_valid;
assign main_basesoc_etherbone_record_packetizer_source_ready = main_basesoc_etherbone_record_source_source_ready;
assign main_basesoc_etherbone_record_source_source_first = main_basesoc_etherbone_record_packetizer_source_first;
assign main_basesoc_etherbone_record_source_source_last = main_basesoc_etherbone_record_packetizer_source_last;
assign main_basesoc_etherbone_record_source_source_payload_data = main_basesoc_etherbone_record_packetizer_source_payload_data;
assign main_basesoc_etherbone_record_source_source_payload_last_be = main_basesoc_etherbone_record_packetizer_source_payload_last_be;
assign main_basesoc_etherbone_record_source_source_payload_error = main_basesoc_etherbone_record_packetizer_source_payload_error;
assign main_basesoc_etherbone_record_source_source_param_addr_size = main_basesoc_etherbone_record_packetizer_source_param_addr_size;
assign main_basesoc_etherbone_record_source_source_param_nr = main_basesoc_etherbone_record_packetizer_source_param_nr;
assign main_basesoc_etherbone_record_source_source_param_pf = main_basesoc_etherbone_record_packetizer_source_param_pf;
assign main_basesoc_etherbone_record_source_source_param_port_size = main_basesoc_etherbone_record_packetizer_source_param_port_size;
assign main_basesoc_etherbone_record_source_source_param_pr = main_basesoc_etherbone_record_packetizer_source_param_pr;
assign main_basesoc_etherbone_record_source_source_param_src_port = main_basesoc_etherbone_record_packetizer_source_param_src_port;
assign main_basesoc_etherbone_record_source_source_param_dst_port = main_basesoc_etherbone_record_packetizer_source_param_dst_port;
always @(*) begin
    main_basesoc_etherbone_record_source_source_param_length <= 16'd0;
    main_basesoc_etherbone_record_source_source_param_length <= main_basesoc_etherbone_record_packetizer_source_param_length;
    main_basesoc_etherbone_record_source_source_param_length <= ((((3'd4 + ((main_basesoc_etherbone_record_sender_source_param_wcount != 1'd0) * 3'd4)) + (main_basesoc_etherbone_record_sender_source_param_wcount * 3'd4)) + ((main_basesoc_etherbone_record_sender_source_param_rcount != 1'd0) * 3'd4)) + (main_basesoc_etherbone_record_sender_source_param_rcount * 3'd4));
end
always @(*) begin
    main_basesoc_etherbone_record_source_source_param_ip_address <= 32'd0;
    main_basesoc_etherbone_record_source_source_param_ip_address <= main_basesoc_etherbone_record_packetizer_source_param_ip_address;
    main_basesoc_etherbone_record_source_source_param_ip_address <= main_basesoc_etherbone_record_last_ip_address;
end
always @(*) begin
    main_basesoc_etherbone_record_packetizer_sink_payload_data <= 32'd0;
    main_basesoc_etherbone_record_packetizer_sink_payload_data <= main_basesoc_etherbone_record_sender_source_payload_data;
    main_basesoc_etherbone_record_packetizer_sink_payload_data <= {main_basesoc_etherbone_record_sender_source_payload_data[7:0], main_basesoc_etherbone_record_sender_source_payload_data[15:8], main_basesoc_etherbone_record_sender_source_payload_data[23:16], main_basesoc_etherbone_record_sender_source_payload_data[31:24]};
end
assign main_basesoc_etherbone_record_depacketizer_header = main_basesoc_etherbone_record_depacketizer_sr;
assign main_basesoc_etherbone_record_depacketizer_source_param_bca = {main_basesoc_etherbone_record_depacketizer_header[0]};
assign main_basesoc_etherbone_record_depacketizer_source_param_byte_enable = {main_basesoc_etherbone_record_depacketizer_header[15:8]};
assign main_basesoc_etherbone_record_depacketizer_source_param_cyc = {main_basesoc_etherbone_record_depacketizer_header[4]};
assign main_basesoc_etherbone_record_depacketizer_source_param_rca = {main_basesoc_etherbone_record_depacketizer_header[1]};
assign main_basesoc_etherbone_record_depacketizer_source_param_rcount = {main_basesoc_etherbone_record_depacketizer_header[31:24]};
assign main_basesoc_etherbone_record_depacketizer_source_param_rff = {main_basesoc_etherbone_record_depacketizer_header[2]};
assign main_basesoc_etherbone_record_depacketizer_source_param_wca = {main_basesoc_etherbone_record_depacketizer_header[5]};
assign main_basesoc_etherbone_record_depacketizer_source_param_wcount = {main_basesoc_etherbone_record_depacketizer_header[23:16]};
assign main_basesoc_etherbone_record_depacketizer_source_param_wff = {main_basesoc_etherbone_record_depacketizer_header[6]};
assign main_basesoc_etherbone_record_depacketizer_source_payload_error = main_basesoc_etherbone_record_depacketizer_sink_payload_error;
assign main_basesoc_etherbone_record_depacketizer_new_last_be = {main_basesoc_etherbone_record_depacketizer_sink_payload_last_be[3], main_basesoc_etherbone_record_depacketizer_sink_payload_last_be[2], main_basesoc_etherbone_record_depacketizer_sink_payload_last_be[1], main_basesoc_etherbone_record_depacketizer_sink_payload_last_be[0]};
assign main_basesoc_etherbone_record_depacketizer_is_in_copy = (main_basesoc_etherbone_record_depacketizer_is_ongoing0 | main_basesoc_etherbone_record_depacketizer_is_ongoing1);
always @(*) begin
    main_basesoc_etherbone_record_depacketizer_source_last <= 1'd0;
    if (main_basesoc_etherbone_record_depacketizer_source_last_s) begin
        main_basesoc_etherbone_record_depacketizer_source_last <= main_basesoc_etherbone_record_depacketizer_source_last_b;
    end else begin
        main_basesoc_etherbone_record_depacketizer_source_last <= main_basesoc_etherbone_record_depacketizer_source_last_a;
    end
end
always @(*) begin
    builder_fsm0_next_state0 <= 2'd0;
    builder_fsm1_next_state0 <= 1'd0;
    main_basesoc_etherbone_record_depacketizer_count_liteethetherbone_fsm0_next_value4 <= 1'd0;
    main_basesoc_etherbone_record_depacketizer_count_liteethetherbone_fsm0_next_value_ce4 <= 1'd0;
    main_basesoc_etherbone_record_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value2 <= 4'd0;
    main_basesoc_etherbone_record_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce2 <= 1'd0;
    main_basesoc_etherbone_record_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value5 <= 1'd0;
    main_basesoc_etherbone_record_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce5 <= 1'd0;
    main_basesoc_etherbone_record_depacketizer_is_ongoing0 <= 1'd0;
    main_basesoc_etherbone_record_depacketizer_is_ongoing1 <= 1'd0;
    main_basesoc_etherbone_record_depacketizer_is_ongoing2 <= 1'd0;
    main_basesoc_etherbone_record_depacketizer_is_ongoing3 <= 1'd0;
    main_basesoc_etherbone_record_depacketizer_sink_ready <= 1'd0;
    main_basesoc_etherbone_record_depacketizer_source_last_a <= 1'd0;
    main_basesoc_etherbone_record_depacketizer_source_last_b <= 1'd0;
    main_basesoc_etherbone_record_depacketizer_source_last_s <= 1'd0;
    main_basesoc_etherbone_record_depacketizer_source_payload_data <= 32'd0;
    main_basesoc_etherbone_record_depacketizer_source_payload_last_be <= 4'd0;
    main_basesoc_etherbone_record_depacketizer_source_valid <= 1'd0;
    main_basesoc_etherbone_record_depacketizer_sr_shift <= 1'd0;
    builder_fsm0_next_state0 <= builder_fsm0_state0;
    case (builder_fsm0_state0)
        1'd1: begin
            main_basesoc_etherbone_record_depacketizer_sink_ready <= 1'd1;
            if (main_basesoc_etherbone_record_depacketizer_sink_valid) begin
                main_basesoc_etherbone_record_depacketizer_count_liteethetherbone_fsm0_next_value4 <= (main_basesoc_etherbone_record_depacketizer_count + 1'd1);
                main_basesoc_etherbone_record_depacketizer_count_liteethetherbone_fsm0_next_value_ce4 <= 1'd1;
                main_basesoc_etherbone_record_depacketizer_sr_shift <= 1'd1;
                if ((main_basesoc_etherbone_record_depacketizer_count == 1'd0)) begin
                    builder_fsm0_next_state0 <= 2'd2;
                    main_basesoc_etherbone_record_depacketizer_count_liteethetherbone_fsm0_next_value4 <= (main_basesoc_etherbone_record_depacketizer_count + 1'd1);
                    main_basesoc_etherbone_record_depacketizer_count_liteethetherbone_fsm0_next_value_ce4 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_etherbone_record_depacketizer_source_valid <= (main_basesoc_etherbone_record_depacketizer_sink_valid | main_basesoc_etherbone_record_depacketizer_sink_d_last);
            main_basesoc_etherbone_record_depacketizer_source_last_a <= (main_basesoc_etherbone_record_depacketizer_sink_last | main_basesoc_etherbone_record_depacketizer_sink_d_last);
            main_basesoc_etherbone_record_depacketizer_sink_ready <= main_basesoc_etherbone_record_depacketizer_source_ready;
            main_basesoc_etherbone_record_depacketizer_source_payload_data <= main_basesoc_etherbone_record_depacketizer_sink_payload_data;
            if ((main_basesoc_etherbone_record_depacketizer_source_valid & main_basesoc_etherbone_record_depacketizer_source_ready)) begin
                if (main_basesoc_etherbone_record_depacketizer_source_last) begin
                    builder_fsm0_next_state0 <= 1'd0;
                end
            end
            main_basesoc_etherbone_record_depacketizer_is_ongoing0 <= 1'd1;
            main_basesoc_etherbone_record_depacketizer_is_ongoing2 <= 1'd1;
        end
        2'd3: begin
            main_basesoc_etherbone_record_depacketizer_is_ongoing1 <= 1'd1;
            main_basesoc_etherbone_record_depacketizer_is_ongoing3 <= 1'd1;
        end
        default: begin
            main_basesoc_etherbone_record_depacketizer_sink_ready <= 1'd1;
            main_basesoc_etherbone_record_depacketizer_count_liteethetherbone_fsm0_next_value4 <= 1'd1;
            main_basesoc_etherbone_record_depacketizer_count_liteethetherbone_fsm0_next_value_ce4 <= 1'd1;
            if (main_basesoc_etherbone_record_depacketizer_sink_valid) begin
                main_basesoc_etherbone_record_depacketizer_sr_shift <= 1'd1;
                main_basesoc_etherbone_record_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value5 <= 1'd1;
                main_basesoc_etherbone_record_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce5 <= 1'd1;
                if (1'd1) begin
                    builder_fsm0_next_state0 <= 2'd2;
                end else begin
                    builder_fsm0_next_state0 <= 1'd1;
                end
            end
        end
    endcase
    builder_fsm1_next_state0 <= builder_fsm1_state0;
    case (builder_fsm1_state0)
        1'd1: begin
            main_basesoc_etherbone_record_depacketizer_source_last_b <= 1'd1;
            main_basesoc_etherbone_record_depacketizer_source_last_s <= 1'd1;
            main_basesoc_etherbone_record_depacketizer_source_payload_last_be <= main_basesoc_etherbone_record_depacketizer_delayed_last_be;
            main_basesoc_etherbone_record_depacketizer_sink_ready <= 1'd0;
            if ((main_basesoc_etherbone_record_depacketizer_source_ready & main_basesoc_etherbone_record_depacketizer_source_valid)) begin
                builder_fsm1_next_state0 <= 1'd0;
            end
        end
        default: begin
            if (((main_basesoc_etherbone_record_depacketizer_sink_valid & main_basesoc_etherbone_record_depacketizer_sink_last) & (main_basesoc_etherbone_record_depacketizer_sink_payload_last_be > main_basesoc_etherbone_record_depacketizer_new_last_be))) begin
                main_basesoc_etherbone_record_depacketizer_source_last_b <= 1'd0;
                main_basesoc_etherbone_record_depacketizer_source_last_s <= 1'd1;
                main_basesoc_etherbone_record_depacketizer_source_payload_last_be <= 1'd0;
                if (((main_basesoc_etherbone_record_depacketizer_source_ready & main_basesoc_etherbone_record_depacketizer_source_valid) | ((~main_basesoc_etherbone_record_depacketizer_was_in_copy) & main_basesoc_etherbone_record_depacketizer_is_in_copy))) begin
                    main_basesoc_etherbone_record_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value2 <= main_basesoc_etherbone_record_depacketizer_new_last_be;
                    main_basesoc_etherbone_record_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce2 <= 1'd1;
                    builder_fsm1_next_state0 <= 1'd1;
                end
            end else begin
                if (main_basesoc_etherbone_record_depacketizer_sink_last) begin
                    main_basesoc_etherbone_record_depacketizer_source_last_b <= 1'd1;
                    main_basesoc_etherbone_record_depacketizer_source_last_s <= 1'd1;
                    main_basesoc_etherbone_record_depacketizer_source_payload_last_be <= main_basesoc_etherbone_record_depacketizer_new_last_be;
                end
            end
            if ((main_basesoc_etherbone_record_depacketizer_is_ongoing2 | (main_basesoc_etherbone_record_depacketizer_is_ongoing3 & (~main_basesoc_etherbone_record_depacketizer_fsm_from_idle)))) begin
                main_basesoc_etherbone_record_depacketizer_sink_ready <= main_basesoc_etherbone_record_depacketizer_source_ready;
            end else begin
                main_basesoc_etherbone_record_depacketizer_sink_ready <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_etherbone_record_receiver_sink_sink_valid = main_basesoc_etherbone_record_receiver_sink_valid;
assign main_basesoc_etherbone_record_receiver_sink_ready = main_basesoc_etherbone_record_receiver_sink_sink_ready;
assign main_basesoc_etherbone_record_receiver_sink_sink_first = main_basesoc_etherbone_record_receiver_sink_first;
assign main_basesoc_etherbone_record_receiver_sink_sink_last = main_basesoc_etherbone_record_receiver_sink_last;
assign main_basesoc_etherbone_record_receiver_sink_sink_payload_data = main_basesoc_etherbone_record_receiver_sink_payload_data;
assign main_basesoc_etherbone_record_receiver_sink_sink_payload_last_be = main_basesoc_etherbone_record_receiver_sink_payload_last_be;
assign main_basesoc_etherbone_record_receiver_sink_sink_payload_error = main_basesoc_etherbone_record_receiver_sink_payload_error;
assign main_basesoc_etherbone_record_receiver_sink_sink_param_bca = main_basesoc_etherbone_record_receiver_sink_param_bca;
assign main_basesoc_etherbone_record_receiver_sink_sink_param_byte_enable = main_basesoc_etherbone_record_receiver_sink_param_byte_enable;
assign main_basesoc_etherbone_record_receiver_sink_sink_param_cyc = main_basesoc_etherbone_record_receiver_sink_param_cyc;
assign main_basesoc_etherbone_record_receiver_sink_sink_param_rca = main_basesoc_etherbone_record_receiver_sink_param_rca;
assign main_basesoc_etherbone_record_receiver_sink_sink_param_rcount = main_basesoc_etherbone_record_receiver_sink_param_rcount;
assign main_basesoc_etherbone_record_receiver_sink_sink_param_rff = main_basesoc_etherbone_record_receiver_sink_param_rff;
assign main_basesoc_etherbone_record_receiver_sink_sink_param_wca = main_basesoc_etherbone_record_receiver_sink_param_wca;
assign main_basesoc_etherbone_record_receiver_sink_sink_param_wcount = main_basesoc_etherbone_record_receiver_sink_param_wcount;
assign main_basesoc_etherbone_record_receiver_sink_sink_param_wff = main_basesoc_etherbone_record_receiver_sink_param_wff;
assign main_basesoc_etherbone_record_receiver_param_fifo_sink_param_bca = main_basesoc_etherbone_record_receiver_sink_sink_param_bca;
assign main_basesoc_etherbone_record_receiver_param_fifo_sink_param_byte_enable = main_basesoc_etherbone_record_receiver_sink_sink_param_byte_enable;
assign main_basesoc_etherbone_record_receiver_param_fifo_sink_param_cyc = main_basesoc_etherbone_record_receiver_sink_sink_param_cyc;
assign main_basesoc_etherbone_record_receiver_param_fifo_sink_param_rca = main_basesoc_etherbone_record_receiver_sink_sink_param_rca;
assign main_basesoc_etherbone_record_receiver_param_fifo_sink_param_rcount = main_basesoc_etherbone_record_receiver_sink_sink_param_rcount;
assign main_basesoc_etherbone_record_receiver_param_fifo_sink_param_rff = main_basesoc_etherbone_record_receiver_sink_sink_param_rff;
assign main_basesoc_etherbone_record_receiver_param_fifo_sink_param_wca = main_basesoc_etherbone_record_receiver_sink_sink_param_wca;
assign main_basesoc_etherbone_record_receiver_param_fifo_sink_param_wcount = main_basesoc_etherbone_record_receiver_sink_sink_param_wcount;
assign main_basesoc_etherbone_record_receiver_param_fifo_sink_param_wff = main_basesoc_etherbone_record_receiver_sink_sink_param_wff;
assign main_basesoc_etherbone_record_receiver_payload_fifo_sink_last = main_basesoc_etherbone_record_receiver_sink_sink_last;
assign main_basesoc_etherbone_record_receiver_payload_fifo_sink_payload_data = main_basesoc_etherbone_record_receiver_sink_sink_payload_data;
assign main_basesoc_etherbone_record_receiver_payload_fifo_sink_payload_last_be = main_basesoc_etherbone_record_receiver_sink_sink_payload_last_be;
assign main_basesoc_etherbone_record_receiver_payload_fifo_sink_payload_error = main_basesoc_etherbone_record_receiver_sink_sink_payload_error;
assign main_basesoc_etherbone_record_receiver_param_fifo_sink_valid = (main_basesoc_etherbone_record_receiver_sink_sink_valid & main_basesoc_etherbone_record_receiver_sink_sink_last);
assign main_basesoc_etherbone_record_receiver_payload_fifo_sink_valid = (main_basesoc_etherbone_record_receiver_sink_sink_valid & main_basesoc_etherbone_record_receiver_param_fifo_sink_ready);
assign main_basesoc_etherbone_record_receiver_sink_sink_ready = (main_basesoc_etherbone_record_receiver_param_fifo_sink_ready & main_basesoc_etherbone_record_receiver_payload_fifo_sink_ready);
assign main_basesoc_etherbone_record_receiver_source_source_valid = main_basesoc_etherbone_record_receiver_param_fifo_source_valid;
assign main_basesoc_etherbone_record_receiver_source_source_param_bca = main_basesoc_etherbone_record_receiver_param_fifo_source_param_bca;
assign main_basesoc_etherbone_record_receiver_source_source_param_byte_enable = main_basesoc_etherbone_record_receiver_param_fifo_source_param_byte_enable;
assign main_basesoc_etherbone_record_receiver_source_source_param_cyc = main_basesoc_etherbone_record_receiver_param_fifo_source_param_cyc;
assign main_basesoc_etherbone_record_receiver_source_source_param_rca = main_basesoc_etherbone_record_receiver_param_fifo_source_param_rca;
assign main_basesoc_etherbone_record_receiver_source_source_param_rcount = main_basesoc_etherbone_record_receiver_param_fifo_source_param_rcount;
assign main_basesoc_etherbone_record_receiver_source_source_param_rff = main_basesoc_etherbone_record_receiver_param_fifo_source_param_rff;
assign main_basesoc_etherbone_record_receiver_source_source_param_wca = main_basesoc_etherbone_record_receiver_param_fifo_source_param_wca;
assign main_basesoc_etherbone_record_receiver_source_source_param_wcount = main_basesoc_etherbone_record_receiver_param_fifo_source_param_wcount;
assign main_basesoc_etherbone_record_receiver_source_source_param_wff = main_basesoc_etherbone_record_receiver_param_fifo_source_param_wff;
always @(*) begin
    main_basesoc_etherbone_record_receiver_source_source_first <= 1'd0;
    main_basesoc_etherbone_record_receiver_source_source_first <= main_basesoc_etherbone_record_receiver_param_fifo_source_first;
    main_basesoc_etherbone_record_receiver_source_source_first <= main_basesoc_etherbone_record_receiver_payload_fifo_source_first;
end
assign main_basesoc_etherbone_record_receiver_source_source_last = main_basesoc_etherbone_record_receiver_payload_fifo_source_last;
assign main_basesoc_etherbone_record_receiver_source_source_payload_data = main_basesoc_etherbone_record_receiver_payload_fifo_source_payload_data;
assign main_basesoc_etherbone_record_receiver_source_source_payload_last_be = main_basesoc_etherbone_record_receiver_payload_fifo_source_payload_last_be;
assign main_basesoc_etherbone_record_receiver_source_source_payload_error = main_basesoc_etherbone_record_receiver_payload_fifo_source_payload_error;
assign main_basesoc_etherbone_record_receiver_param_fifo_source_ready = ((main_basesoc_etherbone_record_receiver_source_source_valid & main_basesoc_etherbone_record_receiver_source_source_last) & main_basesoc_etherbone_record_receiver_source_source_ready);
assign main_basesoc_etherbone_record_receiver_payload_fifo_source_ready = (main_basesoc_etherbone_record_receiver_source_source_valid & main_basesoc_etherbone_record_receiver_source_source_ready);
assign main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_din = {main_basesoc_etherbone_record_receiver_payload_fifo_fifo_in_last, main_basesoc_etherbone_record_receiver_payload_fifo_fifo_in_first, main_basesoc_etherbone_record_receiver_payload_fifo_fifo_in_payload_error, main_basesoc_etherbone_record_receiver_payload_fifo_fifo_in_payload_last_be, main_basesoc_etherbone_record_receiver_payload_fifo_fifo_in_payload_data};
assign {main_basesoc_etherbone_record_receiver_payload_fifo_fifo_out_last, main_basesoc_etherbone_record_receiver_payload_fifo_fifo_out_first, main_basesoc_etherbone_record_receiver_payload_fifo_fifo_out_payload_error, main_basesoc_etherbone_record_receiver_payload_fifo_fifo_out_payload_last_be, main_basesoc_etherbone_record_receiver_payload_fifo_fifo_out_payload_data} = main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_dout;
assign main_basesoc_etherbone_record_receiver_payload_fifo_sink_ready = main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_writable;
assign main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_we = main_basesoc_etherbone_record_receiver_payload_fifo_sink_valid;
assign main_basesoc_etherbone_record_receiver_payload_fifo_fifo_in_first = main_basesoc_etherbone_record_receiver_payload_fifo_sink_first;
assign main_basesoc_etherbone_record_receiver_payload_fifo_fifo_in_last = main_basesoc_etherbone_record_receiver_payload_fifo_sink_last;
assign main_basesoc_etherbone_record_receiver_payload_fifo_fifo_in_payload_data = main_basesoc_etherbone_record_receiver_payload_fifo_sink_payload_data;
assign main_basesoc_etherbone_record_receiver_payload_fifo_fifo_in_payload_last_be = main_basesoc_etherbone_record_receiver_payload_fifo_sink_payload_last_be;
assign main_basesoc_etherbone_record_receiver_payload_fifo_fifo_in_payload_error = main_basesoc_etherbone_record_receiver_payload_fifo_sink_payload_error;
assign main_basesoc_etherbone_record_receiver_payload_fifo_source_valid = main_basesoc_etherbone_record_receiver_payload_fifo_readable;
assign main_basesoc_etherbone_record_receiver_payload_fifo_source_first = main_basesoc_etherbone_record_receiver_payload_fifo_fifo_out_first;
assign main_basesoc_etherbone_record_receiver_payload_fifo_source_last = main_basesoc_etherbone_record_receiver_payload_fifo_fifo_out_last;
assign main_basesoc_etherbone_record_receiver_payload_fifo_source_payload_data = main_basesoc_etherbone_record_receiver_payload_fifo_fifo_out_payload_data;
assign main_basesoc_etherbone_record_receiver_payload_fifo_source_payload_last_be = main_basesoc_etherbone_record_receiver_payload_fifo_fifo_out_payload_last_be;
assign main_basesoc_etherbone_record_receiver_payload_fifo_source_payload_error = main_basesoc_etherbone_record_receiver_payload_fifo_fifo_out_payload_error;
assign main_basesoc_etherbone_record_receiver_payload_fifo_re = main_basesoc_etherbone_record_receiver_payload_fifo_source_ready;
assign main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_re = (main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_readable & ((~main_basesoc_etherbone_record_receiver_payload_fifo_readable) | main_basesoc_etherbone_record_receiver_payload_fifo_re));
assign main_basesoc_etherbone_record_receiver_payload_fifo_level1 = (main_basesoc_etherbone_record_receiver_payload_fifo_level0 + main_basesoc_etherbone_record_receiver_payload_fifo_readable);
always @(*) begin
    main_basesoc_etherbone_record_receiver_payload_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_etherbone_record_receiver_payload_fifo_replace) begin
        main_basesoc_etherbone_record_receiver_payload_fifo_wrport_adr <= (main_basesoc_etherbone_record_receiver_payload_fifo_produce - 1'd1);
    end else begin
        main_basesoc_etherbone_record_receiver_payload_fifo_wrport_adr <= main_basesoc_etherbone_record_receiver_payload_fifo_produce;
    end
end
assign main_basesoc_etherbone_record_receiver_payload_fifo_wrport_dat_w = main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_din;
assign main_basesoc_etherbone_record_receiver_payload_fifo_wrport_we = (main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_we & (main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_writable | main_basesoc_etherbone_record_receiver_payload_fifo_replace));
assign main_basesoc_etherbone_record_receiver_payload_fifo_do_read = (main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_readable & main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_re);
assign main_basesoc_etherbone_record_receiver_payload_fifo_rdport_adr = main_basesoc_etherbone_record_receiver_payload_fifo_consume;
assign main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_dout = main_basesoc_etherbone_record_receiver_payload_fifo_rdport_dat_r;
assign main_basesoc_etherbone_record_receiver_payload_fifo_rdport_re = main_basesoc_etherbone_record_receiver_payload_fifo_do_read;
assign main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_writable = (main_basesoc_etherbone_record_receiver_payload_fifo_level0 != 5'd16);
assign main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_readable = (main_basesoc_etherbone_record_receiver_payload_fifo_level0 != 1'd0);
assign main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_din = {main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_last, main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_first, main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_wff, main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_wcount, main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_wca, main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_rff, main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_rcount, main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_rca, main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_cyc, main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_byte_enable, main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_bca};
assign {main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_last, main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_first, main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_wff, main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_wcount, main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_wca, main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_rff, main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_rcount, main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_rca, main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_cyc, main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_byte_enable, main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_bca} = main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_dout;
assign main_basesoc_etherbone_record_receiver_param_fifo_sink_ready = main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_writable;
assign main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_we = main_basesoc_etherbone_record_receiver_param_fifo_sink_valid;
assign main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_first = main_basesoc_etherbone_record_receiver_param_fifo_sink_first;
assign main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_last = main_basesoc_etherbone_record_receiver_param_fifo_sink_last;
assign main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_bca = main_basesoc_etherbone_record_receiver_param_fifo_sink_param_bca;
assign main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_byte_enable = main_basesoc_etherbone_record_receiver_param_fifo_sink_param_byte_enable;
assign main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_cyc = main_basesoc_etherbone_record_receiver_param_fifo_sink_param_cyc;
assign main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_rca = main_basesoc_etherbone_record_receiver_param_fifo_sink_param_rca;
assign main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_rcount = main_basesoc_etherbone_record_receiver_param_fifo_sink_param_rcount;
assign main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_rff = main_basesoc_etherbone_record_receiver_param_fifo_sink_param_rff;
assign main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_wca = main_basesoc_etherbone_record_receiver_param_fifo_sink_param_wca;
assign main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_wcount = main_basesoc_etherbone_record_receiver_param_fifo_sink_param_wcount;
assign main_basesoc_etherbone_record_receiver_param_fifo_fifo_in_param_wff = main_basesoc_etherbone_record_receiver_param_fifo_sink_param_wff;
assign main_basesoc_etherbone_record_receiver_param_fifo_source_valid = main_basesoc_etherbone_record_receiver_param_fifo_readable;
assign main_basesoc_etherbone_record_receiver_param_fifo_source_first = main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_first;
assign main_basesoc_etherbone_record_receiver_param_fifo_source_last = main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_last;
assign main_basesoc_etherbone_record_receiver_param_fifo_source_param_bca = main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_bca;
assign main_basesoc_etherbone_record_receiver_param_fifo_source_param_byte_enable = main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_byte_enable;
assign main_basesoc_etherbone_record_receiver_param_fifo_source_param_cyc = main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_cyc;
assign main_basesoc_etherbone_record_receiver_param_fifo_source_param_rca = main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_rca;
assign main_basesoc_etherbone_record_receiver_param_fifo_source_param_rcount = main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_rcount;
assign main_basesoc_etherbone_record_receiver_param_fifo_source_param_rff = main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_rff;
assign main_basesoc_etherbone_record_receiver_param_fifo_source_param_wca = main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_wca;
assign main_basesoc_etherbone_record_receiver_param_fifo_source_param_wcount = main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_wcount;
assign main_basesoc_etherbone_record_receiver_param_fifo_source_param_wff = main_basesoc_etherbone_record_receiver_param_fifo_fifo_out_param_wff;
assign main_basesoc_etherbone_record_receiver_param_fifo_re = main_basesoc_etherbone_record_receiver_param_fifo_source_ready;
assign main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_re = (main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_readable & ((~main_basesoc_etherbone_record_receiver_param_fifo_readable) | main_basesoc_etherbone_record_receiver_param_fifo_re));
assign main_basesoc_etherbone_record_receiver_param_fifo_level1 = (main_basesoc_etherbone_record_receiver_param_fifo_level0 + main_basesoc_etherbone_record_receiver_param_fifo_readable);
always @(*) begin
    main_basesoc_etherbone_record_receiver_param_fifo_wrport_adr <= 1'd0;
    if (main_basesoc_etherbone_record_receiver_param_fifo_replace) begin
        main_basesoc_etherbone_record_receiver_param_fifo_wrport_adr <= (main_basesoc_etherbone_record_receiver_param_fifo_produce - 1'd1);
    end else begin
        main_basesoc_etherbone_record_receiver_param_fifo_wrport_adr <= main_basesoc_etherbone_record_receiver_param_fifo_produce;
    end
end
assign main_basesoc_etherbone_record_receiver_param_fifo_wrport_dat_w = main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_din;
assign main_basesoc_etherbone_record_receiver_param_fifo_wrport_we = (main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_we & (main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_writable | main_basesoc_etherbone_record_receiver_param_fifo_replace));
assign main_basesoc_etherbone_record_receiver_param_fifo_do_read = (main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_readable & main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_re);
assign main_basesoc_etherbone_record_receiver_param_fifo_rdport_adr = main_basesoc_etherbone_record_receiver_param_fifo_consume;
assign main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_dout = main_basesoc_etherbone_record_receiver_param_fifo_rdport_dat_r;
assign main_basesoc_etherbone_record_receiver_param_fifo_rdport_re = main_basesoc_etherbone_record_receiver_param_fifo_do_read;
assign main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_writable = (main_basesoc_etherbone_record_receiver_param_fifo_level0 != 2'd2);
assign main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_readable = (main_basesoc_etherbone_record_receiver_param_fifo_level0 != 1'd0);
always @(*) begin
    builder_liteethetherbonerecordreceiver_next_state <= 2'd0;
    main_basesoc_etherbone_record_receiver_base_addr_update <= 1'd0;
    main_basesoc_etherbone_record_receiver_count_liteethetherbone_next_value <= 9'd0;
    main_basesoc_etherbone_record_receiver_count_liteethetherbone_next_value_ce <= 1'd0;
    main_basesoc_etherbone_record_receiver_source_last <= 1'd0;
    main_basesoc_etherbone_record_receiver_source_param_base_addr <= 32'd0;
    main_basesoc_etherbone_record_receiver_source_param_be <= 4'd0;
    main_basesoc_etherbone_record_receiver_source_param_count <= 8'd0;
    main_basesoc_etherbone_record_receiver_source_param_we <= 1'd0;
    main_basesoc_etherbone_record_receiver_source_payload_addr <= 32'd0;
    main_basesoc_etherbone_record_receiver_source_payload_data <= 32'd0;
    main_basesoc_etherbone_record_receiver_source_payload_last_be <= 4'd0;
    main_basesoc_etherbone_record_receiver_source_source_ready <= 1'd0;
    main_basesoc_etherbone_record_receiver_source_valid <= 1'd0;
    builder_liteethetherbonerecordreceiver_next_state <= builder_liteethetherbonerecordreceiver_state;
    case (builder_liteethetherbonerecordreceiver_state)
        1'd1: begin
            main_basesoc_etherbone_record_receiver_source_valid <= main_basesoc_etherbone_record_receiver_source_source_valid;
            main_basesoc_etherbone_record_receiver_source_last <= (main_basesoc_etherbone_record_receiver_count == (main_basesoc_etherbone_record_receiver_source_source_param_wcount - 1'd1));
            main_basesoc_etherbone_record_receiver_source_payload_last_be <= (main_basesoc_etherbone_record_receiver_source_last <<< 2'd3);
            main_basesoc_etherbone_record_receiver_source_param_count <= main_basesoc_etherbone_record_receiver_source_source_param_wcount;
            main_basesoc_etherbone_record_receiver_source_param_be <= main_basesoc_etherbone_record_receiver_source_source_param_byte_enable;
            main_basesoc_etherbone_record_receiver_source_payload_addr <= (main_basesoc_etherbone_record_receiver_base_addr[31:2] + main_basesoc_etherbone_record_receiver_count);
            main_basesoc_etherbone_record_receiver_source_param_we <= 1'd1;
            main_basesoc_etherbone_record_receiver_source_payload_data <= main_basesoc_etherbone_record_receiver_source_source_payload_data;
            main_basesoc_etherbone_record_receiver_source_source_ready <= main_basesoc_etherbone_record_receiver_source_ready;
            if ((main_basesoc_etherbone_record_receiver_source_valid & main_basesoc_etherbone_record_receiver_source_ready)) begin
                main_basesoc_etherbone_record_receiver_count_liteethetherbone_next_value <= (main_basesoc_etherbone_record_receiver_count + 1'd1);
                main_basesoc_etherbone_record_receiver_count_liteethetherbone_next_value_ce <= 1'd1;
                if (main_basesoc_etherbone_record_receiver_source_last) begin
                    if (main_basesoc_etherbone_record_receiver_source_source_param_rcount) begin
                        builder_liteethetherbonerecordreceiver_next_state <= 2'd2;
                    end else begin
                        builder_liteethetherbonerecordreceiver_next_state <= 1'd0;
                    end
                end
            end
        end
        2'd2: begin
            main_basesoc_etherbone_record_receiver_count_liteethetherbone_next_value <= 1'd0;
            main_basesoc_etherbone_record_receiver_count_liteethetherbone_next_value_ce <= 1'd1;
            if (main_basesoc_etherbone_record_receiver_source_source_valid) begin
                main_basesoc_etherbone_record_receiver_base_addr_update <= 1'd1;
                builder_liteethetherbonerecordreceiver_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_basesoc_etherbone_record_receiver_source_valid <= main_basesoc_etherbone_record_receiver_source_source_valid;
            main_basesoc_etherbone_record_receiver_source_last <= (main_basesoc_etherbone_record_receiver_count == (main_basesoc_etherbone_record_receiver_source_source_param_rcount - 1'd1));
            main_basesoc_etherbone_record_receiver_source_payload_last_be <= (main_basesoc_etherbone_record_receiver_source_last <<< 2'd3);
            main_basesoc_etherbone_record_receiver_source_param_count <= main_basesoc_etherbone_record_receiver_source_source_param_rcount;
            main_basesoc_etherbone_record_receiver_source_param_be <= main_basesoc_etherbone_record_receiver_source_source_param_byte_enable;
            main_basesoc_etherbone_record_receiver_source_param_base_addr <= main_basesoc_etherbone_record_receiver_base_addr;
            main_basesoc_etherbone_record_receiver_source_payload_addr <= main_basesoc_etherbone_record_receiver_source_source_payload_data[31:2];
            main_basesoc_etherbone_record_receiver_source_source_ready <= main_basesoc_etherbone_record_receiver_source_ready;
            if ((main_basesoc_etherbone_record_receiver_source_valid & main_basesoc_etherbone_record_receiver_source_ready)) begin
                main_basesoc_etherbone_record_receiver_count_liteethetherbone_next_value <= (main_basesoc_etherbone_record_receiver_count + 1'd1);
                main_basesoc_etherbone_record_receiver_count_liteethetherbone_next_value_ce <= 1'd1;
                if (main_basesoc_etherbone_record_receiver_source_last) begin
                    builder_liteethetherbonerecordreceiver_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_etherbone_record_receiver_source_source_ready <= 1'd1;
            main_basesoc_etherbone_record_receiver_count_liteethetherbone_next_value <= 1'd0;
            main_basesoc_etherbone_record_receiver_count_liteethetherbone_next_value_ce <= 1'd1;
            if (main_basesoc_etherbone_record_receiver_source_source_valid) begin
                main_basesoc_etherbone_record_receiver_base_addr_update <= 1'd1;
                if (main_basesoc_etherbone_record_receiver_source_source_param_wcount) begin
                    builder_liteethetherbonerecordreceiver_next_state <= 1'd1;
                end else begin
                    if (main_basesoc_etherbone_record_receiver_source_source_param_rcount) begin
                        builder_liteethetherbonerecordreceiver_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_basesoc_etherbone_record_sender_sink_sink_valid = main_basesoc_etherbone_record_sender_sink_valid;
assign main_basesoc_etherbone_record_sender_sink_ready = main_basesoc_etherbone_record_sender_sink_sink_ready;
assign main_basesoc_etherbone_record_sender_sink_sink_first = main_basesoc_etherbone_record_sender_sink_first;
assign main_basesoc_etherbone_record_sender_sink_sink_last = main_basesoc_etherbone_record_sender_sink_last;
assign main_basesoc_etherbone_record_sender_sink_sink_payload_addr = main_basesoc_etherbone_record_sender_sink_payload_addr;
assign main_basesoc_etherbone_record_sender_sink_sink_payload_last_be = main_basesoc_etherbone_record_sender_sink_payload_last_be;
assign main_basesoc_etherbone_record_sender_sink_sink_payload_data = main_basesoc_etherbone_record_sender_sink_payload_data;
assign main_basesoc_etherbone_record_sender_sink_sink_param_we = main_basesoc_etherbone_record_sender_sink_param_we;
assign main_basesoc_etherbone_record_sender_sink_sink_param_count = main_basesoc_etherbone_record_sender_sink_param_count;
assign main_basesoc_etherbone_record_sender_sink_sink_param_base_addr = main_basesoc_etherbone_record_sender_sink_param_base_addr;
assign main_basesoc_etherbone_record_sender_sink_sink_param_be = main_basesoc_etherbone_record_sender_sink_param_be;
assign main_basesoc_etherbone_record_sender_source_param_byte_enable = main_basesoc_etherbone_record_sender_source_source_param_be;
always @(*) begin
    main_basesoc_etherbone_record_sender_source_param_rcount <= 8'd0;
    main_basesoc_etherbone_record_sender_source_param_wcount <= 8'd0;
    if (main_basesoc_etherbone_record_sender_source_source_param_we) begin
        main_basesoc_etherbone_record_sender_source_param_wcount <= main_basesoc_etherbone_record_sender_source_source_param_count;
    end else begin
        main_basesoc_etherbone_record_sender_source_param_rcount <= main_basesoc_etherbone_record_sender_source_source_param_count;
    end
end
assign main_basesoc_etherbone_record_sender_param_fifo_sink_param_we = main_basesoc_etherbone_record_sender_sink_sink_param_we;
assign main_basesoc_etherbone_record_sender_param_fifo_sink_param_count = main_basesoc_etherbone_record_sender_sink_sink_param_count;
assign main_basesoc_etherbone_record_sender_param_fifo_sink_param_base_addr = main_basesoc_etherbone_record_sender_sink_sink_param_base_addr;
assign main_basesoc_etherbone_record_sender_param_fifo_sink_param_be = main_basesoc_etherbone_record_sender_sink_sink_param_be;
assign main_basesoc_etherbone_record_sender_payload_fifo_sink_last = main_basesoc_etherbone_record_sender_sink_sink_last;
assign main_basesoc_etherbone_record_sender_payload_fifo_sink_payload_addr = main_basesoc_etherbone_record_sender_sink_sink_payload_addr;
assign main_basesoc_etherbone_record_sender_payload_fifo_sink_payload_last_be = main_basesoc_etherbone_record_sender_sink_sink_payload_last_be;
assign main_basesoc_etherbone_record_sender_payload_fifo_sink_payload_data = main_basesoc_etherbone_record_sender_sink_sink_payload_data;
assign main_basesoc_etherbone_record_sender_param_fifo_sink_valid = (main_basesoc_etherbone_record_sender_sink_sink_valid & main_basesoc_etherbone_record_sender_sink_sink_last);
assign main_basesoc_etherbone_record_sender_payload_fifo_sink_valid = (main_basesoc_etherbone_record_sender_sink_sink_valid & main_basesoc_etherbone_record_sender_param_fifo_sink_ready);
assign main_basesoc_etherbone_record_sender_sink_sink_ready = (main_basesoc_etherbone_record_sender_param_fifo_sink_ready & main_basesoc_etherbone_record_sender_payload_fifo_sink_ready);
assign main_basesoc_etherbone_record_sender_source_source_valid = main_basesoc_etherbone_record_sender_param_fifo_source_valid;
assign main_basesoc_etherbone_record_sender_source_source_param_we = main_basesoc_etherbone_record_sender_param_fifo_source_param_we;
assign main_basesoc_etherbone_record_sender_source_source_param_count = main_basesoc_etherbone_record_sender_param_fifo_source_param_count;
assign main_basesoc_etherbone_record_sender_source_source_param_base_addr = main_basesoc_etherbone_record_sender_param_fifo_source_param_base_addr;
assign main_basesoc_etherbone_record_sender_source_source_param_be = main_basesoc_etherbone_record_sender_param_fifo_source_param_be;
always @(*) begin
    main_basesoc_etherbone_record_sender_source_source_first <= 1'd0;
    main_basesoc_etherbone_record_sender_source_source_first <= main_basesoc_etherbone_record_sender_param_fifo_source_first;
    main_basesoc_etherbone_record_sender_source_source_first <= main_basesoc_etherbone_record_sender_payload_fifo_source_first;
end
assign main_basesoc_etherbone_record_sender_source_source_last = main_basesoc_etherbone_record_sender_payload_fifo_source_last;
assign main_basesoc_etherbone_record_sender_source_source_payload_addr = main_basesoc_etherbone_record_sender_payload_fifo_source_payload_addr;
assign main_basesoc_etherbone_record_sender_source_source_payload_last_be = main_basesoc_etherbone_record_sender_payload_fifo_source_payload_last_be;
assign main_basesoc_etherbone_record_sender_source_source_payload_data = main_basesoc_etherbone_record_sender_payload_fifo_source_payload_data;
assign main_basesoc_etherbone_record_sender_param_fifo_source_ready = ((main_basesoc_etherbone_record_sender_source_source_valid & main_basesoc_etherbone_record_sender_source_source_last) & main_basesoc_etherbone_record_sender_source_source_ready);
assign main_basesoc_etherbone_record_sender_payload_fifo_source_ready = (main_basesoc_etherbone_record_sender_source_source_valid & main_basesoc_etherbone_record_sender_source_source_ready);
assign main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_din = {main_basesoc_etherbone_record_sender_payload_fifo_fifo_in_last, main_basesoc_etherbone_record_sender_payload_fifo_fifo_in_first, main_basesoc_etherbone_record_sender_payload_fifo_fifo_in_payload_data, main_basesoc_etherbone_record_sender_payload_fifo_fifo_in_payload_last_be, main_basesoc_etherbone_record_sender_payload_fifo_fifo_in_payload_addr};
assign {main_basesoc_etherbone_record_sender_payload_fifo_fifo_out_last, main_basesoc_etherbone_record_sender_payload_fifo_fifo_out_first, main_basesoc_etherbone_record_sender_payload_fifo_fifo_out_payload_data, main_basesoc_etherbone_record_sender_payload_fifo_fifo_out_payload_last_be, main_basesoc_etherbone_record_sender_payload_fifo_fifo_out_payload_addr} = main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_dout;
assign main_basesoc_etherbone_record_sender_payload_fifo_sink_ready = main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_writable;
assign main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_we = main_basesoc_etherbone_record_sender_payload_fifo_sink_valid;
assign main_basesoc_etherbone_record_sender_payload_fifo_fifo_in_first = main_basesoc_etherbone_record_sender_payload_fifo_sink_first;
assign main_basesoc_etherbone_record_sender_payload_fifo_fifo_in_last = main_basesoc_etherbone_record_sender_payload_fifo_sink_last;
assign main_basesoc_etherbone_record_sender_payload_fifo_fifo_in_payload_addr = main_basesoc_etherbone_record_sender_payload_fifo_sink_payload_addr;
assign main_basesoc_etherbone_record_sender_payload_fifo_fifo_in_payload_last_be = main_basesoc_etherbone_record_sender_payload_fifo_sink_payload_last_be;
assign main_basesoc_etherbone_record_sender_payload_fifo_fifo_in_payload_data = main_basesoc_etherbone_record_sender_payload_fifo_sink_payload_data;
assign main_basesoc_etherbone_record_sender_payload_fifo_source_valid = main_basesoc_etherbone_record_sender_payload_fifo_readable;
assign main_basesoc_etherbone_record_sender_payload_fifo_source_first = main_basesoc_etherbone_record_sender_payload_fifo_fifo_out_first;
assign main_basesoc_etherbone_record_sender_payload_fifo_source_last = main_basesoc_etherbone_record_sender_payload_fifo_fifo_out_last;
assign main_basesoc_etherbone_record_sender_payload_fifo_source_payload_addr = main_basesoc_etherbone_record_sender_payload_fifo_fifo_out_payload_addr;
assign main_basesoc_etherbone_record_sender_payload_fifo_source_payload_last_be = main_basesoc_etherbone_record_sender_payload_fifo_fifo_out_payload_last_be;
assign main_basesoc_etherbone_record_sender_payload_fifo_source_payload_data = main_basesoc_etherbone_record_sender_payload_fifo_fifo_out_payload_data;
assign main_basesoc_etherbone_record_sender_payload_fifo_re = main_basesoc_etherbone_record_sender_payload_fifo_source_ready;
assign main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_re = (main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_readable & ((~main_basesoc_etherbone_record_sender_payload_fifo_readable) | main_basesoc_etherbone_record_sender_payload_fifo_re));
assign main_basesoc_etherbone_record_sender_payload_fifo_level1 = (main_basesoc_etherbone_record_sender_payload_fifo_level0 + main_basesoc_etherbone_record_sender_payload_fifo_readable);
always @(*) begin
    main_basesoc_etherbone_record_sender_payload_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_etherbone_record_sender_payload_fifo_replace) begin
        main_basesoc_etherbone_record_sender_payload_fifo_wrport_adr <= (main_basesoc_etherbone_record_sender_payload_fifo_produce - 1'd1);
    end else begin
        main_basesoc_etherbone_record_sender_payload_fifo_wrport_adr <= main_basesoc_etherbone_record_sender_payload_fifo_produce;
    end
end
assign main_basesoc_etherbone_record_sender_payload_fifo_wrport_dat_w = main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_din;
assign main_basesoc_etherbone_record_sender_payload_fifo_wrport_we = (main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_we & (main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_writable | main_basesoc_etherbone_record_sender_payload_fifo_replace));
assign main_basesoc_etherbone_record_sender_payload_fifo_do_read = (main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_readable & main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_re);
assign main_basesoc_etherbone_record_sender_payload_fifo_rdport_adr = main_basesoc_etherbone_record_sender_payload_fifo_consume;
assign main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_dout = main_basesoc_etherbone_record_sender_payload_fifo_rdport_dat_r;
assign main_basesoc_etherbone_record_sender_payload_fifo_rdport_re = main_basesoc_etherbone_record_sender_payload_fifo_do_read;
assign main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_writable = (main_basesoc_etherbone_record_sender_payload_fifo_level0 != 5'd16);
assign main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_readable = (main_basesoc_etherbone_record_sender_payload_fifo_level0 != 1'd0);
assign main_basesoc_etherbone_record_sender_param_fifo_syncfifo_din = {main_basesoc_etherbone_record_sender_param_fifo_fifo_in_last, main_basesoc_etherbone_record_sender_param_fifo_fifo_in_first, main_basesoc_etherbone_record_sender_param_fifo_fifo_in_param_be, main_basesoc_etherbone_record_sender_param_fifo_fifo_in_param_base_addr, main_basesoc_etherbone_record_sender_param_fifo_fifo_in_param_count, main_basesoc_etherbone_record_sender_param_fifo_fifo_in_param_we};
assign {main_basesoc_etherbone_record_sender_param_fifo_fifo_out_last, main_basesoc_etherbone_record_sender_param_fifo_fifo_out_first, main_basesoc_etherbone_record_sender_param_fifo_fifo_out_param_be, main_basesoc_etherbone_record_sender_param_fifo_fifo_out_param_base_addr, main_basesoc_etherbone_record_sender_param_fifo_fifo_out_param_count, main_basesoc_etherbone_record_sender_param_fifo_fifo_out_param_we} = main_basesoc_etherbone_record_sender_param_fifo_syncfifo_dout;
assign main_basesoc_etherbone_record_sender_param_fifo_sink_ready = main_basesoc_etherbone_record_sender_param_fifo_syncfifo_writable;
assign main_basesoc_etherbone_record_sender_param_fifo_syncfifo_we = main_basesoc_etherbone_record_sender_param_fifo_sink_valid;
assign main_basesoc_etherbone_record_sender_param_fifo_fifo_in_first = main_basesoc_etherbone_record_sender_param_fifo_sink_first;
assign main_basesoc_etherbone_record_sender_param_fifo_fifo_in_last = main_basesoc_etherbone_record_sender_param_fifo_sink_last;
assign main_basesoc_etherbone_record_sender_param_fifo_fifo_in_param_we = main_basesoc_etherbone_record_sender_param_fifo_sink_param_we;
assign main_basesoc_etherbone_record_sender_param_fifo_fifo_in_param_count = main_basesoc_etherbone_record_sender_param_fifo_sink_param_count;
assign main_basesoc_etherbone_record_sender_param_fifo_fifo_in_param_base_addr = main_basesoc_etherbone_record_sender_param_fifo_sink_param_base_addr;
assign main_basesoc_etherbone_record_sender_param_fifo_fifo_in_param_be = main_basesoc_etherbone_record_sender_param_fifo_sink_param_be;
assign main_basesoc_etherbone_record_sender_param_fifo_source_valid = main_basesoc_etherbone_record_sender_param_fifo_readable;
assign main_basesoc_etherbone_record_sender_param_fifo_source_first = main_basesoc_etherbone_record_sender_param_fifo_fifo_out_first;
assign main_basesoc_etherbone_record_sender_param_fifo_source_last = main_basesoc_etherbone_record_sender_param_fifo_fifo_out_last;
assign main_basesoc_etherbone_record_sender_param_fifo_source_param_we = main_basesoc_etherbone_record_sender_param_fifo_fifo_out_param_we;
assign main_basesoc_etherbone_record_sender_param_fifo_source_param_count = main_basesoc_etherbone_record_sender_param_fifo_fifo_out_param_count;
assign main_basesoc_etherbone_record_sender_param_fifo_source_param_base_addr = main_basesoc_etherbone_record_sender_param_fifo_fifo_out_param_base_addr;
assign main_basesoc_etherbone_record_sender_param_fifo_source_param_be = main_basesoc_etherbone_record_sender_param_fifo_fifo_out_param_be;
assign main_basesoc_etherbone_record_sender_param_fifo_re = main_basesoc_etherbone_record_sender_param_fifo_source_ready;
assign main_basesoc_etherbone_record_sender_param_fifo_syncfifo_re = (main_basesoc_etherbone_record_sender_param_fifo_syncfifo_readable & ((~main_basesoc_etherbone_record_sender_param_fifo_readable) | main_basesoc_etherbone_record_sender_param_fifo_re));
assign main_basesoc_etherbone_record_sender_param_fifo_level1 = (main_basesoc_etherbone_record_sender_param_fifo_level0 + main_basesoc_etherbone_record_sender_param_fifo_readable);
always @(*) begin
    main_basesoc_etherbone_record_sender_param_fifo_wrport_adr <= 1'd0;
    if (main_basesoc_etherbone_record_sender_param_fifo_replace) begin
        main_basesoc_etherbone_record_sender_param_fifo_wrport_adr <= (main_basesoc_etherbone_record_sender_param_fifo_produce - 1'd1);
    end else begin
        main_basesoc_etherbone_record_sender_param_fifo_wrport_adr <= main_basesoc_etherbone_record_sender_param_fifo_produce;
    end
end
assign main_basesoc_etherbone_record_sender_param_fifo_wrport_dat_w = main_basesoc_etherbone_record_sender_param_fifo_syncfifo_din;
assign main_basesoc_etherbone_record_sender_param_fifo_wrport_we = (main_basesoc_etherbone_record_sender_param_fifo_syncfifo_we & (main_basesoc_etherbone_record_sender_param_fifo_syncfifo_writable | main_basesoc_etherbone_record_sender_param_fifo_replace));
assign main_basesoc_etherbone_record_sender_param_fifo_do_read = (main_basesoc_etherbone_record_sender_param_fifo_syncfifo_readable & main_basesoc_etherbone_record_sender_param_fifo_syncfifo_re);
assign main_basesoc_etherbone_record_sender_param_fifo_rdport_adr = main_basesoc_etherbone_record_sender_param_fifo_consume;
assign main_basesoc_etherbone_record_sender_param_fifo_syncfifo_dout = main_basesoc_etherbone_record_sender_param_fifo_rdport_dat_r;
assign main_basesoc_etherbone_record_sender_param_fifo_rdport_re = main_basesoc_etherbone_record_sender_param_fifo_do_read;
assign main_basesoc_etherbone_record_sender_param_fifo_syncfifo_writable = (main_basesoc_etherbone_record_sender_param_fifo_level0 != 2'd2);
assign main_basesoc_etherbone_record_sender_param_fifo_syncfifo_readable = (main_basesoc_etherbone_record_sender_param_fifo_level0 != 1'd0);
always @(*) begin
    builder_liteethetherbonerecordsender_next_state <= 2'd0;
    main_basesoc_etherbone_record_sender_source_last <= 1'd0;
    main_basesoc_etherbone_record_sender_source_payload_data <= 32'd0;
    main_basesoc_etherbone_record_sender_source_payload_last_be <= 4'd0;
    main_basesoc_etherbone_record_sender_source_source_ready <= 1'd0;
    main_basesoc_etherbone_record_sender_source_valid <= 1'd0;
    builder_liteethetherbonerecordsender_next_state <= builder_liteethetherbonerecordsender_state;
    case (builder_liteethetherbonerecordsender_state)
        1'd1: begin
            main_basesoc_etherbone_record_sender_source_valid <= 1'd1;
            main_basesoc_etherbone_record_sender_source_last <= 1'd0;
            main_basesoc_etherbone_record_sender_source_payload_data <= main_basesoc_etherbone_record_sender_source_source_param_base_addr;
            if (main_basesoc_etherbone_record_sender_source_ready) begin
                builder_liteethetherbonerecordsender_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_basesoc_etherbone_record_sender_source_valid <= 1'd1;
            main_basesoc_etherbone_record_sender_source_last <= main_basesoc_etherbone_record_sender_source_source_last;
            main_basesoc_etherbone_record_sender_source_payload_last_be <= main_basesoc_etherbone_record_sender_source_source_payload_last_be;
            main_basesoc_etherbone_record_sender_source_payload_data <= main_basesoc_etherbone_record_sender_source_source_payload_data;
            if ((main_basesoc_etherbone_record_sender_source_valid & main_basesoc_etherbone_record_sender_source_ready)) begin
                main_basesoc_etherbone_record_sender_source_source_ready <= 1'd1;
                if (main_basesoc_etherbone_record_sender_source_last) begin
                    builder_liteethetherbonerecordsender_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (main_basesoc_etherbone_record_sender_source_source_valid) begin
                builder_liteethetherbonerecordsender_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    main_basesoc_etherbone_record_packetizer_header <= 32'd0;
    main_basesoc_etherbone_record_packetizer_header[0] <= {main_basesoc_etherbone_record_packetizer_sink_param_bca};
    main_basesoc_etherbone_record_packetizer_header[15:8] <= {main_basesoc_etherbone_record_packetizer_sink_param_byte_enable};
    main_basesoc_etherbone_record_packetizer_header[4] <= {main_basesoc_etherbone_record_packetizer_sink_param_cyc};
    main_basesoc_etherbone_record_packetizer_header[1] <= {main_basesoc_etherbone_record_packetizer_sink_param_rca};
    main_basesoc_etherbone_record_packetizer_header[31:24] <= {main_basesoc_etherbone_record_packetizer_sink_param_rcount};
    main_basesoc_etherbone_record_packetizer_header[2] <= {main_basesoc_etherbone_record_packetizer_sink_param_rff};
    main_basesoc_etherbone_record_packetizer_header[5] <= {main_basesoc_etherbone_record_packetizer_sink_param_wca};
    main_basesoc_etherbone_record_packetizer_header[23:16] <= {main_basesoc_etherbone_record_packetizer_sink_param_wcount};
    main_basesoc_etherbone_record_packetizer_header[6] <= {main_basesoc_etherbone_record_packetizer_sink_param_wff};
end
assign main_basesoc_etherbone_record_packetizer_new_last_be = {main_basesoc_etherbone_record_packetizer_sink_payload_last_be[3], main_basesoc_etherbone_record_packetizer_sink_payload_last_be[2], main_basesoc_etherbone_record_packetizer_sink_payload_last_be[1], main_basesoc_etherbone_record_packetizer_sink_payload_last_be[0]};
assign main_basesoc_etherbone_record_packetizer_in_data_copy = (main_basesoc_etherbone_record_packetizer_is_ongoing0 | main_basesoc_etherbone_record_packetizer_is_ongoing1);
always @(*) begin
    main_basesoc_etherbone_record_packetizer_source_last <= 1'd0;
    if (main_basesoc_etherbone_record_packetizer_source_last_s) begin
        main_basesoc_etherbone_record_packetizer_source_last <= main_basesoc_etherbone_record_packetizer_source_last_b;
    end else begin
        main_basesoc_etherbone_record_packetizer_source_last <= main_basesoc_etherbone_record_packetizer_source_last_a;
    end
end
assign main_basesoc_etherbone_record_packetizer_source_payload_error = main_basesoc_etherbone_record_packetizer_sink_payload_error;
always @(*) begin
    builder_fsm0_next_state1 <= 2'd0;
    builder_fsm1_next_state1 <= 1'd0;
    main_basesoc_etherbone_record_packetizer_count_liteethetherbone_fsm0_next_value6 <= 1'd0;
    main_basesoc_etherbone_record_packetizer_count_liteethetherbone_fsm0_next_value_ce6 <= 1'd0;
    main_basesoc_etherbone_record_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value3 <= 4'd0;
    main_basesoc_etherbone_record_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce3 <= 1'd0;
    main_basesoc_etherbone_record_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value7 <= 1'd0;
    main_basesoc_etherbone_record_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce7 <= 1'd0;
    main_basesoc_etherbone_record_packetizer_is_ongoing0 <= 1'd0;
    main_basesoc_etherbone_record_packetizer_is_ongoing1 <= 1'd0;
    main_basesoc_etherbone_record_packetizer_is_ongoing2 <= 1'd0;
    main_basesoc_etherbone_record_packetizer_sink_ready <= 1'd0;
    main_basesoc_etherbone_record_packetizer_source_last_a <= 1'd0;
    main_basesoc_etherbone_record_packetizer_source_last_b <= 1'd0;
    main_basesoc_etherbone_record_packetizer_source_last_s <= 1'd0;
    main_basesoc_etherbone_record_packetizer_source_payload_data <= 32'd0;
    main_basesoc_etherbone_record_packetizer_source_payload_last_be <= 4'd0;
    main_basesoc_etherbone_record_packetizer_source_valid <= 1'd0;
    main_basesoc_etherbone_record_packetizer_sr_load <= 1'd0;
    main_basesoc_etherbone_record_packetizer_sr_shift <= 1'd0;
    builder_fsm0_next_state1 <= builder_fsm0_state1;
    case (builder_fsm0_state1)
        1'd1: begin
            main_basesoc_etherbone_record_packetizer_source_valid <= 1'd1;
            main_basesoc_etherbone_record_packetizer_source_last_a <= 1'd0;
            main_basesoc_etherbone_record_packetizer_source_payload_data <= main_basesoc_etherbone_record_packetizer_sr[31];
            if ((main_basesoc_etherbone_record_packetizer_source_valid & main_basesoc_etherbone_record_packetizer_source_ready)) begin
                main_basesoc_etherbone_record_packetizer_sr_shift <= 1'd1;
                if ((main_basesoc_etherbone_record_packetizer_count == 1'd0)) begin
                    main_basesoc_etherbone_record_packetizer_sr_shift <= 1'd0;
                    builder_fsm0_next_state1 <= 2'd2;
                    main_basesoc_etherbone_record_packetizer_count_liteethetherbone_fsm0_next_value6 <= (main_basesoc_etherbone_record_packetizer_count + 1'd1);
                    main_basesoc_etherbone_record_packetizer_count_liteethetherbone_fsm0_next_value_ce6 <= 1'd1;
                end else begin
                    main_basesoc_etherbone_record_packetizer_count_liteethetherbone_fsm0_next_value6 <= (main_basesoc_etherbone_record_packetizer_count + 1'd1);
                    main_basesoc_etherbone_record_packetizer_count_liteethetherbone_fsm0_next_value_ce6 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_etherbone_record_packetizer_source_valid <= main_basesoc_etherbone_record_packetizer_sink_valid;
            main_basesoc_etherbone_record_packetizer_source_last_a <= main_basesoc_etherbone_record_packetizer_sink_last;
            main_basesoc_etherbone_record_packetizer_source_payload_data <= main_basesoc_etherbone_record_packetizer_sink_payload_data;
            if ((main_basesoc_etherbone_record_packetizer_source_valid & main_basesoc_etherbone_record_packetizer_source_ready)) begin
                main_basesoc_etherbone_record_packetizer_sink_ready <= 1'd1;
                if (main_basesoc_etherbone_record_packetizer_source_last) begin
                    builder_fsm0_next_state1 <= 1'd0;
                end
            end
            main_basesoc_etherbone_record_packetizer_is_ongoing0 <= 1'd1;
        end
        2'd3: begin
            main_basesoc_etherbone_record_packetizer_is_ongoing1 <= 1'd1;
        end
        default: begin
            main_basesoc_etherbone_record_packetizer_sink_ready <= 1'd1;
            main_basesoc_etherbone_record_packetizer_count_liteethetherbone_fsm0_next_value6 <= 1'd1;
            main_basesoc_etherbone_record_packetizer_count_liteethetherbone_fsm0_next_value_ce6 <= 1'd1;
            if (main_basesoc_etherbone_record_packetizer_sink_valid) begin
                main_basesoc_etherbone_record_packetizer_sink_ready <= 1'd0;
                main_basesoc_etherbone_record_packetizer_source_valid <= 1'd1;
                main_basesoc_etherbone_record_packetizer_source_last_a <= 1'd0;
                main_basesoc_etherbone_record_packetizer_source_payload_data <= main_basesoc_etherbone_record_packetizer_header;
                if ((main_basesoc_etherbone_record_packetizer_source_valid & main_basesoc_etherbone_record_packetizer_source_ready)) begin
                    main_basesoc_etherbone_record_packetizer_sr_load <= 1'd1;
                    main_basesoc_etherbone_record_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value7 <= 1'd1;
                    main_basesoc_etherbone_record_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce7 <= 1'd1;
                    if (1'd1) begin
                        builder_fsm0_next_state1 <= 2'd2;
                    end else begin
                        builder_fsm0_next_state1 <= 1'd1;
                    end
                end
            end
            main_basesoc_etherbone_record_packetizer_is_ongoing2 <= 1'd1;
        end
    endcase
    builder_fsm1_next_state1 <= builder_fsm1_state1;
    case (builder_fsm1_state1)
        1'd1: begin
            main_basesoc_etherbone_record_packetizer_source_last_b <= 1'd1;
            main_basesoc_etherbone_record_packetizer_source_last_s <= 1'd1;
            main_basesoc_etherbone_record_packetizer_source_payload_last_be <= main_basesoc_etherbone_record_packetizer_delayed_last_be;
            main_basesoc_etherbone_record_packetizer_sink_ready <= 1'd0;
            if (main_basesoc_etherbone_record_packetizer_source_ready) begin
                builder_fsm1_next_state1 <= 1'd0;
            end
        end
        default: begin
            if (((main_basesoc_etherbone_record_packetizer_in_data_copy & main_basesoc_etherbone_record_packetizer_sink_last) & (main_basesoc_etherbone_record_packetizer_sink_payload_last_be > main_basesoc_etherbone_record_packetizer_new_last_be))) begin
                main_basesoc_etherbone_record_packetizer_source_last_b <= 1'd0;
                main_basesoc_etherbone_record_packetizer_source_last_s <= 1'd1;
                main_basesoc_etherbone_record_packetizer_source_payload_last_be <= 1'd0;
                if ((main_basesoc_etherbone_record_packetizer_source_ready & main_basesoc_etherbone_record_packetizer_source_valid)) begin
                    main_basesoc_etherbone_record_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value3 <= main_basesoc_etherbone_record_packetizer_new_last_be;
                    main_basesoc_etherbone_record_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce3 <= 1'd1;
                    builder_fsm1_next_state1 <= 1'd1;
                end
            end else begin
                if (main_basesoc_etherbone_record_packetizer_in_data_copy) begin
                    main_basesoc_etherbone_record_packetizer_source_last_b <= main_basesoc_etherbone_record_packetizer_sink_last;
                    main_basesoc_etherbone_record_packetizer_source_last_s <= 1'd1;
                    main_basesoc_etherbone_record_packetizer_source_payload_last_be <= main_basesoc_etherbone_record_packetizer_new_last_be;
                end
            end
            if (main_basesoc_etherbone_record_packetizer_in_data_copy) begin
                main_basesoc_etherbone_record_packetizer_sink_ready <= main_basesoc_etherbone_record_packetizer_source_ready;
            end else begin
                if (main_basesoc_etherbone_record_packetizer_is_ongoing2) begin
                    main_basesoc_etherbone_record_packetizer_sink_ready <= (~main_basesoc_etherbone_record_packetizer_sink_valid);
                end
            end
        end
    endcase
end
always @(*) begin
    main_basesoc_etherbone_dispatcher_sel1 <= 1'd0;
    if (main_basesoc_etherbone_dispatcher_first) begin
        main_basesoc_etherbone_dispatcher_sel1 <= main_basesoc_etherbone_dispatcher_sel0;
    end else begin
        main_basesoc_etherbone_dispatcher_sel1 <= main_basesoc_etherbone_dispatcher_sel_ongoing;
    end
end
always @(*) begin
    main_basesoc_etherbone_probe_sink_first <= 1'd0;
    main_basesoc_etherbone_probe_sink_last <= 1'd0;
    main_basesoc_etherbone_probe_sink_param_addr_size <= 4'd0;
    main_basesoc_etherbone_probe_sink_param_dst_port <= 16'd0;
    main_basesoc_etherbone_probe_sink_param_ip_address <= 32'd0;
    main_basesoc_etherbone_probe_sink_param_length <= 16'd0;
    main_basesoc_etherbone_probe_sink_param_nr <= 1'd0;
    main_basesoc_etherbone_probe_sink_param_pf <= 1'd0;
    main_basesoc_etherbone_probe_sink_param_port_size <= 4'd0;
    main_basesoc_etherbone_probe_sink_param_pr <= 1'd0;
    main_basesoc_etherbone_probe_sink_param_src_port <= 16'd0;
    main_basesoc_etherbone_probe_sink_payload_data <= 32'd0;
    main_basesoc_etherbone_probe_sink_payload_error <= 4'd0;
    main_basesoc_etherbone_probe_sink_payload_last_be <= 4'd0;
    main_basesoc_etherbone_probe_sink_valid <= 1'd0;
    main_basesoc_etherbone_record_sink_sink_first <= 1'd0;
    main_basesoc_etherbone_record_sink_sink_last <= 1'd0;
    main_basesoc_etherbone_record_sink_sink_param_addr_size <= 4'd0;
    main_basesoc_etherbone_record_sink_sink_param_dst_port <= 16'd0;
    main_basesoc_etherbone_record_sink_sink_param_ip_address <= 32'd0;
    main_basesoc_etherbone_record_sink_sink_param_length <= 16'd0;
    main_basesoc_etherbone_record_sink_sink_param_nr <= 1'd0;
    main_basesoc_etherbone_record_sink_sink_param_pf <= 1'd0;
    main_basesoc_etherbone_record_sink_sink_param_port_size <= 4'd0;
    main_basesoc_etherbone_record_sink_sink_param_pr <= 1'd0;
    main_basesoc_etherbone_record_sink_sink_param_src_port <= 16'd0;
    main_basesoc_etherbone_record_sink_sink_payload_data <= 32'd0;
    main_basesoc_etherbone_record_sink_sink_payload_error <= 4'd0;
    main_basesoc_etherbone_record_sink_sink_payload_last_be <= 4'd0;
    main_basesoc_etherbone_record_sink_sink_valid <= 1'd0;
    main_basesoc_etherbone_rx_source_source_ready <= 1'd0;
    case (main_basesoc_etherbone_dispatcher_sel1)
        1'd0: begin
            main_basesoc_etherbone_probe_sink_valid <= main_basesoc_etherbone_rx_source_source_valid;
            main_basesoc_etherbone_rx_source_source_ready <= main_basesoc_etherbone_probe_sink_ready;
            main_basesoc_etherbone_probe_sink_first <= main_basesoc_etherbone_rx_source_source_first;
            main_basesoc_etherbone_probe_sink_last <= main_basesoc_etherbone_rx_source_source_last;
            main_basesoc_etherbone_probe_sink_payload_data <= main_basesoc_etherbone_rx_source_source_payload_data;
            main_basesoc_etherbone_probe_sink_payload_last_be <= main_basesoc_etherbone_rx_source_source_payload_last_be;
            main_basesoc_etherbone_probe_sink_payload_error <= main_basesoc_etherbone_rx_source_source_payload_error;
            main_basesoc_etherbone_probe_sink_param_addr_size <= main_basesoc_etherbone_rx_source_source_param_addr_size;
            main_basesoc_etherbone_probe_sink_param_nr <= main_basesoc_etherbone_rx_source_source_param_nr;
            main_basesoc_etherbone_probe_sink_param_pf <= main_basesoc_etherbone_rx_source_source_param_pf;
            main_basesoc_etherbone_probe_sink_param_port_size <= main_basesoc_etherbone_rx_source_source_param_port_size;
            main_basesoc_etherbone_probe_sink_param_pr <= main_basesoc_etherbone_rx_source_source_param_pr;
            main_basesoc_etherbone_probe_sink_param_src_port <= main_basesoc_etherbone_rx_source_source_param_src_port;
            main_basesoc_etherbone_probe_sink_param_dst_port <= main_basesoc_etherbone_rx_source_source_param_dst_port;
            main_basesoc_etherbone_probe_sink_param_ip_address <= main_basesoc_etherbone_rx_source_source_param_ip_address;
            main_basesoc_etherbone_probe_sink_param_length <= main_basesoc_etherbone_rx_source_source_param_length;
        end
        1'd1: begin
            main_basesoc_etherbone_record_sink_sink_valid <= main_basesoc_etherbone_rx_source_source_valid;
            main_basesoc_etherbone_rx_source_source_ready <= main_basesoc_etherbone_record_sink_sink_ready;
            main_basesoc_etherbone_record_sink_sink_first <= main_basesoc_etherbone_rx_source_source_first;
            main_basesoc_etherbone_record_sink_sink_last <= main_basesoc_etherbone_rx_source_source_last;
            main_basesoc_etherbone_record_sink_sink_payload_data <= main_basesoc_etherbone_rx_source_source_payload_data;
            main_basesoc_etherbone_record_sink_sink_payload_last_be <= main_basesoc_etherbone_rx_source_source_payload_last_be;
            main_basesoc_etherbone_record_sink_sink_payload_error <= main_basesoc_etherbone_rx_source_source_payload_error;
            main_basesoc_etherbone_record_sink_sink_param_addr_size <= main_basesoc_etherbone_rx_source_source_param_addr_size;
            main_basesoc_etherbone_record_sink_sink_param_nr <= main_basesoc_etherbone_rx_source_source_param_nr;
            main_basesoc_etherbone_record_sink_sink_param_pf <= main_basesoc_etherbone_rx_source_source_param_pf;
            main_basesoc_etherbone_record_sink_sink_param_port_size <= main_basesoc_etherbone_rx_source_source_param_port_size;
            main_basesoc_etherbone_record_sink_sink_param_pr <= main_basesoc_etherbone_rx_source_source_param_pr;
            main_basesoc_etherbone_record_sink_sink_param_src_port <= main_basesoc_etherbone_rx_source_source_param_src_port;
            main_basesoc_etherbone_record_sink_sink_param_dst_port <= main_basesoc_etherbone_rx_source_source_param_dst_port;
            main_basesoc_etherbone_record_sink_sink_param_ip_address <= main_basesoc_etherbone_rx_source_source_param_ip_address;
            main_basesoc_etherbone_record_sink_sink_param_length <= main_basesoc_etherbone_rx_source_source_param_length;
        end
        default: begin
            main_basesoc_etherbone_rx_source_source_ready <= 1'd1;
        end
    endcase
end
assign main_basesoc_etherbone_dispatcher_last = ((main_basesoc_etherbone_rx_source_source_valid & main_basesoc_etherbone_rx_source_source_last) & main_basesoc_etherbone_rx_source_source_ready);
assign main_basesoc_etherbone_dispatcher_ongoing0 = ((main_basesoc_etherbone_rx_source_source_valid | main_basesoc_etherbone_dispatcher_ongoing1) & (~main_basesoc_etherbone_dispatcher_last));
always @(*) begin
    main_basesoc_etherbone_request <= 2'd0;
    main_basesoc_etherbone_request[0] <= main_basesoc_etherbone_status0_ongoing0;
    main_basesoc_etherbone_request[1] <= main_basesoc_etherbone_status1_ongoing0;
end
always @(*) begin
    main_basesoc_etherbone_probe_source_ready <= 1'd0;
    main_basesoc_etherbone_record_source_source_ready <= 1'd0;
    main_basesoc_etherbone_tx_sink_sink_first <= 1'd0;
    main_basesoc_etherbone_tx_sink_sink_last <= 1'd0;
    main_basesoc_etherbone_tx_sink_sink_param_addr_size <= 4'd0;
    main_basesoc_etherbone_tx_sink_sink_param_dst_port <= 16'd0;
    main_basesoc_etherbone_tx_sink_sink_param_ip_address <= 32'd0;
    main_basesoc_etherbone_tx_sink_sink_param_length <= 16'd0;
    main_basesoc_etherbone_tx_sink_sink_param_nr <= 1'd0;
    main_basesoc_etherbone_tx_sink_sink_param_pf <= 1'd0;
    main_basesoc_etherbone_tx_sink_sink_param_port_size <= 4'd0;
    main_basesoc_etherbone_tx_sink_sink_param_pr <= 1'd0;
    main_basesoc_etherbone_tx_sink_sink_param_src_port <= 16'd0;
    main_basesoc_etherbone_tx_sink_sink_payload_data <= 32'd0;
    main_basesoc_etherbone_tx_sink_sink_payload_error <= 4'd0;
    main_basesoc_etherbone_tx_sink_sink_payload_last_be <= 4'd0;
    main_basesoc_etherbone_tx_sink_sink_valid <= 1'd0;
    case (main_basesoc_etherbone_grant)
        1'd0: begin
            main_basesoc_etherbone_tx_sink_sink_valid <= main_basesoc_etherbone_probe_source_valid;
            main_basesoc_etherbone_probe_source_ready <= main_basesoc_etherbone_tx_sink_sink_ready;
            main_basesoc_etherbone_tx_sink_sink_first <= main_basesoc_etherbone_probe_source_first;
            main_basesoc_etherbone_tx_sink_sink_last <= main_basesoc_etherbone_probe_source_last;
            main_basesoc_etherbone_tx_sink_sink_payload_data <= main_basesoc_etherbone_probe_source_payload_data;
            main_basesoc_etherbone_tx_sink_sink_payload_last_be <= main_basesoc_etherbone_probe_source_payload_last_be;
            main_basesoc_etherbone_tx_sink_sink_payload_error <= main_basesoc_etherbone_probe_source_payload_error;
            main_basesoc_etherbone_tx_sink_sink_param_addr_size <= main_basesoc_etherbone_probe_source_param_addr_size;
            main_basesoc_etherbone_tx_sink_sink_param_nr <= main_basesoc_etherbone_probe_source_param_nr;
            main_basesoc_etherbone_tx_sink_sink_param_pf <= main_basesoc_etherbone_probe_source_param_pf;
            main_basesoc_etherbone_tx_sink_sink_param_port_size <= main_basesoc_etherbone_probe_source_param_port_size;
            main_basesoc_etherbone_tx_sink_sink_param_pr <= main_basesoc_etherbone_probe_source_param_pr;
            main_basesoc_etherbone_tx_sink_sink_param_src_port <= main_basesoc_etherbone_probe_source_param_src_port;
            main_basesoc_etherbone_tx_sink_sink_param_dst_port <= main_basesoc_etherbone_probe_source_param_dst_port;
            main_basesoc_etherbone_tx_sink_sink_param_ip_address <= main_basesoc_etherbone_probe_source_param_ip_address;
            main_basesoc_etherbone_tx_sink_sink_param_length <= main_basesoc_etherbone_probe_source_param_length;
        end
        1'd1: begin
            main_basesoc_etherbone_tx_sink_sink_valid <= main_basesoc_etherbone_record_source_source_valid;
            main_basesoc_etherbone_record_source_source_ready <= main_basesoc_etherbone_tx_sink_sink_ready;
            main_basesoc_etherbone_tx_sink_sink_first <= main_basesoc_etherbone_record_source_source_first;
            main_basesoc_etherbone_tx_sink_sink_last <= main_basesoc_etherbone_record_source_source_last;
            main_basesoc_etherbone_tx_sink_sink_payload_data <= main_basesoc_etherbone_record_source_source_payload_data;
            main_basesoc_etherbone_tx_sink_sink_payload_last_be <= main_basesoc_etherbone_record_source_source_payload_last_be;
            main_basesoc_etherbone_tx_sink_sink_payload_error <= main_basesoc_etherbone_record_source_source_payload_error;
            main_basesoc_etherbone_tx_sink_sink_param_addr_size <= main_basesoc_etherbone_record_source_source_param_addr_size;
            main_basesoc_etherbone_tx_sink_sink_param_nr <= main_basesoc_etherbone_record_source_source_param_nr;
            main_basesoc_etherbone_tx_sink_sink_param_pf <= main_basesoc_etherbone_record_source_source_param_pf;
            main_basesoc_etherbone_tx_sink_sink_param_port_size <= main_basesoc_etherbone_record_source_source_param_port_size;
            main_basesoc_etherbone_tx_sink_sink_param_pr <= main_basesoc_etherbone_record_source_source_param_pr;
            main_basesoc_etherbone_tx_sink_sink_param_src_port <= main_basesoc_etherbone_record_source_source_param_src_port;
            main_basesoc_etherbone_tx_sink_sink_param_dst_port <= main_basesoc_etherbone_record_source_source_param_dst_port;
            main_basesoc_etherbone_tx_sink_sink_param_ip_address <= main_basesoc_etherbone_record_source_source_param_ip_address;
            main_basesoc_etherbone_tx_sink_sink_param_length <= main_basesoc_etherbone_record_source_source_param_length;
        end
    endcase
end
assign main_basesoc_etherbone_status0_last = ((main_basesoc_etherbone_probe_source_valid & main_basesoc_etherbone_probe_source_last) & main_basesoc_etherbone_probe_source_ready);
assign main_basesoc_etherbone_status0_ongoing0 = ((main_basesoc_etherbone_probe_source_valid | main_basesoc_etherbone_status0_ongoing1) & (~main_basesoc_etherbone_status0_last));
assign main_basesoc_etherbone_status1_last = ((main_basesoc_etherbone_record_source_source_valid & main_basesoc_etherbone_record_source_source_last) & main_basesoc_etherbone_record_source_source_ready);
assign main_basesoc_etherbone_status1_ongoing0 = ((main_basesoc_etherbone_record_source_source_valid | main_basesoc_etherbone_status1_ongoing1) & (~main_basesoc_etherbone_status1_last));
always @(*) begin
    builder_liteethetherbonewishbonemaster_next_state <= 2'd0;
    main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_adr <= 30'd0;
    main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_cyc <= 1'd0;
    main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_dat_w <= 32'd0;
    main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_sel <= 4'd0;
    main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_stb <= 1'd0;
    main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_we <= 1'd0;
    main_basesoc_etherbone_liteethetherbonewishbonemaster_data_update <= 1'd0;
    main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_ready <= 1'd0;
    main_basesoc_etherbone_liteethetherbonewishbonemaster_source_last <= 1'd0;
    main_basesoc_etherbone_liteethetherbonewishbonemaster_source_payload_last_be <= 4'd0;
    main_basesoc_etherbone_liteethetherbonewishbonemaster_source_valid <= 1'd0;
    builder_liteethetherbonewishbonemaster_next_state <= builder_liteethetherbonewishbonemaster_state;
    case (builder_liteethetherbonewishbonemaster_state)
        1'd1: begin
            main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_adr <= main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_payload_addr;
            main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_dat_w <= main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_payload_data;
            main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_sel <= main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_param_be;
            main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_stb <= main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_valid;
            main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_we <= 1'd1;
            main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_cyc <= 1'd1;
            if ((main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_stb & main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_ack)) begin
                main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_ready <= 1'd1;
                if (main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_last) begin
                    builder_liteethetherbonewishbonemaster_next_state <= 1'd0;
                end
            end
        end
        2'd2: begin
            main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_adr <= main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_payload_addr;
            main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_sel <= main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_param_be;
            main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_stb <= main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_valid;
            main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_cyc <= 1'd1;
            if ((main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_stb & main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_ack)) begin
                main_basesoc_etherbone_liteethetherbonewishbonemaster_data_update <= 1'd1;
                builder_liteethetherbonewishbonemaster_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_basesoc_etherbone_liteethetherbonewishbonemaster_source_valid <= main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_valid;
            main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_ready <= main_basesoc_etherbone_liteethetherbonewishbonemaster_source_ready;
            main_basesoc_etherbone_liteethetherbonewishbonemaster_source_last <= main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_last;
            main_basesoc_etherbone_liteethetherbonewishbonemaster_source_payload_last_be <= main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_payload_last_be;
            if ((main_basesoc_etherbone_liteethetherbonewishbonemaster_source_valid & main_basesoc_etherbone_liteethetherbonewishbonemaster_source_ready)) begin
                if (main_basesoc_etherbone_liteethetherbonewishbonemaster_source_last) begin
                    builder_liteethetherbonewishbonemaster_next_state <= 1'd0;
                end else begin
                    builder_liteethetherbonewishbonemaster_next_state <= 2'd2;
                end
            end
        end
        default: begin
            main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_ready <= 1'd1;
            if (main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_valid) begin
                main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_ready <= 1'd0;
                if (main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_param_we) begin
                    builder_liteethetherbonewishbonemaster_next_state <= 1'd1;
                end else begin
                    builder_liteethetherbonewishbonemaster_next_state <= 2'd2;
                end
            end
        end
    endcase
end
always @(*) begin
    builder_interface0_ack <= 1'd0;
    builder_interface0_dat_r <= 32'd0;
    builder_interface1_adr_wishbone2csr_next_value1 <= 14'd0;
    builder_interface1_adr_wishbone2csr_next_value_ce1 <= 1'd0;
    builder_interface1_dat_w_wishbone2csr_next_value0 <= 32'd0;
    builder_interface1_dat_w_wishbone2csr_next_value_ce0 <= 1'd0;
    builder_interface1_re_wishbone2csr_next_value2 <= 1'd0;
    builder_interface1_re_wishbone2csr_next_value_ce2 <= 1'd0;
    builder_interface1_we_wishbone2csr_next_value3 <= 1'd0;
    builder_interface1_we_wishbone2csr_next_value_ce3 <= 1'd0;
    builder_wishbone2csr_next_state <= 2'd0;
    builder_wishbone2csr_next_state <= builder_wishbone2csr_state;
    case (builder_wishbone2csr_state)
        1'd1: begin
            builder_interface1_adr_wishbone2csr_next_value1 <= 1'd0;
            builder_interface1_adr_wishbone2csr_next_value_ce1 <= 1'd1;
            builder_interface1_re_wishbone2csr_next_value2 <= 1'd0;
            builder_interface1_re_wishbone2csr_next_value_ce2 <= 1'd1;
            builder_interface1_we_wishbone2csr_next_value3 <= 1'd0;
            builder_interface1_we_wishbone2csr_next_value_ce3 <= 1'd1;
            builder_wishbone2csr_next_state <= 2'd2;
        end
        2'd2: begin
            builder_interface0_ack <= 1'd1;
            builder_interface0_dat_r <= builder_interface1_dat_r;
            builder_wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            builder_interface1_dat_w_wishbone2csr_next_value0 <= builder_interface0_dat_w;
            builder_interface1_dat_w_wishbone2csr_next_value_ce0 <= 1'd1;
            if ((builder_interface0_cyc & builder_interface0_stb)) begin
                builder_interface1_adr_wishbone2csr_next_value1 <= builder_interface0_adr;
                builder_interface1_adr_wishbone2csr_next_value_ce1 <= 1'd1;
                builder_interface1_re_wishbone2csr_next_value2 <= ((~builder_interface0_we) & (builder_interface0_sel != 1'd0));
                builder_interface1_re_wishbone2csr_next_value_ce2 <= 1'd1;
                builder_interface1_we_wishbone2csr_next_value3 <= (builder_interface0_we & (builder_interface0_sel != 1'd0));
                builder_interface1_we_wishbone2csr_next_value_ce3 <= 1'd1;
                builder_wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 5'd22);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_reset0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_scratch0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_bus_errors_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    main_basesoc_basesoc_soc_rst <= 1'd0;
    if (main_basesoc_basesoc_reset_re) begin
        main_basesoc_basesoc_soc_rst <= main_basesoc_basesoc_reset_storage[0];
    end
end
assign main_basesoc_basesoc_cpu_rst = main_basesoc_basesoc_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_basesoc_basesoc_reset_storage;
assign builder_csr_bankarray_csrbank0_scratch0_w = main_basesoc_basesoc_scratch_storage;
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_basesoc_basesoc_bus_errors_status;
assign main_basesoc_basesoc_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 5'd23);
assign builder_csr_bankarray_csrbank1_rst0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_rst0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_rst0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank1_rst0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_rst0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_dly_sel0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[3:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_dly_sel0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_dly_sel0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank1_dly_sel0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_dly_sel0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_half_sys8x_taps0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[4:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_half_sys8x_taps0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_half_sys8x_taps0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank1_half_sys8x_taps0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_half_sys8x_taps0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_wlevel_en0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_wlevel_en0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_wlevel_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank1_wlevel_en0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_wlevel_en0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign main_a7ddrphy_wlevel_strobe_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_a7ddrphy_wlevel_strobe_re <= 1'd0;
    main_a7ddrphy_wlevel_strobe_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        main_a7ddrphy_wlevel_strobe_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_a7ddrphy_wlevel_strobe_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign main_a7ddrphy_rdly_dq_rst_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_a7ddrphy_rdly_dq_rst_re <= 1'd0;
    main_a7ddrphy_rdly_dq_rst_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
        main_a7ddrphy_rdly_dq_rst_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_a7ddrphy_rdly_dq_rst_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign main_a7ddrphy_rdly_dq_inc_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_a7ddrphy_rdly_dq_inc_re <= 1'd0;
    main_a7ddrphy_rdly_dq_inc_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
        main_a7ddrphy_rdly_dq_inc_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_a7ddrphy_rdly_dq_inc_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign main_a7ddrphy_rdly_dq_bitslip_rst_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_a7ddrphy_rdly_dq_bitslip_rst_re <= 1'd0;
    main_a7ddrphy_rdly_dq_bitslip_rst_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
        main_a7ddrphy_rdly_dq_bitslip_rst_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_a7ddrphy_rdly_dq_bitslip_rst_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign main_a7ddrphy_rdly_dq_bitslip_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_a7ddrphy_rdly_dq_bitslip_re <= 1'd0;
    main_a7ddrphy_rdly_dq_bitslip_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd8))) begin
        main_a7ddrphy_rdly_dq_bitslip_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_a7ddrphy_rdly_dq_bitslip_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign main_a7ddrphy_wdly_dq_bitslip_rst_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_a7ddrphy_wdly_dq_bitslip_rst_re <= 1'd0;
    main_a7ddrphy_wdly_dq_bitslip_rst_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd9))) begin
        main_a7ddrphy_wdly_dq_bitslip_rst_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_a7ddrphy_wdly_dq_bitslip_rst_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign main_a7ddrphy_wdly_dq_bitslip_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_a7ddrphy_wdly_dq_bitslip_re <= 1'd0;
    main_a7ddrphy_wdly_dq_bitslip_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd10))) begin
        main_a7ddrphy_wdly_dq_bitslip_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_a7ddrphy_wdly_dq_bitslip_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_rdphase0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_rdphase0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_rdphase0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd11))) begin
        builder_csr_bankarray_csrbank1_rdphase0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_rdphase0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_wrphase0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_wrphase0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_wrphase0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd12))) begin
        builder_csr_bankarray_csrbank1_wrphase0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_wrphase0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_rst0_w = main_a7ddrphy_rst_storage;
assign builder_csr_bankarray_csrbank1_dly_sel0_w = main_a7ddrphy_dly_sel_storage;
assign builder_csr_bankarray_csrbank1_half_sys8x_taps0_w = main_a7ddrphy_half_sys8x_taps_storage;
assign builder_csr_bankarray_csrbank1_wlevel_en0_w = main_a7ddrphy_wlevel_en_storage;
assign builder_csr_bankarray_csrbank1_rdphase0_w = main_a7ddrphy_rdphase_storage;
assign builder_csr_bankarray_csrbank1_wrphase0_w = main_a7ddrphy_wrphase_storage;
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 5'd24);
assign builder_csr_bankarray_csrbank2_crg_reset0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_crg_reset0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_crg_reset0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank2_crg_reset0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_crg_reset0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_mdio_w0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_mdio_w0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_mdio_w0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank2_mdio_w0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_mdio_w0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_mdio_r_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_mdio_r_re <= 1'd0;
    builder_csr_bankarray_csrbank2_mdio_r_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank2_mdio_r_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_mdio_r_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_crg_reset0_w = main_ethphy_reset_storage;
assign main_ethphy_mdc = main_ethphy__w_storage[0];
assign main_ethphy_oe = main_ethphy__w_storage[1];
assign main_ethphy_w = main_ethphy__w_storage[2];
assign builder_csr_bankarray_csrbank2_mdio_w0_w = main_ethphy__w_storage;
assign builder_csr_bankarray_csrbank2_mdio_r_w = main_ethphy__r_status;
assign main_ethphy__r_we = builder_csr_bankarray_csrbank2_mdio_r_we;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 5'd25);
always @(*) begin
    builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (builder_csr_bankarray_sel_r) begin
        builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
    end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 5'd26);
assign builder_csr_bankarray_csrbank3_bypass_en0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_bypass_en0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_bypass_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank3_bypass_en0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_bypass_en0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_mux_sel0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_mux_sel0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_mux_sel0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank3_mux_sel0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_mux_sel0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_method_sel0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_method_sel0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_method_sel0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank3_method_sel0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_method_sel0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_upsample_factor0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[3:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_upsample_factor0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_upsample_factor0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank3_upsample_factor0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_upsample_factor0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_tx_lpf_cutoff0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_tx_lpf_cutoff0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_tx_lpf_cutoff0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank3_tx_lpf_cutoff0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_tx_lpf_cutoff0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_cordic_tx_phase0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[18:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_cordic_tx_phase0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_cordic_tx_phase0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank3_cordic_tx_phase0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_cordic_tx_phase0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_downsample_factor0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[3:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_downsample_factor0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_downsample_factor0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank3_downsample_factor0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_downsample_factor0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_rx_lpf_cutoff0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_rx_lpf_cutoff0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_rx_lpf_cutoff0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank3_rx_lpf_cutoff0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_rx_lpf_cutoff0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_cordic_rx_phase0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[18:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_cordic_rx_phase0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_cordic_rx_phase0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 4'd8))) begin
        builder_csr_bankarray_csrbank3_cordic_rx_phase0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_cordic_rx_phase0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_gain_tx0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_gain_tx0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_gain_tx0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 4'd9))) begin
        builder_csr_bankarray_csrbank3_gain_tx0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_gain_tx0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_gain_rx0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_gain_rx0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_gain_rx0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 4'd10))) begin
        builder_csr_bankarray_csrbank3_gain_rx0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_gain_rx0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_physics_run0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_physics_run0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_physics_run0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 4'd11))) begin
        builder_csr_bankarray_csrbank3_physics_run0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_physics_run0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_physics_busy_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_physics_busy_re <= 1'd0;
    builder_csr_bankarray_csrbank3_physics_busy_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 4'd12))) begin
        builder_csr_bankarray_csrbank3_physics_busy_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_physics_busy_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_hs_dbg_addr0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_hs_dbg_addr0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_hs_dbg_addr0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 4'd13))) begin
        builder_csr_bankarray_csrbank3_hs_dbg_addr0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_hs_dbg_addr0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_hs_dbg_wdata0_r = builder_csr_bankarray_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank3_hs_dbg_wdata0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_hs_dbg_wdata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 4'd14))) begin
        builder_csr_bankarray_csrbank3_hs_dbg_wdata0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_hs_dbg_wdata0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_hs_dbg_rdata_r = builder_csr_bankarray_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank3_hs_dbg_rdata_re <= 1'd0;
    builder_csr_bankarray_csrbank3_hs_dbg_rdata_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 4'd15))) begin
        builder_csr_bankarray_csrbank3_hs_dbg_rdata_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_hs_dbg_rdata_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_ls_dbg_addr0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ls_dbg_addr0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ls_dbg_addr0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 5'd16))) begin
        builder_csr_bankarray_csrbank3_ls_dbg_addr0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ls_dbg_addr0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_ls_dbg_wdata0_r = builder_csr_bankarray_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank3_ls_dbg_wdata0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ls_dbg_wdata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 5'd17))) begin
        builder_csr_bankarray_csrbank3_ls_dbg_wdata0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ls_dbg_wdata0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_ls_dbg_rdata_r = builder_csr_bankarray_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank3_ls_dbg_rdata_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ls_dbg_rdata_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 5'd18))) begin
        builder_csr_bankarray_csrbank3_ls_dbg_rdata_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ls_dbg_rdata_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_sd_cmd0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_sd_cmd0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_sd_cmd0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 5'd19))) begin
        builder_csr_bankarray_csrbank3_sd_cmd0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_sd_cmd0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_sd_status_r = builder_csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_sd_status_re <= 1'd0;
    builder_csr_bankarray_csrbank3_sd_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 5'd20))) begin
        builder_csr_bankarray_csrbank3_sd_status_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_sd_status_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_phase_inc0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[18:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_phase_inc0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_phase_inc0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 5'd21))) begin
        builder_csr_bankarray_csrbank3_phase_inc0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_phase_inc0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_bypass_en0_w = main_bypass_en_storage;
assign builder_csr_bankarray_csrbank3_mux_sel0_w = main_mux_sel_storage;
assign builder_csr_bankarray_csrbank3_method_sel0_w = main_method_sel_storage;
assign builder_csr_bankarray_csrbank3_upsample_factor0_w = main_upsample_factor_storage;
assign builder_csr_bankarray_csrbank3_tx_lpf_cutoff0_w = main_tx_lpf_cutoff_storage;
assign builder_csr_bankarray_csrbank3_cordic_tx_phase0_w = main_cordic_tx_phase_storage;
assign builder_csr_bankarray_csrbank3_downsample_factor0_w = main_downsample_factor_storage;
assign builder_csr_bankarray_csrbank3_rx_lpf_cutoff0_w = main_rx_lpf_cutoff_storage;
assign builder_csr_bankarray_csrbank3_cordic_rx_phase0_w = main_cordic_rx_phase_storage;
assign builder_csr_bankarray_csrbank3_gain_tx0_w = main_gain_tx_storage;
assign builder_csr_bankarray_csrbank3_gain_rx0_w = main_gain_rx_storage;
assign builder_csr_bankarray_csrbank3_physics_run0_w = main_physics_run_storage;
assign builder_csr_bankarray_csrbank3_physics_busy_w = main_physics_busy_status;
assign main_physics_busy_we = builder_csr_bankarray_csrbank3_physics_busy_we;
assign builder_csr_bankarray_csrbank3_hs_dbg_addr0_w = main_hs_dbg_addr_storage;
assign builder_csr_bankarray_csrbank3_hs_dbg_wdata0_w = main_hs_dbg_wdata_storage;
assign builder_csr_bankarray_csrbank3_hs_dbg_rdata_w = main_hs_dbg_rdata_status;
assign main_hs_dbg_rdata_we = builder_csr_bankarray_csrbank3_hs_dbg_rdata_we;
assign builder_csr_bankarray_csrbank3_ls_dbg_addr0_w = main_ls_dbg_addr_storage;
assign builder_csr_bankarray_csrbank3_ls_dbg_wdata0_w = main_ls_dbg_wdata_storage;
assign builder_csr_bankarray_csrbank3_ls_dbg_rdata_w = main_ls_dbg_rdata_status;
assign main_ls_dbg_rdata_we = builder_csr_bankarray_csrbank3_ls_dbg_rdata_we;
assign builder_csr_bankarray_csrbank3_sd_cmd0_w = main_sd_cmd_storage;
assign builder_csr_bankarray_csrbank3_sd_status_w = main_sd_status_status;
assign main_sd_status_we = builder_csr_bankarray_csrbank3_sd_status_we;
assign builder_csr_bankarray_csrbank3_phase_inc0_w = main_phase_inc_storage;
assign builder_csr_bankarray_csrbank4_sel = (builder_csr_bankarray_interface4_bank_bus_adr[13:9] == 5'd27);
assign builder_csr_bankarray_csrbank4_dfii_control0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[3:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_control0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_control0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank4_dfii_control0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_control0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi0_command0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi0_command0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi0_command0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank4_dfii_pi0_command0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi0_command0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign main_basesoc_sdram_phaseinjector0_command_issue_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    main_basesoc_sdram_phaseinjector0_command_issue_re <= 1'd0;
    main_basesoc_sdram_phaseinjector0_command_issue_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        main_basesoc_sdram_phaseinjector0_command_issue_re <= builder_csr_bankarray_interface4_bank_bus_we;
        main_basesoc_sdram_phaseinjector0_command_issue_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi0_address0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[14:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi0_address0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi0_address0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank4_dfii_pi0_address0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi0_address0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi0_baddress0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi0_baddress0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi0_baddress0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank4_dfii_pi0_baddress0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi0_baddress0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi0_wrdata1_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi0_wrdata1_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi0_wrdata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank4_dfii_pi0_wrdata1_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi0_wrdata1_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi0_wrdata0_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi0_wrdata0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi0_wrdata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank4_dfii_pi0_wrdata0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi0_wrdata0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi0_rddata1_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi0_rddata1_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi0_rddata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank4_dfii_pi0_rddata1_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi0_rddata1_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi0_rddata0_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi0_rddata0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi0_rddata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd8))) begin
        builder_csr_bankarray_csrbank4_dfii_pi0_rddata0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi0_rddata0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi1_command0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi1_command0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi1_command0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd9))) begin
        builder_csr_bankarray_csrbank4_dfii_pi1_command0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi1_command0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign main_basesoc_sdram_phaseinjector1_command_issue_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    main_basesoc_sdram_phaseinjector1_command_issue_re <= 1'd0;
    main_basesoc_sdram_phaseinjector1_command_issue_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd10))) begin
        main_basesoc_sdram_phaseinjector1_command_issue_re <= builder_csr_bankarray_interface4_bank_bus_we;
        main_basesoc_sdram_phaseinjector1_command_issue_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi1_address0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[14:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi1_address0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi1_address0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd11))) begin
        builder_csr_bankarray_csrbank4_dfii_pi1_address0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi1_address0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi1_baddress0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi1_baddress0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi1_baddress0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd12))) begin
        builder_csr_bankarray_csrbank4_dfii_pi1_baddress0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi1_baddress0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi1_wrdata1_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi1_wrdata1_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi1_wrdata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd13))) begin
        builder_csr_bankarray_csrbank4_dfii_pi1_wrdata1_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi1_wrdata1_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi1_wrdata0_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi1_wrdata0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi1_wrdata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd14))) begin
        builder_csr_bankarray_csrbank4_dfii_pi1_wrdata0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi1_wrdata0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi1_rddata1_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi1_rddata1_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi1_rddata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd15))) begin
        builder_csr_bankarray_csrbank4_dfii_pi1_rddata1_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi1_rddata1_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi1_rddata0_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi1_rddata0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi1_rddata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd16))) begin
        builder_csr_bankarray_csrbank4_dfii_pi1_rddata0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi1_rddata0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi2_command0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi2_command0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi2_command0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd17))) begin
        builder_csr_bankarray_csrbank4_dfii_pi2_command0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi2_command0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign main_basesoc_sdram_phaseinjector2_command_issue_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    main_basesoc_sdram_phaseinjector2_command_issue_re <= 1'd0;
    main_basesoc_sdram_phaseinjector2_command_issue_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd18))) begin
        main_basesoc_sdram_phaseinjector2_command_issue_re <= builder_csr_bankarray_interface4_bank_bus_we;
        main_basesoc_sdram_phaseinjector2_command_issue_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi2_address0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[14:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi2_address0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi2_address0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd19))) begin
        builder_csr_bankarray_csrbank4_dfii_pi2_address0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi2_address0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi2_baddress0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi2_baddress0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi2_baddress0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd20))) begin
        builder_csr_bankarray_csrbank4_dfii_pi2_baddress0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi2_baddress0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi2_wrdata1_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi2_wrdata1_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi2_wrdata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd21))) begin
        builder_csr_bankarray_csrbank4_dfii_pi2_wrdata1_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi2_wrdata1_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi2_wrdata0_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi2_wrdata0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi2_wrdata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd22))) begin
        builder_csr_bankarray_csrbank4_dfii_pi2_wrdata0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi2_wrdata0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi2_rddata1_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi2_rddata1_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi2_rddata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd23))) begin
        builder_csr_bankarray_csrbank4_dfii_pi2_rddata1_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi2_rddata1_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi2_rddata0_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi2_rddata0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi2_rddata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd24))) begin
        builder_csr_bankarray_csrbank4_dfii_pi2_rddata0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi2_rddata0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi3_command0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi3_command0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi3_command0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd25))) begin
        builder_csr_bankarray_csrbank4_dfii_pi3_command0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi3_command0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign main_basesoc_sdram_phaseinjector3_command_issue_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    main_basesoc_sdram_phaseinjector3_command_issue_re <= 1'd0;
    main_basesoc_sdram_phaseinjector3_command_issue_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd26))) begin
        main_basesoc_sdram_phaseinjector3_command_issue_re <= builder_csr_bankarray_interface4_bank_bus_we;
        main_basesoc_sdram_phaseinjector3_command_issue_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi3_address0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[14:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi3_address0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi3_address0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd27))) begin
        builder_csr_bankarray_csrbank4_dfii_pi3_address0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi3_address0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi3_baddress0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi3_baddress0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi3_baddress0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd28))) begin
        builder_csr_bankarray_csrbank4_dfii_pi3_baddress0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi3_baddress0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi3_wrdata1_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi3_wrdata1_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi3_wrdata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd29))) begin
        builder_csr_bankarray_csrbank4_dfii_pi3_wrdata1_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi3_wrdata1_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi3_wrdata0_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi3_wrdata0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi3_wrdata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd30))) begin
        builder_csr_bankarray_csrbank4_dfii_pi3_wrdata0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi3_wrdata0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi3_rddata1_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi3_rddata1_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi3_rddata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd31))) begin
        builder_csr_bankarray_csrbank4_dfii_pi3_rddata1_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi3_rddata1_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_dfii_pi3_rddata0_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_dfii_pi3_rddata0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_dfii_pi3_rddata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 6'd32))) begin
        builder_csr_bankarray_csrbank4_dfii_pi3_rddata0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_dfii_pi3_rddata0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign main_basesoc_sdram_sel = main_basesoc_sdram_storage[0];
assign main_basesoc_sdram_cke = main_basesoc_sdram_storage[1];
assign main_basesoc_sdram_odt = main_basesoc_sdram_storage[2];
assign main_basesoc_sdram_reset_n = main_basesoc_sdram_storage[3];
assign builder_csr_bankarray_csrbank4_dfii_control0_w = main_basesoc_sdram_storage;
assign main_basesoc_sdram_phaseinjector0_csrfield_cs = main_basesoc_sdram_phaseinjector0_command_storage[0];
assign main_basesoc_sdram_phaseinjector0_csrfield_we = main_basesoc_sdram_phaseinjector0_command_storage[1];
assign main_basesoc_sdram_phaseinjector0_csrfield_cas = main_basesoc_sdram_phaseinjector0_command_storage[2];
assign main_basesoc_sdram_phaseinjector0_csrfield_ras = main_basesoc_sdram_phaseinjector0_command_storage[3];
assign main_basesoc_sdram_phaseinjector0_csrfield_wren = main_basesoc_sdram_phaseinjector0_command_storage[4];
assign main_basesoc_sdram_phaseinjector0_csrfield_rden = main_basesoc_sdram_phaseinjector0_command_storage[5];
assign main_basesoc_sdram_phaseinjector0_csrfield_cs_top = main_basesoc_sdram_phaseinjector0_command_storage[6];
assign main_basesoc_sdram_phaseinjector0_csrfield_cs_bottom = main_basesoc_sdram_phaseinjector0_command_storage[7];
assign builder_csr_bankarray_csrbank4_dfii_pi0_command0_w = main_basesoc_sdram_phaseinjector0_command_storage;
assign builder_csr_bankarray_csrbank4_dfii_pi0_address0_w = main_basesoc_sdram_phaseinjector0_address_storage;
assign builder_csr_bankarray_csrbank4_dfii_pi0_baddress0_w = main_basesoc_sdram_phaseinjector0_baddress_storage;
assign builder_csr_bankarray_csrbank4_dfii_pi0_wrdata1_w = main_basesoc_sdram_phaseinjector0_wrdata_storage[63:32];
assign builder_csr_bankarray_csrbank4_dfii_pi0_wrdata0_w = main_basesoc_sdram_phaseinjector0_wrdata_storage[31:0];
assign builder_csr_bankarray_csrbank4_dfii_pi0_rddata1_w = main_basesoc_sdram_phaseinjector0_rddata_status[63:32];
assign builder_csr_bankarray_csrbank4_dfii_pi0_rddata0_w = main_basesoc_sdram_phaseinjector0_rddata_status[31:0];
assign main_basesoc_sdram_phaseinjector0_rddata_we = builder_csr_bankarray_csrbank4_dfii_pi0_rddata0_we;
assign main_basesoc_sdram_phaseinjector1_csrfield_cs = main_basesoc_sdram_phaseinjector1_command_storage[0];
assign main_basesoc_sdram_phaseinjector1_csrfield_we = main_basesoc_sdram_phaseinjector1_command_storage[1];
assign main_basesoc_sdram_phaseinjector1_csrfield_cas = main_basesoc_sdram_phaseinjector1_command_storage[2];
assign main_basesoc_sdram_phaseinjector1_csrfield_ras = main_basesoc_sdram_phaseinjector1_command_storage[3];
assign main_basesoc_sdram_phaseinjector1_csrfield_wren = main_basesoc_sdram_phaseinjector1_command_storage[4];
assign main_basesoc_sdram_phaseinjector1_csrfield_rden = main_basesoc_sdram_phaseinjector1_command_storage[5];
assign main_basesoc_sdram_phaseinjector1_csrfield_cs_top = main_basesoc_sdram_phaseinjector1_command_storage[6];
assign main_basesoc_sdram_phaseinjector1_csrfield_cs_bottom = main_basesoc_sdram_phaseinjector1_command_storage[7];
assign builder_csr_bankarray_csrbank4_dfii_pi1_command0_w = main_basesoc_sdram_phaseinjector1_command_storage;
assign builder_csr_bankarray_csrbank4_dfii_pi1_address0_w = main_basesoc_sdram_phaseinjector1_address_storage;
assign builder_csr_bankarray_csrbank4_dfii_pi1_baddress0_w = main_basesoc_sdram_phaseinjector1_baddress_storage;
assign builder_csr_bankarray_csrbank4_dfii_pi1_wrdata1_w = main_basesoc_sdram_phaseinjector1_wrdata_storage[63:32];
assign builder_csr_bankarray_csrbank4_dfii_pi1_wrdata0_w = main_basesoc_sdram_phaseinjector1_wrdata_storage[31:0];
assign builder_csr_bankarray_csrbank4_dfii_pi1_rddata1_w = main_basesoc_sdram_phaseinjector1_rddata_status[63:32];
assign builder_csr_bankarray_csrbank4_dfii_pi1_rddata0_w = main_basesoc_sdram_phaseinjector1_rddata_status[31:0];
assign main_basesoc_sdram_phaseinjector1_rddata_we = builder_csr_bankarray_csrbank4_dfii_pi1_rddata0_we;
assign main_basesoc_sdram_phaseinjector2_csrfield_cs = main_basesoc_sdram_phaseinjector2_command_storage[0];
assign main_basesoc_sdram_phaseinjector2_csrfield_we = main_basesoc_sdram_phaseinjector2_command_storage[1];
assign main_basesoc_sdram_phaseinjector2_csrfield_cas = main_basesoc_sdram_phaseinjector2_command_storage[2];
assign main_basesoc_sdram_phaseinjector2_csrfield_ras = main_basesoc_sdram_phaseinjector2_command_storage[3];
assign main_basesoc_sdram_phaseinjector2_csrfield_wren = main_basesoc_sdram_phaseinjector2_command_storage[4];
assign main_basesoc_sdram_phaseinjector2_csrfield_rden = main_basesoc_sdram_phaseinjector2_command_storage[5];
assign main_basesoc_sdram_phaseinjector2_csrfield_cs_top = main_basesoc_sdram_phaseinjector2_command_storage[6];
assign main_basesoc_sdram_phaseinjector2_csrfield_cs_bottom = main_basesoc_sdram_phaseinjector2_command_storage[7];
assign builder_csr_bankarray_csrbank4_dfii_pi2_command0_w = main_basesoc_sdram_phaseinjector2_command_storage;
assign builder_csr_bankarray_csrbank4_dfii_pi2_address0_w = main_basesoc_sdram_phaseinjector2_address_storage;
assign builder_csr_bankarray_csrbank4_dfii_pi2_baddress0_w = main_basesoc_sdram_phaseinjector2_baddress_storage;
assign builder_csr_bankarray_csrbank4_dfii_pi2_wrdata1_w = main_basesoc_sdram_phaseinjector2_wrdata_storage[63:32];
assign builder_csr_bankarray_csrbank4_dfii_pi2_wrdata0_w = main_basesoc_sdram_phaseinjector2_wrdata_storage[31:0];
assign builder_csr_bankarray_csrbank4_dfii_pi2_rddata1_w = main_basesoc_sdram_phaseinjector2_rddata_status[63:32];
assign builder_csr_bankarray_csrbank4_dfii_pi2_rddata0_w = main_basesoc_sdram_phaseinjector2_rddata_status[31:0];
assign main_basesoc_sdram_phaseinjector2_rddata_we = builder_csr_bankarray_csrbank4_dfii_pi2_rddata0_we;
assign main_basesoc_sdram_phaseinjector3_csrfield_cs = main_basesoc_sdram_phaseinjector3_command_storage[0];
assign main_basesoc_sdram_phaseinjector3_csrfield_we = main_basesoc_sdram_phaseinjector3_command_storage[1];
assign main_basesoc_sdram_phaseinjector3_csrfield_cas = main_basesoc_sdram_phaseinjector3_command_storage[2];
assign main_basesoc_sdram_phaseinjector3_csrfield_ras = main_basesoc_sdram_phaseinjector3_command_storage[3];
assign main_basesoc_sdram_phaseinjector3_csrfield_wren = main_basesoc_sdram_phaseinjector3_command_storage[4];
assign main_basesoc_sdram_phaseinjector3_csrfield_rden = main_basesoc_sdram_phaseinjector3_command_storage[5];
assign main_basesoc_sdram_phaseinjector3_csrfield_cs_top = main_basesoc_sdram_phaseinjector3_command_storage[6];
assign main_basesoc_sdram_phaseinjector3_csrfield_cs_bottom = main_basesoc_sdram_phaseinjector3_command_storage[7];
assign builder_csr_bankarray_csrbank4_dfii_pi3_command0_w = main_basesoc_sdram_phaseinjector3_command_storage;
assign builder_csr_bankarray_csrbank4_dfii_pi3_address0_w = main_basesoc_sdram_phaseinjector3_address_storage;
assign builder_csr_bankarray_csrbank4_dfii_pi3_baddress0_w = main_basesoc_sdram_phaseinjector3_baddress_storage;
assign builder_csr_bankarray_csrbank4_dfii_pi3_wrdata1_w = main_basesoc_sdram_phaseinjector3_wrdata_storage[63:32];
assign builder_csr_bankarray_csrbank4_dfii_pi3_wrdata0_w = main_basesoc_sdram_phaseinjector3_wrdata_storage[31:0];
assign builder_csr_bankarray_csrbank4_dfii_pi3_rddata1_w = main_basesoc_sdram_phaseinjector3_rddata_status[63:32];
assign builder_csr_bankarray_csrbank4_dfii_pi3_rddata0_w = main_basesoc_sdram_phaseinjector3_rddata_status[31:0];
assign main_basesoc_sdram_phaseinjector3_rddata_we = builder_csr_bankarray_csrbank4_dfii_pi3_rddata0_we;
assign builder_csr_bankarray_csrbank5_sel = (builder_csr_bankarray_interface5_bank_bus_adr[13:9] == 5'd28);
assign builder_csr_bankarray_csrbank5_load0_r = builder_csr_bankarray_interface5_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank5_load0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_load0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank5_load0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_load0_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_reload0_r = builder_csr_bankarray_interface5_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank5_reload0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_reload0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank5_reload0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_reload0_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_en0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_en0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank5_en0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_en0_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_update_value0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_update_value0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_update_value0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank5_update_value0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_update_value0_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_value_r = builder_csr_bankarray_interface5_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank5_value_re <= 1'd0;
    builder_csr_bankarray_csrbank5_value_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank5_value_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_value_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_ev_status_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank5_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank5_ev_status_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_ev_status_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_ev_pending_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank5_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank5_ev_pending_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_ev_pending_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_ev_enable0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank5_ev_enable0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_ev_enable0_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_load0_w = main_basesoc_basesoc_timer_load_storage;
assign builder_csr_bankarray_csrbank5_reload0_w = main_basesoc_basesoc_timer_reload_storage;
assign builder_csr_bankarray_csrbank5_en0_w = main_basesoc_basesoc_timer_en_storage;
assign builder_csr_bankarray_csrbank5_update_value0_w = main_basesoc_basesoc_timer_update_value_storage;
assign builder_csr_bankarray_csrbank5_value_w = main_basesoc_basesoc_timer_value_status;
assign main_basesoc_basesoc_timer_value_we = builder_csr_bankarray_csrbank5_value_we;
assign main_basesoc_basesoc_timer_status_status = main_basesoc_basesoc_timer_zero0;
assign builder_csr_bankarray_csrbank5_ev_status_w = main_basesoc_basesoc_timer_status_status;
assign main_basesoc_basesoc_timer_status_we = builder_csr_bankarray_csrbank5_ev_status_we;
assign main_basesoc_basesoc_timer_pending_status = main_basesoc_basesoc_timer_zero1;
assign builder_csr_bankarray_csrbank5_ev_pending_w = main_basesoc_basesoc_timer_pending_status;
assign main_basesoc_basesoc_timer_pending_we = builder_csr_bankarray_csrbank5_ev_pending_we;
assign main_basesoc_basesoc_timer_zero2 = main_basesoc_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank5_ev_enable0_w = main_basesoc_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank6_sel = (builder_csr_bankarray_interface6_bank_bus_adr[13:9] == 5'd29);
assign main_basesoc_basesoc_uart_rxtx_r = builder_csr_bankarray_interface6_bank_bus_dat_w[7:0];
always @(*) begin
    main_basesoc_basesoc_uart_rxtx_re <= 1'd0;
    main_basesoc_basesoc_uart_rxtx_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd0))) begin
        main_basesoc_basesoc_uart_rxtx_re <= builder_csr_bankarray_interface6_bank_bus_we;
        main_basesoc_basesoc_uart_rxtx_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_txfull_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank6_txfull_re <= 1'd0;
    builder_csr_bankarray_csrbank6_txfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank6_txfull_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_txfull_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_rxempty_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank6_rxempty_re <= 1'd0;
    builder_csr_bankarray_csrbank6_rxempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank6_rxempty_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_rxempty_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_ev_status_r = builder_csr_bankarray_interface6_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank6_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank6_ev_status_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_ev_status_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_ev_pending_r = builder_csr_bankarray_interface6_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank6_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank6_ev_pending_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_ev_pending_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_ev_enable0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank6_ev_enable0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_ev_enable0_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_txempty_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank6_txempty_re <= 1'd0;
    builder_csr_bankarray_csrbank6_txempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank6_txempty_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_txempty_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_rxfull_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank6_rxfull_re <= 1'd0;
    builder_csr_bankarray_csrbank6_rxfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank6_rxfull_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_rxfull_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_txfull_w = main_basesoc_basesoc_uart_txfull_status;
assign main_basesoc_basesoc_uart_txfull_we = builder_csr_bankarray_csrbank6_txfull_we;
assign builder_csr_bankarray_csrbank6_rxempty_w = main_basesoc_basesoc_uart_rxempty_status;
assign main_basesoc_basesoc_uart_rxempty_we = builder_csr_bankarray_csrbank6_rxempty_we;
always @(*) begin
    main_basesoc_basesoc_uart_status_status <= 2'd0;
    main_basesoc_basesoc_uart_status_status[0] <= main_basesoc_basesoc_uart_tx0;
    main_basesoc_basesoc_uart_status_status[1] <= main_basesoc_basesoc_uart_rx0;
end
assign builder_csr_bankarray_csrbank6_ev_status_w = main_basesoc_basesoc_uart_status_status;
assign main_basesoc_basesoc_uart_status_we = builder_csr_bankarray_csrbank6_ev_status_we;
always @(*) begin
    main_basesoc_basesoc_uart_pending_status <= 2'd0;
    main_basesoc_basesoc_uart_pending_status[0] <= main_basesoc_basesoc_uart_tx1;
    main_basesoc_basesoc_uart_pending_status[1] <= main_basesoc_basesoc_uart_rx1;
end
assign builder_csr_bankarray_csrbank6_ev_pending_w = main_basesoc_basesoc_uart_pending_status;
assign main_basesoc_basesoc_uart_pending_we = builder_csr_bankarray_csrbank6_ev_pending_we;
assign main_basesoc_basesoc_uart_tx2 = main_basesoc_basesoc_uart_enable_storage[0];
assign main_basesoc_basesoc_uart_rx2 = main_basesoc_basesoc_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank6_ev_enable0_w = main_basesoc_basesoc_uart_enable_storage;
assign builder_csr_bankarray_csrbank6_txempty_w = main_basesoc_basesoc_uart_txempty_status;
assign main_basesoc_basesoc_uart_txempty_we = builder_csr_bankarray_csrbank6_txempty_we;
assign builder_csr_bankarray_csrbank6_rxfull_w = main_basesoc_basesoc_uart_rxfull_status;
assign main_basesoc_basesoc_uart_rxfull_we = builder_csr_bankarray_csrbank6_rxfull_we;
assign builder_csr_interconnect_adr = builder_interface1_adr;
assign builder_csr_interconnect_re = builder_interface1_re;
assign builder_csr_interconnect_we = builder_interface1_we;
assign builder_csr_interconnect_dat_w = builder_interface1_dat_w;
assign builder_interface1_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface5_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface6_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface1_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface2_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface3_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface4_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface5_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface6_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_sram_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface5_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface6_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface5_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface6_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = (((((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_interface4_bank_bus_dat_r) | builder_csr_bankarray_interface5_bank_bus_dat_r) | builder_csr_bankarray_interface6_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
always @(*) begin
    builder_rhs_self0 <= 30'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_self0 <= main_basesoc_basesoc_ibus_adr;
        end
        1'd1: begin
            builder_rhs_self0 <= main_basesoc_basesoc_dbus_adr;
        end
        default: begin
            builder_rhs_self0 <= main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_adr;
        end
    endcase
end
always @(*) begin
    builder_rhs_self1 <= 32'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_self1 <= main_basesoc_basesoc_ibus_dat_w;
        end
        1'd1: begin
            builder_rhs_self1 <= main_basesoc_basesoc_dbus_dat_w;
        end
        default: begin
            builder_rhs_self1 <= main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_dat_w;
        end
    endcase
end
always @(*) begin
    builder_rhs_self2 <= 4'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_self2 <= main_basesoc_basesoc_ibus_sel;
        end
        1'd1: begin
            builder_rhs_self2 <= main_basesoc_basesoc_dbus_sel;
        end
        default: begin
            builder_rhs_self2 <= main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_sel;
        end
    endcase
end
always @(*) begin
    builder_rhs_self3 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_self3 <= main_basesoc_basesoc_ibus_cyc;
        end
        1'd1: begin
            builder_rhs_self3 <= main_basesoc_basesoc_dbus_cyc;
        end
        default: begin
            builder_rhs_self3 <= main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_cyc;
        end
    endcase
end
always @(*) begin
    builder_rhs_self4 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_self4 <= main_basesoc_basesoc_ibus_stb;
        end
        1'd1: begin
            builder_rhs_self4 <= main_basesoc_basesoc_dbus_stb;
        end
        default: begin
            builder_rhs_self4 <= main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_stb;
        end
    endcase
end
always @(*) begin
    builder_rhs_self5 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_self5 <= main_basesoc_basesoc_ibus_we;
        end
        1'd1: begin
            builder_rhs_self5 <= main_basesoc_basesoc_dbus_we;
        end
        default: begin
            builder_rhs_self5 <= main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_self6 <= 3'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_self6 <= main_basesoc_basesoc_ibus_cti;
        end
        1'd1: begin
            builder_rhs_self6 <= main_basesoc_basesoc_dbus_cti;
        end
        default: begin
            builder_rhs_self6 <= main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_cti;
        end
    endcase
end
always @(*) begin
    builder_rhs_self7 <= 2'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_self7 <= main_basesoc_basesoc_ibus_bte;
        end
        1'd1: begin
            builder_rhs_self7 <= main_basesoc_basesoc_dbus_bte;
        end
        default: begin
            builder_rhs_self7 <= main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_bte;
        end
    endcase
end
always @(*) begin
    builder_rhs_self8 <= 1'd0;
    case (main_basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            builder_rhs_self8 <= main_basesoc_sdram_choose_cmd_requests[0];
        end
        1'd1: begin
            builder_rhs_self8 <= main_basesoc_sdram_choose_cmd_requests[1];
        end
        2'd2: begin
            builder_rhs_self8 <= main_basesoc_sdram_choose_cmd_requests[2];
        end
        2'd3: begin
            builder_rhs_self8 <= main_basesoc_sdram_choose_cmd_requests[3];
        end
        3'd4: begin
            builder_rhs_self8 <= main_basesoc_sdram_choose_cmd_requests[4];
        end
        3'd5: begin
            builder_rhs_self8 <= main_basesoc_sdram_choose_cmd_requests[5];
        end
        3'd6: begin
            builder_rhs_self8 <= main_basesoc_sdram_choose_cmd_requests[6];
        end
        default: begin
            builder_rhs_self8 <= main_basesoc_sdram_choose_cmd_requests[7];
        end
    endcase
end
always @(*) begin
    builder_rhs_self9 <= 15'd0;
    case (main_basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            builder_rhs_self9 <= main_basesoc_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            builder_rhs_self9 <= main_basesoc_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            builder_rhs_self9 <= main_basesoc_sdram_bankmachine2_cmd_payload_a;
        end
        2'd3: begin
            builder_rhs_self9 <= main_basesoc_sdram_bankmachine3_cmd_payload_a;
        end
        3'd4: begin
            builder_rhs_self9 <= main_basesoc_sdram_bankmachine4_cmd_payload_a;
        end
        3'd5: begin
            builder_rhs_self9 <= main_basesoc_sdram_bankmachine5_cmd_payload_a;
        end
        3'd6: begin
            builder_rhs_self9 <= main_basesoc_sdram_bankmachine6_cmd_payload_a;
        end
        default: begin
            builder_rhs_self9 <= main_basesoc_sdram_bankmachine7_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_rhs_self10 <= 3'd0;
    case (main_basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            builder_rhs_self10 <= main_basesoc_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            builder_rhs_self10 <= main_basesoc_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            builder_rhs_self10 <= main_basesoc_sdram_bankmachine2_cmd_payload_ba;
        end
        2'd3: begin
            builder_rhs_self10 <= main_basesoc_sdram_bankmachine3_cmd_payload_ba;
        end
        3'd4: begin
            builder_rhs_self10 <= main_basesoc_sdram_bankmachine4_cmd_payload_ba;
        end
        3'd5: begin
            builder_rhs_self10 <= main_basesoc_sdram_bankmachine5_cmd_payload_ba;
        end
        3'd6: begin
            builder_rhs_self10 <= main_basesoc_sdram_bankmachine6_cmd_payload_ba;
        end
        default: begin
            builder_rhs_self10 <= main_basesoc_sdram_bankmachine7_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    builder_rhs_self11 <= 1'd0;
    case (main_basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            builder_rhs_self11 <= main_basesoc_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            builder_rhs_self11 <= main_basesoc_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            builder_rhs_self11 <= main_basesoc_sdram_bankmachine2_cmd_payload_is_read;
        end
        2'd3: begin
            builder_rhs_self11 <= main_basesoc_sdram_bankmachine3_cmd_payload_is_read;
        end
        3'd4: begin
            builder_rhs_self11 <= main_basesoc_sdram_bankmachine4_cmd_payload_is_read;
        end
        3'd5: begin
            builder_rhs_self11 <= main_basesoc_sdram_bankmachine5_cmd_payload_is_read;
        end
        3'd6: begin
            builder_rhs_self11 <= main_basesoc_sdram_bankmachine6_cmd_payload_is_read;
        end
        default: begin
            builder_rhs_self11 <= main_basesoc_sdram_bankmachine7_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    builder_rhs_self12 <= 1'd0;
    case (main_basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            builder_rhs_self12 <= main_basesoc_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            builder_rhs_self12 <= main_basesoc_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            builder_rhs_self12 <= main_basesoc_sdram_bankmachine2_cmd_payload_is_write;
        end
        2'd3: begin
            builder_rhs_self12 <= main_basesoc_sdram_bankmachine3_cmd_payload_is_write;
        end
        3'd4: begin
            builder_rhs_self12 <= main_basesoc_sdram_bankmachine4_cmd_payload_is_write;
        end
        3'd5: begin
            builder_rhs_self12 <= main_basesoc_sdram_bankmachine5_cmd_payload_is_write;
        end
        3'd6: begin
            builder_rhs_self12 <= main_basesoc_sdram_bankmachine6_cmd_payload_is_write;
        end
        default: begin
            builder_rhs_self12 <= main_basesoc_sdram_bankmachine7_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    builder_rhs_self13 <= 1'd0;
    case (main_basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            builder_rhs_self13 <= main_basesoc_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            builder_rhs_self13 <= main_basesoc_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            builder_rhs_self13 <= main_basesoc_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        2'd3: begin
            builder_rhs_self13 <= main_basesoc_sdram_bankmachine3_cmd_payload_is_cmd;
        end
        3'd4: begin
            builder_rhs_self13 <= main_basesoc_sdram_bankmachine4_cmd_payload_is_cmd;
        end
        3'd5: begin
            builder_rhs_self13 <= main_basesoc_sdram_bankmachine5_cmd_payload_is_cmd;
        end
        3'd6: begin
            builder_rhs_self13 <= main_basesoc_sdram_bankmachine6_cmd_payload_is_cmd;
        end
        default: begin
            builder_rhs_self13 <= main_basesoc_sdram_bankmachine7_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    builder_t_self0 <= 1'd0;
    case (main_basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            builder_t_self0 <= main_basesoc_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            builder_t_self0 <= main_basesoc_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            builder_t_self0 <= main_basesoc_sdram_bankmachine2_cmd_payload_cas;
        end
        2'd3: begin
            builder_t_self0 <= main_basesoc_sdram_bankmachine3_cmd_payload_cas;
        end
        3'd4: begin
            builder_t_self0 <= main_basesoc_sdram_bankmachine4_cmd_payload_cas;
        end
        3'd5: begin
            builder_t_self0 <= main_basesoc_sdram_bankmachine5_cmd_payload_cas;
        end
        3'd6: begin
            builder_t_self0 <= main_basesoc_sdram_bankmachine6_cmd_payload_cas;
        end
        default: begin
            builder_t_self0 <= main_basesoc_sdram_bankmachine7_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    builder_t_self1 <= 1'd0;
    case (main_basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            builder_t_self1 <= main_basesoc_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            builder_t_self1 <= main_basesoc_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            builder_t_self1 <= main_basesoc_sdram_bankmachine2_cmd_payload_ras;
        end
        2'd3: begin
            builder_t_self1 <= main_basesoc_sdram_bankmachine3_cmd_payload_ras;
        end
        3'd4: begin
            builder_t_self1 <= main_basesoc_sdram_bankmachine4_cmd_payload_ras;
        end
        3'd5: begin
            builder_t_self1 <= main_basesoc_sdram_bankmachine5_cmd_payload_ras;
        end
        3'd6: begin
            builder_t_self1 <= main_basesoc_sdram_bankmachine6_cmd_payload_ras;
        end
        default: begin
            builder_t_self1 <= main_basesoc_sdram_bankmachine7_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    builder_t_self2 <= 1'd0;
    case (main_basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            builder_t_self2 <= main_basesoc_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            builder_t_self2 <= main_basesoc_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            builder_t_self2 <= main_basesoc_sdram_bankmachine2_cmd_payload_we;
        end
        2'd3: begin
            builder_t_self2 <= main_basesoc_sdram_bankmachine3_cmd_payload_we;
        end
        3'd4: begin
            builder_t_self2 <= main_basesoc_sdram_bankmachine4_cmd_payload_we;
        end
        3'd5: begin
            builder_t_self2 <= main_basesoc_sdram_bankmachine5_cmd_payload_we;
        end
        3'd6: begin
            builder_t_self2 <= main_basesoc_sdram_bankmachine6_cmd_payload_we;
        end
        default: begin
            builder_t_self2 <= main_basesoc_sdram_bankmachine7_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_self14 <= 1'd0;
    case (main_basesoc_sdram_choose_req_grant)
        1'd0: begin
            builder_rhs_self14 <= main_basesoc_sdram_choose_req_requests[0];
        end
        1'd1: begin
            builder_rhs_self14 <= main_basesoc_sdram_choose_req_requests[1];
        end
        2'd2: begin
            builder_rhs_self14 <= main_basesoc_sdram_choose_req_requests[2];
        end
        2'd3: begin
            builder_rhs_self14 <= main_basesoc_sdram_choose_req_requests[3];
        end
        3'd4: begin
            builder_rhs_self14 <= main_basesoc_sdram_choose_req_requests[4];
        end
        3'd5: begin
            builder_rhs_self14 <= main_basesoc_sdram_choose_req_requests[5];
        end
        3'd6: begin
            builder_rhs_self14 <= main_basesoc_sdram_choose_req_requests[6];
        end
        default: begin
            builder_rhs_self14 <= main_basesoc_sdram_choose_req_requests[7];
        end
    endcase
end
always @(*) begin
    builder_rhs_self15 <= 15'd0;
    case (main_basesoc_sdram_choose_req_grant)
        1'd0: begin
            builder_rhs_self15 <= main_basesoc_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            builder_rhs_self15 <= main_basesoc_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            builder_rhs_self15 <= main_basesoc_sdram_bankmachine2_cmd_payload_a;
        end
        2'd3: begin
            builder_rhs_self15 <= main_basesoc_sdram_bankmachine3_cmd_payload_a;
        end
        3'd4: begin
            builder_rhs_self15 <= main_basesoc_sdram_bankmachine4_cmd_payload_a;
        end
        3'd5: begin
            builder_rhs_self15 <= main_basesoc_sdram_bankmachine5_cmd_payload_a;
        end
        3'd6: begin
            builder_rhs_self15 <= main_basesoc_sdram_bankmachine6_cmd_payload_a;
        end
        default: begin
            builder_rhs_self15 <= main_basesoc_sdram_bankmachine7_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_rhs_self16 <= 3'd0;
    case (main_basesoc_sdram_choose_req_grant)
        1'd0: begin
            builder_rhs_self16 <= main_basesoc_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            builder_rhs_self16 <= main_basesoc_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            builder_rhs_self16 <= main_basesoc_sdram_bankmachine2_cmd_payload_ba;
        end
        2'd3: begin
            builder_rhs_self16 <= main_basesoc_sdram_bankmachine3_cmd_payload_ba;
        end
        3'd4: begin
            builder_rhs_self16 <= main_basesoc_sdram_bankmachine4_cmd_payload_ba;
        end
        3'd5: begin
            builder_rhs_self16 <= main_basesoc_sdram_bankmachine5_cmd_payload_ba;
        end
        3'd6: begin
            builder_rhs_self16 <= main_basesoc_sdram_bankmachine6_cmd_payload_ba;
        end
        default: begin
            builder_rhs_self16 <= main_basesoc_sdram_bankmachine7_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    builder_rhs_self17 <= 1'd0;
    case (main_basesoc_sdram_choose_req_grant)
        1'd0: begin
            builder_rhs_self17 <= main_basesoc_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            builder_rhs_self17 <= main_basesoc_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            builder_rhs_self17 <= main_basesoc_sdram_bankmachine2_cmd_payload_is_read;
        end
        2'd3: begin
            builder_rhs_self17 <= main_basesoc_sdram_bankmachine3_cmd_payload_is_read;
        end
        3'd4: begin
            builder_rhs_self17 <= main_basesoc_sdram_bankmachine4_cmd_payload_is_read;
        end
        3'd5: begin
            builder_rhs_self17 <= main_basesoc_sdram_bankmachine5_cmd_payload_is_read;
        end
        3'd6: begin
            builder_rhs_self17 <= main_basesoc_sdram_bankmachine6_cmd_payload_is_read;
        end
        default: begin
            builder_rhs_self17 <= main_basesoc_sdram_bankmachine7_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    builder_rhs_self18 <= 1'd0;
    case (main_basesoc_sdram_choose_req_grant)
        1'd0: begin
            builder_rhs_self18 <= main_basesoc_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            builder_rhs_self18 <= main_basesoc_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            builder_rhs_self18 <= main_basesoc_sdram_bankmachine2_cmd_payload_is_write;
        end
        2'd3: begin
            builder_rhs_self18 <= main_basesoc_sdram_bankmachine3_cmd_payload_is_write;
        end
        3'd4: begin
            builder_rhs_self18 <= main_basesoc_sdram_bankmachine4_cmd_payload_is_write;
        end
        3'd5: begin
            builder_rhs_self18 <= main_basesoc_sdram_bankmachine5_cmd_payload_is_write;
        end
        3'd6: begin
            builder_rhs_self18 <= main_basesoc_sdram_bankmachine6_cmd_payload_is_write;
        end
        default: begin
            builder_rhs_self18 <= main_basesoc_sdram_bankmachine7_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    builder_rhs_self19 <= 1'd0;
    case (main_basesoc_sdram_choose_req_grant)
        1'd0: begin
            builder_rhs_self19 <= main_basesoc_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            builder_rhs_self19 <= main_basesoc_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            builder_rhs_self19 <= main_basesoc_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        2'd3: begin
            builder_rhs_self19 <= main_basesoc_sdram_bankmachine3_cmd_payload_is_cmd;
        end
        3'd4: begin
            builder_rhs_self19 <= main_basesoc_sdram_bankmachine4_cmd_payload_is_cmd;
        end
        3'd5: begin
            builder_rhs_self19 <= main_basesoc_sdram_bankmachine5_cmd_payload_is_cmd;
        end
        3'd6: begin
            builder_rhs_self19 <= main_basesoc_sdram_bankmachine6_cmd_payload_is_cmd;
        end
        default: begin
            builder_rhs_self19 <= main_basesoc_sdram_bankmachine7_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    builder_t_self3 <= 1'd0;
    case (main_basesoc_sdram_choose_req_grant)
        1'd0: begin
            builder_t_self3 <= main_basesoc_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            builder_t_self3 <= main_basesoc_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            builder_t_self3 <= main_basesoc_sdram_bankmachine2_cmd_payload_cas;
        end
        2'd3: begin
            builder_t_self3 <= main_basesoc_sdram_bankmachine3_cmd_payload_cas;
        end
        3'd4: begin
            builder_t_self3 <= main_basesoc_sdram_bankmachine4_cmd_payload_cas;
        end
        3'd5: begin
            builder_t_self3 <= main_basesoc_sdram_bankmachine5_cmd_payload_cas;
        end
        3'd6: begin
            builder_t_self3 <= main_basesoc_sdram_bankmachine6_cmd_payload_cas;
        end
        default: begin
            builder_t_self3 <= main_basesoc_sdram_bankmachine7_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    builder_t_self4 <= 1'd0;
    case (main_basesoc_sdram_choose_req_grant)
        1'd0: begin
            builder_t_self4 <= main_basesoc_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            builder_t_self4 <= main_basesoc_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            builder_t_self4 <= main_basesoc_sdram_bankmachine2_cmd_payload_ras;
        end
        2'd3: begin
            builder_t_self4 <= main_basesoc_sdram_bankmachine3_cmd_payload_ras;
        end
        3'd4: begin
            builder_t_self4 <= main_basesoc_sdram_bankmachine4_cmd_payload_ras;
        end
        3'd5: begin
            builder_t_self4 <= main_basesoc_sdram_bankmachine5_cmd_payload_ras;
        end
        3'd6: begin
            builder_t_self4 <= main_basesoc_sdram_bankmachine6_cmd_payload_ras;
        end
        default: begin
            builder_t_self4 <= main_basesoc_sdram_bankmachine7_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    builder_t_self5 <= 1'd0;
    case (main_basesoc_sdram_choose_req_grant)
        1'd0: begin
            builder_t_self5 <= main_basesoc_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            builder_t_self5 <= main_basesoc_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            builder_t_self5 <= main_basesoc_sdram_bankmachine2_cmd_payload_we;
        end
        2'd3: begin
            builder_t_self5 <= main_basesoc_sdram_bankmachine3_cmd_payload_we;
        end
        3'd4: begin
            builder_t_self5 <= main_basesoc_sdram_bankmachine4_cmd_payload_we;
        end
        3'd5: begin
            builder_t_self5 <= main_basesoc_sdram_bankmachine5_cmd_payload_we;
        end
        3'd6: begin
            builder_t_self5 <= main_basesoc_sdram_bankmachine6_cmd_payload_we;
        end
        default: begin
            builder_t_self5 <= main_basesoc_sdram_bankmachine7_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_self20 <= 22'd0;
    case (builder_roundrobin0_grant)
        default: begin
            builder_rhs_self20 <= {main_basesoc_port_cmd_payload_addr[24:10], main_basesoc_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_self21 <= 1'd0;
    case (builder_roundrobin0_grant)
        default: begin
            builder_rhs_self21 <= main_basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_self22 <= 1'd0;
    case (builder_roundrobin0_grant)
        default: begin
            builder_rhs_self22 <= (((main_basesoc_port_cmd_payload_addr[9:7] == 1'd0) & (~(((((((builder_locked0 | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0))))) & main_basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_rhs_self23 <= 22'd0;
    case (builder_roundrobin1_grant)
        default: begin
            builder_rhs_self23 <= {main_basesoc_port_cmd_payload_addr[24:10], main_basesoc_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_self24 <= 1'd0;
    case (builder_roundrobin1_grant)
        default: begin
            builder_rhs_self24 <= main_basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_self25 <= 1'd0;
    case (builder_roundrobin1_grant)
        default: begin
            builder_rhs_self25 <= (((main_basesoc_port_cmd_payload_addr[9:7] == 1'd1) & (~(((((((builder_locked1 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0))))) & main_basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_rhs_self26 <= 22'd0;
    case (builder_roundrobin2_grant)
        default: begin
            builder_rhs_self26 <= {main_basesoc_port_cmd_payload_addr[24:10], main_basesoc_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_self27 <= 1'd0;
    case (builder_roundrobin2_grant)
        default: begin
            builder_rhs_self27 <= main_basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_self28 <= 1'd0;
    case (builder_roundrobin2_grant)
        default: begin
            builder_rhs_self28 <= (((main_basesoc_port_cmd_payload_addr[9:7] == 2'd2) & (~(((((((builder_locked2 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0))))) & main_basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_rhs_self29 <= 22'd0;
    case (builder_roundrobin3_grant)
        default: begin
            builder_rhs_self29 <= {main_basesoc_port_cmd_payload_addr[24:10], main_basesoc_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_self30 <= 1'd0;
    case (builder_roundrobin3_grant)
        default: begin
            builder_rhs_self30 <= main_basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_self31 <= 1'd0;
    case (builder_roundrobin3_grant)
        default: begin
            builder_rhs_self31 <= (((main_basesoc_port_cmd_payload_addr[9:7] == 2'd3) & (~(((((((builder_locked3 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0))))) & main_basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_rhs_self32 <= 22'd0;
    case (builder_roundrobin4_grant)
        default: begin
            builder_rhs_self32 <= {main_basesoc_port_cmd_payload_addr[24:10], main_basesoc_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_self33 <= 1'd0;
    case (builder_roundrobin4_grant)
        default: begin
            builder_rhs_self33 <= main_basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_self34 <= 1'd0;
    case (builder_roundrobin4_grant)
        default: begin
            builder_rhs_self34 <= (((main_basesoc_port_cmd_payload_addr[9:7] == 3'd4) & (~(((((((builder_locked4 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0))))) & main_basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_rhs_self35 <= 22'd0;
    case (builder_roundrobin5_grant)
        default: begin
            builder_rhs_self35 <= {main_basesoc_port_cmd_payload_addr[24:10], main_basesoc_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_self36 <= 1'd0;
    case (builder_roundrobin5_grant)
        default: begin
            builder_rhs_self36 <= main_basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_self37 <= 1'd0;
    case (builder_roundrobin5_grant)
        default: begin
            builder_rhs_self37 <= (((main_basesoc_port_cmd_payload_addr[9:7] == 3'd5) & (~(((((((builder_locked5 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0))))) & main_basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_rhs_self38 <= 22'd0;
    case (builder_roundrobin6_grant)
        default: begin
            builder_rhs_self38 <= {main_basesoc_port_cmd_payload_addr[24:10], main_basesoc_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_self39 <= 1'd0;
    case (builder_roundrobin6_grant)
        default: begin
            builder_rhs_self39 <= main_basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_self40 <= 1'd0;
    case (builder_roundrobin6_grant)
        default: begin
            builder_rhs_self40 <= (((main_basesoc_port_cmd_payload_addr[9:7] == 3'd6) & (~(((((((builder_locked6 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank7_lock & (builder_roundrobin7_grant == 1'd0))))) & main_basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_rhs_self41 <= 22'd0;
    case (builder_roundrobin7_grant)
        default: begin
            builder_rhs_self41 <= {main_basesoc_port_cmd_payload_addr[24:10], main_basesoc_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_self42 <= 1'd0;
    case (builder_roundrobin7_grant)
        default: begin
            builder_rhs_self42 <= main_basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_self43 <= 1'd0;
    case (builder_roundrobin7_grant)
        default: begin
            builder_rhs_self43 <= (((main_basesoc_port_cmd_payload_addr[9:7] == 3'd7) & (~(((((((builder_locked7 | (main_basesoc_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_basesoc_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_basesoc_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_basesoc_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))) | (main_basesoc_sdram_interface_bank4_lock & (builder_roundrobin4_grant == 1'd0))) | (main_basesoc_sdram_interface_bank5_lock & (builder_roundrobin5_grant == 1'd0))) | (main_basesoc_sdram_interface_bank6_lock & (builder_roundrobin6_grant == 1'd0))))) & main_basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_self0 <= 3'd0;
    case (main_basesoc_sdram_steerer_sel0)
        1'd0: begin
            builder_self0 <= main_basesoc_sdram_nop_ba;
        end
        1'd1: begin
            builder_self0 <= main_basesoc_sdram_choose_cmd_cmd_payload_ba;
        end
        2'd2: begin
            builder_self0 <= main_basesoc_sdram_choose_req_cmd_payload_ba;
        end
        default: begin
            builder_self0 <= main_basesoc_sdram_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    builder_self1 <= 15'd0;
    case (main_basesoc_sdram_steerer_sel0)
        1'd0: begin
            builder_self1 <= main_basesoc_sdram_nop_a;
        end
        1'd1: begin
            builder_self1 <= main_basesoc_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_self1 <= main_basesoc_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            builder_self1 <= main_basesoc_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_self2 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel0)
        1'd0: begin
            builder_self2 <= 1'd0;
        end
        1'd1: begin
            builder_self2 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_self2 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_self2 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    builder_self3 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel0)
        1'd0: begin
            builder_self3 <= 1'd0;
        end
        1'd1: begin
            builder_self3 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_self3 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_self3 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    builder_self4 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel0)
        1'd0: begin
            builder_self4 <= 1'd0;
        end
        1'd1: begin
            builder_self4 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_self4 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            builder_self4 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    builder_self5 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel0)
        1'd0: begin
            builder_self5 <= 1'd0;
        end
        1'd1: begin
            builder_self5 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_self5 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_self5 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    builder_self6 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel0)
        1'd0: begin
            builder_self6 <= 1'd0;
        end
        1'd1: begin
            builder_self6 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_self6 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_self6 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    builder_self7 <= 3'd0;
    case (main_basesoc_sdram_steerer_sel1)
        1'd0: begin
            builder_self7 <= main_basesoc_sdram_nop_ba;
        end
        1'd1: begin
            builder_self7 <= main_basesoc_sdram_choose_cmd_cmd_payload_ba;
        end
        2'd2: begin
            builder_self7 <= main_basesoc_sdram_choose_req_cmd_payload_ba;
        end
        default: begin
            builder_self7 <= main_basesoc_sdram_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    builder_self8 <= 15'd0;
    case (main_basesoc_sdram_steerer_sel1)
        1'd0: begin
            builder_self8 <= main_basesoc_sdram_nop_a;
        end
        1'd1: begin
            builder_self8 <= main_basesoc_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_self8 <= main_basesoc_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            builder_self8 <= main_basesoc_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_self9 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel1)
        1'd0: begin
            builder_self9 <= 1'd0;
        end
        1'd1: begin
            builder_self9 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_self9 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_self9 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    builder_self10 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel1)
        1'd0: begin
            builder_self10 <= 1'd0;
        end
        1'd1: begin
            builder_self10 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_self10 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_self10 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    builder_self11 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel1)
        1'd0: begin
            builder_self11 <= 1'd0;
        end
        1'd1: begin
            builder_self11 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_self11 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            builder_self11 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    builder_self12 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel1)
        1'd0: begin
            builder_self12 <= 1'd0;
        end
        1'd1: begin
            builder_self12 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_self12 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_self12 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    builder_self13 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel1)
        1'd0: begin
            builder_self13 <= 1'd0;
        end
        1'd1: begin
            builder_self13 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_self13 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_self13 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    builder_self14 <= 3'd0;
    case (main_basesoc_sdram_steerer_sel2)
        1'd0: begin
            builder_self14 <= main_basesoc_sdram_nop_ba;
        end
        1'd1: begin
            builder_self14 <= main_basesoc_sdram_choose_cmd_cmd_payload_ba;
        end
        2'd2: begin
            builder_self14 <= main_basesoc_sdram_choose_req_cmd_payload_ba;
        end
        default: begin
            builder_self14 <= main_basesoc_sdram_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    builder_self15 <= 15'd0;
    case (main_basesoc_sdram_steerer_sel2)
        1'd0: begin
            builder_self15 <= main_basesoc_sdram_nop_a;
        end
        1'd1: begin
            builder_self15 <= main_basesoc_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_self15 <= main_basesoc_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            builder_self15 <= main_basesoc_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_self16 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel2)
        1'd0: begin
            builder_self16 <= 1'd0;
        end
        1'd1: begin
            builder_self16 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_self16 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_self16 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    builder_self17 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel2)
        1'd0: begin
            builder_self17 <= 1'd0;
        end
        1'd1: begin
            builder_self17 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_self17 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_self17 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    builder_self18 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel2)
        1'd0: begin
            builder_self18 <= 1'd0;
        end
        1'd1: begin
            builder_self18 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_self18 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            builder_self18 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    builder_self19 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel2)
        1'd0: begin
            builder_self19 <= 1'd0;
        end
        1'd1: begin
            builder_self19 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_self19 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_self19 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    builder_self20 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel2)
        1'd0: begin
            builder_self20 <= 1'd0;
        end
        1'd1: begin
            builder_self20 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_self20 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_self20 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    builder_self21 <= 3'd0;
    case (main_basesoc_sdram_steerer_sel3)
        1'd0: begin
            builder_self21 <= main_basesoc_sdram_nop_ba;
        end
        1'd1: begin
            builder_self21 <= main_basesoc_sdram_choose_cmd_cmd_payload_ba;
        end
        2'd2: begin
            builder_self21 <= main_basesoc_sdram_choose_req_cmd_payload_ba;
        end
        default: begin
            builder_self21 <= main_basesoc_sdram_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    builder_self22 <= 15'd0;
    case (main_basesoc_sdram_steerer_sel3)
        1'd0: begin
            builder_self22 <= main_basesoc_sdram_nop_a;
        end
        1'd1: begin
            builder_self22 <= main_basesoc_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_self22 <= main_basesoc_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            builder_self22 <= main_basesoc_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_self23 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel3)
        1'd0: begin
            builder_self23 <= 1'd0;
        end
        1'd1: begin
            builder_self23 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_self23 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_self23 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    builder_self24 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel3)
        1'd0: begin
            builder_self24 <= 1'd0;
        end
        1'd1: begin
            builder_self24 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_self24 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_self24 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    builder_self25 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel3)
        1'd0: begin
            builder_self25 <= 1'd0;
        end
        1'd1: begin
            builder_self25 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_self25 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            builder_self25 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    builder_self26 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel3)
        1'd0: begin
            builder_self26 <= 1'd0;
        end
        1'd1: begin
            builder_self26 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_self26 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_self26 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    builder_self27 <= 1'd0;
    case (main_basesoc_sdram_steerer_sel3)
        1'd0: begin
            builder_self27 <= 1'd0;
        end
        1'd1: begin
            builder_self27 <= ((main_basesoc_sdram_choose_cmd_cmd_valid & main_basesoc_sdram_choose_cmd_cmd_ready) & main_basesoc_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_self27 <= ((main_basesoc_sdram_choose_req_cmd_valid & main_basesoc_sdram_choose_req_cmd_ready) & main_basesoc_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_self27 <= ((main_basesoc_sdram_cmd_valid & main_basesoc_sdram_cmd_ready) & main_basesoc_sdram_cmd_payload_is_write);
        end
    endcase
end
assign builder_xilinxasyncresetsynchronizerimpl0 = (~main_crg_locked);
assign builder_xilinxasyncresetsynchronizerimpl1 = (~main_crg_locked);
assign builder_xilinxasyncresetsynchronizerimpl2 = (~main_crg_locked);
assign builder_xilinxasyncresetsynchronizerimpl3 = (~main_crg_locked);
assign main_basesoc_basesoc_rx_rx = builder_xilinxmultiregimpl0_regs1;
assign builder_xilinxasyncresetsynchronizerimpl4 = (~main_ethphy_pll_locked);
always @(*) begin
    main_ethphy__r_status <= 1'd0;
    main_ethphy__r_status <= main_ethphy_r;
    main_ethphy__r_status <= builder_xilinxmultiregimpl1_regs1;
end
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_produce_rdomain = builder_xilinxmultiregimpl2_regs1;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_consume_wdomain = builder_xilinxmultiregimpl3_regs1;
assign main_basesoc_ethcore_mac_core_pulsesynchronizer0_toggle_o = builder_xilinxmultiregimpl4_regs1;
assign main_basesoc_ethcore_mac_core_pulsesynchronizer1_toggle_o = builder_xilinxmultiregimpl5_regs1;
assign main_basesoc_ethcore_mac_core_cdc_produce_rdomain = builder_xilinxmultiregimpl6_regs1;
assign main_basesoc_ethcore_mac_core_cdc_consume_wdomain = builder_xilinxmultiregimpl7_regs1;
assign main_basesoc_etherbone_tx_cdc_cdc_produce_rdomain = builder_xilinxmultiregimpl8_regs1;
assign main_basesoc_etherbone_tx_cdc_cdc_consume_wdomain = builder_xilinxmultiregimpl9_regs1;
assign main_basesoc_etherbone_rx_cdc_cdc_produce_rdomain = builder_xilinxmultiregimpl10_regs1;
assign main_basesoc_etherbone_rx_cdc_cdc_consume_wdomain = builder_xilinxmultiregimpl11_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge eth_rx_clk) begin
    main_ethphy_liteethphyrgmiirx_rx_ctl_d <= main_ethphy_liteethphyrgmiirx_rx_ctl;
    main_ethphy_liteethphyrgmiirx_source_valid <= main_ethphy_liteethphyrgmiirx_rx_ctl;
    main_ethphy_liteethphyrgmiirx_source_payload_data <= main_ethphy_liteethphyrgmiirx_rx_data;
    builder_liteethmac_rxdatapath_liteethmacpreamblechecker_state <= builder_liteethmac_rxdatapath_liteethmacpreamblechecker_next_state;
    if (main_basesoc_ethcore_mac_core_pulsesynchronizer0_i) begin
        main_basesoc_ethcore_mac_core_pulsesynchronizer0_toggle_i <= (~main_basesoc_ethcore_mac_core_pulsesynchronizer0_toggle_i);
    end
    if (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_ce) begin
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_reg <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_crc_next;
    end
    if (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_reset) begin
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_reg <= 32'd4294967295;
    end
    if (((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_we & main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_writable) & (~main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_replace))) begin
        if ((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_produce == 3'd4)) begin
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_produce <= 1'd0;
        end else begin
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_produce <= (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_produce + 1'd1);
        end
    end
    if (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_do_read) begin
        if ((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_consume == 3'd4)) begin
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_consume <= 1'd0;
        end else begin
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_consume <= (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_consume + 1'd1);
        end
    end
    if (((main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_we & main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_syncfifo_writable) & (~main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_replace))) begin
        if ((~main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_do_read)) begin
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_level <= (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_level + 1'd1);
        end
    end else begin
        if (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_do_read) begin
            main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_level <= (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_level - 1'd1);
        end
    end
    if (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_fifo_reset) begin
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_level <= 3'd0;
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_produce <= 3'd0;
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_consume <= 3'd0;
    end
    builder_liteethmac_rxdatapath_bufferizeendpoints_state <= builder_liteethmac_rxdatapath_bufferizeendpoints_next_state;
    if (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_last_be_liteethmac_next_value_ce0) begin
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_last_be <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_last_be_liteethmac_next_value0;
    end
    if (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error1_liteethmac_next_value_ce1) begin
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error1 <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error1_liteethmac_next_value1;
    end
    if (((~main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_valid) | main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_ready)) begin
        main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_valid <= main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_valid;
        main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_first <= main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_first;
        main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_last <= main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_last;
        main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_payload_data <= main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_payload_data;
        main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_payload_last_be <= main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_payload_last_be;
        main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_payload_error <= main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_sink_payload_error;
    end
    if (main_basesoc_ethcore_mac_core_pulsesynchronizer1_i) begin
        main_basesoc_ethcore_mac_core_pulsesynchronizer1_toggle_i <= (~main_basesoc_ethcore_mac_core_pulsesynchronizer1_toggle_i);
    end
    main_basesoc_ethcore_mac_core_cdc_graycounter0_q_binary <= main_basesoc_ethcore_mac_core_cdc_graycounter0_q_next_binary;
    main_basesoc_ethcore_mac_core_cdc_graycounter0_q <= main_basesoc_ethcore_mac_core_cdc_graycounter0_q_next;
    main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_binary <= main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_next_binary;
    main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q <= main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_next;
    if (main_basesoc_ethcore_mac_core_pulsesynchronizer0_o) begin
        main_basesoc_ethcore_mac_core_preamble_errors_status <= (main_basesoc_ethcore_mac_core_preamble_errors_status + 1'd1);
    end
    if (main_basesoc_ethcore_mac_core_pulsesynchronizer1_o) begin
        main_basesoc_ethcore_mac_core_crc_errors_status <= (main_basesoc_ethcore_mac_core_crc_errors_status + 1'd1);
    end
    main_basesoc_ethcore_mac_core_pulsesynchronizer0_toggle_o_r <= main_basesoc_ethcore_mac_core_pulsesynchronizer0_toggle_o;
    main_basesoc_ethcore_mac_core_pulsesynchronizer1_toggle_o_r <= main_basesoc_ethcore_mac_core_pulsesynchronizer1_toggle_o;
    if ((main_basesoc_ethcore_mac_core_cdc_re | (~main_basesoc_ethcore_mac_core_cdc_readable))) begin
        main_basesoc_ethcore_mac_core_cdc_dout <= main_basesoc_ethcore_mac_core_cdc_asyncfifo_dout;
        main_basesoc_ethcore_mac_core_cdc_readable <= main_basesoc_ethcore_mac_core_cdc_asyncfifo_readable;
    end
    main_basesoc_ethcore_mac_core_cdc_graycounter1_q_binary <= main_basesoc_ethcore_mac_core_cdc_graycounter1_q_next_binary;
    main_basesoc_ethcore_mac_core_cdc_graycounter1_q <= main_basesoc_ethcore_mac_core_cdc_graycounter1_q_next;
    case (builder_liteethmac_grant)
        1'd0: begin
            if ((~builder_liteethmac_request[0])) begin
                if (builder_liteethmac_request[1]) begin
                    builder_liteethmac_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~builder_liteethmac_request[1])) begin
                if (builder_liteethmac_request[0]) begin
                    builder_liteethmac_grant <= 1'd0;
                end
            end
        end
    endcase
    builder_liteethmac_status0_ongoing1 <= builder_liteethmac_status0_ongoing0;
    if (builder_liteethmac_status0_last) begin
        builder_liteethmac_status0_first <= 1'd1;
    end else begin
        if ((main_basesoc_ethcore_arp_mac_port_sink_valid & main_basesoc_ethcore_arp_mac_port_sink_ready)) begin
            builder_liteethmac_status0_first <= 1'd0;
        end
    end
    builder_liteethmac_status1_ongoing1 <= builder_liteethmac_status1_ongoing0;
    if (builder_liteethmac_status1_last) begin
        builder_liteethmac_status1_first <= 1'd1;
    end else begin
        if ((main_basesoc_ethcore_ip_mac_port_sink_valid & main_basesoc_ethcore_ip_mac_port_sink_ready)) begin
            builder_liteethmac_status1_first <= 1'd0;
        end
    end
    if (builder_liteethmac_first) begin
        builder_liteethmac_sel_ongoing <= builder_liteethmac_sel0;
    end
    builder_liteethmac_ongoing1 <= builder_liteethmac_ongoing0;
    if (builder_liteethmac_last) begin
        builder_liteethmac_first <= 1'd1;
    end else begin
        if ((main_basesoc_ethcore_mac_crossbar_sink_valid & main_basesoc_ethcore_mac_crossbar_sink_ready)) begin
            builder_liteethmac_first <= 1'd0;
        end
    end
    if (main_basesoc_ethcore_mac_packetizer_sr_load) begin
        main_basesoc_ethcore_mac_packetizer_sr <= main_basesoc_ethcore_mac_packetizer_header;
    end
    if (main_basesoc_ethcore_mac_packetizer_sr_shift) begin
        main_basesoc_ethcore_mac_packetizer_sr <= main_basesoc_ethcore_mac_packetizer_sr[111:8];
    end
    builder_liteethmac_fsm0_state0 <= builder_liteethmac_fsm0_next_state0;
    if (main_basesoc_ethcore_mac_packetizer_count_liteethmac_fsm0_next_value_ce0) begin
        main_basesoc_ethcore_mac_packetizer_count <= main_basesoc_ethcore_mac_packetizer_count_liteethmac_fsm0_next_value0;
    end
    if (main_basesoc_ethcore_mac_packetizer_fsm_from_idle_liteethmac_fsm0_next_value_ce1) begin
        main_basesoc_ethcore_mac_packetizer_fsm_from_idle <= main_basesoc_ethcore_mac_packetizer_fsm_from_idle_liteethmac_fsm0_next_value1;
    end
    builder_liteethmac_fsm1_state0 <= builder_liteethmac_fsm1_next_state0;
    if (main_basesoc_ethcore_mac_packetizer_delayed_last_be_liteethmac_fsm1_next_value_ce0) begin
        main_basesoc_ethcore_mac_packetizer_delayed_last_be <= main_basesoc_ethcore_mac_packetizer_delayed_last_be_liteethmac_fsm1_next_value0;
    end
    if (main_basesoc_ethcore_mac_depacketizer_sr_shift) begin
        main_basesoc_ethcore_mac_depacketizer_sr <= {main_basesoc_ethcore_mac_depacketizer_sink_payload_data, main_basesoc_ethcore_mac_depacketizer_sr[111:8]};
    end
    if (main_basesoc_ethcore_mac_depacketizer_sr_shift_leftover) begin
        main_basesoc_ethcore_mac_depacketizer_sr <= {main_basesoc_ethcore_mac_depacketizer_sink_payload_data, main_basesoc_ethcore_mac_depacketizer_sr};
    end
    main_basesoc_ethcore_mac_depacketizer_was_in_copy <= main_basesoc_ethcore_mac_depacketizer_is_in_copy;
    builder_liteethmac_fsm0_state1 <= builder_liteethmac_fsm0_next_state1;
    if (main_basesoc_ethcore_mac_depacketizer_count_liteethmac_fsm0_next_value_ce2) begin
        main_basesoc_ethcore_mac_depacketizer_count <= main_basesoc_ethcore_mac_depacketizer_count_liteethmac_fsm0_next_value2;
    end
    if (main_basesoc_ethcore_mac_depacketizer_fsm_from_idle_liteethmac_fsm0_next_value_ce3) begin
        main_basesoc_ethcore_mac_depacketizer_fsm_from_idle <= main_basesoc_ethcore_mac_depacketizer_fsm_from_idle_liteethmac_fsm0_next_value3;
    end
    builder_liteethmac_fsm1_state1 <= builder_liteethmac_fsm1_next_state1;
    if (main_basesoc_ethcore_mac_depacketizer_delayed_last_be_liteethmac_fsm1_next_value_ce1) begin
        main_basesoc_ethcore_mac_depacketizer_delayed_last_be <= main_basesoc_ethcore_mac_depacketizer_delayed_last_be_liteethmac_fsm1_next_value1;
    end
    if (main_basesoc_ethcore_arp_tx_packetizer_sr_load) begin
        main_basesoc_ethcore_arp_tx_packetizer_sr <= main_basesoc_ethcore_arp_tx_packetizer_header;
    end
    if (main_basesoc_ethcore_arp_tx_packetizer_sr_shift) begin
        main_basesoc_ethcore_arp_tx_packetizer_sr <= main_basesoc_ethcore_arp_tx_packetizer_sr[223:8];
    end
    builder_liteetharptx_fsm0_state <= builder_liteetharptx_fsm0_next_state;
    if (main_basesoc_ethcore_arp_tx_packetizer_count_liteetharp_fsm0_next_value_ce0) begin
        main_basesoc_ethcore_arp_tx_packetizer_count <= main_basesoc_ethcore_arp_tx_packetizer_count_liteetharp_fsm0_next_value0;
    end
    if (main_basesoc_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_fsm0_next_value_ce1) begin
        main_basesoc_ethcore_arp_tx_packetizer_fsm_from_idle <= main_basesoc_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_fsm0_next_value1;
    end
    builder_liteetharptx_fsm1_state <= builder_liteetharptx_fsm1_next_state;
    if (main_basesoc_ethcore_arp_tx_packetizer_delayed_last_be_liteetharp_fsm1_next_value_ce0) begin
        main_basesoc_ethcore_arp_tx_packetizer_delayed_last_be <= main_basesoc_ethcore_arp_tx_packetizer_delayed_last_be_liteetharp_fsm1_next_value0;
    end
    builder_liteetharptx_state <= builder_liteetharptx_next_state;
    if (main_basesoc_ethcore_arp_tx_counter_liteetharp_next_value_ce) begin
        main_basesoc_ethcore_arp_tx_counter <= main_basesoc_ethcore_arp_tx_counter_liteetharp_next_value;
    end
    main_basesoc_ethcore_arp_rx_valid <= (((((main_basesoc_ethcore_arp_rx_depacketizer_source_valid & (main_basesoc_ethcore_arp_rx_depacketizer_source_param_hwtype == 1'd1)) & (main_basesoc_ethcore_arp_rx_depacketizer_source_param_proto == 12'd2048)) & (main_basesoc_ethcore_arp_rx_depacketizer_source_param_hwsize == 3'd6)) & (main_basesoc_ethcore_arp_rx_depacketizer_source_param_protosize == 3'd4)) & (main_basesoc_ethcore_arp_rx_depacketizer_source_param_target_ip == 32'd3232235826));
    if (main_basesoc_ethcore_arp_rx_depacketizer_sr_shift) begin
        main_basesoc_ethcore_arp_rx_depacketizer_sr <= {main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_data, main_basesoc_ethcore_arp_rx_depacketizer_sr[223:8]};
    end
    if (main_basesoc_ethcore_arp_rx_depacketizer_sr_shift_leftover) begin
        main_basesoc_ethcore_arp_rx_depacketizer_sr <= {main_basesoc_ethcore_arp_rx_depacketizer_sink_payload_data, main_basesoc_ethcore_arp_rx_depacketizer_sr};
    end
    main_basesoc_ethcore_arp_rx_depacketizer_was_in_copy <= main_basesoc_ethcore_arp_rx_depacketizer_is_in_copy;
    builder_liteetharprx_fsm0_state <= builder_liteetharprx_fsm0_next_state;
    if (main_basesoc_ethcore_arp_rx_depacketizer_count_liteetharp_fsm0_next_value_ce2) begin
        main_basesoc_ethcore_arp_rx_depacketizer_count <= main_basesoc_ethcore_arp_rx_depacketizer_count_liteetharp_fsm0_next_value2;
    end
    if (main_basesoc_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_fsm0_next_value_ce3) begin
        main_basesoc_ethcore_arp_rx_depacketizer_fsm_from_idle <= main_basesoc_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_fsm0_next_value3;
    end
    builder_liteetharprx_fsm1_state <= builder_liteetharprx_fsm1_next_state;
    if (main_basesoc_ethcore_arp_rx_depacketizer_delayed_last_be_liteetharp_fsm1_next_value_ce1) begin
        main_basesoc_ethcore_arp_rx_depacketizer_delayed_last_be <= main_basesoc_ethcore_arp_rx_depacketizer_delayed_last_be_liteetharp_fsm1_next_value1;
    end
    builder_liteetharprx_state <= builder_liteetharprx_next_state;
    if (main_basesoc_ethcore_arp_table_request_timer_wait) begin
        if ((~main_basesoc_ethcore_arp_table_request_timer_done)) begin
            main_basesoc_ethcore_arp_table_request_timer_count <= (main_basesoc_ethcore_arp_table_request_timer_count - 1'd1);
        end
    end else begin
        main_basesoc_ethcore_arp_table_request_timer_count <= 23'd5000000;
    end
    if (main_basesoc_ethcore_arp_table_cache_wait) begin
        if ((~main_basesoc_ethcore_arp_table_cache_done)) begin
            main_basesoc_ethcore_arp_table_cache_count <= (main_basesoc_ethcore_arp_table_cache_count - 1'd1);
        end
    end else begin
        main_basesoc_ethcore_arp_table_cache_count <= 26'd50000000;
    end
    builder_liteetharpcache_state <= builder_liteetharpcache_next_state;
    if (main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value_ce0) begin
        main_basesoc_ethcore_arp_table_cache_update_count <= main_basesoc_ethcore_arp_table_cache_update_count_liteetharp_liteetharpcache_next_value0;
    end
    if (main_basesoc_ethcore_arp_table_cache_search_count_liteetharp_liteetharpcache_next_value_ce1) begin
        main_basesoc_ethcore_arp_table_cache_search_count <= main_basesoc_ethcore_arp_table_cache_search_count_liteetharp_liteetharpcache_next_value1;
    end
    if (main_basesoc_ethcore_arp_table_cache_error_liteetharp_liteetharpcache_next_value_ce2) begin
        main_basesoc_ethcore_arp_table_cache_error <= main_basesoc_ethcore_arp_table_cache_error_liteetharp_liteetharpcache_next_value2;
    end
    builder_fsm_state <= builder_fsm_next_state;
    if (main_basesoc_ethcore_arp_table_request_pending_liteetharp_fsm_next_value_ce0) begin
        main_basesoc_ethcore_arp_table_request_pending <= main_basesoc_ethcore_arp_table_request_pending_liteetharp_fsm_next_value0;
    end
    if (main_basesoc_ethcore_arp_table_response_response_payload_mac_address_liteetharp_fsm_next_value_ce1) begin
        main_basesoc_ethcore_arp_table_response_response_payload_mac_address <= main_basesoc_ethcore_arp_table_response_response_payload_mac_address_liteetharp_fsm_next_value1;
    end
    if (main_basesoc_ethcore_arp_table_response_response_payload_failed_liteetharp_fsm_next_value_ce2) begin
        main_basesoc_ethcore_arp_table_response_response_payload_failed <= main_basesoc_ethcore_arp_table_response_response_payload_failed_liteetharp_fsm_next_value2;
    end
    if (main_basesoc_ethcore_arp_table_request_counter_liteetharp_fsm_next_value_ce3) begin
        main_basesoc_ethcore_arp_table_request_counter <= main_basesoc_ethcore_arp_table_request_counter_liteetharp_fsm_next_value3;
    end
    if (main_basesoc_ethcore_arp_table_request_ip_address_liteetharp_fsm_next_value_ce4) begin
        main_basesoc_ethcore_arp_table_request_ip_address <= main_basesoc_ethcore_arp_table_request_ip_address_liteetharp_fsm_next_value4;
    end
    if (((~main_basesoc_ethcore_ip_tx_pipe_valid_source_valid) | main_basesoc_ethcore_ip_tx_pipe_valid_source_ready)) begin
        main_basesoc_ethcore_ip_tx_pipe_valid_source_valid <= main_basesoc_ethcore_ip_tx_pipe_valid_sink_valid;
        main_basesoc_ethcore_ip_tx_pipe_valid_source_first <= main_basesoc_ethcore_ip_tx_pipe_valid_sink_first;
        main_basesoc_ethcore_ip_tx_pipe_valid_source_last <= main_basesoc_ethcore_ip_tx_pipe_valid_sink_last;
        main_basesoc_ethcore_ip_tx_pipe_valid_source_payload_data <= main_basesoc_ethcore_ip_tx_pipe_valid_sink_payload_data;
        main_basesoc_ethcore_ip_tx_pipe_valid_source_payload_last_be <= main_basesoc_ethcore_ip_tx_pipe_valid_sink_payload_last_be;
        main_basesoc_ethcore_ip_tx_pipe_valid_source_payload_error <= main_basesoc_ethcore_ip_tx_pipe_valid_sink_payload_error;
        main_basesoc_ethcore_ip_tx_pipe_valid_source_param_length <= main_basesoc_ethcore_ip_tx_pipe_valid_sink_param_length;
        main_basesoc_ethcore_ip_tx_pipe_valid_source_param_protocol <= main_basesoc_ethcore_ip_tx_pipe_valid_sink_param_protocol;
        main_basesoc_ethcore_ip_tx_pipe_valid_source_param_ip_address <= main_basesoc_ethcore_ip_tx_pipe_valid_sink_param_ip_address;
    end
    if (main_basesoc_ethcore_ip_tx_ce) begin
        if ((~main_basesoc_ethcore_ip_tx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next0 <= {main_basesoc_ethcore_ip_tx_liteethipv4checksum0, (main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next0[15:0] + main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next0[16])};
        end
        if ((~main_basesoc_ethcore_ip_tx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next1 <= {main_basesoc_ethcore_ip_tx_liteethipv4checksum1, (main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next1[15:0] + main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next1[16])};
        end
        if ((~main_basesoc_ethcore_ip_tx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next2 <= {main_basesoc_ethcore_ip_tx_liteethipv4checksum2, (main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next2[15:0] + main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next2[16])};
        end
        if ((~main_basesoc_ethcore_ip_tx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next3 <= {main_basesoc_ethcore_ip_tx_liteethipv4checksum3, (main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next3[15:0] + main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next3[16])};
        end
        if ((~main_basesoc_ethcore_ip_tx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next4 <= {main_basesoc_ethcore_ip_tx_liteethipv4checksum4, (main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next4[15:0] + main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next4[16])};
        end
        if ((~main_basesoc_ethcore_ip_tx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next5 <= {main_basesoc_ethcore_ip_tx_liteethipv4checksum5, (main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next5[15:0] + main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next5[16])};
        end
        if ((~main_basesoc_ethcore_ip_tx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next6 <= {main_basesoc_ethcore_ip_tx_liteethipv4checksum6, (main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next6[15:0] + main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next6[16])};
        end
        if ((~main_basesoc_ethcore_ip_tx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next7 <= {main_basesoc_ethcore_ip_tx_liteethipv4checksum7, (main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next7[15:0] + main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next7[16])};
        end
        if ((~main_basesoc_ethcore_ip_tx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_tx_liteethipv4checksum_r_next8 <= {main_basesoc_ethcore_ip_tx_liteethipv4checksum8, (main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next8[15:0] + main_basesoc_ethcore_ip_tx_liteethipv4checksum_s_next8[16])};
        end
        if (main_basesoc_ethcore_ip_tx_liteethipv4checksum_counter_ce) begin
            main_basesoc_ethcore_ip_tx_liteethipv4checksum_counter <= (main_basesoc_ethcore_ip_tx_liteethipv4checksum_counter + 1'd1);
        end
    end
    if (main_basesoc_ethcore_ip_tx_reset) begin
        main_basesoc_ethcore_ip_tx_liteethipv4checksum_counter <= 4'd0;
    end
    if (main_basesoc_ethcore_ip_tx_packetizer_sr_load) begin
        main_basesoc_ethcore_ip_tx_packetizer_sr <= main_basesoc_ethcore_ip_tx_packetizer_header;
    end
    if (main_basesoc_ethcore_ip_tx_packetizer_sr_shift) begin
        main_basesoc_ethcore_ip_tx_packetizer_sr <= main_basesoc_ethcore_ip_tx_packetizer_sr[159:8];
    end
    builder_liteethip_liteethiptx_fsm0_state <= builder_liteethip_liteethiptx_fsm0_next_state;
    if (main_basesoc_ethcore_ip_tx_packetizer_count_liteethip_fsm0_next_value_ce0) begin
        main_basesoc_ethcore_ip_tx_packetizer_count <= main_basesoc_ethcore_ip_tx_packetizer_count_liteethip_fsm0_next_value0;
    end
    if (main_basesoc_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_fsm0_next_value_ce1) begin
        main_basesoc_ethcore_ip_tx_packetizer_fsm_from_idle <= main_basesoc_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_fsm0_next_value1;
    end
    builder_liteethip_liteethiptx_fsm1_state <= builder_liteethip_liteethiptx_fsm1_next_state;
    if (main_basesoc_ethcore_ip_tx_packetizer_delayed_last_be_liteethip_fsm1_next_value_ce0) begin
        main_basesoc_ethcore_ip_tx_packetizer_delayed_last_be <= main_basesoc_ethcore_ip_tx_packetizer_delayed_last_be_liteethip_fsm1_next_value0;
    end
    builder_liteethip_liteethiptx_state <= builder_liteethip_liteethiptx_next_state;
    if (main_basesoc_ethcore_ip_tx_target_mac_liteethip_next_value_ce) begin
        main_basesoc_ethcore_ip_tx_target_mac <= main_basesoc_ethcore_ip_tx_target_mac_liteethip_next_value;
    end
    if (main_basesoc_ethcore_ip_rx_depacketizer_sr_shift) begin
        main_basesoc_ethcore_ip_rx_depacketizer_sr <= {main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_data, main_basesoc_ethcore_ip_rx_depacketizer_sr[159:8]};
    end
    if (main_basesoc_ethcore_ip_rx_depacketizer_sr_shift_leftover) begin
        main_basesoc_ethcore_ip_rx_depacketizer_sr <= {main_basesoc_ethcore_ip_rx_depacketizer_sink_payload_data, main_basesoc_ethcore_ip_rx_depacketizer_sr};
    end
    main_basesoc_ethcore_ip_rx_depacketizer_was_in_copy <= main_basesoc_ethcore_ip_rx_depacketizer_is_in_copy;
    builder_liteethip_liteethiprx_fsm0_state <= builder_liteethip_liteethiprx_fsm0_next_state;
    if (main_basesoc_ethcore_ip_rx_depacketizer_count_liteethip_fsm0_next_value_ce2) begin
        main_basesoc_ethcore_ip_rx_depacketizer_count <= main_basesoc_ethcore_ip_rx_depacketizer_count_liteethip_fsm0_next_value2;
    end
    if (main_basesoc_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_fsm0_next_value_ce3) begin
        main_basesoc_ethcore_ip_rx_depacketizer_fsm_from_idle <= main_basesoc_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_fsm0_next_value3;
    end
    builder_liteethip_liteethiprx_fsm1_state <= builder_liteethip_liteethiprx_fsm1_next_state;
    if (main_basesoc_ethcore_ip_rx_depacketizer_delayed_last_be_liteethip_fsm1_next_value_ce1) begin
        main_basesoc_ethcore_ip_rx_depacketizer_delayed_last_be <= main_basesoc_ethcore_ip_rx_depacketizer_delayed_last_be_liteethip_fsm1_next_value1;
    end
    if (main_basesoc_ethcore_ip_rx_ce) begin
        if ((~main_basesoc_ethcore_ip_rx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next0 <= {main_basesoc_ethcore_ip_rx_liteethipv4checksum0, (main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next0[15:0] + main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next0[16])};
        end
        if ((~main_basesoc_ethcore_ip_rx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next1 <= {main_basesoc_ethcore_ip_rx_liteethipv4checksum1, (main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next1[15:0] + main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next1[16])};
        end
        if ((~main_basesoc_ethcore_ip_rx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next2 <= {main_basesoc_ethcore_ip_rx_liteethipv4checksum2, (main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next2[15:0] + main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next2[16])};
        end
        if ((~main_basesoc_ethcore_ip_rx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next3 <= {main_basesoc_ethcore_ip_rx_liteethipv4checksum3, (main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next3[15:0] + main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next3[16])};
        end
        if ((~main_basesoc_ethcore_ip_rx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next4 <= {main_basesoc_ethcore_ip_rx_liteethipv4checksum4, (main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next4[15:0] + main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next4[16])};
        end
        if ((~main_basesoc_ethcore_ip_rx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next5 <= {main_basesoc_ethcore_ip_rx_liteethipv4checksum5, (main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next5[15:0] + main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next5[16])};
        end
        if ((~main_basesoc_ethcore_ip_rx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next6 <= {main_basesoc_ethcore_ip_rx_liteethipv4checksum6, (main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next6[15:0] + main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next6[16])};
        end
        if ((~main_basesoc_ethcore_ip_rx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next7 <= {main_basesoc_ethcore_ip_rx_liteethipv4checksum7, (main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next7[15:0] + main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next7[16])};
        end
        if ((~main_basesoc_ethcore_ip_rx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next8 <= {main_basesoc_ethcore_ip_rx_liteethipv4checksum8, (main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next8[15:0] + main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next8[16])};
        end
        if ((~main_basesoc_ethcore_ip_rx_liteethipv4checksum_done)) begin
            main_basesoc_ethcore_ip_rx_liteethipv4checksum_r_next9 <= {main_basesoc_ethcore_ip_rx_liteethipv4checksum9, (main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next9[15:0] + main_basesoc_ethcore_ip_rx_liteethipv4checksum_s_next9[16])};
        end
        if (main_basesoc_ethcore_ip_rx_liteethipv4checksum_counter_ce) begin
            main_basesoc_ethcore_ip_rx_liteethipv4checksum_counter <= (main_basesoc_ethcore_ip_rx_liteethipv4checksum_counter + 1'd1);
        end
    end
    if (main_basesoc_ethcore_ip_rx_reset) begin
        main_basesoc_ethcore_ip_rx_liteethipv4checksum_counter <= 4'd0;
    end
    builder_liteethip_liteethiprx_state <= builder_liteethip_liteethiprx_next_state;
    case (builder_liteethip_grant)
        1'd0: begin
            if ((~builder_liteethip_request[0])) begin
                if (builder_liteethip_request[1]) begin
                    builder_liteethip_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~builder_liteethip_request[1])) begin
                if (builder_liteethip_request[0]) begin
                    builder_liteethip_grant <= 1'd0;
                end
            end
        end
    endcase
    builder_liteethip_status0_ongoing1 <= builder_liteethip_status0_ongoing0;
    if (builder_liteethip_status0_last) begin
        builder_liteethip_status0_first <= 1'd1;
    end else begin
        if ((main_basesoc_ethcore_icmp_ip_port_sink_valid & main_basesoc_ethcore_icmp_ip_port_sink_ready)) begin
            builder_liteethip_status0_first <= 1'd0;
        end
    end
    builder_liteethip_status1_ongoing1 <= builder_liteethip_status1_ongoing0;
    if (builder_liteethip_status1_last) begin
        builder_liteethip_status1_first <= 1'd1;
    end else begin
        if ((main_basesoc_ethcore_ip_port_sink_valid & main_basesoc_ethcore_ip_port_sink_ready)) begin
            builder_liteethip_status1_first <= 1'd0;
        end
    end
    if (builder_liteethip_first) begin
        builder_liteethip_sel_ongoing <= builder_liteethip_sel0;
    end
    builder_liteethip_ongoing1 <= builder_liteethip_ongoing0;
    if (builder_liteethip_last) begin
        builder_liteethip_first <= 1'd1;
    end else begin
        if ((main_basesoc_ethcore_ip_crossbar_sink_valid & main_basesoc_ethcore_ip_crossbar_sink_ready)) begin
            builder_liteethip_first <= 1'd0;
        end
    end
    if (main_basesoc_ethcore_icmp_tx_packetizer_sr_load) begin
        main_basesoc_ethcore_icmp_tx_packetizer_sr <= main_basesoc_ethcore_icmp_tx_packetizer_header;
    end
    if (main_basesoc_ethcore_icmp_tx_packetizer_sr_shift) begin
        main_basesoc_ethcore_icmp_tx_packetizer_sr <= main_basesoc_ethcore_icmp_tx_packetizer_sr[63:8];
    end
    builder_liteethicmptx_fsm0_state <= builder_liteethicmptx_fsm0_next_state;
    if (main_basesoc_ethcore_icmp_tx_packetizer_count_fsm0_next_value_ce0) begin
        main_basesoc_ethcore_icmp_tx_packetizer_count <= main_basesoc_ethcore_icmp_tx_packetizer_count_fsm0_next_value0;
    end
    if (main_basesoc_ethcore_icmp_tx_packetizer_fsm_from_idle_fsm0_next_value_ce1) begin
        main_basesoc_ethcore_icmp_tx_packetizer_fsm_from_idle <= main_basesoc_ethcore_icmp_tx_packetizer_fsm_from_idle_fsm0_next_value1;
    end
    builder_liteethicmptx_fsm1_state <= builder_liteethicmptx_fsm1_next_state;
    if (main_basesoc_ethcore_icmp_tx_packetizer_delayed_last_be_fsm1_next_value_ce0) begin
        main_basesoc_ethcore_icmp_tx_packetizer_delayed_last_be <= main_basesoc_ethcore_icmp_tx_packetizer_delayed_last_be_fsm1_next_value0;
    end
    builder_liteethicmptx_state <= builder_liteethicmptx_next_state;
    if (main_basesoc_ethcore_icmp_rx_depacketizer_sr_shift) begin
        main_basesoc_ethcore_icmp_rx_depacketizer_sr <= {main_basesoc_ethcore_icmp_rx_depacketizer_sink_payload_data, main_basesoc_ethcore_icmp_rx_depacketizer_sr[63:8]};
    end
    if (main_basesoc_ethcore_icmp_rx_depacketizer_sr_shift_leftover) begin
        main_basesoc_ethcore_icmp_rx_depacketizer_sr <= {main_basesoc_ethcore_icmp_rx_depacketizer_sink_payload_data, main_basesoc_ethcore_icmp_rx_depacketizer_sr};
    end
    main_basesoc_ethcore_icmp_rx_depacketizer_was_in_copy <= main_basesoc_ethcore_icmp_rx_depacketizer_is_in_copy;
    builder_liteethicmprx_fsm0_state <= builder_liteethicmprx_fsm0_next_state;
    if (main_basesoc_ethcore_icmp_rx_depacketizer_count_fsm0_next_value_ce2) begin
        main_basesoc_ethcore_icmp_rx_depacketizer_count <= main_basesoc_ethcore_icmp_rx_depacketizer_count_fsm0_next_value2;
    end
    if (main_basesoc_ethcore_icmp_rx_depacketizer_fsm_from_idle_fsm0_next_value_ce3) begin
        main_basesoc_ethcore_icmp_rx_depacketizer_fsm_from_idle <= main_basesoc_ethcore_icmp_rx_depacketizer_fsm_from_idle_fsm0_next_value3;
    end
    builder_liteethicmprx_fsm1_state <= builder_liteethicmprx_fsm1_next_state;
    if (main_basesoc_ethcore_icmp_rx_depacketizer_delayed_last_be_fsm1_next_value_ce1) begin
        main_basesoc_ethcore_icmp_rx_depacketizer_delayed_last_be <= main_basesoc_ethcore_icmp_rx_depacketizer_delayed_last_be_fsm1_next_value1;
    end
    builder_liteethicmprx_state <= builder_liteethicmprx_next_state;
    if (main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_re) begin
        main_basesoc_ethcore_icmp_echo_payload_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_ethcore_icmp_echo_payload_fifo_re) begin
            main_basesoc_ethcore_icmp_echo_payload_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_we & main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_writable) & (~main_basesoc_ethcore_icmp_echo_payload_fifo_replace))) begin
        main_basesoc_ethcore_icmp_echo_payload_fifo_produce <= (main_basesoc_ethcore_icmp_echo_payload_fifo_produce + 1'd1);
    end
    if (main_basesoc_ethcore_icmp_echo_payload_fifo_do_read) begin
        main_basesoc_ethcore_icmp_echo_payload_fifo_consume <= (main_basesoc_ethcore_icmp_echo_payload_fifo_consume + 1'd1);
    end
    if (((main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_we & main_basesoc_ethcore_icmp_echo_payload_fifo_syncfifo_writable) & (~main_basesoc_ethcore_icmp_echo_payload_fifo_replace))) begin
        if ((~main_basesoc_ethcore_icmp_echo_payload_fifo_do_read)) begin
            main_basesoc_ethcore_icmp_echo_payload_fifo_level0 <= (main_basesoc_ethcore_icmp_echo_payload_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_ethcore_icmp_echo_payload_fifo_do_read) begin
            main_basesoc_ethcore_icmp_echo_payload_fifo_level0 <= (main_basesoc_ethcore_icmp_echo_payload_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_re) begin
        main_basesoc_ethcore_icmp_echo_param_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_ethcore_icmp_echo_param_fifo_re) begin
            main_basesoc_ethcore_icmp_echo_param_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_we & main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_writable) & (~main_basesoc_ethcore_icmp_echo_param_fifo_replace))) begin
        main_basesoc_ethcore_icmp_echo_param_fifo_produce <= (main_basesoc_ethcore_icmp_echo_param_fifo_produce + 1'd1);
    end
    if (main_basesoc_ethcore_icmp_echo_param_fifo_do_read) begin
        main_basesoc_ethcore_icmp_echo_param_fifo_consume <= (main_basesoc_ethcore_icmp_echo_param_fifo_consume + 1'd1);
    end
    if (((main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_we & main_basesoc_ethcore_icmp_echo_param_fifo_syncfifo_writable) & (~main_basesoc_ethcore_icmp_echo_param_fifo_replace))) begin
        if ((~main_basesoc_ethcore_icmp_echo_param_fifo_do_read)) begin
            main_basesoc_ethcore_icmp_echo_param_fifo_level0 <= (main_basesoc_ethcore_icmp_echo_param_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_ethcore_icmp_echo_param_fifo_do_read) begin
            main_basesoc_ethcore_icmp_echo_param_fifo_level0 <= (main_basesoc_ethcore_icmp_echo_param_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_ethcore_tx_packetizer_sr_load) begin
        main_basesoc_ethcore_tx_packetizer_sr <= main_basesoc_ethcore_tx_packetizer_header;
    end
    if (main_basesoc_ethcore_tx_packetizer_sr_shift) begin
        main_basesoc_ethcore_tx_packetizer_sr <= main_basesoc_ethcore_tx_packetizer_sr[63:8];
    end
    builder_liteethudp_liteethudptx_fsm0_state <= builder_liteethudp_liteethudptx_fsm0_next_state;
    if (main_basesoc_ethcore_tx_packetizer_count_liteethudp_fsm0_next_value_ce0) begin
        main_basesoc_ethcore_tx_packetizer_count <= main_basesoc_ethcore_tx_packetizer_count_liteethudp_fsm0_next_value0;
    end
    if (main_basesoc_ethcore_tx_packetizer_fsm_from_idle_liteethudp_fsm0_next_value_ce1) begin
        main_basesoc_ethcore_tx_packetizer_fsm_from_idle <= main_basesoc_ethcore_tx_packetizer_fsm_from_idle_liteethudp_fsm0_next_value1;
    end
    builder_liteethudp_liteethudptx_fsm1_state <= builder_liteethudp_liteethudptx_fsm1_next_state;
    if (main_basesoc_ethcore_tx_packetizer_delayed_last_be_liteethudp_fsm1_next_value_ce0) begin
        main_basesoc_ethcore_tx_packetizer_delayed_last_be <= main_basesoc_ethcore_tx_packetizer_delayed_last_be_liteethudp_fsm1_next_value0;
    end
    builder_liteethudp_liteethudptx_state <= builder_liteethudp_liteethudptx_next_state;
    if (main_basesoc_ethcore_rx_depacketizer_sr_shift) begin
        main_basesoc_ethcore_rx_depacketizer_sr <= {main_basesoc_ethcore_rx_depacketizer_sink_payload_data, main_basesoc_ethcore_rx_depacketizer_sr[63:8]};
    end
    if (main_basesoc_ethcore_rx_depacketizer_sr_shift_leftover) begin
        main_basesoc_ethcore_rx_depacketizer_sr <= {main_basesoc_ethcore_rx_depacketizer_sink_payload_data, main_basesoc_ethcore_rx_depacketizer_sr};
    end
    main_basesoc_ethcore_rx_depacketizer_was_in_copy <= main_basesoc_ethcore_rx_depacketizer_is_in_copy;
    builder_liteethudp_liteethudprx_fsm0_state <= builder_liteethudp_liteethudprx_fsm0_next_state;
    if (main_basesoc_ethcore_rx_depacketizer_count_liteethudp_fsm0_next_value_ce2) begin
        main_basesoc_ethcore_rx_depacketizer_count <= main_basesoc_ethcore_rx_depacketizer_count_liteethudp_fsm0_next_value2;
    end
    if (main_basesoc_ethcore_rx_depacketizer_fsm_from_idle_liteethudp_fsm0_next_value_ce3) begin
        main_basesoc_ethcore_rx_depacketizer_fsm_from_idle <= main_basesoc_ethcore_rx_depacketizer_fsm_from_idle_liteethudp_fsm0_next_value3;
    end
    builder_liteethudp_liteethudprx_fsm1_state <= builder_liteethudp_liteethudprx_fsm1_next_state;
    if (main_basesoc_ethcore_rx_depacketizer_delayed_last_be_liteethudp_fsm1_next_value_ce1) begin
        main_basesoc_ethcore_rx_depacketizer_delayed_last_be <= main_basesoc_ethcore_rx_depacketizer_delayed_last_be_liteethudp_fsm1_next_value1;
    end
    builder_liteethudp_liteethudprx_state <= builder_liteethudp_liteethudprx_next_state;
    if (main_basesoc_ethcore_rx_count_liteethudp_next_value_ce) begin
        main_basesoc_ethcore_rx_count <= main_basesoc_ethcore_rx_count_liteethudp_next_value;
    end
    main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_binary <= main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_next_binary;
    main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q <= main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_next;
    if ((main_basesoc_etherbone_tx_converter_converter_source_valid & main_basesoc_etherbone_tx_converter_converter_source_ready)) begin
        if (main_basesoc_etherbone_tx_converter_converter_last) begin
            main_basesoc_etherbone_tx_converter_converter_mux <= 1'd0;
        end else begin
            main_basesoc_etherbone_tx_converter_converter_mux <= (main_basesoc_etherbone_tx_converter_converter_mux + 1'd1);
        end
    end
    main_basesoc_etherbone_rx_converter_source_param_src_port <= main_basesoc_etherbone_rx_converter_sink_param_src_port;
    main_basesoc_etherbone_rx_converter_source_param_dst_port <= main_basesoc_etherbone_rx_converter_sink_param_dst_port;
    main_basesoc_etherbone_rx_converter_source_param_ip_address <= main_basesoc_etherbone_rx_converter_sink_param_ip_address;
    main_basesoc_etherbone_rx_converter_source_param_length <= main_basesoc_etherbone_rx_converter_sink_param_length;
    if (main_basesoc_etherbone_rx_converter_converter_source_ready) begin
        main_basesoc_etherbone_rx_converter_converter_strobe_all <= 1'd0;
    end
    if (main_basesoc_etherbone_rx_converter_converter_load_part) begin
        if (((main_basesoc_etherbone_rx_converter_converter_demux == 2'd3) | main_basesoc_etherbone_rx_converter_converter_sink_last)) begin
            main_basesoc_etherbone_rx_converter_converter_demux <= 1'd0;
            main_basesoc_etherbone_rx_converter_converter_strobe_all <= 1'd1;
        end else begin
            main_basesoc_etherbone_rx_converter_converter_demux <= (main_basesoc_etherbone_rx_converter_converter_demux + 1'd1);
        end
    end
    if ((main_basesoc_etherbone_rx_converter_converter_source_valid & main_basesoc_etherbone_rx_converter_converter_source_ready)) begin
        if ((main_basesoc_etherbone_rx_converter_converter_sink_valid & main_basesoc_etherbone_rx_converter_converter_sink_ready)) begin
            main_basesoc_etherbone_rx_converter_converter_source_first <= main_basesoc_etherbone_rx_converter_converter_sink_first;
            main_basesoc_etherbone_rx_converter_converter_source_last <= main_basesoc_etherbone_rx_converter_converter_sink_last;
        end else begin
            main_basesoc_etherbone_rx_converter_converter_source_first <= 1'd0;
            main_basesoc_etherbone_rx_converter_converter_source_last <= 1'd0;
        end
    end else begin
        if ((main_basesoc_etherbone_rx_converter_converter_sink_valid & main_basesoc_etherbone_rx_converter_converter_sink_ready)) begin
            main_basesoc_etherbone_rx_converter_converter_source_first <= (main_basesoc_etherbone_rx_converter_converter_sink_first | main_basesoc_etherbone_rx_converter_converter_source_first);
            main_basesoc_etherbone_rx_converter_converter_source_last <= (main_basesoc_etherbone_rx_converter_converter_sink_last | main_basesoc_etherbone_rx_converter_converter_source_last);
        end
    end
    if (main_basesoc_etherbone_rx_converter_converter_load_part) begin
        case (main_basesoc_etherbone_rx_converter_converter_demux)
            1'd0: begin
                main_basesoc_etherbone_rx_converter_converter_source_payload_data[9:0] <= main_basesoc_etherbone_rx_converter_converter_sink_payload_data;
            end
            1'd1: begin
                main_basesoc_etherbone_rx_converter_converter_source_payload_data[19:10] <= main_basesoc_etherbone_rx_converter_converter_sink_payload_data;
            end
            2'd2: begin
                main_basesoc_etherbone_rx_converter_converter_source_payload_data[29:20] <= main_basesoc_etherbone_rx_converter_converter_sink_payload_data;
            end
            2'd3: begin
                main_basesoc_etherbone_rx_converter_converter_source_payload_data[39:30] <= main_basesoc_etherbone_rx_converter_converter_sink_payload_data;
            end
        endcase
    end
    if (main_basesoc_etherbone_rx_converter_converter_load_part) begin
        main_basesoc_etherbone_rx_converter_converter_source_payload_valid_token_count <= (main_basesoc_etherbone_rx_converter_converter_demux + 1'd1);
    end
    main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_binary <= main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_next_binary;
    main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q <= main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_next;
    if (builder_liteethudp_first) begin
        builder_liteethudp_sel_ongoing <= builder_liteethudp_sel0;
    end
    builder_liteethudp_ongoing1 <= builder_liteethudp_ongoing0;
    if (builder_liteethudp_last) begin
        builder_liteethudp_first <= 1'd1;
    end else begin
        if ((main_basesoc_ethcore_crossbar_sink_valid & main_basesoc_ethcore_crossbar_sink_ready)) begin
            builder_liteethudp_first <= 1'd0;
        end
    end
    if (eth_rx_rst) begin
        main_ethphy_liteethphyrgmiirx_source_valid <= 1'd0;
        main_ethphy_liteethphyrgmiirx_source_payload_data <= 8'd0;
        main_ethphy_liteethphyrgmiirx_rx_ctl_d <= 1'd0;
        main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q <= 6'd0;
        main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q_binary <= 6'd0;
        main_basesoc_ethcore_mac_core_preamble_errors_status <= 32'd0;
        main_basesoc_ethcore_mac_core_crc_errors_status <= 32'd0;
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_reg <= 32'd4294967295;
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_level <= 3'd0;
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_produce <= 3'd0;
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_consume <= 3'd0;
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_last_be <= 1'd0;
        main_basesoc_ethcore_mac_core_liteethmaccrc32checker_crc_error1 <= 1'd0;
        main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_valid <= 1'd0;
        main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_payload_data <= 8'd0;
        main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_payload_last_be <= 1'd0;
        main_basesoc_ethcore_mac_core_bufferizeendpoints_pipe_valid_source_payload_error <= 1'd0;
        main_basesoc_ethcore_mac_core_cdc_readable <= 1'd0;
        main_basesoc_ethcore_mac_core_cdc_graycounter0_q <= 6'd0;
        main_basesoc_ethcore_mac_core_cdc_graycounter0_q_binary <= 6'd0;
        main_basesoc_ethcore_mac_core_cdc_graycounter1_q <= 6'd0;
        main_basesoc_ethcore_mac_core_cdc_graycounter1_q_binary <= 6'd0;
        main_basesoc_ethcore_mac_packetizer_count <= 4'd0;
        main_basesoc_ethcore_mac_packetizer_fsm_from_idle <= 1'd0;
        main_basesoc_ethcore_mac_packetizer_delayed_last_be <= 1'd0;
        main_basesoc_ethcore_mac_depacketizer_count <= 4'd0;
        main_basesoc_ethcore_mac_depacketizer_fsm_from_idle <= 1'd0;
        main_basesoc_ethcore_mac_depacketizer_delayed_last_be <= 1'd0;
        main_basesoc_ethcore_mac_depacketizer_was_in_copy <= 1'd0;
        main_basesoc_ethcore_arp_tx_packetizer_count <= 5'd0;
        main_basesoc_ethcore_arp_tx_packetizer_fsm_from_idle <= 1'd0;
        main_basesoc_ethcore_arp_tx_packetizer_delayed_last_be <= 1'd0;
        main_basesoc_ethcore_arp_rx_depacketizer_count <= 5'd0;
        main_basesoc_ethcore_arp_rx_depacketizer_fsm_from_idle <= 1'd0;
        main_basesoc_ethcore_arp_rx_depacketizer_delayed_last_be <= 1'd0;
        main_basesoc_ethcore_arp_rx_depacketizer_was_in_copy <= 1'd0;
        main_basesoc_ethcore_arp_table_response_response_payload_failed <= 1'd0;
        main_basesoc_ethcore_arp_table_response_response_payload_mac_address <= 48'd0;
        main_basesoc_ethcore_arp_table_request_pending <= 1'd0;
        main_basesoc_ethcore_arp_table_request_counter <= 3'd0;
        main_basesoc_ethcore_arp_table_request_timer_count <= 23'd5000000;
        main_basesoc_ethcore_arp_table_cache_update_count <= 1'd0;
        main_basesoc_ethcore_arp_table_cache_search_count <= 1'd0;
        main_basesoc_ethcore_arp_table_cache_error <= 1'd0;
        main_basesoc_ethcore_arp_table_cache_count <= 26'd50000000;
        main_basesoc_ethcore_ip_tx_pipe_valid_source_valid <= 1'd0;
        main_basesoc_ethcore_ip_tx_pipe_valid_source_payload_data <= 8'd0;
        main_basesoc_ethcore_ip_tx_pipe_valid_source_payload_last_be <= 1'd0;
        main_basesoc_ethcore_ip_tx_pipe_valid_source_payload_error <= 1'd0;
        main_basesoc_ethcore_ip_tx_liteethipv4checksum_counter <= 4'd0;
        main_basesoc_ethcore_ip_tx_packetizer_count <= 5'd0;
        main_basesoc_ethcore_ip_tx_packetizer_fsm_from_idle <= 1'd0;
        main_basesoc_ethcore_ip_tx_packetizer_delayed_last_be <= 1'd0;
        main_basesoc_ethcore_ip_rx_depacketizer_count <= 5'd0;
        main_basesoc_ethcore_ip_rx_depacketizer_fsm_from_idle <= 1'd0;
        main_basesoc_ethcore_ip_rx_depacketizer_delayed_last_be <= 1'd0;
        main_basesoc_ethcore_ip_rx_depacketizer_was_in_copy <= 1'd0;
        main_basesoc_ethcore_ip_rx_liteethipv4checksum_counter <= 4'd0;
        main_basesoc_ethcore_icmp_tx_packetizer_count <= 3'd0;
        main_basesoc_ethcore_icmp_tx_packetizer_fsm_from_idle <= 1'd0;
        main_basesoc_ethcore_icmp_tx_packetizer_delayed_last_be <= 1'd0;
        main_basesoc_ethcore_icmp_rx_depacketizer_count <= 3'd0;
        main_basesoc_ethcore_icmp_rx_depacketizer_fsm_from_idle <= 1'd0;
        main_basesoc_ethcore_icmp_rx_depacketizer_delayed_last_be <= 1'd0;
        main_basesoc_ethcore_icmp_rx_depacketizer_was_in_copy <= 1'd0;
        main_basesoc_ethcore_icmp_echo_payload_fifo_readable <= 1'd0;
        main_basesoc_ethcore_icmp_echo_payload_fifo_level0 <= 8'd0;
        main_basesoc_ethcore_icmp_echo_payload_fifo_produce <= 7'd0;
        main_basesoc_ethcore_icmp_echo_payload_fifo_consume <= 7'd0;
        main_basesoc_ethcore_icmp_echo_param_fifo_readable <= 1'd0;
        main_basesoc_ethcore_icmp_echo_param_fifo_level0 <= 2'd0;
        main_basesoc_ethcore_icmp_echo_param_fifo_produce <= 1'd0;
        main_basesoc_ethcore_icmp_echo_param_fifo_consume <= 1'd0;
        main_basesoc_ethcore_tx_packetizer_count <= 3'd0;
        main_basesoc_ethcore_tx_packetizer_fsm_from_idle <= 1'd0;
        main_basesoc_ethcore_tx_packetizer_delayed_last_be <= 1'd0;
        main_basesoc_ethcore_rx_depacketizer_count <= 3'd0;
        main_basesoc_ethcore_rx_depacketizer_fsm_from_idle <= 1'd0;
        main_basesoc_ethcore_rx_depacketizer_delayed_last_be <= 1'd0;
        main_basesoc_ethcore_rx_depacketizer_was_in_copy <= 1'd0;
        main_basesoc_ethcore_rx_count <= 16'd0;
        main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q <= 3'd0;
        main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q_binary <= 3'd0;
        main_basesoc_etherbone_tx_converter_converter_mux <= 2'd0;
        main_basesoc_etherbone_rx_converter_converter_source_payload_data <= 40'd0;
        main_basesoc_etherbone_rx_converter_converter_source_payload_valid_token_count <= 3'd0;
        main_basesoc_etherbone_rx_converter_converter_demux <= 2'd0;
        main_basesoc_etherbone_rx_converter_converter_strobe_all <= 1'd0;
        main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q <= 3'd0;
        main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q_binary <= 3'd0;
        builder_liteethmac_rxdatapath_liteethmacpreamblechecker_state <= 1'd0;
        builder_liteethmac_rxdatapath_bufferizeendpoints_state <= 2'd0;
        builder_liteethmac_grant <= 1'd0;
        builder_liteethmac_status0_first <= 1'd1;
        builder_liteethmac_status0_ongoing1 <= 1'd0;
        builder_liteethmac_status1_first <= 1'd1;
        builder_liteethmac_status1_ongoing1 <= 1'd0;
        builder_liteethmac_first <= 1'd1;
        builder_liteethmac_ongoing1 <= 1'd0;
        builder_liteethmac_sel_ongoing <= 2'd0;
        builder_liteethmac_fsm0_state0 <= 2'd0;
        builder_liteethmac_fsm1_state0 <= 1'd0;
        builder_liteethmac_fsm0_state1 <= 2'd0;
        builder_liteethmac_fsm1_state1 <= 1'd0;
        builder_liteetharptx_fsm0_state <= 2'd0;
        builder_liteetharptx_fsm1_state <= 1'd0;
        builder_liteetharptx_state <= 1'd0;
        builder_liteetharprx_fsm0_state <= 2'd0;
        builder_liteetharprx_fsm1_state <= 1'd0;
        builder_liteetharprx_state <= 2'd0;
        builder_liteetharpcache_state <= 3'd0;
        builder_fsm_state <= 3'd0;
        builder_liteethip_liteethiptx_fsm0_state <= 2'd0;
        builder_liteethip_liteethiptx_fsm1_state <= 1'd0;
        builder_liteethip_liteethiptx_state <= 3'd0;
        builder_liteethip_liteethiprx_fsm0_state <= 2'd0;
        builder_liteethip_liteethiprx_fsm1_state <= 1'd0;
        builder_liteethip_liteethiprx_state <= 2'd0;
        builder_liteethip_grant <= 1'd0;
        builder_liteethip_status0_first <= 1'd1;
        builder_liteethip_status0_ongoing1 <= 1'd0;
        builder_liteethip_status1_first <= 1'd1;
        builder_liteethip_status1_ongoing1 <= 1'd0;
        builder_liteethip_first <= 1'd1;
        builder_liteethip_ongoing1 <= 1'd0;
        builder_liteethip_sel_ongoing <= 2'd0;
        builder_liteethicmptx_fsm0_state <= 2'd0;
        builder_liteethicmptx_fsm1_state <= 1'd0;
        builder_liteethicmptx_state <= 1'd0;
        builder_liteethicmprx_fsm0_state <= 2'd0;
        builder_liteethicmprx_fsm1_state <= 1'd0;
        builder_liteethicmprx_state <= 2'd0;
        builder_liteethudp_liteethudptx_fsm0_state <= 2'd0;
        builder_liteethudp_liteethudptx_fsm1_state <= 1'd0;
        builder_liteethudp_liteethudptx_state <= 1'd0;
        builder_liteethudp_liteethudprx_fsm0_state <= 2'd0;
        builder_liteethudp_liteethudprx_fsm1_state <= 1'd0;
        builder_liteethudp_liteethudprx_state <= 2'd0;
        builder_liteethudp_first <= 1'd1;
        builder_liteethudp_ongoing1 <= 1'd0;
        builder_liteethudp_sel_ongoing <= 1'd0;
    end
    builder_xilinxmultiregimpl3_regs0 <= main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q;
    builder_xilinxmultiregimpl3_regs1 <= builder_xilinxmultiregimpl3_regs0;
    builder_xilinxmultiregimpl4_regs0 <= main_basesoc_ethcore_mac_core_pulsesynchronizer0_toggle_i;
    builder_xilinxmultiregimpl4_regs1 <= builder_xilinxmultiregimpl4_regs0;
    builder_xilinxmultiregimpl5_regs0 <= main_basesoc_ethcore_mac_core_pulsesynchronizer1_toggle_i;
    builder_xilinxmultiregimpl5_regs1 <= builder_xilinxmultiregimpl5_regs0;
    builder_xilinxmultiregimpl6_regs0 <= main_basesoc_ethcore_mac_core_cdc_graycounter0_q;
    builder_xilinxmultiregimpl6_regs1 <= builder_xilinxmultiregimpl6_regs0;
    builder_xilinxmultiregimpl7_regs0 <= main_basesoc_ethcore_mac_core_cdc_graycounter1_q;
    builder_xilinxmultiregimpl7_regs1 <= builder_xilinxmultiregimpl7_regs0;
    builder_xilinxmultiregimpl8_regs0 <= main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q;
    builder_xilinxmultiregimpl8_regs1 <= builder_xilinxmultiregimpl8_regs0;
    builder_xilinxmultiregimpl11_regs0 <= main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q;
    builder_xilinxmultiregimpl11_regs1 <= builder_xilinxmultiregimpl11_regs0;
end

always @(posedge eth_tx_clk) begin
    if ((main_basesoc_ethcore_mac_core_tx_cdc_cdc_re | (~main_basesoc_ethcore_mac_core_tx_cdc_cdc_readable))) begin
        main_basesoc_ethcore_mac_core_tx_cdc_cdc_dout <= main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_dout;
        main_basesoc_ethcore_mac_core_tx_cdc_cdc_readable <= main_basesoc_ethcore_mac_core_tx_cdc_cdc_asyncfifo_readable;
    end
    main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_binary <= main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_next_binary;
    main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q <= main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_next;
    builder_liteethmac_txdatapath_liteethmacpaddinginserter_state <= builder_liteethmac_txdatapath_liteethmacpaddinginserter_next_state;
    if (main_basesoc_ethcore_mac_core_tx_padding_counter_liteethmac_clockdomainsrenamer0_next_value_ce) begin
        main_basesoc_ethcore_mac_core_tx_padding_counter <= main_basesoc_ethcore_mac_core_tx_padding_counter_liteethmac_clockdomainsrenamer0_next_value;
    end
    if (main_basesoc_ethcore_mac_core_tx_crc_is_ongoing0) begin
        main_basesoc_ethcore_mac_core_tx_crc_cnt <= 2'd3;
    end else begin
        if ((main_basesoc_ethcore_mac_core_tx_crc_is_ongoing1 & (~main_basesoc_ethcore_mac_core_tx_crc_cnt_done))) begin
            main_basesoc_ethcore_mac_core_tx_crc_cnt <= (main_basesoc_ethcore_mac_core_tx_crc_cnt - main_basesoc_ethcore_mac_core_tx_crc_source_ready);
        end
    end
    if (main_basesoc_ethcore_mac_core_tx_crc_ce) begin
        main_basesoc_ethcore_mac_core_tx_crc_reg <= main_basesoc_ethcore_mac_core_tx_crc_crc_next;
    end
    if (main_basesoc_ethcore_mac_core_tx_crc_reset) begin
        main_basesoc_ethcore_mac_core_tx_crc_reg <= 32'd4294967295;
    end
    builder_liteethmac_txdatapath_bufferizeendpoints_state <= builder_liteethmac_txdatapath_bufferizeendpoints_next_state;
    if (main_basesoc_ethcore_mac_core_tx_crc_description_liteethmac_clockdomainsrenamer1_next_value_ce0) begin
        main_basesoc_ethcore_mac_core_tx_crc_description <= main_basesoc_ethcore_mac_core_tx_crc_description_liteethmac_clockdomainsrenamer1_next_value0;
    end
    if (main_basesoc_ethcore_mac_core_tx_crc_fsm0_liteethmac_clockdomainsrenamer1_next_value_ce1) begin
        main_basesoc_ethcore_mac_core_tx_crc_fsm0 <= main_basesoc_ethcore_mac_core_tx_crc_fsm0_liteethmac_clockdomainsrenamer1_next_value1;
    end
    if (((~main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_valid) | main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_ready)) begin
        main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_valid <= main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_valid;
        main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_first <= main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_first;
        main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_last <= main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_last;
        main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_payload_data <= main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_payload_data;
        main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_payload_last_be <= main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_payload_last_be;
        main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_payload_error <= main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_sink_payload_error;
    end
    builder_liteethmac_txdatapath_liteethmacpreambleinserter_state <= builder_liteethmac_txdatapath_liteethmacpreambleinserter_next_state;
    if (main_basesoc_ethcore_mac_core_tx_preamble_count_liteethmac_clockdomainsrenamer2_next_value_ce) begin
        main_basesoc_ethcore_mac_core_tx_preamble_count <= main_basesoc_ethcore_mac_core_tx_preamble_count_liteethmac_clockdomainsrenamer2_next_value;
    end
    builder_liteethmac_txdatapath_liteethmacgap_state <= builder_liteethmac_txdatapath_liteethmacgap_next_state;
    if (main_basesoc_ethcore_mac_core_tx_gap_counter_liteethmac_clockdomainsrenamer3_next_value_ce) begin
        main_basesoc_ethcore_mac_core_tx_gap_counter <= main_basesoc_ethcore_mac_core_tx_gap_counter_liteethmac_clockdomainsrenamer3_next_value;
    end
    if (eth_tx_rst) begin
        main_basesoc_ethcore_mac_core_tx_cdc_cdc_readable <= 1'd0;
        main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q <= 6'd0;
        main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter1_q_binary <= 6'd0;
        main_basesoc_ethcore_mac_core_tx_padding_counter <= 16'd0;
        main_basesoc_ethcore_mac_core_tx_crc_reg <= 32'd4294967295;
        main_basesoc_ethcore_mac_core_tx_crc_cnt <= 2'd3;
        main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_valid <= 1'd0;
        main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_payload_data <= 8'd0;
        main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_payload_last_be <= 1'd0;
        main_basesoc_ethcore_mac_core_tx_crc_pipe_valid_source_payload_error <= 1'd0;
        builder_liteethmac_txdatapath_liteethmacpaddinginserter_state <= 1'd0;
        builder_liteethmac_txdatapath_bufferizeendpoints_state <= 2'd0;
        builder_liteethmac_txdatapath_liteethmacpreambleinserter_state <= 2'd0;
        builder_liteethmac_txdatapath_liteethmacgap_state <= 1'd0;
    end
    builder_xilinxmultiregimpl2_regs0 <= main_basesoc_ethcore_mac_core_tx_cdc_cdc_graycounter0_q;
    builder_xilinxmultiregimpl2_regs1 <= builder_xilinxmultiregimpl2_regs0;
end

always @(posedge etherbone_clk) begin
    main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_binary <= main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_next_binary;
    main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q <= main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_next;
    main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_binary <= main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_next_binary;
    main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q <= main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_next;
    if (etherbone_rst) begin
        main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q <= 3'd0;
        main_basesoc_etherbone_tx_cdc_cdc_graycounter0_q_binary <= 3'd0;
        main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q <= 3'd0;
        main_basesoc_etherbone_rx_cdc_cdc_graycounter1_q_binary <= 3'd0;
    end
    builder_xilinxmultiregimpl9_regs0 <= main_basesoc_etherbone_tx_cdc_cdc_graycounter1_q;
    builder_xilinxmultiregimpl9_regs1 <= builder_xilinxmultiregimpl9_regs0;
    builder_xilinxmultiregimpl10_regs0 <= main_basesoc_etherbone_rx_cdc_cdc_graycounter0_q;
    builder_xilinxmultiregimpl10_regs1 <= builder_xilinxmultiregimpl10_regs0;
end

always @(posedge idelay_clk) begin
    if ((main_crg_reset_counter != 1'd0)) begin
        main_crg_reset_counter <= (main_crg_reset_counter - 1'd1);
    end else begin
        main_crg_ic_reset <= 1'd0;
    end
    if (idelay_rst) begin
        main_crg_reset_counter <= 4'd15;
        main_crg_ic_reset <= 1'd1;
    end
end

always @(posedge sys_clk) begin
    case (builder_grant)
        1'd0: begin
            if ((~builder_request[0])) begin
                if (builder_request[1]) begin
                    builder_grant <= 1'd1;
                end else begin
                    if (builder_request[2]) begin
                        builder_grant <= 2'd2;
                    end
                end
            end
        end
        1'd1: begin
            if ((~builder_request[1])) begin
                if (builder_request[2]) begin
                    builder_grant <= 2'd2;
                end else begin
                    if (builder_request[0]) begin
                        builder_grant <= 1'd0;
                    end
                end
            end
        end
        2'd2: begin
            if ((~builder_request[2])) begin
                if (builder_request[0]) begin
                    builder_grant <= 1'd0;
                end else begin
                    if (builder_request[1]) begin
                        builder_grant <= 1'd1;
                    end
                end
            end
        end
    endcase
    builder_slaves <= builder_master;
    if (builder_wait) begin
        if ((~builder_done)) begin
            builder_count <= (builder_count - 1'd1);
        end
    end else begin
        builder_count <= 20'd1000000;
    end
    if ((main_basesoc_basesoc_bus_errors != 32'd4294967295)) begin
        if (main_basesoc_basesoc_bus_error) begin
            main_basesoc_basesoc_bus_errors <= (main_basesoc_basesoc_bus_errors + 1'd1);
        end
    end
    main_basesoc_basesoc_basesoc_ram_bus_ack <= 1'd0;
    if (((main_basesoc_basesoc_basesoc_ram_bus_cyc & main_basesoc_basesoc_basesoc_ram_bus_stb) & ((~main_basesoc_basesoc_basesoc_ram_bus_ack) | main_basesoc_basesoc_basesoc_adr_burst))) begin
        main_basesoc_basesoc_basesoc_ram_bus_ack <= 1'd1;
    end
    main_basesoc_basesoc_ram_bus_ram_bus_ack <= 1'd0;
    if (((main_basesoc_basesoc_ram_bus_ram_bus_cyc & main_basesoc_basesoc_ram_bus_ram_bus_stb) & ((~main_basesoc_basesoc_ram_bus_ram_bus_ack) | main_basesoc_basesoc_ram_adr_burst))) begin
        main_basesoc_basesoc_ram_bus_ram_bus_ack <= 1'd1;
    end
    {main_basesoc_basesoc_tx_tick, main_basesoc_basesoc_tx_phase} <= 24'd9895604;
    if (main_basesoc_basesoc_tx_enable) begin
        {main_basesoc_basesoc_tx_tick, main_basesoc_basesoc_tx_phase} <= (main_basesoc_basesoc_tx_phase + 24'd9895604);
    end
    builder_rs232phytx_state <= builder_rs232phytx_next_state;
    if (main_basesoc_basesoc_tx_count_rs232phytx_next_value_ce0) begin
        main_basesoc_basesoc_tx_count <= main_basesoc_basesoc_tx_count_rs232phytx_next_value0;
    end
    if (main_basesoc_basesoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= main_basesoc_basesoc_serial_tx_rs232phytx_next_value1;
    end
    if (main_basesoc_basesoc_tx_data_rs232phytx_next_value_ce2) begin
        main_basesoc_basesoc_tx_data <= main_basesoc_basesoc_tx_data_rs232phytx_next_value2;
    end
    main_basesoc_basesoc_rx_rx_d <= main_basesoc_basesoc_rx_rx;
    {main_basesoc_basesoc_rx_tick, main_basesoc_basesoc_rx_phase} <= 32'd2147483648;
    if (main_basesoc_basesoc_rx_enable) begin
        {main_basesoc_basesoc_rx_tick, main_basesoc_basesoc_rx_phase} <= (main_basesoc_basesoc_rx_phase + 24'd9895604);
    end
    builder_rs232phyrx_state <= builder_rs232phyrx_next_state;
    if (main_basesoc_basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        main_basesoc_basesoc_rx_count <= main_basesoc_basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (main_basesoc_basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        main_basesoc_basesoc_rx_data <= main_basesoc_basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (main_basesoc_basesoc_uart_tx_clear) begin
        main_basesoc_basesoc_uart_tx_pending <= 1'd0;
    end
    main_basesoc_basesoc_uart_tx_trigger_d <= main_basesoc_basesoc_uart_tx_trigger;
    if ((main_basesoc_basesoc_uart_tx_trigger & (~main_basesoc_basesoc_uart_tx_trigger_d))) begin
        main_basesoc_basesoc_uart_tx_pending <= 1'd1;
    end
    if (main_basesoc_basesoc_uart_rx_clear) begin
        main_basesoc_basesoc_uart_rx_pending <= 1'd0;
    end
    main_basesoc_basesoc_uart_rx_trigger_d <= main_basesoc_basesoc_uart_rx_trigger;
    if ((main_basesoc_basesoc_uart_rx_trigger & (~main_basesoc_basesoc_uart_rx_trigger_d))) begin
        main_basesoc_basesoc_uart_rx_pending <= 1'd1;
    end
    if (main_basesoc_basesoc_uart_tx_fifo_syncfifo_re) begin
        main_basesoc_basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_basesoc_uart_tx_fifo_re) begin
            main_basesoc_basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_basesoc_uart_tx_fifo_replace))) begin
        main_basesoc_basesoc_uart_tx_fifo_produce <= (main_basesoc_basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (main_basesoc_basesoc_uart_tx_fifo_do_read) begin
        main_basesoc_basesoc_uart_tx_fifo_consume <= (main_basesoc_basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_basesoc_uart_tx_fifo_replace))) begin
        if ((~main_basesoc_basesoc_uart_tx_fifo_do_read)) begin
            main_basesoc_basesoc_uart_tx_fifo_level0 <= (main_basesoc_basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_basesoc_uart_tx_fifo_do_read) begin
            main_basesoc_basesoc_uart_tx_fifo_level0 <= (main_basesoc_basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_basesoc_uart_rx_fifo_syncfifo_re) begin
        main_basesoc_basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_basesoc_uart_rx_fifo_re) begin
            main_basesoc_basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_basesoc_uart_rx_fifo_replace))) begin
        main_basesoc_basesoc_uart_rx_fifo_produce <= (main_basesoc_basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (main_basesoc_basesoc_uart_rx_fifo_do_read) begin
        main_basesoc_basesoc_uart_rx_fifo_consume <= (main_basesoc_basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_basesoc_uart_rx_fifo_replace))) begin
        if ((~main_basesoc_basesoc_uart_rx_fifo_do_read)) begin
            main_basesoc_basesoc_uart_rx_fifo_level0 <= (main_basesoc_basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_basesoc_uart_rx_fifo_do_read) begin
            main_basesoc_basesoc_uart_rx_fifo_level0 <= (main_basesoc_basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_basesoc_timer_en_storage) begin
        if ((main_basesoc_basesoc_timer_value == 1'd0)) begin
            main_basesoc_basesoc_timer_value <= main_basesoc_basesoc_timer_reload_storage;
        end else begin
            main_basesoc_basesoc_timer_value <= (main_basesoc_basesoc_timer_value - 1'd1);
        end
    end else begin
        main_basesoc_basesoc_timer_value <= main_basesoc_basesoc_timer_load_storage;
    end
    if (main_basesoc_basesoc_timer_update_value_re) begin
        main_basesoc_basesoc_timer_value_status <= main_basesoc_basesoc_timer_value;
    end
    if (main_basesoc_basesoc_timer_zero_clear) begin
        main_basesoc_basesoc_timer_zero_pending <= 1'd0;
    end
    main_basesoc_basesoc_timer_zero_trigger_d <= main_basesoc_basesoc_timer_zero_trigger;
    if ((main_basesoc_basesoc_timer_zero_trigger & (~main_basesoc_basesoc_timer_zero_trigger_d))) begin
        main_basesoc_basesoc_timer_zero_pending <= 1'd1;
    end
    main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0 <= main_a7ddrphy_dqs_oe_delay_tappeddelayline;
    main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1 <= main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0;
    main_a7ddrphy_dqspattern_o1 <= main_a7ddrphy_dqspattern_o0;
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip0_value0 <= (main_a7ddrphy_bitslip0_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip0_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip0_r0 <= {main_a7ddrphy_dqspattern_o1, main_a7ddrphy_bitslip0_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip1_value0 <= (main_a7ddrphy_bitslip1_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip1_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip1_r0 <= {main_a7ddrphy_dqspattern_o1, main_a7ddrphy_bitslip1_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip2_value0 <= (main_a7ddrphy_bitslip2_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip2_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip2_r0 <= {main_a7ddrphy_dqspattern_o1, main_a7ddrphy_bitslip2_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip3_value0 <= (main_a7ddrphy_bitslip3_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip3_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip3_r0 <= {main_a7ddrphy_dqspattern_o1, main_a7ddrphy_bitslip3_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip0_value1 <= (main_a7ddrphy_bitslip0_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip0_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip0_r1 <= {{main_a7ddrphy_dfi_p3_wrdata_mask[4], main_a7ddrphy_dfi_p3_wrdata_mask[0], main_a7ddrphy_dfi_p2_wrdata_mask[4], main_a7ddrphy_dfi_p2_wrdata_mask[0], main_a7ddrphy_dfi_p1_wrdata_mask[4], main_a7ddrphy_dfi_p1_wrdata_mask[0], main_a7ddrphy_dfi_p0_wrdata_mask[4], main_a7ddrphy_dfi_p0_wrdata_mask[0]}, main_a7ddrphy_bitslip0_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip1_value1 <= (main_a7ddrphy_bitslip1_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip1_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip1_r1 <= {{main_a7ddrphy_dfi_p3_wrdata_mask[5], main_a7ddrphy_dfi_p3_wrdata_mask[1], main_a7ddrphy_dfi_p2_wrdata_mask[5], main_a7ddrphy_dfi_p2_wrdata_mask[1], main_a7ddrphy_dfi_p1_wrdata_mask[5], main_a7ddrphy_dfi_p1_wrdata_mask[1], main_a7ddrphy_dfi_p0_wrdata_mask[5], main_a7ddrphy_dfi_p0_wrdata_mask[1]}, main_a7ddrphy_bitslip1_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip2_value1 <= (main_a7ddrphy_bitslip2_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip2_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip2_r1 <= {{main_a7ddrphy_dfi_p3_wrdata_mask[6], main_a7ddrphy_dfi_p3_wrdata_mask[2], main_a7ddrphy_dfi_p2_wrdata_mask[6], main_a7ddrphy_dfi_p2_wrdata_mask[2], main_a7ddrphy_dfi_p1_wrdata_mask[6], main_a7ddrphy_dfi_p1_wrdata_mask[2], main_a7ddrphy_dfi_p0_wrdata_mask[6], main_a7ddrphy_dfi_p0_wrdata_mask[2]}, main_a7ddrphy_bitslip2_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip3_value1 <= (main_a7ddrphy_bitslip3_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip3_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip3_r1 <= {{main_a7ddrphy_dfi_p3_wrdata_mask[7], main_a7ddrphy_dfi_p3_wrdata_mask[3], main_a7ddrphy_dfi_p2_wrdata_mask[7], main_a7ddrphy_dfi_p2_wrdata_mask[3], main_a7ddrphy_dfi_p1_wrdata_mask[7], main_a7ddrphy_dfi_p1_wrdata_mask[3], main_a7ddrphy_dfi_p0_wrdata_mask[7], main_a7ddrphy_dfi_p0_wrdata_mask[3]}, main_a7ddrphy_bitslip3_r1[15:8]};
    main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0 <= main_a7ddrphy_dq_oe_delay_tappeddelayline;
    main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1 <= main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0;
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip0_value2 <= (main_a7ddrphy_bitslip0_value2 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip0_value2 <= 3'd7;
    end
    main_a7ddrphy_bitslip0_r2 <= {{main_a7ddrphy_dfi_p3_wrdata[32], main_a7ddrphy_dfi_p3_wrdata[0], main_a7ddrphy_dfi_p2_wrdata[32], main_a7ddrphy_dfi_p2_wrdata[0], main_a7ddrphy_dfi_p1_wrdata[32], main_a7ddrphy_dfi_p1_wrdata[0], main_a7ddrphy_dfi_p0_wrdata[32], main_a7ddrphy_dfi_p0_wrdata[0]}, main_a7ddrphy_bitslip0_r2[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip0_value3 <= (main_a7ddrphy_bitslip0_value3 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip0_value3 <= 3'd7;
    end
    main_a7ddrphy_bitslip0_r3 <= {main_a7ddrphy_bitslip03, main_a7ddrphy_bitslip0_r3[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip1_value2 <= (main_a7ddrphy_bitslip1_value2 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip1_value2 <= 3'd7;
    end
    main_a7ddrphy_bitslip1_r2 <= {{main_a7ddrphy_dfi_p3_wrdata[33], main_a7ddrphy_dfi_p3_wrdata[1], main_a7ddrphy_dfi_p2_wrdata[33], main_a7ddrphy_dfi_p2_wrdata[1], main_a7ddrphy_dfi_p1_wrdata[33], main_a7ddrphy_dfi_p1_wrdata[1], main_a7ddrphy_dfi_p0_wrdata[33], main_a7ddrphy_dfi_p0_wrdata[1]}, main_a7ddrphy_bitslip1_r2[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip1_value3 <= (main_a7ddrphy_bitslip1_value3 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip1_value3 <= 3'd7;
    end
    main_a7ddrphy_bitslip1_r3 <= {main_a7ddrphy_bitslip13, main_a7ddrphy_bitslip1_r3[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip2_value2 <= (main_a7ddrphy_bitslip2_value2 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip2_value2 <= 3'd7;
    end
    main_a7ddrphy_bitslip2_r2 <= {{main_a7ddrphy_dfi_p3_wrdata[34], main_a7ddrphy_dfi_p3_wrdata[2], main_a7ddrphy_dfi_p2_wrdata[34], main_a7ddrphy_dfi_p2_wrdata[2], main_a7ddrphy_dfi_p1_wrdata[34], main_a7ddrphy_dfi_p1_wrdata[2], main_a7ddrphy_dfi_p0_wrdata[34], main_a7ddrphy_dfi_p0_wrdata[2]}, main_a7ddrphy_bitslip2_r2[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip2_value3 <= (main_a7ddrphy_bitslip2_value3 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip2_value3 <= 3'd7;
    end
    main_a7ddrphy_bitslip2_r3 <= {main_a7ddrphy_bitslip23, main_a7ddrphy_bitslip2_r3[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip3_value2 <= (main_a7ddrphy_bitslip3_value2 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip3_value2 <= 3'd7;
    end
    main_a7ddrphy_bitslip3_r2 <= {{main_a7ddrphy_dfi_p3_wrdata[35], main_a7ddrphy_dfi_p3_wrdata[3], main_a7ddrphy_dfi_p2_wrdata[35], main_a7ddrphy_dfi_p2_wrdata[3], main_a7ddrphy_dfi_p1_wrdata[35], main_a7ddrphy_dfi_p1_wrdata[3], main_a7ddrphy_dfi_p0_wrdata[35], main_a7ddrphy_dfi_p0_wrdata[3]}, main_a7ddrphy_bitslip3_r2[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip3_value3 <= (main_a7ddrphy_bitslip3_value3 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip3_value3 <= 3'd7;
    end
    main_a7ddrphy_bitslip3_r3 <= {main_a7ddrphy_bitslip33, main_a7ddrphy_bitslip3_r3[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip4_value0 <= (main_a7ddrphy_bitslip4_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip4_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip4_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[36], main_a7ddrphy_dfi_p3_wrdata[4], main_a7ddrphy_dfi_p2_wrdata[36], main_a7ddrphy_dfi_p2_wrdata[4], main_a7ddrphy_dfi_p1_wrdata[36], main_a7ddrphy_dfi_p1_wrdata[4], main_a7ddrphy_dfi_p0_wrdata[36], main_a7ddrphy_dfi_p0_wrdata[4]}, main_a7ddrphy_bitslip4_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip4_value1 <= (main_a7ddrphy_bitslip4_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip4_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip4_r1 <= {main_a7ddrphy_bitslip41, main_a7ddrphy_bitslip4_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip5_value0 <= (main_a7ddrphy_bitslip5_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip5_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip5_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[37], main_a7ddrphy_dfi_p3_wrdata[5], main_a7ddrphy_dfi_p2_wrdata[37], main_a7ddrphy_dfi_p2_wrdata[5], main_a7ddrphy_dfi_p1_wrdata[37], main_a7ddrphy_dfi_p1_wrdata[5], main_a7ddrphy_dfi_p0_wrdata[37], main_a7ddrphy_dfi_p0_wrdata[5]}, main_a7ddrphy_bitslip5_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip5_value1 <= (main_a7ddrphy_bitslip5_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip5_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip5_r1 <= {main_a7ddrphy_bitslip51, main_a7ddrphy_bitslip5_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip6_value0 <= (main_a7ddrphy_bitslip6_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip6_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip6_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[38], main_a7ddrphy_dfi_p3_wrdata[6], main_a7ddrphy_dfi_p2_wrdata[38], main_a7ddrphy_dfi_p2_wrdata[6], main_a7ddrphy_dfi_p1_wrdata[38], main_a7ddrphy_dfi_p1_wrdata[6], main_a7ddrphy_dfi_p0_wrdata[38], main_a7ddrphy_dfi_p0_wrdata[6]}, main_a7ddrphy_bitslip6_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip6_value1 <= (main_a7ddrphy_bitslip6_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip6_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip6_r1 <= {main_a7ddrphy_bitslip61, main_a7ddrphy_bitslip6_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip7_value0 <= (main_a7ddrphy_bitslip7_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip7_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip7_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[39], main_a7ddrphy_dfi_p3_wrdata[7], main_a7ddrphy_dfi_p2_wrdata[39], main_a7ddrphy_dfi_p2_wrdata[7], main_a7ddrphy_dfi_p1_wrdata[39], main_a7ddrphy_dfi_p1_wrdata[7], main_a7ddrphy_dfi_p0_wrdata[39], main_a7ddrphy_dfi_p0_wrdata[7]}, main_a7ddrphy_bitslip7_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip7_value1 <= (main_a7ddrphy_bitslip7_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip7_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip7_r1 <= {main_a7ddrphy_bitslip71, main_a7ddrphy_bitslip7_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip8_value0 <= (main_a7ddrphy_bitslip8_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip8_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip8_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[40], main_a7ddrphy_dfi_p3_wrdata[8], main_a7ddrphy_dfi_p2_wrdata[40], main_a7ddrphy_dfi_p2_wrdata[8], main_a7ddrphy_dfi_p1_wrdata[40], main_a7ddrphy_dfi_p1_wrdata[8], main_a7ddrphy_dfi_p0_wrdata[40], main_a7ddrphy_dfi_p0_wrdata[8]}, main_a7ddrphy_bitslip8_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip8_value1 <= (main_a7ddrphy_bitslip8_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip8_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip8_r1 <= {main_a7ddrphy_bitslip81, main_a7ddrphy_bitslip8_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip9_value0 <= (main_a7ddrphy_bitslip9_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip9_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip9_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[41], main_a7ddrphy_dfi_p3_wrdata[9], main_a7ddrphy_dfi_p2_wrdata[41], main_a7ddrphy_dfi_p2_wrdata[9], main_a7ddrphy_dfi_p1_wrdata[41], main_a7ddrphy_dfi_p1_wrdata[9], main_a7ddrphy_dfi_p0_wrdata[41], main_a7ddrphy_dfi_p0_wrdata[9]}, main_a7ddrphy_bitslip9_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip9_value1 <= (main_a7ddrphy_bitslip9_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip9_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip9_r1 <= {main_a7ddrphy_bitslip91, main_a7ddrphy_bitslip9_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip10_value0 <= (main_a7ddrphy_bitslip10_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip10_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip10_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[42], main_a7ddrphy_dfi_p3_wrdata[10], main_a7ddrphy_dfi_p2_wrdata[42], main_a7ddrphy_dfi_p2_wrdata[10], main_a7ddrphy_dfi_p1_wrdata[42], main_a7ddrphy_dfi_p1_wrdata[10], main_a7ddrphy_dfi_p0_wrdata[42], main_a7ddrphy_dfi_p0_wrdata[10]}, main_a7ddrphy_bitslip10_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip10_value1 <= (main_a7ddrphy_bitslip10_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip10_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip10_r1 <= {main_a7ddrphy_bitslip101, main_a7ddrphy_bitslip10_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip11_value0 <= (main_a7ddrphy_bitslip11_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip11_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip11_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[43], main_a7ddrphy_dfi_p3_wrdata[11], main_a7ddrphy_dfi_p2_wrdata[43], main_a7ddrphy_dfi_p2_wrdata[11], main_a7ddrphy_dfi_p1_wrdata[43], main_a7ddrphy_dfi_p1_wrdata[11], main_a7ddrphy_dfi_p0_wrdata[43], main_a7ddrphy_dfi_p0_wrdata[11]}, main_a7ddrphy_bitslip11_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip11_value1 <= (main_a7ddrphy_bitslip11_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip11_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip11_r1 <= {main_a7ddrphy_bitslip111, main_a7ddrphy_bitslip11_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip12_value0 <= (main_a7ddrphy_bitslip12_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip12_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip12_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[44], main_a7ddrphy_dfi_p3_wrdata[12], main_a7ddrphy_dfi_p2_wrdata[44], main_a7ddrphy_dfi_p2_wrdata[12], main_a7ddrphy_dfi_p1_wrdata[44], main_a7ddrphy_dfi_p1_wrdata[12], main_a7ddrphy_dfi_p0_wrdata[44], main_a7ddrphy_dfi_p0_wrdata[12]}, main_a7ddrphy_bitslip12_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip12_value1 <= (main_a7ddrphy_bitslip12_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip12_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip12_r1 <= {main_a7ddrphy_bitslip121, main_a7ddrphy_bitslip12_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip13_value0 <= (main_a7ddrphy_bitslip13_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip13_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip13_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[45], main_a7ddrphy_dfi_p3_wrdata[13], main_a7ddrphy_dfi_p2_wrdata[45], main_a7ddrphy_dfi_p2_wrdata[13], main_a7ddrphy_dfi_p1_wrdata[45], main_a7ddrphy_dfi_p1_wrdata[13], main_a7ddrphy_dfi_p0_wrdata[45], main_a7ddrphy_dfi_p0_wrdata[13]}, main_a7ddrphy_bitslip13_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip13_value1 <= (main_a7ddrphy_bitslip13_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip13_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip13_r1 <= {main_a7ddrphy_bitslip131, main_a7ddrphy_bitslip13_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip14_value0 <= (main_a7ddrphy_bitslip14_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip14_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip14_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[46], main_a7ddrphy_dfi_p3_wrdata[14], main_a7ddrphy_dfi_p2_wrdata[46], main_a7ddrphy_dfi_p2_wrdata[14], main_a7ddrphy_dfi_p1_wrdata[46], main_a7ddrphy_dfi_p1_wrdata[14], main_a7ddrphy_dfi_p0_wrdata[46], main_a7ddrphy_dfi_p0_wrdata[14]}, main_a7ddrphy_bitslip14_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip14_value1 <= (main_a7ddrphy_bitslip14_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip14_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip14_r1 <= {main_a7ddrphy_bitslip141, main_a7ddrphy_bitslip14_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip15_value0 <= (main_a7ddrphy_bitslip15_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip15_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip15_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[47], main_a7ddrphy_dfi_p3_wrdata[15], main_a7ddrphy_dfi_p2_wrdata[47], main_a7ddrphy_dfi_p2_wrdata[15], main_a7ddrphy_dfi_p1_wrdata[47], main_a7ddrphy_dfi_p1_wrdata[15], main_a7ddrphy_dfi_p0_wrdata[47], main_a7ddrphy_dfi_p0_wrdata[15]}, main_a7ddrphy_bitslip15_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip15_value1 <= (main_a7ddrphy_bitslip15_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip15_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip15_r1 <= {main_a7ddrphy_bitslip151, main_a7ddrphy_bitslip15_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip16_value0 <= (main_a7ddrphy_bitslip16_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip16_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip16_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[48], main_a7ddrphy_dfi_p3_wrdata[16], main_a7ddrphy_dfi_p2_wrdata[48], main_a7ddrphy_dfi_p2_wrdata[16], main_a7ddrphy_dfi_p1_wrdata[48], main_a7ddrphy_dfi_p1_wrdata[16], main_a7ddrphy_dfi_p0_wrdata[48], main_a7ddrphy_dfi_p0_wrdata[16]}, main_a7ddrphy_bitslip16_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip16_value1 <= (main_a7ddrphy_bitslip16_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip16_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip16_r1 <= {main_a7ddrphy_bitslip161, main_a7ddrphy_bitslip16_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip17_value0 <= (main_a7ddrphy_bitslip17_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip17_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip17_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[49], main_a7ddrphy_dfi_p3_wrdata[17], main_a7ddrphy_dfi_p2_wrdata[49], main_a7ddrphy_dfi_p2_wrdata[17], main_a7ddrphy_dfi_p1_wrdata[49], main_a7ddrphy_dfi_p1_wrdata[17], main_a7ddrphy_dfi_p0_wrdata[49], main_a7ddrphy_dfi_p0_wrdata[17]}, main_a7ddrphy_bitslip17_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip17_value1 <= (main_a7ddrphy_bitslip17_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip17_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip17_r1 <= {main_a7ddrphy_bitslip171, main_a7ddrphy_bitslip17_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip18_value0 <= (main_a7ddrphy_bitslip18_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip18_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip18_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[50], main_a7ddrphy_dfi_p3_wrdata[18], main_a7ddrphy_dfi_p2_wrdata[50], main_a7ddrphy_dfi_p2_wrdata[18], main_a7ddrphy_dfi_p1_wrdata[50], main_a7ddrphy_dfi_p1_wrdata[18], main_a7ddrphy_dfi_p0_wrdata[50], main_a7ddrphy_dfi_p0_wrdata[18]}, main_a7ddrphy_bitslip18_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip18_value1 <= (main_a7ddrphy_bitslip18_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip18_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip18_r1 <= {main_a7ddrphy_bitslip181, main_a7ddrphy_bitslip18_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip19_value0 <= (main_a7ddrphy_bitslip19_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip19_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip19_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[51], main_a7ddrphy_dfi_p3_wrdata[19], main_a7ddrphy_dfi_p2_wrdata[51], main_a7ddrphy_dfi_p2_wrdata[19], main_a7ddrphy_dfi_p1_wrdata[51], main_a7ddrphy_dfi_p1_wrdata[19], main_a7ddrphy_dfi_p0_wrdata[51], main_a7ddrphy_dfi_p0_wrdata[19]}, main_a7ddrphy_bitslip19_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip19_value1 <= (main_a7ddrphy_bitslip19_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip19_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip19_r1 <= {main_a7ddrphy_bitslip191, main_a7ddrphy_bitslip19_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip20_value0 <= (main_a7ddrphy_bitslip20_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip20_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip20_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[52], main_a7ddrphy_dfi_p3_wrdata[20], main_a7ddrphy_dfi_p2_wrdata[52], main_a7ddrphy_dfi_p2_wrdata[20], main_a7ddrphy_dfi_p1_wrdata[52], main_a7ddrphy_dfi_p1_wrdata[20], main_a7ddrphy_dfi_p0_wrdata[52], main_a7ddrphy_dfi_p0_wrdata[20]}, main_a7ddrphy_bitslip20_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip20_value1 <= (main_a7ddrphy_bitslip20_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip20_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip20_r1 <= {main_a7ddrphy_bitslip201, main_a7ddrphy_bitslip20_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip21_value0 <= (main_a7ddrphy_bitslip21_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip21_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip21_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[53], main_a7ddrphy_dfi_p3_wrdata[21], main_a7ddrphy_dfi_p2_wrdata[53], main_a7ddrphy_dfi_p2_wrdata[21], main_a7ddrphy_dfi_p1_wrdata[53], main_a7ddrphy_dfi_p1_wrdata[21], main_a7ddrphy_dfi_p0_wrdata[53], main_a7ddrphy_dfi_p0_wrdata[21]}, main_a7ddrphy_bitslip21_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip21_value1 <= (main_a7ddrphy_bitslip21_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip21_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip21_r1 <= {main_a7ddrphy_bitslip211, main_a7ddrphy_bitslip21_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip22_value0 <= (main_a7ddrphy_bitslip22_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip22_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip22_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[54], main_a7ddrphy_dfi_p3_wrdata[22], main_a7ddrphy_dfi_p2_wrdata[54], main_a7ddrphy_dfi_p2_wrdata[22], main_a7ddrphy_dfi_p1_wrdata[54], main_a7ddrphy_dfi_p1_wrdata[22], main_a7ddrphy_dfi_p0_wrdata[54], main_a7ddrphy_dfi_p0_wrdata[22]}, main_a7ddrphy_bitslip22_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip22_value1 <= (main_a7ddrphy_bitslip22_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip22_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip22_r1 <= {main_a7ddrphy_bitslip221, main_a7ddrphy_bitslip22_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip23_value0 <= (main_a7ddrphy_bitslip23_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip23_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip23_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[55], main_a7ddrphy_dfi_p3_wrdata[23], main_a7ddrphy_dfi_p2_wrdata[55], main_a7ddrphy_dfi_p2_wrdata[23], main_a7ddrphy_dfi_p1_wrdata[55], main_a7ddrphy_dfi_p1_wrdata[23], main_a7ddrphy_dfi_p0_wrdata[55], main_a7ddrphy_dfi_p0_wrdata[23]}, main_a7ddrphy_bitslip23_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip23_value1 <= (main_a7ddrphy_bitslip23_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip23_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip23_r1 <= {main_a7ddrphy_bitslip231, main_a7ddrphy_bitslip23_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip24_value0 <= (main_a7ddrphy_bitslip24_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip24_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip24_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[56], main_a7ddrphy_dfi_p3_wrdata[24], main_a7ddrphy_dfi_p2_wrdata[56], main_a7ddrphy_dfi_p2_wrdata[24], main_a7ddrphy_dfi_p1_wrdata[56], main_a7ddrphy_dfi_p1_wrdata[24], main_a7ddrphy_dfi_p0_wrdata[56], main_a7ddrphy_dfi_p0_wrdata[24]}, main_a7ddrphy_bitslip24_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip24_value1 <= (main_a7ddrphy_bitslip24_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip24_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip24_r1 <= {main_a7ddrphy_bitslip241, main_a7ddrphy_bitslip24_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip25_value0 <= (main_a7ddrphy_bitslip25_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip25_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip25_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[57], main_a7ddrphy_dfi_p3_wrdata[25], main_a7ddrphy_dfi_p2_wrdata[57], main_a7ddrphy_dfi_p2_wrdata[25], main_a7ddrphy_dfi_p1_wrdata[57], main_a7ddrphy_dfi_p1_wrdata[25], main_a7ddrphy_dfi_p0_wrdata[57], main_a7ddrphy_dfi_p0_wrdata[25]}, main_a7ddrphy_bitslip25_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip25_value1 <= (main_a7ddrphy_bitslip25_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip25_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip25_r1 <= {main_a7ddrphy_bitslip251, main_a7ddrphy_bitslip25_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip26_value0 <= (main_a7ddrphy_bitslip26_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip26_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip26_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[58], main_a7ddrphy_dfi_p3_wrdata[26], main_a7ddrphy_dfi_p2_wrdata[58], main_a7ddrphy_dfi_p2_wrdata[26], main_a7ddrphy_dfi_p1_wrdata[58], main_a7ddrphy_dfi_p1_wrdata[26], main_a7ddrphy_dfi_p0_wrdata[58], main_a7ddrphy_dfi_p0_wrdata[26]}, main_a7ddrphy_bitslip26_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip26_value1 <= (main_a7ddrphy_bitslip26_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip26_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip26_r1 <= {main_a7ddrphy_bitslip261, main_a7ddrphy_bitslip26_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip27_value0 <= (main_a7ddrphy_bitslip27_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip27_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip27_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[59], main_a7ddrphy_dfi_p3_wrdata[27], main_a7ddrphy_dfi_p2_wrdata[59], main_a7ddrphy_dfi_p2_wrdata[27], main_a7ddrphy_dfi_p1_wrdata[59], main_a7ddrphy_dfi_p1_wrdata[27], main_a7ddrphy_dfi_p0_wrdata[59], main_a7ddrphy_dfi_p0_wrdata[27]}, main_a7ddrphy_bitslip27_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip27_value1 <= (main_a7ddrphy_bitslip27_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip27_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip27_r1 <= {main_a7ddrphy_bitslip271, main_a7ddrphy_bitslip27_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip28_value0 <= (main_a7ddrphy_bitslip28_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip28_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip28_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[60], main_a7ddrphy_dfi_p3_wrdata[28], main_a7ddrphy_dfi_p2_wrdata[60], main_a7ddrphy_dfi_p2_wrdata[28], main_a7ddrphy_dfi_p1_wrdata[60], main_a7ddrphy_dfi_p1_wrdata[28], main_a7ddrphy_dfi_p0_wrdata[60], main_a7ddrphy_dfi_p0_wrdata[28]}, main_a7ddrphy_bitslip28_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip28_value1 <= (main_a7ddrphy_bitslip28_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip28_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip28_r1 <= {main_a7ddrphy_bitslip281, main_a7ddrphy_bitslip28_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip29_value0 <= (main_a7ddrphy_bitslip29_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip29_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip29_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[61], main_a7ddrphy_dfi_p3_wrdata[29], main_a7ddrphy_dfi_p2_wrdata[61], main_a7ddrphy_dfi_p2_wrdata[29], main_a7ddrphy_dfi_p1_wrdata[61], main_a7ddrphy_dfi_p1_wrdata[29], main_a7ddrphy_dfi_p0_wrdata[61], main_a7ddrphy_dfi_p0_wrdata[29]}, main_a7ddrphy_bitslip29_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip29_value1 <= (main_a7ddrphy_bitslip29_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip29_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip29_r1 <= {main_a7ddrphy_bitslip291, main_a7ddrphy_bitslip29_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip30_value0 <= (main_a7ddrphy_bitslip30_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip30_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip30_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[62], main_a7ddrphy_dfi_p3_wrdata[30], main_a7ddrphy_dfi_p2_wrdata[62], main_a7ddrphy_dfi_p2_wrdata[30], main_a7ddrphy_dfi_p1_wrdata[62], main_a7ddrphy_dfi_p1_wrdata[30], main_a7ddrphy_dfi_p0_wrdata[62], main_a7ddrphy_dfi_p0_wrdata[30]}, main_a7ddrphy_bitslip30_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip30_value1 <= (main_a7ddrphy_bitslip30_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip30_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip30_r1 <= {main_a7ddrphy_bitslip301, main_a7ddrphy_bitslip30_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip31_value0 <= (main_a7ddrphy_bitslip31_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip31_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip31_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[63], main_a7ddrphy_dfi_p3_wrdata[31], main_a7ddrphy_dfi_p2_wrdata[63], main_a7ddrphy_dfi_p2_wrdata[31], main_a7ddrphy_dfi_p1_wrdata[63], main_a7ddrphy_dfi_p1_wrdata[31], main_a7ddrphy_dfi_p0_wrdata[63], main_a7ddrphy_dfi_p0_wrdata[31]}, main_a7ddrphy_bitslip31_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip31_value1 <= (main_a7ddrphy_bitslip31_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip31_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip31_r1 <= {main_a7ddrphy_bitslip311, main_a7ddrphy_bitslip31_r1[15:8]};
    main_a7ddrphy_cmd_latency_tappeddelayline0 <= (((main_a7ddrphy_dfi_p0_rddata_en | main_a7ddrphy_dfi_p1_rddata_en) | main_a7ddrphy_dfi_p2_rddata_en) | main_a7ddrphy_dfi_p3_rddata_en);
    main_a7ddrphy_cmd_latency_tappeddelayline1 <= main_a7ddrphy_cmd_latency_tappeddelayline0;
    main_a7ddrphy_cmd_latency_tappeddelayline2 <= main_a7ddrphy_cmd_latency_tappeddelayline1;
    main_a7ddrphy_cmd_latency_tappeddelayline3 <= main_a7ddrphy_cmd_latency_tappeddelayline2;
    main_a7ddrphy_cmd_latency_tappeddelayline4 <= main_a7ddrphy_cmd_latency_tappeddelayline3;
    main_a7ddrphy_cmd_latency_tappeddelayline5 <= main_a7ddrphy_cmd_latency_tappeddelayline4;
    main_a7ddrphy_cmd_latency_tappeddelayline6 <= main_a7ddrphy_cmd_latency_tappeddelayline5;
    main_a7ddrphy_cmd_latency_tappeddelayline7 <= main_a7ddrphy_cmd_latency_tappeddelayline6;
    main_a7ddrphy_wrdata_en_tappeddelayline0 <= (((main_a7ddrphy_dfi_p0_wrdata_en | main_a7ddrphy_dfi_p1_wrdata_en) | main_a7ddrphy_dfi_p2_wrdata_en) | main_a7ddrphy_dfi_p3_wrdata_en);
    main_a7ddrphy_wrdata_en_tappeddelayline1 <= main_a7ddrphy_wrdata_en_tappeddelayline0;
    main_a7ddrphy_wrdata_en_tappeddelayline2 <= main_a7ddrphy_wrdata_en_tappeddelayline1;
    if (main_basesoc_sdram_csr_dfi_p0_rddata_valid) begin
        main_basesoc_sdram_phaseinjector0_rddata_status <= main_basesoc_sdram_csr_dfi_p0_rddata;
    end
    if (main_basesoc_sdram_csr_dfi_p1_rddata_valid) begin
        main_basesoc_sdram_phaseinjector1_rddata_status <= main_basesoc_sdram_csr_dfi_p1_rddata;
    end
    if (main_basesoc_sdram_csr_dfi_p2_rddata_valid) begin
        main_basesoc_sdram_phaseinjector2_rddata_status <= main_basesoc_sdram_csr_dfi_p2_rddata;
    end
    if (main_basesoc_sdram_csr_dfi_p3_rddata_valid) begin
        main_basesoc_sdram_phaseinjector3_rddata_status <= main_basesoc_sdram_csr_dfi_p3_rddata;
    end
    if ((main_basesoc_sdram_timer_wait & (~main_basesoc_sdram_timer_done0))) begin
        main_basesoc_sdram_timer_count1 <= (main_basesoc_sdram_timer_count1 - 1'd1);
    end else begin
        main_basesoc_sdram_timer_count1 <= 9'd390;
    end
    main_basesoc_sdram_postponer_req_o <= 1'd0;
    if (main_basesoc_sdram_postponer_req_i) begin
        main_basesoc_sdram_postponer_count <= (main_basesoc_sdram_postponer_count - 1'd1);
        if ((main_basesoc_sdram_postponer_count == 1'd0)) begin
            main_basesoc_sdram_postponer_count <= 1'd0;
            main_basesoc_sdram_postponer_req_o <= 1'd1;
        end
    end
    if (main_basesoc_sdram_sequencer_start0) begin
        main_basesoc_sdram_sequencer_count <= 1'd0;
    end else begin
        if (main_basesoc_sdram_sequencer_done1) begin
            if ((main_basesoc_sdram_sequencer_count != 1'd0)) begin
                main_basesoc_sdram_sequencer_count <= (main_basesoc_sdram_sequencer_count - 1'd1);
            end
        end
    end
    main_basesoc_sdram_cmd_payload_a <= 1'd0;
    main_basesoc_sdram_cmd_payload_ba <= 1'd0;
    main_basesoc_sdram_cmd_payload_cas <= 1'd0;
    main_basesoc_sdram_cmd_payload_ras <= 1'd0;
    main_basesoc_sdram_cmd_payload_we <= 1'd0;
    main_basesoc_sdram_sequencer_done1 <= 1'd0;
    if ((main_basesoc_sdram_sequencer_start1 & (main_basesoc_sdram_sequencer_trigger == 1'd0))) begin
        main_basesoc_sdram_cmd_payload_a <= 11'd1024;
        main_basesoc_sdram_cmd_payload_ba <= 1'd0;
        main_basesoc_sdram_cmd_payload_cas <= 1'd0;
        main_basesoc_sdram_cmd_payload_ras <= 1'd1;
        main_basesoc_sdram_cmd_payload_we <= 1'd1;
    end
    if ((main_basesoc_sdram_sequencer_trigger == 2'd2)) begin
        main_basesoc_sdram_cmd_payload_a <= 11'd1024;
        main_basesoc_sdram_cmd_payload_ba <= 1'd0;
        main_basesoc_sdram_cmd_payload_cas <= 1'd1;
        main_basesoc_sdram_cmd_payload_ras <= 1'd1;
        main_basesoc_sdram_cmd_payload_we <= 1'd0;
    end
    if ((main_basesoc_sdram_sequencer_trigger == 6'd54)) begin
        main_basesoc_sdram_cmd_payload_a <= 1'd0;
        main_basesoc_sdram_cmd_payload_ba <= 1'd0;
        main_basesoc_sdram_cmd_payload_cas <= 1'd0;
        main_basesoc_sdram_cmd_payload_ras <= 1'd0;
        main_basesoc_sdram_cmd_payload_we <= 1'd0;
        main_basesoc_sdram_sequencer_done1 <= 1'd1;
    end
    if ((main_basesoc_sdram_sequencer_trigger == 6'd54)) begin
        main_basesoc_sdram_sequencer_trigger <= 1'd0;
    end else begin
        if ((main_basesoc_sdram_sequencer_trigger != 1'd0)) begin
            main_basesoc_sdram_sequencer_trigger <= (main_basesoc_sdram_sequencer_trigger + 1'd1);
        end else begin
            if (main_basesoc_sdram_sequencer_start1) begin
                main_basesoc_sdram_sequencer_trigger <= 1'd1;
            end
        end
    end
    if ((main_basesoc_sdram_zqcs_timer_wait & (~main_basesoc_sdram_zqcs_timer_done0))) begin
        main_basesoc_sdram_zqcs_timer_count1 <= (main_basesoc_sdram_zqcs_timer_count1 - 1'd1);
    end else begin
        main_basesoc_sdram_zqcs_timer_count1 <= 26'd49999999;
    end
    main_basesoc_sdram_zqcs_executer_done <= 1'd0;
    if ((main_basesoc_sdram_zqcs_executer_start & (main_basesoc_sdram_zqcs_executer_trigger == 1'd0))) begin
        main_basesoc_sdram_cmd_payload_a <= 11'd1024;
        main_basesoc_sdram_cmd_payload_ba <= 1'd0;
        main_basesoc_sdram_cmd_payload_cas <= 1'd0;
        main_basesoc_sdram_cmd_payload_ras <= 1'd1;
        main_basesoc_sdram_cmd_payload_we <= 1'd1;
    end
    if ((main_basesoc_sdram_zqcs_executer_trigger == 2'd2)) begin
        main_basesoc_sdram_cmd_payload_a <= 1'd0;
        main_basesoc_sdram_cmd_payload_ba <= 1'd0;
        main_basesoc_sdram_cmd_payload_cas <= 1'd0;
        main_basesoc_sdram_cmd_payload_ras <= 1'd0;
        main_basesoc_sdram_cmd_payload_we <= 1'd1;
    end
    if ((main_basesoc_sdram_zqcs_executer_trigger == 5'd18)) begin
        main_basesoc_sdram_cmd_payload_a <= 1'd0;
        main_basesoc_sdram_cmd_payload_ba <= 1'd0;
        main_basesoc_sdram_cmd_payload_cas <= 1'd0;
        main_basesoc_sdram_cmd_payload_ras <= 1'd0;
        main_basesoc_sdram_cmd_payload_we <= 1'd0;
        main_basesoc_sdram_zqcs_executer_done <= 1'd1;
    end
    if ((main_basesoc_sdram_zqcs_executer_trigger == 5'd18)) begin
        main_basesoc_sdram_zqcs_executer_trigger <= 1'd0;
    end else begin
        if ((main_basesoc_sdram_zqcs_executer_trigger != 1'd0)) begin
            main_basesoc_sdram_zqcs_executer_trigger <= (main_basesoc_sdram_zqcs_executer_trigger + 1'd1);
        end else begin
            if (main_basesoc_sdram_zqcs_executer_start) begin
                main_basesoc_sdram_zqcs_executer_trigger <= 1'd1;
            end
        end
    end
    builder_refresher_state <= builder_refresher_next_state;
    if (main_basesoc_sdram_bankmachine0_row_close) begin
        main_basesoc_sdram_bankmachine0_row_opened <= 1'd0;
    end else begin
        if (main_basesoc_sdram_bankmachine0_row_open) begin
            main_basesoc_sdram_bankmachine0_row_opened <= 1'd1;
            main_basesoc_sdram_bankmachine0_row <= main_basesoc_sdram_bankmachine0_source_source_payload_addr[21:7];
        end
    end
    if (((main_basesoc_sdram_bankmachine0_syncfifo0_we & main_basesoc_sdram_bankmachine0_syncfifo0_writable) & (~main_basesoc_sdram_bankmachine0_replace))) begin
        main_basesoc_sdram_bankmachine0_produce <= (main_basesoc_sdram_bankmachine0_produce + 1'd1);
    end
    if (main_basesoc_sdram_bankmachine0_do_read) begin
        main_basesoc_sdram_bankmachine0_consume <= (main_basesoc_sdram_bankmachine0_consume + 1'd1);
    end
    if (((main_basesoc_sdram_bankmachine0_syncfifo0_we & main_basesoc_sdram_bankmachine0_syncfifo0_writable) & (~main_basesoc_sdram_bankmachine0_replace))) begin
        if ((~main_basesoc_sdram_bankmachine0_do_read)) begin
            main_basesoc_sdram_bankmachine0_level <= (main_basesoc_sdram_bankmachine0_level + 1'd1);
        end
    end else begin
        if (main_basesoc_sdram_bankmachine0_do_read) begin
            main_basesoc_sdram_bankmachine0_level <= (main_basesoc_sdram_bankmachine0_level - 1'd1);
        end
    end
    if (((~main_basesoc_sdram_bankmachine0_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine0_pipe_valid_source_ready)) begin
        main_basesoc_sdram_bankmachine0_pipe_valid_source_valid <= main_basesoc_sdram_bankmachine0_pipe_valid_sink_valid;
        main_basesoc_sdram_bankmachine0_pipe_valid_source_first <= main_basesoc_sdram_bankmachine0_pipe_valid_sink_first;
        main_basesoc_sdram_bankmachine0_pipe_valid_source_last <= main_basesoc_sdram_bankmachine0_pipe_valid_sink_last;
        main_basesoc_sdram_bankmachine0_pipe_valid_source_payload_we <= main_basesoc_sdram_bankmachine0_pipe_valid_sink_payload_we;
        main_basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr <= main_basesoc_sdram_bankmachine0_pipe_valid_sink_payload_addr;
    end
    if (main_basesoc_sdram_bankmachine0_twtpcon_valid) begin
        main_basesoc_sdram_bankmachine0_twtpcon_count <= 3'd4;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine0_twtpcon_ready)) begin
            main_basesoc_sdram_bankmachine0_twtpcon_count <= (main_basesoc_sdram_bankmachine0_twtpcon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine0_twtpcon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine0_trccon_valid) begin
        main_basesoc_sdram_bankmachine0_trccon_count <= 2'd3;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine0_trccon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine0_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine0_trccon_ready)) begin
            main_basesoc_sdram_bankmachine0_trccon_count <= (main_basesoc_sdram_bankmachine0_trccon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine0_trccon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine0_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine0_trascon_valid) begin
        main_basesoc_sdram_bankmachine0_trascon_count <= 2'd2;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine0_trascon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine0_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine0_trascon_ready)) begin
            main_basesoc_sdram_bankmachine0_trascon_count <= (main_basesoc_sdram_bankmachine0_trascon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine0_trascon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine0_trascon_ready <= 1'd1;
            end
        end
    end
    builder_bankmachine0_state <= builder_bankmachine0_next_state;
    if (main_basesoc_sdram_bankmachine1_row_close) begin
        main_basesoc_sdram_bankmachine1_row_opened <= 1'd0;
    end else begin
        if (main_basesoc_sdram_bankmachine1_row_open) begin
            main_basesoc_sdram_bankmachine1_row_opened <= 1'd1;
            main_basesoc_sdram_bankmachine1_row <= main_basesoc_sdram_bankmachine1_source_source_payload_addr[21:7];
        end
    end
    if (((main_basesoc_sdram_bankmachine1_syncfifo1_we & main_basesoc_sdram_bankmachine1_syncfifo1_writable) & (~main_basesoc_sdram_bankmachine1_replace))) begin
        main_basesoc_sdram_bankmachine1_produce <= (main_basesoc_sdram_bankmachine1_produce + 1'd1);
    end
    if (main_basesoc_sdram_bankmachine1_do_read) begin
        main_basesoc_sdram_bankmachine1_consume <= (main_basesoc_sdram_bankmachine1_consume + 1'd1);
    end
    if (((main_basesoc_sdram_bankmachine1_syncfifo1_we & main_basesoc_sdram_bankmachine1_syncfifo1_writable) & (~main_basesoc_sdram_bankmachine1_replace))) begin
        if ((~main_basesoc_sdram_bankmachine1_do_read)) begin
            main_basesoc_sdram_bankmachine1_level <= (main_basesoc_sdram_bankmachine1_level + 1'd1);
        end
    end else begin
        if (main_basesoc_sdram_bankmachine1_do_read) begin
            main_basesoc_sdram_bankmachine1_level <= (main_basesoc_sdram_bankmachine1_level - 1'd1);
        end
    end
    if (((~main_basesoc_sdram_bankmachine1_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine1_pipe_valid_source_ready)) begin
        main_basesoc_sdram_bankmachine1_pipe_valid_source_valid <= main_basesoc_sdram_bankmachine1_pipe_valid_sink_valid;
        main_basesoc_sdram_bankmachine1_pipe_valid_source_first <= main_basesoc_sdram_bankmachine1_pipe_valid_sink_first;
        main_basesoc_sdram_bankmachine1_pipe_valid_source_last <= main_basesoc_sdram_bankmachine1_pipe_valid_sink_last;
        main_basesoc_sdram_bankmachine1_pipe_valid_source_payload_we <= main_basesoc_sdram_bankmachine1_pipe_valid_sink_payload_we;
        main_basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr <= main_basesoc_sdram_bankmachine1_pipe_valid_sink_payload_addr;
    end
    if (main_basesoc_sdram_bankmachine1_twtpcon_valid) begin
        main_basesoc_sdram_bankmachine1_twtpcon_count <= 3'd4;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine1_twtpcon_ready)) begin
            main_basesoc_sdram_bankmachine1_twtpcon_count <= (main_basesoc_sdram_bankmachine1_twtpcon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine1_twtpcon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine1_trccon_valid) begin
        main_basesoc_sdram_bankmachine1_trccon_count <= 2'd3;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine1_trccon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine1_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine1_trccon_ready)) begin
            main_basesoc_sdram_bankmachine1_trccon_count <= (main_basesoc_sdram_bankmachine1_trccon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine1_trccon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine1_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine1_trascon_valid) begin
        main_basesoc_sdram_bankmachine1_trascon_count <= 2'd2;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine1_trascon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine1_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine1_trascon_ready)) begin
            main_basesoc_sdram_bankmachine1_trascon_count <= (main_basesoc_sdram_bankmachine1_trascon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine1_trascon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine1_trascon_ready <= 1'd1;
            end
        end
    end
    builder_bankmachine1_state <= builder_bankmachine1_next_state;
    if (main_basesoc_sdram_bankmachine2_row_close) begin
        main_basesoc_sdram_bankmachine2_row_opened <= 1'd0;
    end else begin
        if (main_basesoc_sdram_bankmachine2_row_open) begin
            main_basesoc_sdram_bankmachine2_row_opened <= 1'd1;
            main_basesoc_sdram_bankmachine2_row <= main_basesoc_sdram_bankmachine2_source_source_payload_addr[21:7];
        end
    end
    if (((main_basesoc_sdram_bankmachine2_syncfifo2_we & main_basesoc_sdram_bankmachine2_syncfifo2_writable) & (~main_basesoc_sdram_bankmachine2_replace))) begin
        main_basesoc_sdram_bankmachine2_produce <= (main_basesoc_sdram_bankmachine2_produce + 1'd1);
    end
    if (main_basesoc_sdram_bankmachine2_do_read) begin
        main_basesoc_sdram_bankmachine2_consume <= (main_basesoc_sdram_bankmachine2_consume + 1'd1);
    end
    if (((main_basesoc_sdram_bankmachine2_syncfifo2_we & main_basesoc_sdram_bankmachine2_syncfifo2_writable) & (~main_basesoc_sdram_bankmachine2_replace))) begin
        if ((~main_basesoc_sdram_bankmachine2_do_read)) begin
            main_basesoc_sdram_bankmachine2_level <= (main_basesoc_sdram_bankmachine2_level + 1'd1);
        end
    end else begin
        if (main_basesoc_sdram_bankmachine2_do_read) begin
            main_basesoc_sdram_bankmachine2_level <= (main_basesoc_sdram_bankmachine2_level - 1'd1);
        end
    end
    if (((~main_basesoc_sdram_bankmachine2_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine2_pipe_valid_source_ready)) begin
        main_basesoc_sdram_bankmachine2_pipe_valid_source_valid <= main_basesoc_sdram_bankmachine2_pipe_valid_sink_valid;
        main_basesoc_sdram_bankmachine2_pipe_valid_source_first <= main_basesoc_sdram_bankmachine2_pipe_valid_sink_first;
        main_basesoc_sdram_bankmachine2_pipe_valid_source_last <= main_basesoc_sdram_bankmachine2_pipe_valid_sink_last;
        main_basesoc_sdram_bankmachine2_pipe_valid_source_payload_we <= main_basesoc_sdram_bankmachine2_pipe_valid_sink_payload_we;
        main_basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr <= main_basesoc_sdram_bankmachine2_pipe_valid_sink_payload_addr;
    end
    if (main_basesoc_sdram_bankmachine2_twtpcon_valid) begin
        main_basesoc_sdram_bankmachine2_twtpcon_count <= 3'd4;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine2_twtpcon_ready)) begin
            main_basesoc_sdram_bankmachine2_twtpcon_count <= (main_basesoc_sdram_bankmachine2_twtpcon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine2_twtpcon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine2_trccon_valid) begin
        main_basesoc_sdram_bankmachine2_trccon_count <= 2'd3;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine2_trccon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine2_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine2_trccon_ready)) begin
            main_basesoc_sdram_bankmachine2_trccon_count <= (main_basesoc_sdram_bankmachine2_trccon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine2_trccon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine2_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine2_trascon_valid) begin
        main_basesoc_sdram_bankmachine2_trascon_count <= 2'd2;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine2_trascon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine2_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine2_trascon_ready)) begin
            main_basesoc_sdram_bankmachine2_trascon_count <= (main_basesoc_sdram_bankmachine2_trascon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine2_trascon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine2_trascon_ready <= 1'd1;
            end
        end
    end
    builder_bankmachine2_state <= builder_bankmachine2_next_state;
    if (main_basesoc_sdram_bankmachine3_row_close) begin
        main_basesoc_sdram_bankmachine3_row_opened <= 1'd0;
    end else begin
        if (main_basesoc_sdram_bankmachine3_row_open) begin
            main_basesoc_sdram_bankmachine3_row_opened <= 1'd1;
            main_basesoc_sdram_bankmachine3_row <= main_basesoc_sdram_bankmachine3_source_source_payload_addr[21:7];
        end
    end
    if (((main_basesoc_sdram_bankmachine3_syncfifo3_we & main_basesoc_sdram_bankmachine3_syncfifo3_writable) & (~main_basesoc_sdram_bankmachine3_replace))) begin
        main_basesoc_sdram_bankmachine3_produce <= (main_basesoc_sdram_bankmachine3_produce + 1'd1);
    end
    if (main_basesoc_sdram_bankmachine3_do_read) begin
        main_basesoc_sdram_bankmachine3_consume <= (main_basesoc_sdram_bankmachine3_consume + 1'd1);
    end
    if (((main_basesoc_sdram_bankmachine3_syncfifo3_we & main_basesoc_sdram_bankmachine3_syncfifo3_writable) & (~main_basesoc_sdram_bankmachine3_replace))) begin
        if ((~main_basesoc_sdram_bankmachine3_do_read)) begin
            main_basesoc_sdram_bankmachine3_level <= (main_basesoc_sdram_bankmachine3_level + 1'd1);
        end
    end else begin
        if (main_basesoc_sdram_bankmachine3_do_read) begin
            main_basesoc_sdram_bankmachine3_level <= (main_basesoc_sdram_bankmachine3_level - 1'd1);
        end
    end
    if (((~main_basesoc_sdram_bankmachine3_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine3_pipe_valid_source_ready)) begin
        main_basesoc_sdram_bankmachine3_pipe_valid_source_valid <= main_basesoc_sdram_bankmachine3_pipe_valid_sink_valid;
        main_basesoc_sdram_bankmachine3_pipe_valid_source_first <= main_basesoc_sdram_bankmachine3_pipe_valid_sink_first;
        main_basesoc_sdram_bankmachine3_pipe_valid_source_last <= main_basesoc_sdram_bankmachine3_pipe_valid_sink_last;
        main_basesoc_sdram_bankmachine3_pipe_valid_source_payload_we <= main_basesoc_sdram_bankmachine3_pipe_valid_sink_payload_we;
        main_basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr <= main_basesoc_sdram_bankmachine3_pipe_valid_sink_payload_addr;
    end
    if (main_basesoc_sdram_bankmachine3_twtpcon_valid) begin
        main_basesoc_sdram_bankmachine3_twtpcon_count <= 3'd4;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine3_twtpcon_ready)) begin
            main_basesoc_sdram_bankmachine3_twtpcon_count <= (main_basesoc_sdram_bankmachine3_twtpcon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine3_twtpcon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine3_trccon_valid) begin
        main_basesoc_sdram_bankmachine3_trccon_count <= 2'd3;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine3_trccon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine3_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine3_trccon_ready)) begin
            main_basesoc_sdram_bankmachine3_trccon_count <= (main_basesoc_sdram_bankmachine3_trccon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine3_trccon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine3_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine3_trascon_valid) begin
        main_basesoc_sdram_bankmachine3_trascon_count <= 2'd2;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine3_trascon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine3_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine3_trascon_ready)) begin
            main_basesoc_sdram_bankmachine3_trascon_count <= (main_basesoc_sdram_bankmachine3_trascon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine3_trascon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine3_trascon_ready <= 1'd1;
            end
        end
    end
    builder_bankmachine3_state <= builder_bankmachine3_next_state;
    if (main_basesoc_sdram_bankmachine4_row_close) begin
        main_basesoc_sdram_bankmachine4_row_opened <= 1'd0;
    end else begin
        if (main_basesoc_sdram_bankmachine4_row_open) begin
            main_basesoc_sdram_bankmachine4_row_opened <= 1'd1;
            main_basesoc_sdram_bankmachine4_row <= main_basesoc_sdram_bankmachine4_source_source_payload_addr[21:7];
        end
    end
    if (((main_basesoc_sdram_bankmachine4_syncfifo4_we & main_basesoc_sdram_bankmachine4_syncfifo4_writable) & (~main_basesoc_sdram_bankmachine4_replace))) begin
        main_basesoc_sdram_bankmachine4_produce <= (main_basesoc_sdram_bankmachine4_produce + 1'd1);
    end
    if (main_basesoc_sdram_bankmachine4_do_read) begin
        main_basesoc_sdram_bankmachine4_consume <= (main_basesoc_sdram_bankmachine4_consume + 1'd1);
    end
    if (((main_basesoc_sdram_bankmachine4_syncfifo4_we & main_basesoc_sdram_bankmachine4_syncfifo4_writable) & (~main_basesoc_sdram_bankmachine4_replace))) begin
        if ((~main_basesoc_sdram_bankmachine4_do_read)) begin
            main_basesoc_sdram_bankmachine4_level <= (main_basesoc_sdram_bankmachine4_level + 1'd1);
        end
    end else begin
        if (main_basesoc_sdram_bankmachine4_do_read) begin
            main_basesoc_sdram_bankmachine4_level <= (main_basesoc_sdram_bankmachine4_level - 1'd1);
        end
    end
    if (((~main_basesoc_sdram_bankmachine4_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine4_pipe_valid_source_ready)) begin
        main_basesoc_sdram_bankmachine4_pipe_valid_source_valid <= main_basesoc_sdram_bankmachine4_pipe_valid_sink_valid;
        main_basesoc_sdram_bankmachine4_pipe_valid_source_first <= main_basesoc_sdram_bankmachine4_pipe_valid_sink_first;
        main_basesoc_sdram_bankmachine4_pipe_valid_source_last <= main_basesoc_sdram_bankmachine4_pipe_valid_sink_last;
        main_basesoc_sdram_bankmachine4_pipe_valid_source_payload_we <= main_basesoc_sdram_bankmachine4_pipe_valid_sink_payload_we;
        main_basesoc_sdram_bankmachine4_pipe_valid_source_payload_addr <= main_basesoc_sdram_bankmachine4_pipe_valid_sink_payload_addr;
    end
    if (main_basesoc_sdram_bankmachine4_twtpcon_valid) begin
        main_basesoc_sdram_bankmachine4_twtpcon_count <= 3'd4;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine4_twtpcon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine4_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine4_twtpcon_ready)) begin
            main_basesoc_sdram_bankmachine4_twtpcon_count <= (main_basesoc_sdram_bankmachine4_twtpcon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine4_twtpcon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine4_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine4_trccon_valid) begin
        main_basesoc_sdram_bankmachine4_trccon_count <= 2'd3;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine4_trccon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine4_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine4_trccon_ready)) begin
            main_basesoc_sdram_bankmachine4_trccon_count <= (main_basesoc_sdram_bankmachine4_trccon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine4_trccon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine4_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine4_trascon_valid) begin
        main_basesoc_sdram_bankmachine4_trascon_count <= 2'd2;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine4_trascon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine4_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine4_trascon_ready)) begin
            main_basesoc_sdram_bankmachine4_trascon_count <= (main_basesoc_sdram_bankmachine4_trascon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine4_trascon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine4_trascon_ready <= 1'd1;
            end
        end
    end
    builder_bankmachine4_state <= builder_bankmachine4_next_state;
    if (main_basesoc_sdram_bankmachine5_row_close) begin
        main_basesoc_sdram_bankmachine5_row_opened <= 1'd0;
    end else begin
        if (main_basesoc_sdram_bankmachine5_row_open) begin
            main_basesoc_sdram_bankmachine5_row_opened <= 1'd1;
            main_basesoc_sdram_bankmachine5_row <= main_basesoc_sdram_bankmachine5_source_source_payload_addr[21:7];
        end
    end
    if (((main_basesoc_sdram_bankmachine5_syncfifo5_we & main_basesoc_sdram_bankmachine5_syncfifo5_writable) & (~main_basesoc_sdram_bankmachine5_replace))) begin
        main_basesoc_sdram_bankmachine5_produce <= (main_basesoc_sdram_bankmachine5_produce + 1'd1);
    end
    if (main_basesoc_sdram_bankmachine5_do_read) begin
        main_basesoc_sdram_bankmachine5_consume <= (main_basesoc_sdram_bankmachine5_consume + 1'd1);
    end
    if (((main_basesoc_sdram_bankmachine5_syncfifo5_we & main_basesoc_sdram_bankmachine5_syncfifo5_writable) & (~main_basesoc_sdram_bankmachine5_replace))) begin
        if ((~main_basesoc_sdram_bankmachine5_do_read)) begin
            main_basesoc_sdram_bankmachine5_level <= (main_basesoc_sdram_bankmachine5_level + 1'd1);
        end
    end else begin
        if (main_basesoc_sdram_bankmachine5_do_read) begin
            main_basesoc_sdram_bankmachine5_level <= (main_basesoc_sdram_bankmachine5_level - 1'd1);
        end
    end
    if (((~main_basesoc_sdram_bankmachine5_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine5_pipe_valid_source_ready)) begin
        main_basesoc_sdram_bankmachine5_pipe_valid_source_valid <= main_basesoc_sdram_bankmachine5_pipe_valid_sink_valid;
        main_basesoc_sdram_bankmachine5_pipe_valid_source_first <= main_basesoc_sdram_bankmachine5_pipe_valid_sink_first;
        main_basesoc_sdram_bankmachine5_pipe_valid_source_last <= main_basesoc_sdram_bankmachine5_pipe_valid_sink_last;
        main_basesoc_sdram_bankmachine5_pipe_valid_source_payload_we <= main_basesoc_sdram_bankmachine5_pipe_valid_sink_payload_we;
        main_basesoc_sdram_bankmachine5_pipe_valid_source_payload_addr <= main_basesoc_sdram_bankmachine5_pipe_valid_sink_payload_addr;
    end
    if (main_basesoc_sdram_bankmachine5_twtpcon_valid) begin
        main_basesoc_sdram_bankmachine5_twtpcon_count <= 3'd4;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine5_twtpcon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine5_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine5_twtpcon_ready)) begin
            main_basesoc_sdram_bankmachine5_twtpcon_count <= (main_basesoc_sdram_bankmachine5_twtpcon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine5_twtpcon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine5_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine5_trccon_valid) begin
        main_basesoc_sdram_bankmachine5_trccon_count <= 2'd3;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine5_trccon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine5_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine5_trccon_ready)) begin
            main_basesoc_sdram_bankmachine5_trccon_count <= (main_basesoc_sdram_bankmachine5_trccon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine5_trccon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine5_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine5_trascon_valid) begin
        main_basesoc_sdram_bankmachine5_trascon_count <= 2'd2;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine5_trascon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine5_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine5_trascon_ready)) begin
            main_basesoc_sdram_bankmachine5_trascon_count <= (main_basesoc_sdram_bankmachine5_trascon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine5_trascon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine5_trascon_ready <= 1'd1;
            end
        end
    end
    builder_bankmachine5_state <= builder_bankmachine5_next_state;
    if (main_basesoc_sdram_bankmachine6_row_close) begin
        main_basesoc_sdram_bankmachine6_row_opened <= 1'd0;
    end else begin
        if (main_basesoc_sdram_bankmachine6_row_open) begin
            main_basesoc_sdram_bankmachine6_row_opened <= 1'd1;
            main_basesoc_sdram_bankmachine6_row <= main_basesoc_sdram_bankmachine6_source_source_payload_addr[21:7];
        end
    end
    if (((main_basesoc_sdram_bankmachine6_syncfifo6_we & main_basesoc_sdram_bankmachine6_syncfifo6_writable) & (~main_basesoc_sdram_bankmachine6_replace))) begin
        main_basesoc_sdram_bankmachine6_produce <= (main_basesoc_sdram_bankmachine6_produce + 1'd1);
    end
    if (main_basesoc_sdram_bankmachine6_do_read) begin
        main_basesoc_sdram_bankmachine6_consume <= (main_basesoc_sdram_bankmachine6_consume + 1'd1);
    end
    if (((main_basesoc_sdram_bankmachine6_syncfifo6_we & main_basesoc_sdram_bankmachine6_syncfifo6_writable) & (~main_basesoc_sdram_bankmachine6_replace))) begin
        if ((~main_basesoc_sdram_bankmachine6_do_read)) begin
            main_basesoc_sdram_bankmachine6_level <= (main_basesoc_sdram_bankmachine6_level + 1'd1);
        end
    end else begin
        if (main_basesoc_sdram_bankmachine6_do_read) begin
            main_basesoc_sdram_bankmachine6_level <= (main_basesoc_sdram_bankmachine6_level - 1'd1);
        end
    end
    if (((~main_basesoc_sdram_bankmachine6_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine6_pipe_valid_source_ready)) begin
        main_basesoc_sdram_bankmachine6_pipe_valid_source_valid <= main_basesoc_sdram_bankmachine6_pipe_valid_sink_valid;
        main_basesoc_sdram_bankmachine6_pipe_valid_source_first <= main_basesoc_sdram_bankmachine6_pipe_valid_sink_first;
        main_basesoc_sdram_bankmachine6_pipe_valid_source_last <= main_basesoc_sdram_bankmachine6_pipe_valid_sink_last;
        main_basesoc_sdram_bankmachine6_pipe_valid_source_payload_we <= main_basesoc_sdram_bankmachine6_pipe_valid_sink_payload_we;
        main_basesoc_sdram_bankmachine6_pipe_valid_source_payload_addr <= main_basesoc_sdram_bankmachine6_pipe_valid_sink_payload_addr;
    end
    if (main_basesoc_sdram_bankmachine6_twtpcon_valid) begin
        main_basesoc_sdram_bankmachine6_twtpcon_count <= 3'd4;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine6_twtpcon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine6_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine6_twtpcon_ready)) begin
            main_basesoc_sdram_bankmachine6_twtpcon_count <= (main_basesoc_sdram_bankmachine6_twtpcon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine6_twtpcon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine6_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine6_trccon_valid) begin
        main_basesoc_sdram_bankmachine6_trccon_count <= 2'd3;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine6_trccon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine6_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine6_trccon_ready)) begin
            main_basesoc_sdram_bankmachine6_trccon_count <= (main_basesoc_sdram_bankmachine6_trccon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine6_trccon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine6_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine6_trascon_valid) begin
        main_basesoc_sdram_bankmachine6_trascon_count <= 2'd2;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine6_trascon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine6_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine6_trascon_ready)) begin
            main_basesoc_sdram_bankmachine6_trascon_count <= (main_basesoc_sdram_bankmachine6_trascon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine6_trascon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine6_trascon_ready <= 1'd1;
            end
        end
    end
    builder_bankmachine6_state <= builder_bankmachine6_next_state;
    if (main_basesoc_sdram_bankmachine7_row_close) begin
        main_basesoc_sdram_bankmachine7_row_opened <= 1'd0;
    end else begin
        if (main_basesoc_sdram_bankmachine7_row_open) begin
            main_basesoc_sdram_bankmachine7_row_opened <= 1'd1;
            main_basesoc_sdram_bankmachine7_row <= main_basesoc_sdram_bankmachine7_source_source_payload_addr[21:7];
        end
    end
    if (((main_basesoc_sdram_bankmachine7_syncfifo7_we & main_basesoc_sdram_bankmachine7_syncfifo7_writable) & (~main_basesoc_sdram_bankmachine7_replace))) begin
        main_basesoc_sdram_bankmachine7_produce <= (main_basesoc_sdram_bankmachine7_produce + 1'd1);
    end
    if (main_basesoc_sdram_bankmachine7_do_read) begin
        main_basesoc_sdram_bankmachine7_consume <= (main_basesoc_sdram_bankmachine7_consume + 1'd1);
    end
    if (((main_basesoc_sdram_bankmachine7_syncfifo7_we & main_basesoc_sdram_bankmachine7_syncfifo7_writable) & (~main_basesoc_sdram_bankmachine7_replace))) begin
        if ((~main_basesoc_sdram_bankmachine7_do_read)) begin
            main_basesoc_sdram_bankmachine7_level <= (main_basesoc_sdram_bankmachine7_level + 1'd1);
        end
    end else begin
        if (main_basesoc_sdram_bankmachine7_do_read) begin
            main_basesoc_sdram_bankmachine7_level <= (main_basesoc_sdram_bankmachine7_level - 1'd1);
        end
    end
    if (((~main_basesoc_sdram_bankmachine7_pipe_valid_source_valid) | main_basesoc_sdram_bankmachine7_pipe_valid_source_ready)) begin
        main_basesoc_sdram_bankmachine7_pipe_valid_source_valid <= main_basesoc_sdram_bankmachine7_pipe_valid_sink_valid;
        main_basesoc_sdram_bankmachine7_pipe_valid_source_first <= main_basesoc_sdram_bankmachine7_pipe_valid_sink_first;
        main_basesoc_sdram_bankmachine7_pipe_valid_source_last <= main_basesoc_sdram_bankmachine7_pipe_valid_sink_last;
        main_basesoc_sdram_bankmachine7_pipe_valid_source_payload_we <= main_basesoc_sdram_bankmachine7_pipe_valid_sink_payload_we;
        main_basesoc_sdram_bankmachine7_pipe_valid_source_payload_addr <= main_basesoc_sdram_bankmachine7_pipe_valid_sink_payload_addr;
    end
    if (main_basesoc_sdram_bankmachine7_twtpcon_valid) begin
        main_basesoc_sdram_bankmachine7_twtpcon_count <= 3'd4;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine7_twtpcon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine7_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine7_twtpcon_ready)) begin
            main_basesoc_sdram_bankmachine7_twtpcon_count <= (main_basesoc_sdram_bankmachine7_twtpcon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine7_twtpcon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine7_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine7_trccon_valid) begin
        main_basesoc_sdram_bankmachine7_trccon_count <= 2'd3;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine7_trccon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine7_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine7_trccon_ready)) begin
            main_basesoc_sdram_bankmachine7_trccon_count <= (main_basesoc_sdram_bankmachine7_trccon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine7_trccon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine7_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_bankmachine7_trascon_valid) begin
        main_basesoc_sdram_bankmachine7_trascon_count <= 2'd2;
        if (1'd0) begin
            main_basesoc_sdram_bankmachine7_trascon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_bankmachine7_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_bankmachine7_trascon_ready)) begin
            main_basesoc_sdram_bankmachine7_trascon_count <= (main_basesoc_sdram_bankmachine7_trascon_count - 1'd1);
            if ((main_basesoc_sdram_bankmachine7_trascon_count == 1'd1)) begin
                main_basesoc_sdram_bankmachine7_trascon_ready <= 1'd1;
            end
        end
    end
    builder_bankmachine7_state <= builder_bankmachine7_next_state;
    if ((~main_basesoc_sdram_en0)) begin
        main_basesoc_sdram_time0 <= 5'd31;
    end else begin
        if ((~main_basesoc_sdram_max_time0)) begin
            main_basesoc_sdram_time0 <= (main_basesoc_sdram_time0 - 1'd1);
        end
    end
    if ((~main_basesoc_sdram_en1)) begin
        main_basesoc_sdram_time1 <= 4'd15;
    end else begin
        if ((~main_basesoc_sdram_max_time1)) begin
            main_basesoc_sdram_time1 <= (main_basesoc_sdram_time1 - 1'd1);
        end
    end
    if (main_basesoc_sdram_choose_cmd_ce) begin
        case (main_basesoc_sdram_choose_cmd_grant)
            1'd0: begin
                if (main_basesoc_sdram_choose_cmd_request[1]) begin
                    main_basesoc_sdram_choose_cmd_grant <= 1'd1;
                end else begin
                    if (main_basesoc_sdram_choose_cmd_request[2]) begin
                        main_basesoc_sdram_choose_cmd_grant <= 2'd2;
                    end else begin
                        if (main_basesoc_sdram_choose_cmd_request[3]) begin
                            main_basesoc_sdram_choose_cmd_grant <= 2'd3;
                        end else begin
                            if (main_basesoc_sdram_choose_cmd_request[4]) begin
                                main_basesoc_sdram_choose_cmd_grant <= 3'd4;
                            end else begin
                                if (main_basesoc_sdram_choose_cmd_request[5]) begin
                                    main_basesoc_sdram_choose_cmd_grant <= 3'd5;
                                end else begin
                                    if (main_basesoc_sdram_choose_cmd_request[6]) begin
                                        main_basesoc_sdram_choose_cmd_grant <= 3'd6;
                                    end else begin
                                        if (main_basesoc_sdram_choose_cmd_request[7]) begin
                                            main_basesoc_sdram_choose_cmd_grant <= 3'd7;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            1'd1: begin
                if (main_basesoc_sdram_choose_cmd_request[2]) begin
                    main_basesoc_sdram_choose_cmd_grant <= 2'd2;
                end else begin
                    if (main_basesoc_sdram_choose_cmd_request[3]) begin
                        main_basesoc_sdram_choose_cmd_grant <= 2'd3;
                    end else begin
                        if (main_basesoc_sdram_choose_cmd_request[4]) begin
                            main_basesoc_sdram_choose_cmd_grant <= 3'd4;
                        end else begin
                            if (main_basesoc_sdram_choose_cmd_request[5]) begin
                                main_basesoc_sdram_choose_cmd_grant <= 3'd5;
                            end else begin
                                if (main_basesoc_sdram_choose_cmd_request[6]) begin
                                    main_basesoc_sdram_choose_cmd_grant <= 3'd6;
                                end else begin
                                    if (main_basesoc_sdram_choose_cmd_request[7]) begin
                                        main_basesoc_sdram_choose_cmd_grant <= 3'd7;
                                    end else begin
                                        if (main_basesoc_sdram_choose_cmd_request[0]) begin
                                            main_basesoc_sdram_choose_cmd_grant <= 1'd0;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd2: begin
                if (main_basesoc_sdram_choose_cmd_request[3]) begin
                    main_basesoc_sdram_choose_cmd_grant <= 2'd3;
                end else begin
                    if (main_basesoc_sdram_choose_cmd_request[4]) begin
                        main_basesoc_sdram_choose_cmd_grant <= 3'd4;
                    end else begin
                        if (main_basesoc_sdram_choose_cmd_request[5]) begin
                            main_basesoc_sdram_choose_cmd_grant <= 3'd5;
                        end else begin
                            if (main_basesoc_sdram_choose_cmd_request[6]) begin
                                main_basesoc_sdram_choose_cmd_grant <= 3'd6;
                            end else begin
                                if (main_basesoc_sdram_choose_cmd_request[7]) begin
                                    main_basesoc_sdram_choose_cmd_grant <= 3'd7;
                                end else begin
                                    if (main_basesoc_sdram_choose_cmd_request[0]) begin
                                        main_basesoc_sdram_choose_cmd_grant <= 1'd0;
                                    end else begin
                                        if (main_basesoc_sdram_choose_cmd_request[1]) begin
                                            main_basesoc_sdram_choose_cmd_grant <= 1'd1;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd3: begin
                if (main_basesoc_sdram_choose_cmd_request[4]) begin
                    main_basesoc_sdram_choose_cmd_grant <= 3'd4;
                end else begin
                    if (main_basesoc_sdram_choose_cmd_request[5]) begin
                        main_basesoc_sdram_choose_cmd_grant <= 3'd5;
                    end else begin
                        if (main_basesoc_sdram_choose_cmd_request[6]) begin
                            main_basesoc_sdram_choose_cmd_grant <= 3'd6;
                        end else begin
                            if (main_basesoc_sdram_choose_cmd_request[7]) begin
                                main_basesoc_sdram_choose_cmd_grant <= 3'd7;
                            end else begin
                                if (main_basesoc_sdram_choose_cmd_request[0]) begin
                                    main_basesoc_sdram_choose_cmd_grant <= 1'd0;
                                end else begin
                                    if (main_basesoc_sdram_choose_cmd_request[1]) begin
                                        main_basesoc_sdram_choose_cmd_grant <= 1'd1;
                                    end else begin
                                        if (main_basesoc_sdram_choose_cmd_request[2]) begin
                                            main_basesoc_sdram_choose_cmd_grant <= 2'd2;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd4: begin
                if (main_basesoc_sdram_choose_cmd_request[5]) begin
                    main_basesoc_sdram_choose_cmd_grant <= 3'd5;
                end else begin
                    if (main_basesoc_sdram_choose_cmd_request[6]) begin
                        main_basesoc_sdram_choose_cmd_grant <= 3'd6;
                    end else begin
                        if (main_basesoc_sdram_choose_cmd_request[7]) begin
                            main_basesoc_sdram_choose_cmd_grant <= 3'd7;
                        end else begin
                            if (main_basesoc_sdram_choose_cmd_request[0]) begin
                                main_basesoc_sdram_choose_cmd_grant <= 1'd0;
                            end else begin
                                if (main_basesoc_sdram_choose_cmd_request[1]) begin
                                    main_basesoc_sdram_choose_cmd_grant <= 1'd1;
                                end else begin
                                    if (main_basesoc_sdram_choose_cmd_request[2]) begin
                                        main_basesoc_sdram_choose_cmd_grant <= 2'd2;
                                    end else begin
                                        if (main_basesoc_sdram_choose_cmd_request[3]) begin
                                            main_basesoc_sdram_choose_cmd_grant <= 2'd3;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd5: begin
                if (main_basesoc_sdram_choose_cmd_request[6]) begin
                    main_basesoc_sdram_choose_cmd_grant <= 3'd6;
                end else begin
                    if (main_basesoc_sdram_choose_cmd_request[7]) begin
                        main_basesoc_sdram_choose_cmd_grant <= 3'd7;
                    end else begin
                        if (main_basesoc_sdram_choose_cmd_request[0]) begin
                            main_basesoc_sdram_choose_cmd_grant <= 1'd0;
                        end else begin
                            if (main_basesoc_sdram_choose_cmd_request[1]) begin
                                main_basesoc_sdram_choose_cmd_grant <= 1'd1;
                            end else begin
                                if (main_basesoc_sdram_choose_cmd_request[2]) begin
                                    main_basesoc_sdram_choose_cmd_grant <= 2'd2;
                                end else begin
                                    if (main_basesoc_sdram_choose_cmd_request[3]) begin
                                        main_basesoc_sdram_choose_cmd_grant <= 2'd3;
                                    end else begin
                                        if (main_basesoc_sdram_choose_cmd_request[4]) begin
                                            main_basesoc_sdram_choose_cmd_grant <= 3'd4;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd6: begin
                if (main_basesoc_sdram_choose_cmd_request[7]) begin
                    main_basesoc_sdram_choose_cmd_grant <= 3'd7;
                end else begin
                    if (main_basesoc_sdram_choose_cmd_request[0]) begin
                        main_basesoc_sdram_choose_cmd_grant <= 1'd0;
                    end else begin
                        if (main_basesoc_sdram_choose_cmd_request[1]) begin
                            main_basesoc_sdram_choose_cmd_grant <= 1'd1;
                        end else begin
                            if (main_basesoc_sdram_choose_cmd_request[2]) begin
                                main_basesoc_sdram_choose_cmd_grant <= 2'd2;
                            end else begin
                                if (main_basesoc_sdram_choose_cmd_request[3]) begin
                                    main_basesoc_sdram_choose_cmd_grant <= 2'd3;
                                end else begin
                                    if (main_basesoc_sdram_choose_cmd_request[4]) begin
                                        main_basesoc_sdram_choose_cmd_grant <= 3'd4;
                                    end else begin
                                        if (main_basesoc_sdram_choose_cmd_request[5]) begin
                                            main_basesoc_sdram_choose_cmd_grant <= 3'd5;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd7: begin
                if (main_basesoc_sdram_choose_cmd_request[0]) begin
                    main_basesoc_sdram_choose_cmd_grant <= 1'd0;
                end else begin
                    if (main_basesoc_sdram_choose_cmd_request[1]) begin
                        main_basesoc_sdram_choose_cmd_grant <= 1'd1;
                    end else begin
                        if (main_basesoc_sdram_choose_cmd_request[2]) begin
                            main_basesoc_sdram_choose_cmd_grant <= 2'd2;
                        end else begin
                            if (main_basesoc_sdram_choose_cmd_request[3]) begin
                                main_basesoc_sdram_choose_cmd_grant <= 2'd3;
                            end else begin
                                if (main_basesoc_sdram_choose_cmd_request[4]) begin
                                    main_basesoc_sdram_choose_cmd_grant <= 3'd4;
                                end else begin
                                    if (main_basesoc_sdram_choose_cmd_request[5]) begin
                                        main_basesoc_sdram_choose_cmd_grant <= 3'd5;
                                    end else begin
                                        if (main_basesoc_sdram_choose_cmd_request[6]) begin
                                            main_basesoc_sdram_choose_cmd_grant <= 3'd6;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        endcase
    end
    if (main_basesoc_sdram_choose_req_ce) begin
        case (main_basesoc_sdram_choose_req_grant)
            1'd0: begin
                if (main_basesoc_sdram_choose_req_request[1]) begin
                    main_basesoc_sdram_choose_req_grant <= 1'd1;
                end else begin
                    if (main_basesoc_sdram_choose_req_request[2]) begin
                        main_basesoc_sdram_choose_req_grant <= 2'd2;
                    end else begin
                        if (main_basesoc_sdram_choose_req_request[3]) begin
                            main_basesoc_sdram_choose_req_grant <= 2'd3;
                        end else begin
                            if (main_basesoc_sdram_choose_req_request[4]) begin
                                main_basesoc_sdram_choose_req_grant <= 3'd4;
                            end else begin
                                if (main_basesoc_sdram_choose_req_request[5]) begin
                                    main_basesoc_sdram_choose_req_grant <= 3'd5;
                                end else begin
                                    if (main_basesoc_sdram_choose_req_request[6]) begin
                                        main_basesoc_sdram_choose_req_grant <= 3'd6;
                                    end else begin
                                        if (main_basesoc_sdram_choose_req_request[7]) begin
                                            main_basesoc_sdram_choose_req_grant <= 3'd7;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            1'd1: begin
                if (main_basesoc_sdram_choose_req_request[2]) begin
                    main_basesoc_sdram_choose_req_grant <= 2'd2;
                end else begin
                    if (main_basesoc_sdram_choose_req_request[3]) begin
                        main_basesoc_sdram_choose_req_grant <= 2'd3;
                    end else begin
                        if (main_basesoc_sdram_choose_req_request[4]) begin
                            main_basesoc_sdram_choose_req_grant <= 3'd4;
                        end else begin
                            if (main_basesoc_sdram_choose_req_request[5]) begin
                                main_basesoc_sdram_choose_req_grant <= 3'd5;
                            end else begin
                                if (main_basesoc_sdram_choose_req_request[6]) begin
                                    main_basesoc_sdram_choose_req_grant <= 3'd6;
                                end else begin
                                    if (main_basesoc_sdram_choose_req_request[7]) begin
                                        main_basesoc_sdram_choose_req_grant <= 3'd7;
                                    end else begin
                                        if (main_basesoc_sdram_choose_req_request[0]) begin
                                            main_basesoc_sdram_choose_req_grant <= 1'd0;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd2: begin
                if (main_basesoc_sdram_choose_req_request[3]) begin
                    main_basesoc_sdram_choose_req_grant <= 2'd3;
                end else begin
                    if (main_basesoc_sdram_choose_req_request[4]) begin
                        main_basesoc_sdram_choose_req_grant <= 3'd4;
                    end else begin
                        if (main_basesoc_sdram_choose_req_request[5]) begin
                            main_basesoc_sdram_choose_req_grant <= 3'd5;
                        end else begin
                            if (main_basesoc_sdram_choose_req_request[6]) begin
                                main_basesoc_sdram_choose_req_grant <= 3'd6;
                            end else begin
                                if (main_basesoc_sdram_choose_req_request[7]) begin
                                    main_basesoc_sdram_choose_req_grant <= 3'd7;
                                end else begin
                                    if (main_basesoc_sdram_choose_req_request[0]) begin
                                        main_basesoc_sdram_choose_req_grant <= 1'd0;
                                    end else begin
                                        if (main_basesoc_sdram_choose_req_request[1]) begin
                                            main_basesoc_sdram_choose_req_grant <= 1'd1;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd3: begin
                if (main_basesoc_sdram_choose_req_request[4]) begin
                    main_basesoc_sdram_choose_req_grant <= 3'd4;
                end else begin
                    if (main_basesoc_sdram_choose_req_request[5]) begin
                        main_basesoc_sdram_choose_req_grant <= 3'd5;
                    end else begin
                        if (main_basesoc_sdram_choose_req_request[6]) begin
                            main_basesoc_sdram_choose_req_grant <= 3'd6;
                        end else begin
                            if (main_basesoc_sdram_choose_req_request[7]) begin
                                main_basesoc_sdram_choose_req_grant <= 3'd7;
                            end else begin
                                if (main_basesoc_sdram_choose_req_request[0]) begin
                                    main_basesoc_sdram_choose_req_grant <= 1'd0;
                                end else begin
                                    if (main_basesoc_sdram_choose_req_request[1]) begin
                                        main_basesoc_sdram_choose_req_grant <= 1'd1;
                                    end else begin
                                        if (main_basesoc_sdram_choose_req_request[2]) begin
                                            main_basesoc_sdram_choose_req_grant <= 2'd2;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd4: begin
                if (main_basesoc_sdram_choose_req_request[5]) begin
                    main_basesoc_sdram_choose_req_grant <= 3'd5;
                end else begin
                    if (main_basesoc_sdram_choose_req_request[6]) begin
                        main_basesoc_sdram_choose_req_grant <= 3'd6;
                    end else begin
                        if (main_basesoc_sdram_choose_req_request[7]) begin
                            main_basesoc_sdram_choose_req_grant <= 3'd7;
                        end else begin
                            if (main_basesoc_sdram_choose_req_request[0]) begin
                                main_basesoc_sdram_choose_req_grant <= 1'd0;
                            end else begin
                                if (main_basesoc_sdram_choose_req_request[1]) begin
                                    main_basesoc_sdram_choose_req_grant <= 1'd1;
                                end else begin
                                    if (main_basesoc_sdram_choose_req_request[2]) begin
                                        main_basesoc_sdram_choose_req_grant <= 2'd2;
                                    end else begin
                                        if (main_basesoc_sdram_choose_req_request[3]) begin
                                            main_basesoc_sdram_choose_req_grant <= 2'd3;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd5: begin
                if (main_basesoc_sdram_choose_req_request[6]) begin
                    main_basesoc_sdram_choose_req_grant <= 3'd6;
                end else begin
                    if (main_basesoc_sdram_choose_req_request[7]) begin
                        main_basesoc_sdram_choose_req_grant <= 3'd7;
                    end else begin
                        if (main_basesoc_sdram_choose_req_request[0]) begin
                            main_basesoc_sdram_choose_req_grant <= 1'd0;
                        end else begin
                            if (main_basesoc_sdram_choose_req_request[1]) begin
                                main_basesoc_sdram_choose_req_grant <= 1'd1;
                            end else begin
                                if (main_basesoc_sdram_choose_req_request[2]) begin
                                    main_basesoc_sdram_choose_req_grant <= 2'd2;
                                end else begin
                                    if (main_basesoc_sdram_choose_req_request[3]) begin
                                        main_basesoc_sdram_choose_req_grant <= 2'd3;
                                    end else begin
                                        if (main_basesoc_sdram_choose_req_request[4]) begin
                                            main_basesoc_sdram_choose_req_grant <= 3'd4;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd6: begin
                if (main_basesoc_sdram_choose_req_request[7]) begin
                    main_basesoc_sdram_choose_req_grant <= 3'd7;
                end else begin
                    if (main_basesoc_sdram_choose_req_request[0]) begin
                        main_basesoc_sdram_choose_req_grant <= 1'd0;
                    end else begin
                        if (main_basesoc_sdram_choose_req_request[1]) begin
                            main_basesoc_sdram_choose_req_grant <= 1'd1;
                        end else begin
                            if (main_basesoc_sdram_choose_req_request[2]) begin
                                main_basesoc_sdram_choose_req_grant <= 2'd2;
                            end else begin
                                if (main_basesoc_sdram_choose_req_request[3]) begin
                                    main_basesoc_sdram_choose_req_grant <= 2'd3;
                                end else begin
                                    if (main_basesoc_sdram_choose_req_request[4]) begin
                                        main_basesoc_sdram_choose_req_grant <= 3'd4;
                                    end else begin
                                        if (main_basesoc_sdram_choose_req_request[5]) begin
                                            main_basesoc_sdram_choose_req_grant <= 3'd5;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd7: begin
                if (main_basesoc_sdram_choose_req_request[0]) begin
                    main_basesoc_sdram_choose_req_grant <= 1'd0;
                end else begin
                    if (main_basesoc_sdram_choose_req_request[1]) begin
                        main_basesoc_sdram_choose_req_grant <= 1'd1;
                    end else begin
                        if (main_basesoc_sdram_choose_req_request[2]) begin
                            main_basesoc_sdram_choose_req_grant <= 2'd2;
                        end else begin
                            if (main_basesoc_sdram_choose_req_request[3]) begin
                                main_basesoc_sdram_choose_req_grant <= 2'd3;
                            end else begin
                                if (main_basesoc_sdram_choose_req_request[4]) begin
                                    main_basesoc_sdram_choose_req_grant <= 3'd4;
                                end else begin
                                    if (main_basesoc_sdram_choose_req_request[5]) begin
                                        main_basesoc_sdram_choose_req_grant <= 3'd5;
                                    end else begin
                                        if (main_basesoc_sdram_choose_req_request[6]) begin
                                            main_basesoc_sdram_choose_req_grant <= 3'd6;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        endcase
    end
    main_basesoc_sdram_dfi_p0_cs_n <= 1'd0;
    main_basesoc_sdram_dfi_p0_bank <= builder_self0;
    main_basesoc_sdram_dfi_p0_address <= builder_self1;
    main_basesoc_sdram_dfi_p0_cas_n <= (~builder_self2);
    main_basesoc_sdram_dfi_p0_ras_n <= (~builder_self3);
    main_basesoc_sdram_dfi_p0_we_n <= (~builder_self4);
    main_basesoc_sdram_dfi_p0_rddata_en <= builder_self5;
    main_basesoc_sdram_dfi_p0_wrdata_en <= builder_self6;
    main_basesoc_sdram_dfi_p1_cs_n <= 1'd0;
    main_basesoc_sdram_dfi_p1_bank <= builder_self7;
    main_basesoc_sdram_dfi_p1_address <= builder_self8;
    main_basesoc_sdram_dfi_p1_cas_n <= (~builder_self9);
    main_basesoc_sdram_dfi_p1_ras_n <= (~builder_self10);
    main_basesoc_sdram_dfi_p1_we_n <= (~builder_self11);
    main_basesoc_sdram_dfi_p1_rddata_en <= builder_self12;
    main_basesoc_sdram_dfi_p1_wrdata_en <= builder_self13;
    main_basesoc_sdram_dfi_p2_cs_n <= 1'd0;
    main_basesoc_sdram_dfi_p2_bank <= builder_self14;
    main_basesoc_sdram_dfi_p2_address <= builder_self15;
    main_basesoc_sdram_dfi_p2_cas_n <= (~builder_self16);
    main_basesoc_sdram_dfi_p2_ras_n <= (~builder_self17);
    main_basesoc_sdram_dfi_p2_we_n <= (~builder_self18);
    main_basesoc_sdram_dfi_p2_rddata_en <= builder_self19;
    main_basesoc_sdram_dfi_p2_wrdata_en <= builder_self20;
    main_basesoc_sdram_dfi_p3_cs_n <= 1'd0;
    main_basesoc_sdram_dfi_p3_bank <= builder_self21;
    main_basesoc_sdram_dfi_p3_address <= builder_self22;
    main_basesoc_sdram_dfi_p3_cas_n <= (~builder_self23);
    main_basesoc_sdram_dfi_p3_ras_n <= (~builder_self24);
    main_basesoc_sdram_dfi_p3_we_n <= (~builder_self25);
    main_basesoc_sdram_dfi_p3_rddata_en <= builder_self26;
    main_basesoc_sdram_dfi_p3_wrdata_en <= builder_self27;
    if (main_basesoc_sdram_trrdcon_valid) begin
        main_basesoc_sdram_trrdcon_count <= 1'd1;
        if (1'd0) begin
            main_basesoc_sdram_trrdcon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_trrdcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_trrdcon_ready)) begin
            main_basesoc_sdram_trrdcon_count <= (main_basesoc_sdram_trrdcon_count - 1'd1);
            if ((main_basesoc_sdram_trrdcon_count == 1'd1)) begin
                main_basesoc_sdram_trrdcon_ready <= 1'd1;
            end
        end
    end
    main_basesoc_sdram_tfawcon_self <= {main_basesoc_sdram_tfawcon_self, main_basesoc_sdram_tfawcon_valid};
    if ((main_basesoc_sdram_tfawcon_count < 3'd4)) begin
        if ((main_basesoc_sdram_tfawcon_count == 2'd3)) begin
            main_basesoc_sdram_tfawcon_ready <= (~main_basesoc_sdram_tfawcon_valid);
        end else begin
            main_basesoc_sdram_tfawcon_ready <= 1'd1;
        end
    end
    if (main_basesoc_sdram_tccdcon_valid) begin
        main_basesoc_sdram_tccdcon_count <= 1'd0;
        if (1'd1) begin
            main_basesoc_sdram_tccdcon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_tccdcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_tccdcon_ready)) begin
            main_basesoc_sdram_tccdcon_count <= (main_basesoc_sdram_tccdcon_count - 1'd1);
            if ((main_basesoc_sdram_tccdcon_count == 1'd1)) begin
                main_basesoc_sdram_tccdcon_ready <= 1'd1;
            end
        end
    end
    if (main_basesoc_sdram_twtrcon_valid) begin
        main_basesoc_sdram_twtrcon_count <= 3'd4;
        if (1'd0) begin
            main_basesoc_sdram_twtrcon_ready <= 1'd1;
        end else begin
            main_basesoc_sdram_twtrcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_basesoc_sdram_twtrcon_ready)) begin
            main_basesoc_sdram_twtrcon_count <= (main_basesoc_sdram_twtrcon_count - 1'd1);
            if ((main_basesoc_sdram_twtrcon_count == 1'd1)) begin
                main_basesoc_sdram_twtrcon_ready <= 1'd1;
            end
        end
    end
    builder_multiplexer_state <= builder_multiplexer_next_state;
    builder_new_master_wdata_ready0 <= ((((((((1'd0 | ((builder_roundrobin0_grant == 1'd0) & main_basesoc_sdram_interface_bank0_wdata_ready)) | ((builder_roundrobin1_grant == 1'd0) & main_basesoc_sdram_interface_bank1_wdata_ready)) | ((builder_roundrobin2_grant == 1'd0) & main_basesoc_sdram_interface_bank2_wdata_ready)) | ((builder_roundrobin3_grant == 1'd0) & main_basesoc_sdram_interface_bank3_wdata_ready)) | ((builder_roundrobin4_grant == 1'd0) & main_basesoc_sdram_interface_bank4_wdata_ready)) | ((builder_roundrobin5_grant == 1'd0) & main_basesoc_sdram_interface_bank5_wdata_ready)) | ((builder_roundrobin6_grant == 1'd0) & main_basesoc_sdram_interface_bank6_wdata_ready)) | ((builder_roundrobin7_grant == 1'd0) & main_basesoc_sdram_interface_bank7_wdata_ready));
    builder_new_master_wdata_ready1 <= builder_new_master_wdata_ready0;
    builder_new_master_rdata_valid0 <= ((((((((1'd0 | ((builder_roundrobin0_grant == 1'd0) & main_basesoc_sdram_interface_bank0_rdata_valid)) | ((builder_roundrobin1_grant == 1'd0) & main_basesoc_sdram_interface_bank1_rdata_valid)) | ((builder_roundrobin2_grant == 1'd0) & main_basesoc_sdram_interface_bank2_rdata_valid)) | ((builder_roundrobin3_grant == 1'd0) & main_basesoc_sdram_interface_bank3_rdata_valid)) | ((builder_roundrobin4_grant == 1'd0) & main_basesoc_sdram_interface_bank4_rdata_valid)) | ((builder_roundrobin5_grant == 1'd0) & main_basesoc_sdram_interface_bank5_rdata_valid)) | ((builder_roundrobin6_grant == 1'd0) & main_basesoc_sdram_interface_bank6_rdata_valid)) | ((builder_roundrobin7_grant == 1'd0) & main_basesoc_sdram_interface_bank7_rdata_valid));
    builder_new_master_rdata_valid1 <= builder_new_master_rdata_valid0;
    builder_new_master_rdata_valid2 <= builder_new_master_rdata_valid1;
    builder_new_master_rdata_valid3 <= builder_new_master_rdata_valid2;
    builder_new_master_rdata_valid4 <= builder_new_master_rdata_valid3;
    builder_new_master_rdata_valid5 <= builder_new_master_rdata_valid4;
    builder_new_master_rdata_valid6 <= builder_new_master_rdata_valid5;
    builder_new_master_rdata_valid7 <= builder_new_master_rdata_valid6;
    builder_new_master_rdata_valid8 <= builder_new_master_rdata_valid7;
    main_basesoc_adr_offset_r <= main_basesoc_wb_sdram_adr[2:0];
    builder_fullmemorywe_state <= builder_fullmemorywe_next_state;
    builder_litedramwishbone2native_state <= builder_litedramwishbone2native_next_state;
    if (main_basesoc_aborted_litedramwishbone2native_next_value_ce) begin
        main_basesoc_aborted <= main_basesoc_aborted_litedramwishbone2native_next_value;
    end
    if (main_ethphy_hw_reset_counter_ce) begin
        main_ethphy_hw_reset_counter <= (main_ethphy_hw_reset_counter + 1'd1);
    end
    if (main_basesoc_etherbone_tx_packetizer_sr_load) begin
        main_basesoc_etherbone_tx_packetizer_sr <= main_basesoc_etherbone_tx_packetizer_header;
    end
    if (main_basesoc_etherbone_tx_packetizer_sr_shift) begin
        main_basesoc_etherbone_tx_packetizer_sr <= main_basesoc_etherbone_tx_packetizer_sr[63:32];
    end
    builder_liteethetherbonepackettx_fsm0_state <= builder_liteethetherbonepackettx_fsm0_next_state;
    if (main_basesoc_etherbone_tx_packetizer_count_liteethetherbone_fsm0_next_value_ce0) begin
        main_basesoc_etherbone_tx_packetizer_count <= main_basesoc_etherbone_tx_packetizer_count_liteethetherbone_fsm0_next_value0;
    end
    if (main_basesoc_etherbone_tx_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce1) begin
        main_basesoc_etherbone_tx_packetizer_fsm_from_idle <= main_basesoc_etherbone_tx_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value1;
    end
    builder_liteethetherbonepackettx_fsm1_state <= builder_liteethetherbonepackettx_fsm1_next_state;
    if (main_basesoc_etherbone_tx_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce0) begin
        main_basesoc_etherbone_tx_packetizer_delayed_last_be <= main_basesoc_etherbone_tx_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value0;
    end
    builder_liteethetherbonepackettx_state <= builder_liteethetherbonepackettx_next_state;
    if (main_basesoc_etherbone_rx_depacketizer_sr_shift) begin
        main_basesoc_etherbone_rx_depacketizer_sr <= {main_basesoc_etherbone_rx_depacketizer_sink_payload_data, main_basesoc_etherbone_rx_depacketizer_sr[63:32]};
    end
    if (main_basesoc_etherbone_rx_depacketizer_sr_shift_leftover) begin
        main_basesoc_etherbone_rx_depacketizer_sr <= {main_basesoc_etherbone_rx_depacketizer_sink_payload_data, main_basesoc_etherbone_rx_depacketizer_sr};
    end
    main_basesoc_etherbone_rx_depacketizer_was_in_copy <= main_basesoc_etherbone_rx_depacketizer_is_in_copy;
    builder_liteethetherbonepacketrx_fsm0_state <= builder_liteethetherbonepacketrx_fsm0_next_state;
    if (main_basesoc_etherbone_rx_depacketizer_count_liteethetherbone_fsm0_next_value_ce2) begin
        main_basesoc_etherbone_rx_depacketizer_count <= main_basesoc_etherbone_rx_depacketizer_count_liteethetherbone_fsm0_next_value2;
    end
    if (main_basesoc_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce3) begin
        main_basesoc_etherbone_rx_depacketizer_fsm_from_idle <= main_basesoc_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value3;
    end
    builder_liteethetherbonepacketrx_fsm1_state <= builder_liteethetherbonepacketrx_fsm1_next_state;
    if (main_basesoc_etherbone_rx_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce1) begin
        main_basesoc_etherbone_rx_depacketizer_delayed_last_be <= main_basesoc_etherbone_rx_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value1;
    end
    builder_liteethetherbonepacketrx_state <= builder_liteethetherbonepacketrx_next_state;
    if (((~main_basesoc_etherbone_probe_pipe_valid_source_valid) | main_basesoc_etherbone_probe_pipe_valid_source_ready)) begin
        main_basesoc_etherbone_probe_pipe_valid_source_valid <= main_basesoc_etherbone_probe_pipe_valid_sink_valid;
        main_basesoc_etherbone_probe_pipe_valid_source_first <= main_basesoc_etherbone_probe_pipe_valid_sink_first;
        main_basesoc_etherbone_probe_pipe_valid_source_last <= main_basesoc_etherbone_probe_pipe_valid_sink_last;
        main_basesoc_etherbone_probe_pipe_valid_source_payload_data <= main_basesoc_etherbone_probe_pipe_valid_sink_payload_data;
        main_basesoc_etherbone_probe_pipe_valid_source_payload_last_be <= main_basesoc_etherbone_probe_pipe_valid_sink_payload_last_be;
        main_basesoc_etherbone_probe_pipe_valid_source_payload_error <= main_basesoc_etherbone_probe_pipe_valid_sink_payload_error;
    end
    if (((main_basesoc_etherbone_probe_param_fifo_syncfifo_we & main_basesoc_etherbone_probe_param_fifo_syncfifo_writable) & (~main_basesoc_etherbone_probe_param_fifo_replace))) begin
        main_basesoc_etherbone_probe_param_fifo_produce <= (main_basesoc_etherbone_probe_param_fifo_produce + 1'd1);
    end
    if (main_basesoc_etherbone_probe_param_fifo_do_read) begin
        main_basesoc_etherbone_probe_param_fifo_consume <= (main_basesoc_etherbone_probe_param_fifo_consume + 1'd1);
    end
    if (((main_basesoc_etherbone_probe_param_fifo_syncfifo_we & main_basesoc_etherbone_probe_param_fifo_syncfifo_writable) & (~main_basesoc_etherbone_probe_param_fifo_replace))) begin
        if ((~main_basesoc_etherbone_probe_param_fifo_do_read)) begin
            main_basesoc_etherbone_probe_param_fifo_level <= (main_basesoc_etherbone_probe_param_fifo_level + 1'd1);
        end
    end else begin
        if (main_basesoc_etherbone_probe_param_fifo_do_read) begin
            main_basesoc_etherbone_probe_param_fifo_level <= (main_basesoc_etherbone_probe_param_fifo_level - 1'd1);
        end
    end
    builder_liteethetherboneprobe_state <= builder_liteethetherboneprobe_next_state;
    if ((main_basesoc_etherbone_record_sink_sink_valid & main_basesoc_etherbone_record_sink_sink_ready)) begin
        if (main_basesoc_etherbone_record_first) begin
            main_basesoc_etherbone_record_last_ip_address <= main_basesoc_etherbone_record_sink_sink_param_ip_address;
        end
        main_basesoc_etherbone_record_first <= main_basesoc_etherbone_record_sink_sink_last;
    end
    if (main_basesoc_etherbone_record_depacketizer_sr_shift) begin
        main_basesoc_etherbone_record_depacketizer_sr <= main_basesoc_etherbone_record_depacketizer_sink_payload_data;
    end
    main_basesoc_etherbone_record_depacketizer_was_in_copy <= main_basesoc_etherbone_record_depacketizer_is_in_copy;
    builder_fsm0_state0 <= builder_fsm0_next_state0;
    if (main_basesoc_etherbone_record_depacketizer_count_liteethetherbone_fsm0_next_value_ce4) begin
        main_basesoc_etherbone_record_depacketizer_count <= main_basesoc_etherbone_record_depacketizer_count_liteethetherbone_fsm0_next_value4;
    end
    if (main_basesoc_etherbone_record_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce5) begin
        main_basesoc_etherbone_record_depacketizer_fsm_from_idle <= main_basesoc_etherbone_record_depacketizer_fsm_from_idle_liteethetherbone_fsm0_next_value5;
    end
    builder_fsm1_state0 <= builder_fsm1_next_state0;
    if (main_basesoc_etherbone_record_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce2) begin
        main_basesoc_etherbone_record_depacketizer_delayed_last_be <= main_basesoc_etherbone_record_depacketizer_delayed_last_be_liteethetherbone_fsm1_next_value2;
    end
    if (main_basesoc_etherbone_record_receiver_base_addr_update) begin
        main_basesoc_etherbone_record_receiver_base_addr <= main_basesoc_etherbone_record_receiver_source_source_payload_data;
    end
    if (main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_re) begin
        main_basesoc_etherbone_record_receiver_payload_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_etherbone_record_receiver_payload_fifo_re) begin
            main_basesoc_etherbone_record_receiver_payload_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_we & main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_writable) & (~main_basesoc_etherbone_record_receiver_payload_fifo_replace))) begin
        main_basesoc_etherbone_record_receiver_payload_fifo_produce <= (main_basesoc_etherbone_record_receiver_payload_fifo_produce + 1'd1);
    end
    if (main_basesoc_etherbone_record_receiver_payload_fifo_do_read) begin
        main_basesoc_etherbone_record_receiver_payload_fifo_consume <= (main_basesoc_etherbone_record_receiver_payload_fifo_consume + 1'd1);
    end
    if (((main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_we & main_basesoc_etherbone_record_receiver_payload_fifo_syncfifo_writable) & (~main_basesoc_etherbone_record_receiver_payload_fifo_replace))) begin
        if ((~main_basesoc_etherbone_record_receiver_payload_fifo_do_read)) begin
            main_basesoc_etherbone_record_receiver_payload_fifo_level0 <= (main_basesoc_etherbone_record_receiver_payload_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_etherbone_record_receiver_payload_fifo_do_read) begin
            main_basesoc_etherbone_record_receiver_payload_fifo_level0 <= (main_basesoc_etherbone_record_receiver_payload_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_re) begin
        main_basesoc_etherbone_record_receiver_param_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_etherbone_record_receiver_param_fifo_re) begin
            main_basesoc_etherbone_record_receiver_param_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_we & main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_writable) & (~main_basesoc_etherbone_record_receiver_param_fifo_replace))) begin
        main_basesoc_etherbone_record_receiver_param_fifo_produce <= (main_basesoc_etherbone_record_receiver_param_fifo_produce + 1'd1);
    end
    if (main_basesoc_etherbone_record_receiver_param_fifo_do_read) begin
        main_basesoc_etherbone_record_receiver_param_fifo_consume <= (main_basesoc_etherbone_record_receiver_param_fifo_consume + 1'd1);
    end
    if (((main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_we & main_basesoc_etherbone_record_receiver_param_fifo_syncfifo_writable) & (~main_basesoc_etherbone_record_receiver_param_fifo_replace))) begin
        if ((~main_basesoc_etherbone_record_receiver_param_fifo_do_read)) begin
            main_basesoc_etherbone_record_receiver_param_fifo_level0 <= (main_basesoc_etherbone_record_receiver_param_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_etherbone_record_receiver_param_fifo_do_read) begin
            main_basesoc_etherbone_record_receiver_param_fifo_level0 <= (main_basesoc_etherbone_record_receiver_param_fifo_level0 - 1'd1);
        end
    end
    builder_liteethetherbonerecordreceiver_state <= builder_liteethetherbonerecordreceiver_next_state;
    if (main_basesoc_etherbone_record_receiver_count_liteethetherbone_next_value_ce) begin
        main_basesoc_etherbone_record_receiver_count <= main_basesoc_etherbone_record_receiver_count_liteethetherbone_next_value;
    end
    if (main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_re) begin
        main_basesoc_etherbone_record_sender_payload_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_etherbone_record_sender_payload_fifo_re) begin
            main_basesoc_etherbone_record_sender_payload_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_we & main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_writable) & (~main_basesoc_etherbone_record_sender_payload_fifo_replace))) begin
        main_basesoc_etherbone_record_sender_payload_fifo_produce <= (main_basesoc_etherbone_record_sender_payload_fifo_produce + 1'd1);
    end
    if (main_basesoc_etherbone_record_sender_payload_fifo_do_read) begin
        main_basesoc_etherbone_record_sender_payload_fifo_consume <= (main_basesoc_etherbone_record_sender_payload_fifo_consume + 1'd1);
    end
    if (((main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_we & main_basesoc_etherbone_record_sender_payload_fifo_syncfifo_writable) & (~main_basesoc_etherbone_record_sender_payload_fifo_replace))) begin
        if ((~main_basesoc_etherbone_record_sender_payload_fifo_do_read)) begin
            main_basesoc_etherbone_record_sender_payload_fifo_level0 <= (main_basesoc_etherbone_record_sender_payload_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_etherbone_record_sender_payload_fifo_do_read) begin
            main_basesoc_etherbone_record_sender_payload_fifo_level0 <= (main_basesoc_etherbone_record_sender_payload_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_etherbone_record_sender_param_fifo_syncfifo_re) begin
        main_basesoc_etherbone_record_sender_param_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_etherbone_record_sender_param_fifo_re) begin
            main_basesoc_etherbone_record_sender_param_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_etherbone_record_sender_param_fifo_syncfifo_we & main_basesoc_etherbone_record_sender_param_fifo_syncfifo_writable) & (~main_basesoc_etherbone_record_sender_param_fifo_replace))) begin
        main_basesoc_etherbone_record_sender_param_fifo_produce <= (main_basesoc_etherbone_record_sender_param_fifo_produce + 1'd1);
    end
    if (main_basesoc_etherbone_record_sender_param_fifo_do_read) begin
        main_basesoc_etherbone_record_sender_param_fifo_consume <= (main_basesoc_etherbone_record_sender_param_fifo_consume + 1'd1);
    end
    if (((main_basesoc_etherbone_record_sender_param_fifo_syncfifo_we & main_basesoc_etherbone_record_sender_param_fifo_syncfifo_writable) & (~main_basesoc_etherbone_record_sender_param_fifo_replace))) begin
        if ((~main_basesoc_etherbone_record_sender_param_fifo_do_read)) begin
            main_basesoc_etherbone_record_sender_param_fifo_level0 <= (main_basesoc_etherbone_record_sender_param_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_etherbone_record_sender_param_fifo_do_read) begin
            main_basesoc_etherbone_record_sender_param_fifo_level0 <= (main_basesoc_etherbone_record_sender_param_fifo_level0 - 1'd1);
        end
    end
    builder_liteethetherbonerecordsender_state <= builder_liteethetherbonerecordsender_next_state;
    if (main_basesoc_etherbone_record_packetizer_sr_load) begin
        main_basesoc_etherbone_record_packetizer_sr <= main_basesoc_etherbone_record_packetizer_header;
    end
    builder_fsm0_state1 <= builder_fsm0_next_state1;
    if (main_basesoc_etherbone_record_packetizer_count_liteethetherbone_fsm0_next_value_ce6) begin
        main_basesoc_etherbone_record_packetizer_count <= main_basesoc_etherbone_record_packetizer_count_liteethetherbone_fsm0_next_value6;
    end
    if (main_basesoc_etherbone_record_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value_ce7) begin
        main_basesoc_etherbone_record_packetizer_fsm_from_idle <= main_basesoc_etherbone_record_packetizer_fsm_from_idle_liteethetherbone_fsm0_next_value7;
    end
    builder_fsm1_state1 <= builder_fsm1_next_state1;
    if (main_basesoc_etherbone_record_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value_ce3) begin
        main_basesoc_etherbone_record_packetizer_delayed_last_be <= main_basesoc_etherbone_record_packetizer_delayed_last_be_liteethetherbone_fsm1_next_value3;
    end
    if (main_basesoc_etherbone_dispatcher_first) begin
        main_basesoc_etherbone_dispatcher_sel_ongoing <= main_basesoc_etherbone_dispatcher_sel0;
    end
    main_basesoc_etherbone_dispatcher_ongoing1 <= main_basesoc_etherbone_dispatcher_ongoing0;
    if (main_basesoc_etherbone_dispatcher_last) begin
        main_basesoc_etherbone_dispatcher_first <= 1'd1;
    end else begin
        if ((main_basesoc_etherbone_rx_source_source_valid & main_basesoc_etherbone_rx_source_source_ready)) begin
            main_basesoc_etherbone_dispatcher_first <= 1'd0;
        end
    end
    case (main_basesoc_etherbone_grant)
        1'd0: begin
            if ((~main_basesoc_etherbone_request[0])) begin
                if (main_basesoc_etherbone_request[1]) begin
                    main_basesoc_etherbone_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~main_basesoc_etherbone_request[1])) begin
                if (main_basesoc_etherbone_request[0]) begin
                    main_basesoc_etherbone_grant <= 1'd0;
                end
            end
        end
    endcase
    main_basesoc_etherbone_status0_ongoing1 <= main_basesoc_etherbone_status0_ongoing0;
    if (main_basesoc_etherbone_status0_last) begin
        main_basesoc_etherbone_status0_first <= 1'd1;
    end else begin
        if ((main_basesoc_etherbone_probe_source_valid & main_basesoc_etherbone_probe_source_ready)) begin
            main_basesoc_etherbone_status0_first <= 1'd0;
        end
    end
    main_basesoc_etherbone_status1_ongoing1 <= main_basesoc_etherbone_status1_ongoing0;
    if (main_basesoc_etherbone_status1_last) begin
        main_basesoc_etherbone_status1_first <= 1'd1;
    end else begin
        if ((main_basesoc_etherbone_record_source_source_valid & main_basesoc_etherbone_record_source_source_ready)) begin
            main_basesoc_etherbone_status1_first <= 1'd0;
        end
    end
    main_basesoc_etherbone_liteethetherbonewishbonemaster_source_payload_addr <= main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_payload_addr;
    main_basesoc_etherbone_liteethetherbonewishbonemaster_source_param_count <= main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_param_count;
    main_basesoc_etherbone_liteethetherbonewishbonemaster_source_param_base_addr <= main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_param_base_addr;
    main_basesoc_etherbone_liteethetherbonewishbonemaster_source_param_be <= main_basesoc_etherbone_liteethetherbonewishbonemaster_sink_param_be;
    main_basesoc_etherbone_liteethetherbonewishbonemaster_source_param_we <= 1'd1;
    if (main_basesoc_etherbone_liteethetherbonewishbonemaster_data_update) begin
        main_basesoc_etherbone_liteethetherbonewishbonemaster_source_payload_data <= main_basesoc_etherbone_liteethetherbonewishbonemaster_bus_dat_r;
    end
    builder_liteethetherbonewishbonemaster_state <= builder_liteethetherbonewishbonemaster_next_state;
    builder_wishbone2csr_state <= builder_wishbone2csr_next_state;
    if (builder_interface1_dat_w_wishbone2csr_next_value_ce0) begin
        builder_interface1_dat_w <= builder_interface1_dat_w_wishbone2csr_next_value0;
    end
    if (builder_interface1_adr_wishbone2csr_next_value_ce1) begin
        builder_interface1_adr <= builder_interface1_adr_wishbone2csr_next_value1;
    end
    if (builder_interface1_re_wishbone2csr_next_value_ce2) begin
        builder_interface1_re <= builder_interface1_re_wishbone2csr_next_value2;
    end
    if (builder_interface1_we_wishbone2csr_next_value_ce3) begin
        builder_interface1_we <= builder_interface1_we_wishbone2csr_next_value3;
    end
    builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank0_sel) begin
        case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank0_reset0_re) begin
        main_basesoc_basesoc_reset_storage <= builder_csr_bankarray_csrbank0_reset0_r;
    end
    main_basesoc_basesoc_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
    if (builder_csr_bankarray_csrbank0_scratch0_re) begin
        main_basesoc_basesoc_scratch_storage <= builder_csr_bankarray_csrbank0_scratch0_r;
    end
    main_basesoc_basesoc_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
    main_basesoc_basesoc_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
    builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank1_sel) begin
        case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_rst0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_dly_sel0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_half_sys8x_taps0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_wlevel_en0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_a7ddrphy_wlevel_strobe_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_a7ddrphy_rdly_dq_rst_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_a7ddrphy_rdly_dq_inc_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_a7ddrphy_rdly_dq_bitslip_rst_w;
            end
            4'd8: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_a7ddrphy_rdly_dq_bitslip_w;
            end
            4'd9: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_a7ddrphy_wdly_dq_bitslip_rst_w;
            end
            4'd10: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_a7ddrphy_wdly_dq_bitslip_w;
            end
            4'd11: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_rdphase0_w;
            end
            4'd12: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_wrphase0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank1_rst0_re) begin
        main_a7ddrphy_rst_storage <= builder_csr_bankarray_csrbank1_rst0_r;
    end
    main_a7ddrphy_rst_re <= builder_csr_bankarray_csrbank1_rst0_re;
    if (builder_csr_bankarray_csrbank1_dly_sel0_re) begin
        main_a7ddrphy_dly_sel_storage <= builder_csr_bankarray_csrbank1_dly_sel0_r;
    end
    main_a7ddrphy_dly_sel_re <= builder_csr_bankarray_csrbank1_dly_sel0_re;
    if (builder_csr_bankarray_csrbank1_half_sys8x_taps0_re) begin
        main_a7ddrphy_half_sys8x_taps_storage <= builder_csr_bankarray_csrbank1_half_sys8x_taps0_r;
    end
    main_a7ddrphy_half_sys8x_taps_re <= builder_csr_bankarray_csrbank1_half_sys8x_taps0_re;
    if (builder_csr_bankarray_csrbank1_wlevel_en0_re) begin
        main_a7ddrphy_wlevel_en_storage <= builder_csr_bankarray_csrbank1_wlevel_en0_r;
    end
    main_a7ddrphy_wlevel_en_re <= builder_csr_bankarray_csrbank1_wlevel_en0_re;
    if (builder_csr_bankarray_csrbank1_rdphase0_re) begin
        main_a7ddrphy_rdphase_storage <= builder_csr_bankarray_csrbank1_rdphase0_r;
    end
    main_a7ddrphy_rdphase_re <= builder_csr_bankarray_csrbank1_rdphase0_re;
    if (builder_csr_bankarray_csrbank1_wrphase0_re) begin
        main_a7ddrphy_wrphase_storage <= builder_csr_bankarray_csrbank1_wrphase0_r;
    end
    main_a7ddrphy_wrphase_re <= builder_csr_bankarray_csrbank1_wrphase0_re;
    builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank2_sel) begin
        case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_crg_reset0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_mdio_w0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_mdio_r_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank2_crg_reset0_re) begin
        main_ethphy_reset_storage <= builder_csr_bankarray_csrbank2_crg_reset0_r;
    end
    main_ethphy_reset_re <= builder_csr_bankarray_csrbank2_crg_reset0_re;
    if (builder_csr_bankarray_csrbank2_mdio_w0_re) begin
        main_ethphy__w_storage <= builder_csr_bankarray_csrbank2_mdio_w0_r;
    end
    main_ethphy__w_re <= builder_csr_bankarray_csrbank2_mdio_w0_re;
    main_ethphy__r_re <= builder_csr_bankarray_csrbank2_mdio_r_re;
    builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
    builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank3_sel) begin
        case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_bypass_en0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_mux_sel0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_method_sel0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_upsample_factor0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_tx_lpf_cutoff0_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_cordic_tx_phase0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_downsample_factor0_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_rx_lpf_cutoff0_w;
            end
            4'd8: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_cordic_rx_phase0_w;
            end
            4'd9: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_gain_tx0_w;
            end
            4'd10: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_gain_rx0_w;
            end
            4'd11: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_physics_run0_w;
            end
            4'd12: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_physics_busy_w;
            end
            4'd13: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_hs_dbg_addr0_w;
            end
            4'd14: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_hs_dbg_wdata0_w;
            end
            4'd15: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_hs_dbg_rdata_w;
            end
            5'd16: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ls_dbg_addr0_w;
            end
            5'd17: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ls_dbg_wdata0_w;
            end
            5'd18: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ls_dbg_rdata_w;
            end
            5'd19: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_sd_cmd0_w;
            end
            5'd20: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_sd_status_w;
            end
            5'd21: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_phase_inc0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank3_bypass_en0_re) begin
        main_bypass_en_storage <= builder_csr_bankarray_csrbank3_bypass_en0_r;
    end
    main_bypass_en_re <= builder_csr_bankarray_csrbank3_bypass_en0_re;
    if (builder_csr_bankarray_csrbank3_mux_sel0_re) begin
        main_mux_sel_storage <= builder_csr_bankarray_csrbank3_mux_sel0_r;
    end
    main_mux_sel_re <= builder_csr_bankarray_csrbank3_mux_sel0_re;
    if (builder_csr_bankarray_csrbank3_method_sel0_re) begin
        main_method_sel_storage <= builder_csr_bankarray_csrbank3_method_sel0_r;
    end
    main_method_sel_re <= builder_csr_bankarray_csrbank3_method_sel0_re;
    if (builder_csr_bankarray_csrbank3_upsample_factor0_re) begin
        main_upsample_factor_storage <= builder_csr_bankarray_csrbank3_upsample_factor0_r;
    end
    main_upsample_factor_re <= builder_csr_bankarray_csrbank3_upsample_factor0_re;
    if (builder_csr_bankarray_csrbank3_tx_lpf_cutoff0_re) begin
        main_tx_lpf_cutoff_storage <= builder_csr_bankarray_csrbank3_tx_lpf_cutoff0_r;
    end
    main_tx_lpf_cutoff_re <= builder_csr_bankarray_csrbank3_tx_lpf_cutoff0_re;
    if (builder_csr_bankarray_csrbank3_cordic_tx_phase0_re) begin
        main_cordic_tx_phase_storage <= builder_csr_bankarray_csrbank3_cordic_tx_phase0_r;
    end
    main_cordic_tx_phase_re <= builder_csr_bankarray_csrbank3_cordic_tx_phase0_re;
    if (builder_csr_bankarray_csrbank3_downsample_factor0_re) begin
        main_downsample_factor_storage <= builder_csr_bankarray_csrbank3_downsample_factor0_r;
    end
    main_downsample_factor_re <= builder_csr_bankarray_csrbank3_downsample_factor0_re;
    if (builder_csr_bankarray_csrbank3_rx_lpf_cutoff0_re) begin
        main_rx_lpf_cutoff_storage <= builder_csr_bankarray_csrbank3_rx_lpf_cutoff0_r;
    end
    main_rx_lpf_cutoff_re <= builder_csr_bankarray_csrbank3_rx_lpf_cutoff0_re;
    if (builder_csr_bankarray_csrbank3_cordic_rx_phase0_re) begin
        main_cordic_rx_phase_storage <= builder_csr_bankarray_csrbank3_cordic_rx_phase0_r;
    end
    main_cordic_rx_phase_re <= builder_csr_bankarray_csrbank3_cordic_rx_phase0_re;
    if (builder_csr_bankarray_csrbank3_gain_tx0_re) begin
        main_gain_tx_storage <= builder_csr_bankarray_csrbank3_gain_tx0_r;
    end
    main_gain_tx_re <= builder_csr_bankarray_csrbank3_gain_tx0_re;
    if (builder_csr_bankarray_csrbank3_gain_rx0_re) begin
        main_gain_rx_storage <= builder_csr_bankarray_csrbank3_gain_rx0_r;
    end
    main_gain_rx_re <= builder_csr_bankarray_csrbank3_gain_rx0_re;
    if (builder_csr_bankarray_csrbank3_physics_run0_re) begin
        main_physics_run_storage <= builder_csr_bankarray_csrbank3_physics_run0_r;
    end
    main_physics_run_re <= builder_csr_bankarray_csrbank3_physics_run0_re;
    main_physics_busy_re <= builder_csr_bankarray_csrbank3_physics_busy_re;
    if (builder_csr_bankarray_csrbank3_hs_dbg_addr0_re) begin
        main_hs_dbg_addr_storage <= builder_csr_bankarray_csrbank3_hs_dbg_addr0_r;
    end
    main_hs_dbg_addr_re <= builder_csr_bankarray_csrbank3_hs_dbg_addr0_re;
    if (builder_csr_bankarray_csrbank3_hs_dbg_wdata0_re) begin
        main_hs_dbg_wdata_storage <= builder_csr_bankarray_csrbank3_hs_dbg_wdata0_r;
    end
    main_hs_dbg_wdata_re <= builder_csr_bankarray_csrbank3_hs_dbg_wdata0_re;
    main_hs_dbg_rdata_re <= builder_csr_bankarray_csrbank3_hs_dbg_rdata_re;
    if (builder_csr_bankarray_csrbank3_ls_dbg_addr0_re) begin
        main_ls_dbg_addr_storage <= builder_csr_bankarray_csrbank3_ls_dbg_addr0_r;
    end
    main_ls_dbg_addr_re <= builder_csr_bankarray_csrbank3_ls_dbg_addr0_re;
    if (builder_csr_bankarray_csrbank3_ls_dbg_wdata0_re) begin
        main_ls_dbg_wdata_storage <= builder_csr_bankarray_csrbank3_ls_dbg_wdata0_r;
    end
    main_ls_dbg_wdata_re <= builder_csr_bankarray_csrbank3_ls_dbg_wdata0_re;
    main_ls_dbg_rdata_re <= builder_csr_bankarray_csrbank3_ls_dbg_rdata_re;
    if (builder_csr_bankarray_csrbank3_sd_cmd0_re) begin
        main_sd_cmd_storage <= builder_csr_bankarray_csrbank3_sd_cmd0_r;
    end
    main_sd_cmd_re <= builder_csr_bankarray_csrbank3_sd_cmd0_re;
    main_sd_status_re <= builder_csr_bankarray_csrbank3_sd_status_re;
    if (builder_csr_bankarray_csrbank3_phase_inc0_re) begin
        main_phase_inc_storage <= builder_csr_bankarray_csrbank3_phase_inc0_r;
    end
    main_phase_inc_re <= builder_csr_bankarray_csrbank3_phase_inc0_re;
    builder_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank4_sel) begin
        case (builder_csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_control0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi0_command0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= main_basesoc_sdram_phaseinjector0_command_issue_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi0_address0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi0_baddress0_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi0_wrdata1_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi0_wrdata0_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi0_rddata1_w;
            end
            4'd8: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi0_rddata0_w;
            end
            4'd9: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi1_command0_w;
            end
            4'd10: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= main_basesoc_sdram_phaseinjector1_command_issue_w;
            end
            4'd11: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi1_address0_w;
            end
            4'd12: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi1_baddress0_w;
            end
            4'd13: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi1_wrdata1_w;
            end
            4'd14: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi1_wrdata0_w;
            end
            4'd15: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi1_rddata1_w;
            end
            5'd16: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi1_rddata0_w;
            end
            5'd17: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi2_command0_w;
            end
            5'd18: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= main_basesoc_sdram_phaseinjector2_command_issue_w;
            end
            5'd19: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi2_address0_w;
            end
            5'd20: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi2_baddress0_w;
            end
            5'd21: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi2_wrdata1_w;
            end
            5'd22: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi2_wrdata0_w;
            end
            5'd23: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi2_rddata1_w;
            end
            5'd24: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi2_rddata0_w;
            end
            5'd25: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi3_command0_w;
            end
            5'd26: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= main_basesoc_sdram_phaseinjector3_command_issue_w;
            end
            5'd27: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi3_address0_w;
            end
            5'd28: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi3_baddress0_w;
            end
            5'd29: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi3_wrdata1_w;
            end
            5'd30: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi3_wrdata0_w;
            end
            5'd31: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi3_rddata1_w;
            end
            6'd32: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_dfii_pi3_rddata0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank4_dfii_control0_re) begin
        main_basesoc_sdram_storage <= builder_csr_bankarray_csrbank4_dfii_control0_r;
    end
    main_basesoc_sdram_re <= builder_csr_bankarray_csrbank4_dfii_control0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi0_command0_re) begin
        main_basesoc_sdram_phaseinjector0_command_storage <= builder_csr_bankarray_csrbank4_dfii_pi0_command0_r;
    end
    main_basesoc_sdram_phaseinjector0_command_re <= builder_csr_bankarray_csrbank4_dfii_pi0_command0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi0_address0_re) begin
        main_basesoc_sdram_phaseinjector0_address_storage <= builder_csr_bankarray_csrbank4_dfii_pi0_address0_r;
    end
    main_basesoc_sdram_phaseinjector0_address_re <= builder_csr_bankarray_csrbank4_dfii_pi0_address0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi0_baddress0_re) begin
        main_basesoc_sdram_phaseinjector0_baddress_storage <= builder_csr_bankarray_csrbank4_dfii_pi0_baddress0_r;
    end
    main_basesoc_sdram_phaseinjector0_baddress_re <= builder_csr_bankarray_csrbank4_dfii_pi0_baddress0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi0_wrdata1_re) begin
        main_basesoc_sdram_phaseinjector0_wrdata_storage[63:32] <= builder_csr_bankarray_csrbank4_dfii_pi0_wrdata1_r;
    end
    if (builder_csr_bankarray_csrbank4_dfii_pi0_wrdata0_re) begin
        main_basesoc_sdram_phaseinjector0_wrdata_storage[31:0] <= builder_csr_bankarray_csrbank4_dfii_pi0_wrdata0_r;
    end
    main_basesoc_sdram_phaseinjector0_wrdata_re <= builder_csr_bankarray_csrbank4_dfii_pi0_wrdata0_re;
    main_basesoc_sdram_phaseinjector0_rddata_re <= builder_csr_bankarray_csrbank4_dfii_pi0_rddata0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi1_command0_re) begin
        main_basesoc_sdram_phaseinjector1_command_storage <= builder_csr_bankarray_csrbank4_dfii_pi1_command0_r;
    end
    main_basesoc_sdram_phaseinjector1_command_re <= builder_csr_bankarray_csrbank4_dfii_pi1_command0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi1_address0_re) begin
        main_basesoc_sdram_phaseinjector1_address_storage <= builder_csr_bankarray_csrbank4_dfii_pi1_address0_r;
    end
    main_basesoc_sdram_phaseinjector1_address_re <= builder_csr_bankarray_csrbank4_dfii_pi1_address0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi1_baddress0_re) begin
        main_basesoc_sdram_phaseinjector1_baddress_storage <= builder_csr_bankarray_csrbank4_dfii_pi1_baddress0_r;
    end
    main_basesoc_sdram_phaseinjector1_baddress_re <= builder_csr_bankarray_csrbank4_dfii_pi1_baddress0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi1_wrdata1_re) begin
        main_basesoc_sdram_phaseinjector1_wrdata_storage[63:32] <= builder_csr_bankarray_csrbank4_dfii_pi1_wrdata1_r;
    end
    if (builder_csr_bankarray_csrbank4_dfii_pi1_wrdata0_re) begin
        main_basesoc_sdram_phaseinjector1_wrdata_storage[31:0] <= builder_csr_bankarray_csrbank4_dfii_pi1_wrdata0_r;
    end
    main_basesoc_sdram_phaseinjector1_wrdata_re <= builder_csr_bankarray_csrbank4_dfii_pi1_wrdata0_re;
    main_basesoc_sdram_phaseinjector1_rddata_re <= builder_csr_bankarray_csrbank4_dfii_pi1_rddata0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi2_command0_re) begin
        main_basesoc_sdram_phaseinjector2_command_storage <= builder_csr_bankarray_csrbank4_dfii_pi2_command0_r;
    end
    main_basesoc_sdram_phaseinjector2_command_re <= builder_csr_bankarray_csrbank4_dfii_pi2_command0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi2_address0_re) begin
        main_basesoc_sdram_phaseinjector2_address_storage <= builder_csr_bankarray_csrbank4_dfii_pi2_address0_r;
    end
    main_basesoc_sdram_phaseinjector2_address_re <= builder_csr_bankarray_csrbank4_dfii_pi2_address0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi2_baddress0_re) begin
        main_basesoc_sdram_phaseinjector2_baddress_storage <= builder_csr_bankarray_csrbank4_dfii_pi2_baddress0_r;
    end
    main_basesoc_sdram_phaseinjector2_baddress_re <= builder_csr_bankarray_csrbank4_dfii_pi2_baddress0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi2_wrdata1_re) begin
        main_basesoc_sdram_phaseinjector2_wrdata_storage[63:32] <= builder_csr_bankarray_csrbank4_dfii_pi2_wrdata1_r;
    end
    if (builder_csr_bankarray_csrbank4_dfii_pi2_wrdata0_re) begin
        main_basesoc_sdram_phaseinjector2_wrdata_storage[31:0] <= builder_csr_bankarray_csrbank4_dfii_pi2_wrdata0_r;
    end
    main_basesoc_sdram_phaseinjector2_wrdata_re <= builder_csr_bankarray_csrbank4_dfii_pi2_wrdata0_re;
    main_basesoc_sdram_phaseinjector2_rddata_re <= builder_csr_bankarray_csrbank4_dfii_pi2_rddata0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi3_command0_re) begin
        main_basesoc_sdram_phaseinjector3_command_storage <= builder_csr_bankarray_csrbank4_dfii_pi3_command0_r;
    end
    main_basesoc_sdram_phaseinjector3_command_re <= builder_csr_bankarray_csrbank4_dfii_pi3_command0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi3_address0_re) begin
        main_basesoc_sdram_phaseinjector3_address_storage <= builder_csr_bankarray_csrbank4_dfii_pi3_address0_r;
    end
    main_basesoc_sdram_phaseinjector3_address_re <= builder_csr_bankarray_csrbank4_dfii_pi3_address0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi3_baddress0_re) begin
        main_basesoc_sdram_phaseinjector3_baddress_storage <= builder_csr_bankarray_csrbank4_dfii_pi3_baddress0_r;
    end
    main_basesoc_sdram_phaseinjector3_baddress_re <= builder_csr_bankarray_csrbank4_dfii_pi3_baddress0_re;
    if (builder_csr_bankarray_csrbank4_dfii_pi3_wrdata1_re) begin
        main_basesoc_sdram_phaseinjector3_wrdata_storage[63:32] <= builder_csr_bankarray_csrbank4_dfii_pi3_wrdata1_r;
    end
    if (builder_csr_bankarray_csrbank4_dfii_pi3_wrdata0_re) begin
        main_basesoc_sdram_phaseinjector3_wrdata_storage[31:0] <= builder_csr_bankarray_csrbank4_dfii_pi3_wrdata0_r;
    end
    main_basesoc_sdram_phaseinjector3_wrdata_re <= builder_csr_bankarray_csrbank4_dfii_pi3_wrdata0_re;
    main_basesoc_sdram_phaseinjector3_rddata_re <= builder_csr_bankarray_csrbank4_dfii_pi3_rddata0_re;
    builder_csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank5_sel) begin
        case (builder_csr_bankarray_interface5_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_load0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_reload0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_en0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_update_value0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_value_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_ev_status_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_ev_pending_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_ev_enable0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank5_load0_re) begin
        main_basesoc_basesoc_timer_load_storage <= builder_csr_bankarray_csrbank5_load0_r;
    end
    main_basesoc_basesoc_timer_load_re <= builder_csr_bankarray_csrbank5_load0_re;
    if (builder_csr_bankarray_csrbank5_reload0_re) begin
        main_basesoc_basesoc_timer_reload_storage <= builder_csr_bankarray_csrbank5_reload0_r;
    end
    main_basesoc_basesoc_timer_reload_re <= builder_csr_bankarray_csrbank5_reload0_re;
    if (builder_csr_bankarray_csrbank5_en0_re) begin
        main_basesoc_basesoc_timer_en_storage <= builder_csr_bankarray_csrbank5_en0_r;
    end
    main_basesoc_basesoc_timer_en_re <= builder_csr_bankarray_csrbank5_en0_re;
    if (builder_csr_bankarray_csrbank5_update_value0_re) begin
        main_basesoc_basesoc_timer_update_value_storage <= builder_csr_bankarray_csrbank5_update_value0_r;
    end
    main_basesoc_basesoc_timer_update_value_re <= builder_csr_bankarray_csrbank5_update_value0_re;
    main_basesoc_basesoc_timer_value_re <= builder_csr_bankarray_csrbank5_value_re;
    main_basesoc_basesoc_timer_status_re <= builder_csr_bankarray_csrbank5_ev_status_re;
    if (builder_csr_bankarray_csrbank5_ev_pending_re) begin
        main_basesoc_basesoc_timer_pending_r <= builder_csr_bankarray_csrbank5_ev_pending_r;
    end
    main_basesoc_basesoc_timer_pending_re <= builder_csr_bankarray_csrbank5_ev_pending_re;
    if (builder_csr_bankarray_csrbank5_ev_enable0_re) begin
        main_basesoc_basesoc_timer_enable_storage <= builder_csr_bankarray_csrbank5_ev_enable0_r;
    end
    main_basesoc_basesoc_timer_enable_re <= builder_csr_bankarray_csrbank5_ev_enable0_re;
    builder_csr_bankarray_interface6_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank6_sel) begin
        case (builder_csr_bankarray_interface6_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= main_basesoc_basesoc_uart_rxtx_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_txfull_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_rxempty_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_ev_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_ev_pending_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_ev_enable0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_txempty_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_rxfull_w;
            end
        endcase
    end
    main_basesoc_basesoc_uart_txfull_re <= builder_csr_bankarray_csrbank6_txfull_re;
    main_basesoc_basesoc_uart_rxempty_re <= builder_csr_bankarray_csrbank6_rxempty_re;
    main_basesoc_basesoc_uart_status_re <= builder_csr_bankarray_csrbank6_ev_status_re;
    if (builder_csr_bankarray_csrbank6_ev_pending_re) begin
        main_basesoc_basesoc_uart_pending_r <= builder_csr_bankarray_csrbank6_ev_pending_r;
    end
    main_basesoc_basesoc_uart_pending_re <= builder_csr_bankarray_csrbank6_ev_pending_re;
    if (builder_csr_bankarray_csrbank6_ev_enable0_re) begin
        main_basesoc_basesoc_uart_enable_storage <= builder_csr_bankarray_csrbank6_ev_enable0_r;
    end
    main_basesoc_basesoc_uart_enable_re <= builder_csr_bankarray_csrbank6_ev_enable0_re;
    main_basesoc_basesoc_uart_txempty_re <= builder_csr_bankarray_csrbank6_txempty_re;
    main_basesoc_basesoc_uart_rxfull_re <= builder_csr_bankarray_csrbank6_rxfull_re;
    if (sys_rst) begin
        main_basesoc_basesoc_reset_storage <= 2'd0;
        main_basesoc_basesoc_reset_re <= 1'd0;
        main_basesoc_basesoc_scratch_storage <= 32'd305419896;
        main_basesoc_basesoc_scratch_re <= 1'd0;
        main_basesoc_basesoc_bus_errors_re <= 1'd0;
        main_basesoc_basesoc_bus_errors <= 32'd0;
        main_basesoc_basesoc_basesoc_ram_bus_ack <= 1'd0;
        main_basesoc_basesoc_ram_bus_ram_bus_ack <= 1'd0;
        serial_tx <= 1'd1;
        main_basesoc_basesoc_tx_tick <= 1'd0;
        main_basesoc_basesoc_rx_tick <= 1'd0;
        main_basesoc_basesoc_rx_rx_d <= 1'd0;
        main_basesoc_basesoc_uart_txfull_re <= 1'd0;
        main_basesoc_basesoc_uart_rxempty_re <= 1'd0;
        main_basesoc_basesoc_uart_tx_pending <= 1'd0;
        main_basesoc_basesoc_uart_tx_trigger_d <= 1'd0;
        main_basesoc_basesoc_uart_rx_pending <= 1'd0;
        main_basesoc_basesoc_uart_rx_trigger_d <= 1'd0;
        main_basesoc_basesoc_uart_status_re <= 1'd0;
        main_basesoc_basesoc_uart_pending_re <= 1'd0;
        main_basesoc_basesoc_uart_pending_r <= 2'd0;
        main_basesoc_basesoc_uart_enable_storage <= 2'd0;
        main_basesoc_basesoc_uart_enable_re <= 1'd0;
        main_basesoc_basesoc_uart_txempty_re <= 1'd0;
        main_basesoc_basesoc_uart_rxfull_re <= 1'd0;
        main_basesoc_basesoc_uart_tx_fifo_readable <= 1'd0;
        main_basesoc_basesoc_uart_tx_fifo_level0 <= 5'd0;
        main_basesoc_basesoc_uart_tx_fifo_produce <= 4'd0;
        main_basesoc_basesoc_uart_tx_fifo_consume <= 4'd0;
        main_basesoc_basesoc_uart_rx_fifo_readable <= 1'd0;
        main_basesoc_basesoc_uart_rx_fifo_level0 <= 5'd0;
        main_basesoc_basesoc_uart_rx_fifo_produce <= 4'd0;
        main_basesoc_basesoc_uart_rx_fifo_consume <= 4'd0;
        main_basesoc_basesoc_timer_load_storage <= 32'd0;
        main_basesoc_basesoc_timer_load_re <= 1'd0;
        main_basesoc_basesoc_timer_reload_storage <= 32'd0;
        main_basesoc_basesoc_timer_reload_re <= 1'd0;
        main_basesoc_basesoc_timer_en_storage <= 1'd0;
        main_basesoc_basesoc_timer_en_re <= 1'd0;
        main_basesoc_basesoc_timer_update_value_storage <= 1'd0;
        main_basesoc_basesoc_timer_update_value_re <= 1'd0;
        main_basesoc_basesoc_timer_value_status <= 32'd0;
        main_basesoc_basesoc_timer_value_re <= 1'd0;
        main_basesoc_basesoc_timer_zero_pending <= 1'd0;
        main_basesoc_basesoc_timer_zero_trigger_d <= 1'd0;
        main_basesoc_basesoc_timer_status_re <= 1'd0;
        main_basesoc_basesoc_timer_pending_re <= 1'd0;
        main_basesoc_basesoc_timer_pending_r <= 1'd0;
        main_basesoc_basesoc_timer_enable_storage <= 1'd0;
        main_basesoc_basesoc_timer_enable_re <= 1'd0;
        main_basesoc_basesoc_timer_value <= 32'd0;
        main_a7ddrphy_rst_storage <= 1'd0;
        main_a7ddrphy_rst_re <= 1'd0;
        main_a7ddrphy_dly_sel_storage <= 4'd0;
        main_a7ddrphy_dly_sel_re <= 1'd0;
        main_a7ddrphy_half_sys8x_taps_storage <= 5'd16;
        main_a7ddrphy_half_sys8x_taps_re <= 1'd0;
        main_a7ddrphy_wlevel_en_storage <= 1'd0;
        main_a7ddrphy_wlevel_en_re <= 1'd0;
        main_a7ddrphy_rdphase_storage <= 2'd2;
        main_a7ddrphy_rdphase_re <= 1'd0;
        main_a7ddrphy_wrphase_storage <= 2'd3;
        main_a7ddrphy_wrphase_re <= 1'd0;
        main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0 <= 1'd0;
        main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1 <= 1'd0;
        main_a7ddrphy_dqspattern_o1 <= 8'd0;
        main_a7ddrphy_bitslip0_value0 <= 3'd7;
        main_a7ddrphy_bitslip1_value0 <= 3'd7;
        main_a7ddrphy_bitslip2_value0 <= 3'd7;
        main_a7ddrphy_bitslip3_value0 <= 3'd7;
        main_a7ddrphy_bitslip0_value1 <= 3'd7;
        main_a7ddrphy_bitslip1_value1 <= 3'd7;
        main_a7ddrphy_bitslip2_value1 <= 3'd7;
        main_a7ddrphy_bitslip3_value1 <= 3'd7;
        main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0 <= 1'd0;
        main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1 <= 1'd0;
        main_a7ddrphy_bitslip0_value2 <= 3'd7;
        main_a7ddrphy_bitslip0_value3 <= 3'd7;
        main_a7ddrphy_bitslip1_value2 <= 3'd7;
        main_a7ddrphy_bitslip1_value3 <= 3'd7;
        main_a7ddrphy_bitslip2_value2 <= 3'd7;
        main_a7ddrphy_bitslip2_value3 <= 3'd7;
        main_a7ddrphy_bitslip3_value2 <= 3'd7;
        main_a7ddrphy_bitslip3_value3 <= 3'd7;
        main_a7ddrphy_bitslip4_value0 <= 3'd7;
        main_a7ddrphy_bitslip4_value1 <= 3'd7;
        main_a7ddrphy_bitslip5_value0 <= 3'd7;
        main_a7ddrphy_bitslip5_value1 <= 3'd7;
        main_a7ddrphy_bitslip6_value0 <= 3'd7;
        main_a7ddrphy_bitslip6_value1 <= 3'd7;
        main_a7ddrphy_bitslip7_value0 <= 3'd7;
        main_a7ddrphy_bitslip7_value1 <= 3'd7;
        main_a7ddrphy_bitslip8_value0 <= 3'd7;
        main_a7ddrphy_bitslip8_value1 <= 3'd7;
        main_a7ddrphy_bitslip9_value0 <= 3'd7;
        main_a7ddrphy_bitslip9_value1 <= 3'd7;
        main_a7ddrphy_bitslip10_value0 <= 3'd7;
        main_a7ddrphy_bitslip10_value1 <= 3'd7;
        main_a7ddrphy_bitslip11_value0 <= 3'd7;
        main_a7ddrphy_bitslip11_value1 <= 3'd7;
        main_a7ddrphy_bitslip12_value0 <= 3'd7;
        main_a7ddrphy_bitslip12_value1 <= 3'd7;
        main_a7ddrphy_bitslip13_value0 <= 3'd7;
        main_a7ddrphy_bitslip13_value1 <= 3'd7;
        main_a7ddrphy_bitslip14_value0 <= 3'd7;
        main_a7ddrphy_bitslip14_value1 <= 3'd7;
        main_a7ddrphy_bitslip15_value0 <= 3'd7;
        main_a7ddrphy_bitslip15_value1 <= 3'd7;
        main_a7ddrphy_bitslip16_value0 <= 3'd7;
        main_a7ddrphy_bitslip16_value1 <= 3'd7;
        main_a7ddrphy_bitslip17_value0 <= 3'd7;
        main_a7ddrphy_bitslip17_value1 <= 3'd7;
        main_a7ddrphy_bitslip18_value0 <= 3'd7;
        main_a7ddrphy_bitslip18_value1 <= 3'd7;
        main_a7ddrphy_bitslip19_value0 <= 3'd7;
        main_a7ddrphy_bitslip19_value1 <= 3'd7;
        main_a7ddrphy_bitslip20_value0 <= 3'd7;
        main_a7ddrphy_bitslip20_value1 <= 3'd7;
        main_a7ddrphy_bitslip21_value0 <= 3'd7;
        main_a7ddrphy_bitslip21_value1 <= 3'd7;
        main_a7ddrphy_bitslip22_value0 <= 3'd7;
        main_a7ddrphy_bitslip22_value1 <= 3'd7;
        main_a7ddrphy_bitslip23_value0 <= 3'd7;
        main_a7ddrphy_bitslip23_value1 <= 3'd7;
        main_a7ddrphy_bitslip24_value0 <= 3'd7;
        main_a7ddrphy_bitslip24_value1 <= 3'd7;
        main_a7ddrphy_bitslip25_value0 <= 3'd7;
        main_a7ddrphy_bitslip25_value1 <= 3'd7;
        main_a7ddrphy_bitslip26_value0 <= 3'd7;
        main_a7ddrphy_bitslip26_value1 <= 3'd7;
        main_a7ddrphy_bitslip27_value0 <= 3'd7;
        main_a7ddrphy_bitslip27_value1 <= 3'd7;
        main_a7ddrphy_bitslip28_value0 <= 3'd7;
        main_a7ddrphy_bitslip28_value1 <= 3'd7;
        main_a7ddrphy_bitslip29_value0 <= 3'd7;
        main_a7ddrphy_bitslip29_value1 <= 3'd7;
        main_a7ddrphy_bitslip30_value0 <= 3'd7;
        main_a7ddrphy_bitslip30_value1 <= 3'd7;
        main_a7ddrphy_bitslip31_value0 <= 3'd7;
        main_a7ddrphy_bitslip31_value1 <= 3'd7;
        main_a7ddrphy_cmd_latency_tappeddelayline0 <= 1'd0;
        main_a7ddrphy_cmd_latency_tappeddelayline1 <= 1'd0;
        main_a7ddrphy_cmd_latency_tappeddelayline2 <= 1'd0;
        main_a7ddrphy_cmd_latency_tappeddelayline3 <= 1'd0;
        main_a7ddrphy_cmd_latency_tappeddelayline4 <= 1'd0;
        main_a7ddrphy_cmd_latency_tappeddelayline5 <= 1'd0;
        main_a7ddrphy_cmd_latency_tappeddelayline6 <= 1'd0;
        main_a7ddrphy_cmd_latency_tappeddelayline7 <= 1'd0;
        main_a7ddrphy_wrdata_en_tappeddelayline0 <= 1'd0;
        main_a7ddrphy_wrdata_en_tappeddelayline1 <= 1'd0;
        main_a7ddrphy_wrdata_en_tappeddelayline2 <= 1'd0;
        main_basesoc_sdram_storage <= 4'd1;
        main_basesoc_sdram_re <= 1'd0;
        main_basesoc_sdram_phaseinjector0_command_storage <= 8'd0;
        main_basesoc_sdram_phaseinjector0_command_re <= 1'd0;
        main_basesoc_sdram_phaseinjector0_address_re <= 1'd0;
        main_basesoc_sdram_phaseinjector0_baddress_re <= 1'd0;
        main_basesoc_sdram_phaseinjector0_wrdata_re <= 1'd0;
        main_basesoc_sdram_phaseinjector0_rddata_status <= 64'd0;
        main_basesoc_sdram_phaseinjector0_rddata_re <= 1'd0;
        main_basesoc_sdram_phaseinjector1_command_storage <= 8'd0;
        main_basesoc_sdram_phaseinjector1_command_re <= 1'd0;
        main_basesoc_sdram_phaseinjector1_address_re <= 1'd0;
        main_basesoc_sdram_phaseinjector1_baddress_re <= 1'd0;
        main_basesoc_sdram_phaseinjector1_wrdata_re <= 1'd0;
        main_basesoc_sdram_phaseinjector1_rddata_status <= 64'd0;
        main_basesoc_sdram_phaseinjector1_rddata_re <= 1'd0;
        main_basesoc_sdram_phaseinjector2_command_storage <= 8'd0;
        main_basesoc_sdram_phaseinjector2_command_re <= 1'd0;
        main_basesoc_sdram_phaseinjector2_address_re <= 1'd0;
        main_basesoc_sdram_phaseinjector2_baddress_re <= 1'd0;
        main_basesoc_sdram_phaseinjector2_wrdata_re <= 1'd0;
        main_basesoc_sdram_phaseinjector2_rddata_status <= 64'd0;
        main_basesoc_sdram_phaseinjector2_rddata_re <= 1'd0;
        main_basesoc_sdram_phaseinjector3_command_storage <= 8'd0;
        main_basesoc_sdram_phaseinjector3_command_re <= 1'd0;
        main_basesoc_sdram_phaseinjector3_address_re <= 1'd0;
        main_basesoc_sdram_phaseinjector3_baddress_re <= 1'd0;
        main_basesoc_sdram_phaseinjector3_wrdata_re <= 1'd0;
        main_basesoc_sdram_phaseinjector3_rddata_status <= 64'd0;
        main_basesoc_sdram_phaseinjector3_rddata_re <= 1'd0;
        main_basesoc_sdram_dfi_p0_address <= 15'd0;
        main_basesoc_sdram_dfi_p0_bank <= 3'd0;
        main_basesoc_sdram_dfi_p0_cas_n <= 1'd1;
        main_basesoc_sdram_dfi_p0_cs_n <= 1'd1;
        main_basesoc_sdram_dfi_p0_ras_n <= 1'd1;
        main_basesoc_sdram_dfi_p0_we_n <= 1'd1;
        main_basesoc_sdram_dfi_p0_wrdata_en <= 1'd0;
        main_basesoc_sdram_dfi_p0_rddata_en <= 1'd0;
        main_basesoc_sdram_dfi_p1_address <= 15'd0;
        main_basesoc_sdram_dfi_p1_bank <= 3'd0;
        main_basesoc_sdram_dfi_p1_cas_n <= 1'd1;
        main_basesoc_sdram_dfi_p1_cs_n <= 1'd1;
        main_basesoc_sdram_dfi_p1_ras_n <= 1'd1;
        main_basesoc_sdram_dfi_p1_we_n <= 1'd1;
        main_basesoc_sdram_dfi_p1_wrdata_en <= 1'd0;
        main_basesoc_sdram_dfi_p1_rddata_en <= 1'd0;
        main_basesoc_sdram_dfi_p2_address <= 15'd0;
        main_basesoc_sdram_dfi_p2_bank <= 3'd0;
        main_basesoc_sdram_dfi_p2_cas_n <= 1'd1;
        main_basesoc_sdram_dfi_p2_cs_n <= 1'd1;
        main_basesoc_sdram_dfi_p2_ras_n <= 1'd1;
        main_basesoc_sdram_dfi_p2_we_n <= 1'd1;
        main_basesoc_sdram_dfi_p2_wrdata_en <= 1'd0;
        main_basesoc_sdram_dfi_p2_rddata_en <= 1'd0;
        main_basesoc_sdram_dfi_p3_address <= 15'd0;
        main_basesoc_sdram_dfi_p3_bank <= 3'd0;
        main_basesoc_sdram_dfi_p3_cas_n <= 1'd1;
        main_basesoc_sdram_dfi_p3_cs_n <= 1'd1;
        main_basesoc_sdram_dfi_p3_ras_n <= 1'd1;
        main_basesoc_sdram_dfi_p3_we_n <= 1'd1;
        main_basesoc_sdram_dfi_p3_wrdata_en <= 1'd0;
        main_basesoc_sdram_dfi_p3_rddata_en <= 1'd0;
        main_basesoc_sdram_cmd_payload_a <= 15'd0;
        main_basesoc_sdram_cmd_payload_ba <= 3'd0;
        main_basesoc_sdram_cmd_payload_cas <= 1'd0;
        main_basesoc_sdram_cmd_payload_ras <= 1'd0;
        main_basesoc_sdram_cmd_payload_we <= 1'd0;
        main_basesoc_sdram_timer_count1 <= 9'd390;
        main_basesoc_sdram_postponer_req_o <= 1'd0;
        main_basesoc_sdram_postponer_count <= 1'd0;
        main_basesoc_sdram_sequencer_done1 <= 1'd0;
        main_basesoc_sdram_sequencer_trigger <= 6'd0;
        main_basesoc_sdram_sequencer_count <= 1'd0;
        main_basesoc_sdram_zqcs_timer_count1 <= 26'd49999999;
        main_basesoc_sdram_zqcs_executer_done <= 1'd0;
        main_basesoc_sdram_zqcs_executer_trigger <= 5'd0;
        main_basesoc_sdram_bankmachine0_level <= 4'd0;
        main_basesoc_sdram_bankmachine0_produce <= 3'd0;
        main_basesoc_sdram_bankmachine0_consume <= 3'd0;
        main_basesoc_sdram_bankmachine0_pipe_valid_source_valid <= 1'd0;
        main_basesoc_sdram_bankmachine0_pipe_valid_source_payload_we <= 1'd0;
        main_basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr <= 22'd0;
        main_basesoc_sdram_bankmachine0_row <= 15'd0;
        main_basesoc_sdram_bankmachine0_row_opened <= 1'd0;
        main_basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine0_twtpcon_count <= 3'd0;
        main_basesoc_sdram_bankmachine0_trccon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine0_trccon_count <= 2'd0;
        main_basesoc_sdram_bankmachine0_trascon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine0_trascon_count <= 2'd0;
        main_basesoc_sdram_bankmachine1_level <= 4'd0;
        main_basesoc_sdram_bankmachine1_produce <= 3'd0;
        main_basesoc_sdram_bankmachine1_consume <= 3'd0;
        main_basesoc_sdram_bankmachine1_pipe_valid_source_valid <= 1'd0;
        main_basesoc_sdram_bankmachine1_pipe_valid_source_payload_we <= 1'd0;
        main_basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr <= 22'd0;
        main_basesoc_sdram_bankmachine1_row <= 15'd0;
        main_basesoc_sdram_bankmachine1_row_opened <= 1'd0;
        main_basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine1_twtpcon_count <= 3'd0;
        main_basesoc_sdram_bankmachine1_trccon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine1_trccon_count <= 2'd0;
        main_basesoc_sdram_bankmachine1_trascon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine1_trascon_count <= 2'd0;
        main_basesoc_sdram_bankmachine2_level <= 4'd0;
        main_basesoc_sdram_bankmachine2_produce <= 3'd0;
        main_basesoc_sdram_bankmachine2_consume <= 3'd0;
        main_basesoc_sdram_bankmachine2_pipe_valid_source_valid <= 1'd0;
        main_basesoc_sdram_bankmachine2_pipe_valid_source_payload_we <= 1'd0;
        main_basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr <= 22'd0;
        main_basesoc_sdram_bankmachine2_row <= 15'd0;
        main_basesoc_sdram_bankmachine2_row_opened <= 1'd0;
        main_basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine2_twtpcon_count <= 3'd0;
        main_basesoc_sdram_bankmachine2_trccon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine2_trccon_count <= 2'd0;
        main_basesoc_sdram_bankmachine2_trascon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine2_trascon_count <= 2'd0;
        main_basesoc_sdram_bankmachine3_level <= 4'd0;
        main_basesoc_sdram_bankmachine3_produce <= 3'd0;
        main_basesoc_sdram_bankmachine3_consume <= 3'd0;
        main_basesoc_sdram_bankmachine3_pipe_valid_source_valid <= 1'd0;
        main_basesoc_sdram_bankmachine3_pipe_valid_source_payload_we <= 1'd0;
        main_basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr <= 22'd0;
        main_basesoc_sdram_bankmachine3_row <= 15'd0;
        main_basesoc_sdram_bankmachine3_row_opened <= 1'd0;
        main_basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine3_twtpcon_count <= 3'd0;
        main_basesoc_sdram_bankmachine3_trccon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine3_trccon_count <= 2'd0;
        main_basesoc_sdram_bankmachine3_trascon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine3_trascon_count <= 2'd0;
        main_basesoc_sdram_bankmachine4_level <= 4'd0;
        main_basesoc_sdram_bankmachine4_produce <= 3'd0;
        main_basesoc_sdram_bankmachine4_consume <= 3'd0;
        main_basesoc_sdram_bankmachine4_pipe_valid_source_valid <= 1'd0;
        main_basesoc_sdram_bankmachine4_pipe_valid_source_payload_we <= 1'd0;
        main_basesoc_sdram_bankmachine4_pipe_valid_source_payload_addr <= 22'd0;
        main_basesoc_sdram_bankmachine4_row <= 15'd0;
        main_basesoc_sdram_bankmachine4_row_opened <= 1'd0;
        main_basesoc_sdram_bankmachine4_twtpcon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine4_twtpcon_count <= 3'd0;
        main_basesoc_sdram_bankmachine4_trccon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine4_trccon_count <= 2'd0;
        main_basesoc_sdram_bankmachine4_trascon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine4_trascon_count <= 2'd0;
        main_basesoc_sdram_bankmachine5_level <= 4'd0;
        main_basesoc_sdram_bankmachine5_produce <= 3'd0;
        main_basesoc_sdram_bankmachine5_consume <= 3'd0;
        main_basesoc_sdram_bankmachine5_pipe_valid_source_valid <= 1'd0;
        main_basesoc_sdram_bankmachine5_pipe_valid_source_payload_we <= 1'd0;
        main_basesoc_sdram_bankmachine5_pipe_valid_source_payload_addr <= 22'd0;
        main_basesoc_sdram_bankmachine5_row <= 15'd0;
        main_basesoc_sdram_bankmachine5_row_opened <= 1'd0;
        main_basesoc_sdram_bankmachine5_twtpcon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine5_twtpcon_count <= 3'd0;
        main_basesoc_sdram_bankmachine5_trccon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine5_trccon_count <= 2'd0;
        main_basesoc_sdram_bankmachine5_trascon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine5_trascon_count <= 2'd0;
        main_basesoc_sdram_bankmachine6_level <= 4'd0;
        main_basesoc_sdram_bankmachine6_produce <= 3'd0;
        main_basesoc_sdram_bankmachine6_consume <= 3'd0;
        main_basesoc_sdram_bankmachine6_pipe_valid_source_valid <= 1'd0;
        main_basesoc_sdram_bankmachine6_pipe_valid_source_payload_we <= 1'd0;
        main_basesoc_sdram_bankmachine6_pipe_valid_source_payload_addr <= 22'd0;
        main_basesoc_sdram_bankmachine6_row <= 15'd0;
        main_basesoc_sdram_bankmachine6_row_opened <= 1'd0;
        main_basesoc_sdram_bankmachine6_twtpcon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine6_twtpcon_count <= 3'd0;
        main_basesoc_sdram_bankmachine6_trccon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine6_trccon_count <= 2'd0;
        main_basesoc_sdram_bankmachine6_trascon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine6_trascon_count <= 2'd0;
        main_basesoc_sdram_bankmachine7_level <= 4'd0;
        main_basesoc_sdram_bankmachine7_produce <= 3'd0;
        main_basesoc_sdram_bankmachine7_consume <= 3'd0;
        main_basesoc_sdram_bankmachine7_pipe_valid_source_valid <= 1'd0;
        main_basesoc_sdram_bankmachine7_pipe_valid_source_payload_we <= 1'd0;
        main_basesoc_sdram_bankmachine7_pipe_valid_source_payload_addr <= 22'd0;
        main_basesoc_sdram_bankmachine7_row <= 15'd0;
        main_basesoc_sdram_bankmachine7_row_opened <= 1'd0;
        main_basesoc_sdram_bankmachine7_twtpcon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine7_twtpcon_count <= 3'd0;
        main_basesoc_sdram_bankmachine7_trccon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine7_trccon_count <= 2'd0;
        main_basesoc_sdram_bankmachine7_trascon_ready <= 1'd0;
        main_basesoc_sdram_bankmachine7_trascon_count <= 2'd0;
        main_basesoc_sdram_choose_cmd_grant <= 3'd0;
        main_basesoc_sdram_choose_req_grant <= 3'd0;
        main_basesoc_sdram_trrdcon_ready <= 1'd0;
        main_basesoc_sdram_trrdcon_count <= 1'd0;
        main_basesoc_sdram_tfawcon_ready <= 1'd1;
        main_basesoc_sdram_tfawcon_self <= 3'd0;
        main_basesoc_sdram_tccdcon_ready <= 1'd0;
        main_basesoc_sdram_tccdcon_count <= 1'd0;
        main_basesoc_sdram_twtrcon_ready <= 1'd0;
        main_basesoc_sdram_twtrcon_count <= 3'd0;
        main_basesoc_sdram_time0 <= 5'd0;
        main_basesoc_sdram_time1 <= 4'd0;
        main_basesoc_aborted <= 1'd0;
        main_ethphy_reset_storage <= 1'd0;
        main_ethphy_reset_re <= 1'd0;
        main_ethphy_hw_reset_counter <= 9'd0;
        main_ethphy__w_storage <= 3'd0;
        main_ethphy__w_re <= 1'd0;
        main_ethphy__r_re <= 1'd0;
        main_basesoc_etherbone_tx_packetizer_count <= 1'd0;
        main_basesoc_etherbone_tx_packetizer_fsm_from_idle <= 1'd0;
        main_basesoc_etherbone_tx_packetizer_delayed_last_be <= 4'd0;
        main_basesoc_etherbone_rx_depacketizer_count <= 1'd0;
        main_basesoc_etherbone_rx_depacketizer_fsm_from_idle <= 1'd0;
        main_basesoc_etherbone_rx_depacketizer_delayed_last_be <= 4'd0;
        main_basesoc_etherbone_rx_depacketizer_was_in_copy <= 1'd0;
        main_basesoc_etherbone_probe_pipe_valid_source_valid <= 1'd0;
        main_basesoc_etherbone_probe_pipe_valid_source_payload_data <= 32'd0;
        main_basesoc_etherbone_probe_pipe_valid_source_payload_last_be <= 4'd0;
        main_basesoc_etherbone_probe_pipe_valid_source_payload_error <= 4'd0;
        main_basesoc_etherbone_probe_param_fifo_level <= 2'd0;
        main_basesoc_etherbone_probe_param_fifo_produce <= 1'd0;
        main_basesoc_etherbone_probe_param_fifo_consume <= 1'd0;
        main_basesoc_etherbone_record_depacketizer_count <= 1'd0;
        main_basesoc_etherbone_record_depacketizer_fsm_from_idle <= 1'd0;
        main_basesoc_etherbone_record_depacketizer_delayed_last_be <= 4'd0;
        main_basesoc_etherbone_record_depacketizer_was_in_copy <= 1'd0;
        main_basesoc_etherbone_record_receiver_payload_fifo_readable <= 1'd0;
        main_basesoc_etherbone_record_receiver_payload_fifo_level0 <= 5'd0;
        main_basesoc_etherbone_record_receiver_payload_fifo_produce <= 4'd0;
        main_basesoc_etherbone_record_receiver_payload_fifo_consume <= 4'd0;
        main_basesoc_etherbone_record_receiver_param_fifo_readable <= 1'd0;
        main_basesoc_etherbone_record_receiver_param_fifo_level0 <= 2'd0;
        main_basesoc_etherbone_record_receiver_param_fifo_produce <= 1'd0;
        main_basesoc_etherbone_record_receiver_param_fifo_consume <= 1'd0;
        main_basesoc_etherbone_record_first <= 1'd1;
        main_basesoc_etherbone_record_sender_payload_fifo_readable <= 1'd0;
        main_basesoc_etherbone_record_sender_payload_fifo_level0 <= 5'd0;
        main_basesoc_etherbone_record_sender_payload_fifo_produce <= 4'd0;
        main_basesoc_etherbone_record_sender_payload_fifo_consume <= 4'd0;
        main_basesoc_etherbone_record_sender_param_fifo_readable <= 1'd0;
        main_basesoc_etherbone_record_sender_param_fifo_level0 <= 2'd0;
        main_basesoc_etherbone_record_sender_param_fifo_produce <= 1'd0;
        main_basesoc_etherbone_record_sender_param_fifo_consume <= 1'd0;
        main_basesoc_etherbone_record_packetizer_count <= 1'd0;
        main_basesoc_etherbone_record_packetizer_fsm_from_idle <= 1'd0;
        main_basesoc_etherbone_record_packetizer_delayed_last_be <= 4'd0;
        main_basesoc_etherbone_dispatcher_first <= 1'd1;
        main_basesoc_etherbone_dispatcher_ongoing1 <= 1'd0;
        main_basesoc_etherbone_dispatcher_sel_ongoing <= 1'd0;
        main_basesoc_etherbone_grant <= 1'd0;
        main_basesoc_etherbone_status0_first <= 1'd1;
        main_basesoc_etherbone_status0_ongoing1 <= 1'd0;
        main_basesoc_etherbone_status1_first <= 1'd1;
        main_basesoc_etherbone_status1_ongoing1 <= 1'd0;
        main_basesoc_etherbone_liteethetherbonewishbonemaster_source_payload_addr <= 32'd0;
        main_basesoc_etherbone_liteethetherbonewishbonemaster_source_payload_data <= 32'd0;
        main_bypass_en_storage <= 1'd0;
        main_bypass_en_re <= 1'd0;
        main_mux_sel_storage <= 3'd0;
        main_mux_sel_re <= 1'd0;
        main_method_sel_storage <= 3'd0;
        main_method_sel_re <= 1'd0;
        main_upsample_factor_storage <= 4'd0;
        main_upsample_factor_re <= 1'd0;
        main_tx_lpf_cutoff_storage <= 8'd0;
        main_tx_lpf_cutoff_re <= 1'd0;
        main_cordic_tx_phase_storage <= 19'd0;
        main_cordic_tx_phase_re <= 1'd0;
        main_downsample_factor_storage <= 4'd0;
        main_downsample_factor_re <= 1'd0;
        main_rx_lpf_cutoff_storage <= 8'd0;
        main_rx_lpf_cutoff_re <= 1'd0;
        main_cordic_rx_phase_storage <= 19'd0;
        main_cordic_rx_phase_re <= 1'd0;
        main_gain_tx_storage <= 12'd0;
        main_gain_tx_re <= 1'd0;
        main_gain_rx_storage <= 12'd0;
        main_gain_rx_re <= 1'd0;
        main_physics_run_storage <= 1'd0;
        main_physics_run_re <= 1'd0;
        main_physics_busy_re <= 1'd0;
        main_hs_dbg_addr_storage <= 16'd0;
        main_hs_dbg_addr_re <= 1'd0;
        main_hs_dbg_wdata_storage <= 32'd0;
        main_hs_dbg_wdata_re <= 1'd0;
        main_hs_dbg_rdata_re <= 1'd0;
        main_ls_dbg_addr_storage <= 16'd0;
        main_ls_dbg_addr_re <= 1'd0;
        main_ls_dbg_wdata_storage <= 32'd0;
        main_ls_dbg_wdata_re <= 1'd0;
        main_ls_dbg_rdata_re <= 1'd0;
        main_sd_cmd_storage <= 8'd0;
        main_sd_cmd_re <= 1'd0;
        main_sd_status_re <= 1'd0;
        main_phase_inc_storage <= 19'd0;
        main_phase_inc_re <= 1'd0;
        builder_interface1_re <= 1'd0;
        builder_interface1_we <= 1'd0;
        builder_grant <= 2'd0;
        builder_slaves <= 4'd0;
        builder_count <= 20'd1000000;
        builder_csr_bankarray_sel_r <= 1'd0;
        builder_rs232phytx_state <= 1'd0;
        builder_rs232phyrx_state <= 1'd0;
        builder_refresher_state <= 2'd0;
        builder_bankmachine0_state <= 3'd0;
        builder_bankmachine1_state <= 3'd0;
        builder_bankmachine2_state <= 3'd0;
        builder_bankmachine3_state <= 3'd0;
        builder_bankmachine4_state <= 3'd0;
        builder_bankmachine5_state <= 3'd0;
        builder_bankmachine6_state <= 3'd0;
        builder_bankmachine7_state <= 3'd0;
        builder_multiplexer_state <= 4'd0;
        builder_new_master_wdata_ready0 <= 1'd0;
        builder_new_master_wdata_ready1 <= 1'd0;
        builder_new_master_rdata_valid0 <= 1'd0;
        builder_new_master_rdata_valid1 <= 1'd0;
        builder_new_master_rdata_valid2 <= 1'd0;
        builder_new_master_rdata_valid3 <= 1'd0;
        builder_new_master_rdata_valid4 <= 1'd0;
        builder_new_master_rdata_valid5 <= 1'd0;
        builder_new_master_rdata_valid6 <= 1'd0;
        builder_new_master_rdata_valid7 <= 1'd0;
        builder_new_master_rdata_valid8 <= 1'd0;
        builder_fullmemorywe_state <= 2'd0;
        builder_litedramwishbone2native_state <= 2'd0;
        builder_liteethetherbonepackettx_fsm0_state <= 2'd0;
        builder_liteethetherbonepackettx_fsm1_state <= 1'd0;
        builder_liteethetherbonepackettx_state <= 1'd0;
        builder_liteethetherbonepacketrx_fsm0_state <= 2'd0;
        builder_liteethetherbonepacketrx_fsm1_state <= 1'd0;
        builder_liteethetherbonepacketrx_state <= 2'd0;
        builder_liteethetherboneprobe_state <= 1'd0;
        builder_fsm0_state0 <= 2'd0;
        builder_fsm1_state0 <= 1'd0;
        builder_liteethetherbonerecordreceiver_state <= 2'd0;
        builder_liteethetherbonerecordsender_state <= 2'd0;
        builder_fsm0_state1 <= 2'd0;
        builder_fsm1_state1 <= 1'd0;
        builder_liteethetherbonewishbonemaster_state <= 2'd0;
        builder_wishbone2csr_state <= 2'd0;
    end
    builder_xilinxmultiregimpl0_regs0 <= serial_rx;
    builder_xilinxmultiregimpl0_regs1 <= builder_xilinxmultiregimpl0_regs0;
    builder_xilinxmultiregimpl1_regs0 <= main_ethphy_data_r;
    builder_xilinxmultiregimpl1_regs1 <= builder_xilinxmultiregimpl1_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Instance BUFG of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG(
	// Inputs.
	.I (main_crg_clkout0),

	// Outputs.
	.O (main_crg_clkout_buf0)
);

//------------------------------------------------------------------------------
// Instance BUFG_1 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_1(
	// Inputs.
	.I (main_crg_clkout1),

	// Outputs.
	.O (main_crg_clkout_buf1)
);

//------------------------------------------------------------------------------
// Instance BUFG_2 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_2(
	// Inputs.
	.I (main_crg_clkout2),

	// Outputs.
	.O (main_crg_clkout_buf2)
);

//------------------------------------------------------------------------------
// Instance BUFG_3 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_3(
	// Inputs.
	.I (main_crg_clkout3),

	// Outputs.
	.O (main_crg_clkout_buf3)
);

//------------------------------------------------------------------------------
// Instance IDELAYCTRL of IDELAYCTRL Module.
//------------------------------------------------------------------------------
IDELAYCTRL IDELAYCTRL(
	// Inputs.
	.REFCLK (idelay_clk),
	.RST    (main_crg_ic_reset)
);

//------------------------------------------------------------------------------
// Memory rom: 7629-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:7628];
initial begin
	$readmemh("alinx_ax7203_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[main_basesoc_basesoc_basesoc_adr];
end
assign main_basesoc_basesoc_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("alinx_ax7203_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_basesoc_ram_we[0])
		sram[main_basesoc_basesoc_ram_adr][7:0] <= main_basesoc_basesoc_ram_dat_w[7:0];
	if (main_basesoc_basesoc_ram_we[1])
		sram[main_basesoc_basesoc_ram_adr][15:8] <= main_basesoc_basesoc_ram_dat_w[15:8];
	if (main_basesoc_basesoc_ram_we[2])
		sram[main_basesoc_basesoc_ram_adr][23:16] <= main_basesoc_basesoc_ram_dat_w[23:16];
	if (main_basesoc_basesoc_ram_we[3])
		sram[main_basesoc_basesoc_ram_adr][31:24] <= main_basesoc_basesoc_ram_dat_w[31:24];
	sram_adr0 <= main_basesoc_basesoc_ram_adr;
end
assign main_basesoc_basesoc_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 46-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:45];
initial begin
	$readmemh("alinx_ax7203_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_basesoc_uart_tx_fifo_wrport_we)
		storage[main_basesoc_basesoc_uart_tx_fifo_wrport_adr] <= main_basesoc_basesoc_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_basesoc_basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_basesoc_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_basesoc_basesoc_uart_tx_fifo_rdport_adr];
end
assign main_basesoc_basesoc_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_basesoc_basesoc_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_basesoc_uart_rx_fifo_wrport_we)
		storage_1[main_basesoc_basesoc_uart_rx_fifo_wrport_adr] <= main_basesoc_basesoc_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_basesoc_basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_basesoc_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_basesoc_basesoc_uart_rx_fifo_rdport_adr];
end
assign main_basesoc_basesoc_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_basesoc_basesoc_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Instance OSERDESE2 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (1'd0),
	.D2     (1'd1),
	.D3     (1'd0),
	.D4     (1'd1),
	.D5     (1'd0),
	.D6     (1'd1),
	.D7     (1'd0),
	.D8     (1'd1),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_a7ddrphy_sd_clk_se_nodelay)
);

//------------------------------------------------------------------------------
// Instance OBUFDS of OBUFDS Module.
//------------------------------------------------------------------------------
OBUFDS OBUFDS(
	// Inputs.
	.I  (main_a7ddrphy_sd_clk_se_nodelay),

	// Outputs.
	.O  (ddram_clk_p),
	.OB (ddram_clk_n)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_1 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_1 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_reset_n),
	.D2     (main_a7ddrphy_dfi_p0_reset_n),
	.D3     (main_a7ddrphy_dfi_p1_reset_n),
	.D4     (main_a7ddrphy_dfi_p1_reset_n),
	.D5     (main_a7ddrphy_dfi_p2_reset_n),
	.D6     (main_a7ddrphy_dfi_p2_reset_n),
	.D7     (main_a7ddrphy_dfi_p3_reset_n),
	.D8     (main_a7ddrphy_dfi_p3_reset_n),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_reset_n)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_2 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_2 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_cs_n),
	.D2     (main_a7ddrphy_dfi_p0_cs_n),
	.D3     (main_a7ddrphy_dfi_p1_cs_n),
	.D4     (main_a7ddrphy_dfi_p1_cs_n),
	.D5     (main_a7ddrphy_dfi_p2_cs_n),
	.D6     (main_a7ddrphy_dfi_p2_cs_n),
	.D7     (main_a7ddrphy_dfi_p3_cs_n),
	.D8     (main_a7ddrphy_dfi_p3_cs_n),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_cs_n)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_3 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_3 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_address[0]),
	.D2     (main_a7ddrphy_dfi_p0_address[0]),
	.D3     (main_a7ddrphy_dfi_p1_address[0]),
	.D4     (main_a7ddrphy_dfi_p1_address[0]),
	.D5     (main_a7ddrphy_dfi_p2_address[0]),
	.D6     (main_a7ddrphy_dfi_p2_address[0]),
	.D7     (main_a7ddrphy_dfi_p3_address[0]),
	.D8     (main_a7ddrphy_dfi_p3_address[0]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_a[0])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_4 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_4 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_address[1]),
	.D2     (main_a7ddrphy_dfi_p0_address[1]),
	.D3     (main_a7ddrphy_dfi_p1_address[1]),
	.D4     (main_a7ddrphy_dfi_p1_address[1]),
	.D5     (main_a7ddrphy_dfi_p2_address[1]),
	.D6     (main_a7ddrphy_dfi_p2_address[1]),
	.D7     (main_a7ddrphy_dfi_p3_address[1]),
	.D8     (main_a7ddrphy_dfi_p3_address[1]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_a[1])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_5 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_5 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_address[2]),
	.D2     (main_a7ddrphy_dfi_p0_address[2]),
	.D3     (main_a7ddrphy_dfi_p1_address[2]),
	.D4     (main_a7ddrphy_dfi_p1_address[2]),
	.D5     (main_a7ddrphy_dfi_p2_address[2]),
	.D6     (main_a7ddrphy_dfi_p2_address[2]),
	.D7     (main_a7ddrphy_dfi_p3_address[2]),
	.D8     (main_a7ddrphy_dfi_p3_address[2]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_a[2])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_6 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_6 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_address[3]),
	.D2     (main_a7ddrphy_dfi_p0_address[3]),
	.D3     (main_a7ddrphy_dfi_p1_address[3]),
	.D4     (main_a7ddrphy_dfi_p1_address[3]),
	.D5     (main_a7ddrphy_dfi_p2_address[3]),
	.D6     (main_a7ddrphy_dfi_p2_address[3]),
	.D7     (main_a7ddrphy_dfi_p3_address[3]),
	.D8     (main_a7ddrphy_dfi_p3_address[3]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_a[3])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_7 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_7 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_address[4]),
	.D2     (main_a7ddrphy_dfi_p0_address[4]),
	.D3     (main_a7ddrphy_dfi_p1_address[4]),
	.D4     (main_a7ddrphy_dfi_p1_address[4]),
	.D5     (main_a7ddrphy_dfi_p2_address[4]),
	.D6     (main_a7ddrphy_dfi_p2_address[4]),
	.D7     (main_a7ddrphy_dfi_p3_address[4]),
	.D8     (main_a7ddrphy_dfi_p3_address[4]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_a[4])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_8 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_8 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_address[5]),
	.D2     (main_a7ddrphy_dfi_p0_address[5]),
	.D3     (main_a7ddrphy_dfi_p1_address[5]),
	.D4     (main_a7ddrphy_dfi_p1_address[5]),
	.D5     (main_a7ddrphy_dfi_p2_address[5]),
	.D6     (main_a7ddrphy_dfi_p2_address[5]),
	.D7     (main_a7ddrphy_dfi_p3_address[5]),
	.D8     (main_a7ddrphy_dfi_p3_address[5]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_a[5])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_9 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_9 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_address[6]),
	.D2     (main_a7ddrphy_dfi_p0_address[6]),
	.D3     (main_a7ddrphy_dfi_p1_address[6]),
	.D4     (main_a7ddrphy_dfi_p1_address[6]),
	.D5     (main_a7ddrphy_dfi_p2_address[6]),
	.D6     (main_a7ddrphy_dfi_p2_address[6]),
	.D7     (main_a7ddrphy_dfi_p3_address[6]),
	.D8     (main_a7ddrphy_dfi_p3_address[6]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_a[6])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_10 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_10 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_address[7]),
	.D2     (main_a7ddrphy_dfi_p0_address[7]),
	.D3     (main_a7ddrphy_dfi_p1_address[7]),
	.D4     (main_a7ddrphy_dfi_p1_address[7]),
	.D5     (main_a7ddrphy_dfi_p2_address[7]),
	.D6     (main_a7ddrphy_dfi_p2_address[7]),
	.D7     (main_a7ddrphy_dfi_p3_address[7]),
	.D8     (main_a7ddrphy_dfi_p3_address[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_a[7])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_11 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_11 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_address[8]),
	.D2     (main_a7ddrphy_dfi_p0_address[8]),
	.D3     (main_a7ddrphy_dfi_p1_address[8]),
	.D4     (main_a7ddrphy_dfi_p1_address[8]),
	.D5     (main_a7ddrphy_dfi_p2_address[8]),
	.D6     (main_a7ddrphy_dfi_p2_address[8]),
	.D7     (main_a7ddrphy_dfi_p3_address[8]),
	.D8     (main_a7ddrphy_dfi_p3_address[8]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_a[8])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_12 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_12 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_address[9]),
	.D2     (main_a7ddrphy_dfi_p0_address[9]),
	.D3     (main_a7ddrphy_dfi_p1_address[9]),
	.D4     (main_a7ddrphy_dfi_p1_address[9]),
	.D5     (main_a7ddrphy_dfi_p2_address[9]),
	.D6     (main_a7ddrphy_dfi_p2_address[9]),
	.D7     (main_a7ddrphy_dfi_p3_address[9]),
	.D8     (main_a7ddrphy_dfi_p3_address[9]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_a[9])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_13 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_13 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_address[10]),
	.D2     (main_a7ddrphy_dfi_p0_address[10]),
	.D3     (main_a7ddrphy_dfi_p1_address[10]),
	.D4     (main_a7ddrphy_dfi_p1_address[10]),
	.D5     (main_a7ddrphy_dfi_p2_address[10]),
	.D6     (main_a7ddrphy_dfi_p2_address[10]),
	.D7     (main_a7ddrphy_dfi_p3_address[10]),
	.D8     (main_a7ddrphy_dfi_p3_address[10]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_a[10])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_14 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_14 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_address[11]),
	.D2     (main_a7ddrphy_dfi_p0_address[11]),
	.D3     (main_a7ddrphy_dfi_p1_address[11]),
	.D4     (main_a7ddrphy_dfi_p1_address[11]),
	.D5     (main_a7ddrphy_dfi_p2_address[11]),
	.D6     (main_a7ddrphy_dfi_p2_address[11]),
	.D7     (main_a7ddrphy_dfi_p3_address[11]),
	.D8     (main_a7ddrphy_dfi_p3_address[11]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_a[11])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_15 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_15 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_address[12]),
	.D2     (main_a7ddrphy_dfi_p0_address[12]),
	.D3     (main_a7ddrphy_dfi_p1_address[12]),
	.D4     (main_a7ddrphy_dfi_p1_address[12]),
	.D5     (main_a7ddrphy_dfi_p2_address[12]),
	.D6     (main_a7ddrphy_dfi_p2_address[12]),
	.D7     (main_a7ddrphy_dfi_p3_address[12]),
	.D8     (main_a7ddrphy_dfi_p3_address[12]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_a[12])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_16 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_16 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_address[13]),
	.D2     (main_a7ddrphy_dfi_p0_address[13]),
	.D3     (main_a7ddrphy_dfi_p1_address[13]),
	.D4     (main_a7ddrphy_dfi_p1_address[13]),
	.D5     (main_a7ddrphy_dfi_p2_address[13]),
	.D6     (main_a7ddrphy_dfi_p2_address[13]),
	.D7     (main_a7ddrphy_dfi_p3_address[13]),
	.D8     (main_a7ddrphy_dfi_p3_address[13]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_a[13])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_17 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_17 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_address[14]),
	.D2     (main_a7ddrphy_dfi_p0_address[14]),
	.D3     (main_a7ddrphy_dfi_p1_address[14]),
	.D4     (main_a7ddrphy_dfi_p1_address[14]),
	.D5     (main_a7ddrphy_dfi_p2_address[14]),
	.D6     (main_a7ddrphy_dfi_p2_address[14]),
	.D7     (main_a7ddrphy_dfi_p3_address[14]),
	.D8     (main_a7ddrphy_dfi_p3_address[14]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_a[14])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_18 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_18 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_bank[0]),
	.D2     (main_a7ddrphy_dfi_p0_bank[0]),
	.D3     (main_a7ddrphy_dfi_p1_bank[0]),
	.D4     (main_a7ddrphy_dfi_p1_bank[0]),
	.D5     (main_a7ddrphy_dfi_p2_bank[0]),
	.D6     (main_a7ddrphy_dfi_p2_bank[0]),
	.D7     (main_a7ddrphy_dfi_p3_bank[0]),
	.D8     (main_a7ddrphy_dfi_p3_bank[0]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_a7ddrphy_pads_ba[0])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_19 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_19 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_bank[1]),
	.D2     (main_a7ddrphy_dfi_p0_bank[1]),
	.D3     (main_a7ddrphy_dfi_p1_bank[1]),
	.D4     (main_a7ddrphy_dfi_p1_bank[1]),
	.D5     (main_a7ddrphy_dfi_p2_bank[1]),
	.D6     (main_a7ddrphy_dfi_p2_bank[1]),
	.D7     (main_a7ddrphy_dfi_p3_bank[1]),
	.D8     (main_a7ddrphy_dfi_p3_bank[1]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_a7ddrphy_pads_ba[1])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_20 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_20 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_bank[2]),
	.D2     (main_a7ddrphy_dfi_p0_bank[2]),
	.D3     (main_a7ddrphy_dfi_p1_bank[2]),
	.D4     (main_a7ddrphy_dfi_p1_bank[2]),
	.D5     (main_a7ddrphy_dfi_p2_bank[2]),
	.D6     (main_a7ddrphy_dfi_p2_bank[2]),
	.D7     (main_a7ddrphy_dfi_p3_bank[2]),
	.D8     (main_a7ddrphy_dfi_p3_bank[2]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_a7ddrphy_pads_ba[2])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_21 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_21 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_ras_n),
	.D2     (main_a7ddrphy_dfi_p0_ras_n),
	.D3     (main_a7ddrphy_dfi_p1_ras_n),
	.D4     (main_a7ddrphy_dfi_p1_ras_n),
	.D5     (main_a7ddrphy_dfi_p2_ras_n),
	.D6     (main_a7ddrphy_dfi_p2_ras_n),
	.D7     (main_a7ddrphy_dfi_p3_ras_n),
	.D8     (main_a7ddrphy_dfi_p3_ras_n),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_ras_n)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_22 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_22 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_cas_n),
	.D2     (main_a7ddrphy_dfi_p0_cas_n),
	.D3     (main_a7ddrphy_dfi_p1_cas_n),
	.D4     (main_a7ddrphy_dfi_p1_cas_n),
	.D5     (main_a7ddrphy_dfi_p2_cas_n),
	.D6     (main_a7ddrphy_dfi_p2_cas_n),
	.D7     (main_a7ddrphy_dfi_p3_cas_n),
	.D8     (main_a7ddrphy_dfi_p3_cas_n),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_cas_n)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_23 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_23 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_we_n),
	.D2     (main_a7ddrphy_dfi_p0_we_n),
	.D3     (main_a7ddrphy_dfi_p1_we_n),
	.D4     (main_a7ddrphy_dfi_p1_we_n),
	.D5     (main_a7ddrphy_dfi_p2_we_n),
	.D6     (main_a7ddrphy_dfi_p2_we_n),
	.D7     (main_a7ddrphy_dfi_p3_we_n),
	.D8     (main_a7ddrphy_dfi_p3_we_n),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_we_n)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_24 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_24 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_cke),
	.D2     (main_a7ddrphy_dfi_p0_cke),
	.D3     (main_a7ddrphy_dfi_p1_cke),
	.D4     (main_a7ddrphy_dfi_p1_cke),
	.D5     (main_a7ddrphy_dfi_p2_cke),
	.D6     (main_a7ddrphy_dfi_p2_cke),
	.D7     (main_a7ddrphy_dfi_p3_cke),
	.D8     (main_a7ddrphy_dfi_p3_cke),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_cke)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_25 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_25 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_dfi_p0_odt),
	.D2     (main_a7ddrphy_dfi_p0_odt),
	.D3     (main_a7ddrphy_dfi_p1_odt),
	.D4     (main_a7ddrphy_dfi_p1_odt),
	.D5     (main_a7ddrphy_dfi_p2_odt),
	.D6     (main_a7ddrphy_dfi_p2_odt),
	.D7     (main_a7ddrphy_dfi_p3_odt),
	.D8     (main_a7ddrphy_dfi_p3_odt),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_odt)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_26 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_26 (
	// Inputs.
	.CLK    (sys4x_dqs_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip00[0]),
	.D2     (main_a7ddrphy_bitslip00[1]),
	.D3     (main_a7ddrphy_bitslip00[2]),
	.D4     (main_a7ddrphy_bitslip00[3]),
	.D5     (main_a7ddrphy_bitslip00[4]),
	.D6     (main_a7ddrphy_bitslip00[5]),
	.D7     (main_a7ddrphy_bitslip00[6]),
	.D8     (main_a7ddrphy_bitslip00[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OFB    (main_a7ddrphy0),
	.OQ     (main_a7ddrphy_dqs_o_no_delay0),
	.TQ     (main_a7ddrphy_dqs_t0)
);

//------------------------------------------------------------------------------
// Instance IOBUFDS of IOBUFDS Module.
//------------------------------------------------------------------------------
IOBUFDS IOBUFDS(
	// Inputs.
	.I   (main_a7ddrphy_dqs_o_no_delay0),
	.T   (main_a7ddrphy_dqs_t0),

	// InOuts.
	.IO  (ddram_dqs_p[0]),
	.IOB (ddram_dqs_n[0])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_27 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_27 (
	// Inputs.
	.CLK    (sys4x_dqs_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip10[0]),
	.D2     (main_a7ddrphy_bitslip10[1]),
	.D3     (main_a7ddrphy_bitslip10[2]),
	.D4     (main_a7ddrphy_bitslip10[3]),
	.D5     (main_a7ddrphy_bitslip10[4]),
	.D6     (main_a7ddrphy_bitslip10[5]),
	.D7     (main_a7ddrphy_bitslip10[6]),
	.D8     (main_a7ddrphy_bitslip10[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OFB    (main_a7ddrphy1),
	.OQ     (main_a7ddrphy_dqs_o_no_delay1),
	.TQ     (main_a7ddrphy_dqs_t1)
);

//------------------------------------------------------------------------------
// Instance IOBUFDS_1 of IOBUFDS Module.
//------------------------------------------------------------------------------
IOBUFDS IOBUFDS_1(
	// Inputs.
	.I   (main_a7ddrphy_dqs_o_no_delay1),
	.T   (main_a7ddrphy_dqs_t1),

	// InOuts.
	.IO  (ddram_dqs_p[1]),
	.IOB (ddram_dqs_n[1])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_28 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_28 (
	// Inputs.
	.CLK    (sys4x_dqs_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip20[0]),
	.D2     (main_a7ddrphy_bitslip20[1]),
	.D3     (main_a7ddrphy_bitslip20[2]),
	.D4     (main_a7ddrphy_bitslip20[3]),
	.D5     (main_a7ddrphy_bitslip20[4]),
	.D6     (main_a7ddrphy_bitslip20[5]),
	.D7     (main_a7ddrphy_bitslip20[6]),
	.D8     (main_a7ddrphy_bitslip20[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OFB    (main_a7ddrphy2),
	.OQ     (main_a7ddrphy_dqs_o_no_delay2),
	.TQ     (main_a7ddrphy_dqs_t2)
);

//------------------------------------------------------------------------------
// Instance IOBUFDS_2 of IOBUFDS Module.
//------------------------------------------------------------------------------
IOBUFDS IOBUFDS_2(
	// Inputs.
	.I   (main_a7ddrphy_dqs_o_no_delay2),
	.T   (main_a7ddrphy_dqs_t2),

	// InOuts.
	.IO  (ddram_dqs_p[2]),
	.IOB (ddram_dqs_n[2])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_29 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_29 (
	// Inputs.
	.CLK    (sys4x_dqs_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip30[0]),
	.D2     (main_a7ddrphy_bitslip30[1]),
	.D3     (main_a7ddrphy_bitslip30[2]),
	.D4     (main_a7ddrphy_bitslip30[3]),
	.D5     (main_a7ddrphy_bitslip30[4]),
	.D6     (main_a7ddrphy_bitslip30[5]),
	.D7     (main_a7ddrphy_bitslip30[6]),
	.D8     (main_a7ddrphy_bitslip30[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OFB    (main_a7ddrphy3),
	.OQ     (main_a7ddrphy_dqs_o_no_delay3),
	.TQ     (main_a7ddrphy_dqs_t3)
);

//------------------------------------------------------------------------------
// Instance IOBUFDS_3 of IOBUFDS Module.
//------------------------------------------------------------------------------
IOBUFDS IOBUFDS_3(
	// Inputs.
	.I   (main_a7ddrphy_dqs_o_no_delay3),
	.T   (main_a7ddrphy_dqs_t3),

	// InOuts.
	.IO  (ddram_dqs_p[3]),
	.IOB (ddram_dqs_n[3])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_30 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_30 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip01[0]),
	.D2     (main_a7ddrphy_bitslip01[1]),
	.D3     (main_a7ddrphy_bitslip01[2]),
	.D4     (main_a7ddrphy_bitslip01[3]),
	.D5     (main_a7ddrphy_bitslip01[4]),
	.D6     (main_a7ddrphy_bitslip01[5]),
	.D7     (main_a7ddrphy_bitslip01[6]),
	.D8     (main_a7ddrphy_bitslip01[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_dm[0])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_31 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_31 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip11[0]),
	.D2     (main_a7ddrphy_bitslip11[1]),
	.D3     (main_a7ddrphy_bitslip11[2]),
	.D4     (main_a7ddrphy_bitslip11[3]),
	.D5     (main_a7ddrphy_bitslip11[4]),
	.D6     (main_a7ddrphy_bitslip11[5]),
	.D7     (main_a7ddrphy_bitslip11[6]),
	.D8     (main_a7ddrphy_bitslip11[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_dm[1])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_32 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_32 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip21[0]),
	.D2     (main_a7ddrphy_bitslip21[1]),
	.D3     (main_a7ddrphy_bitslip21[2]),
	.D4     (main_a7ddrphy_bitslip21[3]),
	.D5     (main_a7ddrphy_bitslip21[4]),
	.D6     (main_a7ddrphy_bitslip21[5]),
	.D7     (main_a7ddrphy_bitslip21[6]),
	.D8     (main_a7ddrphy_bitslip21[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_dm[2])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_33 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_33 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip31[0]),
	.D2     (main_a7ddrphy_bitslip31[1]),
	.D3     (main_a7ddrphy_bitslip31[2]),
	.D4     (main_a7ddrphy_bitslip31[3]),
	.D5     (main_a7ddrphy_bitslip31[4]),
	.D6     (main_a7ddrphy_bitslip31[5]),
	.D7     (main_a7ddrphy_bitslip31[6]),
	.D8     (main_a7ddrphy_bitslip31[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (ddram_dm[3])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_34 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_34 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip02[0]),
	.D2     (main_a7ddrphy_bitslip02[1]),
	.D3     (main_a7ddrphy_bitslip02[2]),
	.D4     (main_a7ddrphy_bitslip02[3]),
	.D5     (main_a7ddrphy_bitslip02[4]),
	.D6     (main_a7ddrphy_bitslip02[5]),
	.D7     (main_a7ddrphy_bitslip02[6]),
	.D8     (main_a7ddrphy_bitslip02[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay0),
	.TQ     (main_a7ddrphy_dq_t0)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed0),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip03[7]),
	.Q2      (main_a7ddrphy_bitslip03[6]),
	.Q3      (main_a7ddrphy_bitslip03[5]),
	.Q4      (main_a7ddrphy_bitslip03[4]),
	.Q5      (main_a7ddrphy_bitslip03[3]),
	.Q6      (main_a7ddrphy_bitslip03[2]),
	.Q7      (main_a7ddrphy_bitslip03[1]),
	.Q8      (main_a7ddrphy_bitslip03[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay0),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed0)
);

//------------------------------------------------------------------------------
// Instance IOBUF of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay0),
	.T  (main_a7ddrphy_dq_t0),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay0),

	// InOuts.
	.IO (ddram_dq[0])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_35 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_35 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip12[0]),
	.D2     (main_a7ddrphy_bitslip12[1]),
	.D3     (main_a7ddrphy_bitslip12[2]),
	.D4     (main_a7ddrphy_bitslip12[3]),
	.D5     (main_a7ddrphy_bitslip12[4]),
	.D6     (main_a7ddrphy_bitslip12[5]),
	.D7     (main_a7ddrphy_bitslip12[6]),
	.D8     (main_a7ddrphy_bitslip12[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay1),
	.TQ     (main_a7ddrphy_dq_t1)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_1 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_1 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed1),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip13[7]),
	.Q2      (main_a7ddrphy_bitslip13[6]),
	.Q3      (main_a7ddrphy_bitslip13[5]),
	.Q4      (main_a7ddrphy_bitslip13[4]),
	.Q5      (main_a7ddrphy_bitslip13[3]),
	.Q6      (main_a7ddrphy_bitslip13[2]),
	.Q7      (main_a7ddrphy_bitslip13[1]),
	.Q8      (main_a7ddrphy_bitslip13[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_1 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_1 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay1),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed1)
);

//------------------------------------------------------------------------------
// Instance IOBUF_1 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_1(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay1),
	.T  (main_a7ddrphy_dq_t1),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay1),

	// InOuts.
	.IO (ddram_dq[1])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_36 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_36 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip22[0]),
	.D2     (main_a7ddrphy_bitslip22[1]),
	.D3     (main_a7ddrphy_bitslip22[2]),
	.D4     (main_a7ddrphy_bitslip22[3]),
	.D5     (main_a7ddrphy_bitslip22[4]),
	.D6     (main_a7ddrphy_bitslip22[5]),
	.D7     (main_a7ddrphy_bitslip22[6]),
	.D8     (main_a7ddrphy_bitslip22[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay2),
	.TQ     (main_a7ddrphy_dq_t2)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_2 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_2 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed2),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip23[7]),
	.Q2      (main_a7ddrphy_bitslip23[6]),
	.Q3      (main_a7ddrphy_bitslip23[5]),
	.Q4      (main_a7ddrphy_bitslip23[4]),
	.Q5      (main_a7ddrphy_bitslip23[3]),
	.Q6      (main_a7ddrphy_bitslip23[2]),
	.Q7      (main_a7ddrphy_bitslip23[1]),
	.Q8      (main_a7ddrphy_bitslip23[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_2 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_2 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay2),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed2)
);

//------------------------------------------------------------------------------
// Instance IOBUF_2 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_2(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay2),
	.T  (main_a7ddrphy_dq_t2),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay2),

	// InOuts.
	.IO (ddram_dq[2])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_37 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_37 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip32[0]),
	.D2     (main_a7ddrphy_bitslip32[1]),
	.D3     (main_a7ddrphy_bitslip32[2]),
	.D4     (main_a7ddrphy_bitslip32[3]),
	.D5     (main_a7ddrphy_bitslip32[4]),
	.D6     (main_a7ddrphy_bitslip32[5]),
	.D7     (main_a7ddrphy_bitslip32[6]),
	.D8     (main_a7ddrphy_bitslip32[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay3),
	.TQ     (main_a7ddrphy_dq_t3)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_3 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_3 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed3),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip33[7]),
	.Q2      (main_a7ddrphy_bitslip33[6]),
	.Q3      (main_a7ddrphy_bitslip33[5]),
	.Q4      (main_a7ddrphy_bitslip33[4]),
	.Q5      (main_a7ddrphy_bitslip33[3]),
	.Q6      (main_a7ddrphy_bitslip33[2]),
	.Q7      (main_a7ddrphy_bitslip33[1]),
	.Q8      (main_a7ddrphy_bitslip33[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_3 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_3 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay3),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed3)
);

//------------------------------------------------------------------------------
// Instance IOBUF_3 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_3(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay3),
	.T  (main_a7ddrphy_dq_t3),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay3),

	// InOuts.
	.IO (ddram_dq[3])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_38 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_38 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip40[0]),
	.D2     (main_a7ddrphy_bitslip40[1]),
	.D3     (main_a7ddrphy_bitslip40[2]),
	.D4     (main_a7ddrphy_bitslip40[3]),
	.D5     (main_a7ddrphy_bitslip40[4]),
	.D6     (main_a7ddrphy_bitslip40[5]),
	.D7     (main_a7ddrphy_bitslip40[6]),
	.D8     (main_a7ddrphy_bitslip40[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay4),
	.TQ     (main_a7ddrphy_dq_t4)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_4 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_4 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed4),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip41[7]),
	.Q2      (main_a7ddrphy_bitslip41[6]),
	.Q3      (main_a7ddrphy_bitslip41[5]),
	.Q4      (main_a7ddrphy_bitslip41[4]),
	.Q5      (main_a7ddrphy_bitslip41[3]),
	.Q6      (main_a7ddrphy_bitslip41[2]),
	.Q7      (main_a7ddrphy_bitslip41[1]),
	.Q8      (main_a7ddrphy_bitslip41[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_4 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_4 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay4),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed4)
);

//------------------------------------------------------------------------------
// Instance IOBUF_4 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_4(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay4),
	.T  (main_a7ddrphy_dq_t4),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay4),

	// InOuts.
	.IO (ddram_dq[4])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_39 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_39 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip50[0]),
	.D2     (main_a7ddrphy_bitslip50[1]),
	.D3     (main_a7ddrphy_bitslip50[2]),
	.D4     (main_a7ddrphy_bitslip50[3]),
	.D5     (main_a7ddrphy_bitslip50[4]),
	.D6     (main_a7ddrphy_bitslip50[5]),
	.D7     (main_a7ddrphy_bitslip50[6]),
	.D8     (main_a7ddrphy_bitslip50[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay5),
	.TQ     (main_a7ddrphy_dq_t5)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_5 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_5 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed5),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip51[7]),
	.Q2      (main_a7ddrphy_bitslip51[6]),
	.Q3      (main_a7ddrphy_bitslip51[5]),
	.Q4      (main_a7ddrphy_bitslip51[4]),
	.Q5      (main_a7ddrphy_bitslip51[3]),
	.Q6      (main_a7ddrphy_bitslip51[2]),
	.Q7      (main_a7ddrphy_bitslip51[1]),
	.Q8      (main_a7ddrphy_bitslip51[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_5 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_5 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay5),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed5)
);

//------------------------------------------------------------------------------
// Instance IOBUF_5 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_5(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay5),
	.T  (main_a7ddrphy_dq_t5),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay5),

	// InOuts.
	.IO (ddram_dq[5])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_40 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_40 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip60[0]),
	.D2     (main_a7ddrphy_bitslip60[1]),
	.D3     (main_a7ddrphy_bitslip60[2]),
	.D4     (main_a7ddrphy_bitslip60[3]),
	.D5     (main_a7ddrphy_bitslip60[4]),
	.D6     (main_a7ddrphy_bitslip60[5]),
	.D7     (main_a7ddrphy_bitslip60[6]),
	.D8     (main_a7ddrphy_bitslip60[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay6),
	.TQ     (main_a7ddrphy_dq_t6)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_6 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_6 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed6),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip61[7]),
	.Q2      (main_a7ddrphy_bitslip61[6]),
	.Q3      (main_a7ddrphy_bitslip61[5]),
	.Q4      (main_a7ddrphy_bitslip61[4]),
	.Q5      (main_a7ddrphy_bitslip61[3]),
	.Q6      (main_a7ddrphy_bitslip61[2]),
	.Q7      (main_a7ddrphy_bitslip61[1]),
	.Q8      (main_a7ddrphy_bitslip61[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_6 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_6 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay6),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed6)
);

//------------------------------------------------------------------------------
// Instance IOBUF_6 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_6(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay6),
	.T  (main_a7ddrphy_dq_t6),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay6),

	// InOuts.
	.IO (ddram_dq[6])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_41 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_41 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip70[0]),
	.D2     (main_a7ddrphy_bitslip70[1]),
	.D3     (main_a7ddrphy_bitslip70[2]),
	.D4     (main_a7ddrphy_bitslip70[3]),
	.D5     (main_a7ddrphy_bitslip70[4]),
	.D6     (main_a7ddrphy_bitslip70[5]),
	.D7     (main_a7ddrphy_bitslip70[6]),
	.D8     (main_a7ddrphy_bitslip70[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay7),
	.TQ     (main_a7ddrphy_dq_t7)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_7 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_7 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed7),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip71[7]),
	.Q2      (main_a7ddrphy_bitslip71[6]),
	.Q3      (main_a7ddrphy_bitslip71[5]),
	.Q4      (main_a7ddrphy_bitslip71[4]),
	.Q5      (main_a7ddrphy_bitslip71[3]),
	.Q6      (main_a7ddrphy_bitslip71[2]),
	.Q7      (main_a7ddrphy_bitslip71[1]),
	.Q8      (main_a7ddrphy_bitslip71[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_7 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_7 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay7),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed7)
);

//------------------------------------------------------------------------------
// Instance IOBUF_7 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_7(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay7),
	.T  (main_a7ddrphy_dq_t7),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay7),

	// InOuts.
	.IO (ddram_dq[7])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_42 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_42 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip80[0]),
	.D2     (main_a7ddrphy_bitslip80[1]),
	.D3     (main_a7ddrphy_bitslip80[2]),
	.D4     (main_a7ddrphy_bitslip80[3]),
	.D5     (main_a7ddrphy_bitslip80[4]),
	.D6     (main_a7ddrphy_bitslip80[5]),
	.D7     (main_a7ddrphy_bitslip80[6]),
	.D8     (main_a7ddrphy_bitslip80[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay8),
	.TQ     (main_a7ddrphy_dq_t8)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_8 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_8 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed8),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip81[7]),
	.Q2      (main_a7ddrphy_bitslip81[6]),
	.Q3      (main_a7ddrphy_bitslip81[5]),
	.Q4      (main_a7ddrphy_bitslip81[4]),
	.Q5      (main_a7ddrphy_bitslip81[3]),
	.Q6      (main_a7ddrphy_bitslip81[2]),
	.Q7      (main_a7ddrphy_bitslip81[1]),
	.Q8      (main_a7ddrphy_bitslip81[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_8 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_8 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay8),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed8)
);

//------------------------------------------------------------------------------
// Instance IOBUF_8 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_8(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay8),
	.T  (main_a7ddrphy_dq_t8),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay8),

	// InOuts.
	.IO (ddram_dq[8])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_43 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_43 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip90[0]),
	.D2     (main_a7ddrphy_bitslip90[1]),
	.D3     (main_a7ddrphy_bitslip90[2]),
	.D4     (main_a7ddrphy_bitslip90[3]),
	.D5     (main_a7ddrphy_bitslip90[4]),
	.D6     (main_a7ddrphy_bitslip90[5]),
	.D7     (main_a7ddrphy_bitslip90[6]),
	.D8     (main_a7ddrphy_bitslip90[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay9),
	.TQ     (main_a7ddrphy_dq_t9)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_9 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_9 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed9),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip91[7]),
	.Q2      (main_a7ddrphy_bitslip91[6]),
	.Q3      (main_a7ddrphy_bitslip91[5]),
	.Q4      (main_a7ddrphy_bitslip91[4]),
	.Q5      (main_a7ddrphy_bitslip91[3]),
	.Q6      (main_a7ddrphy_bitslip91[2]),
	.Q7      (main_a7ddrphy_bitslip91[1]),
	.Q8      (main_a7ddrphy_bitslip91[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_9 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_9 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay9),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed9)
);

//------------------------------------------------------------------------------
// Instance IOBUF_9 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_9(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay9),
	.T  (main_a7ddrphy_dq_t9),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay9),

	// InOuts.
	.IO (ddram_dq[9])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_44 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_44 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip100[0]),
	.D2     (main_a7ddrphy_bitslip100[1]),
	.D3     (main_a7ddrphy_bitslip100[2]),
	.D4     (main_a7ddrphy_bitslip100[3]),
	.D5     (main_a7ddrphy_bitslip100[4]),
	.D6     (main_a7ddrphy_bitslip100[5]),
	.D7     (main_a7ddrphy_bitslip100[6]),
	.D8     (main_a7ddrphy_bitslip100[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay10),
	.TQ     (main_a7ddrphy_dq_t10)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_10 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_10 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed10),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip101[7]),
	.Q2      (main_a7ddrphy_bitslip101[6]),
	.Q3      (main_a7ddrphy_bitslip101[5]),
	.Q4      (main_a7ddrphy_bitslip101[4]),
	.Q5      (main_a7ddrphy_bitslip101[3]),
	.Q6      (main_a7ddrphy_bitslip101[2]),
	.Q7      (main_a7ddrphy_bitslip101[1]),
	.Q8      (main_a7ddrphy_bitslip101[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_10 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_10 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay10),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed10)
);

//------------------------------------------------------------------------------
// Instance IOBUF_10 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_10(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay10),
	.T  (main_a7ddrphy_dq_t10),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay10),

	// InOuts.
	.IO (ddram_dq[10])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_45 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_45 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip110[0]),
	.D2     (main_a7ddrphy_bitslip110[1]),
	.D3     (main_a7ddrphy_bitslip110[2]),
	.D4     (main_a7ddrphy_bitslip110[3]),
	.D5     (main_a7ddrphy_bitslip110[4]),
	.D6     (main_a7ddrphy_bitslip110[5]),
	.D7     (main_a7ddrphy_bitslip110[6]),
	.D8     (main_a7ddrphy_bitslip110[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay11),
	.TQ     (main_a7ddrphy_dq_t11)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_11 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_11 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed11),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip111[7]),
	.Q2      (main_a7ddrphy_bitslip111[6]),
	.Q3      (main_a7ddrphy_bitslip111[5]),
	.Q4      (main_a7ddrphy_bitslip111[4]),
	.Q5      (main_a7ddrphy_bitslip111[3]),
	.Q6      (main_a7ddrphy_bitslip111[2]),
	.Q7      (main_a7ddrphy_bitslip111[1]),
	.Q8      (main_a7ddrphy_bitslip111[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_11 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_11 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay11),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed11)
);

//------------------------------------------------------------------------------
// Instance IOBUF_11 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_11(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay11),
	.T  (main_a7ddrphy_dq_t11),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay11),

	// InOuts.
	.IO (ddram_dq[11])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_46 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_46 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip120[0]),
	.D2     (main_a7ddrphy_bitslip120[1]),
	.D3     (main_a7ddrphy_bitslip120[2]),
	.D4     (main_a7ddrphy_bitslip120[3]),
	.D5     (main_a7ddrphy_bitslip120[4]),
	.D6     (main_a7ddrphy_bitslip120[5]),
	.D7     (main_a7ddrphy_bitslip120[6]),
	.D8     (main_a7ddrphy_bitslip120[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay12),
	.TQ     (main_a7ddrphy_dq_t12)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_12 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_12 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed12),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip121[7]),
	.Q2      (main_a7ddrphy_bitslip121[6]),
	.Q3      (main_a7ddrphy_bitslip121[5]),
	.Q4      (main_a7ddrphy_bitslip121[4]),
	.Q5      (main_a7ddrphy_bitslip121[3]),
	.Q6      (main_a7ddrphy_bitslip121[2]),
	.Q7      (main_a7ddrphy_bitslip121[1]),
	.Q8      (main_a7ddrphy_bitslip121[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_12 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_12 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay12),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed12)
);

//------------------------------------------------------------------------------
// Instance IOBUF_12 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_12(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay12),
	.T  (main_a7ddrphy_dq_t12),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay12),

	// InOuts.
	.IO (ddram_dq[12])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_47 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_47 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip130[0]),
	.D2     (main_a7ddrphy_bitslip130[1]),
	.D3     (main_a7ddrphy_bitslip130[2]),
	.D4     (main_a7ddrphy_bitslip130[3]),
	.D5     (main_a7ddrphy_bitslip130[4]),
	.D6     (main_a7ddrphy_bitslip130[5]),
	.D7     (main_a7ddrphy_bitslip130[6]),
	.D8     (main_a7ddrphy_bitslip130[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay13),
	.TQ     (main_a7ddrphy_dq_t13)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_13 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_13 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed13),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip131[7]),
	.Q2      (main_a7ddrphy_bitslip131[6]),
	.Q3      (main_a7ddrphy_bitslip131[5]),
	.Q4      (main_a7ddrphy_bitslip131[4]),
	.Q5      (main_a7ddrphy_bitslip131[3]),
	.Q6      (main_a7ddrphy_bitslip131[2]),
	.Q7      (main_a7ddrphy_bitslip131[1]),
	.Q8      (main_a7ddrphy_bitslip131[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_13 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_13 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay13),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed13)
);

//------------------------------------------------------------------------------
// Instance IOBUF_13 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_13(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay13),
	.T  (main_a7ddrphy_dq_t13),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay13),

	// InOuts.
	.IO (ddram_dq[13])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_48 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_48 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip140[0]),
	.D2     (main_a7ddrphy_bitslip140[1]),
	.D3     (main_a7ddrphy_bitslip140[2]),
	.D4     (main_a7ddrphy_bitslip140[3]),
	.D5     (main_a7ddrphy_bitslip140[4]),
	.D6     (main_a7ddrphy_bitslip140[5]),
	.D7     (main_a7ddrphy_bitslip140[6]),
	.D8     (main_a7ddrphy_bitslip140[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay14),
	.TQ     (main_a7ddrphy_dq_t14)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_14 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_14 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed14),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip141[7]),
	.Q2      (main_a7ddrphy_bitslip141[6]),
	.Q3      (main_a7ddrphy_bitslip141[5]),
	.Q4      (main_a7ddrphy_bitslip141[4]),
	.Q5      (main_a7ddrphy_bitslip141[3]),
	.Q6      (main_a7ddrphy_bitslip141[2]),
	.Q7      (main_a7ddrphy_bitslip141[1]),
	.Q8      (main_a7ddrphy_bitslip141[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_14 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_14 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay14),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed14)
);

//------------------------------------------------------------------------------
// Instance IOBUF_14 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_14(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay14),
	.T  (main_a7ddrphy_dq_t14),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay14),

	// InOuts.
	.IO (ddram_dq[14])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_49 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_49 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip150[0]),
	.D2     (main_a7ddrphy_bitslip150[1]),
	.D3     (main_a7ddrphy_bitslip150[2]),
	.D4     (main_a7ddrphy_bitslip150[3]),
	.D5     (main_a7ddrphy_bitslip150[4]),
	.D6     (main_a7ddrphy_bitslip150[5]),
	.D7     (main_a7ddrphy_bitslip150[6]),
	.D8     (main_a7ddrphy_bitslip150[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay15),
	.TQ     (main_a7ddrphy_dq_t15)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_15 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_15 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed15),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip151[7]),
	.Q2      (main_a7ddrphy_bitslip151[6]),
	.Q3      (main_a7ddrphy_bitslip151[5]),
	.Q4      (main_a7ddrphy_bitslip151[4]),
	.Q5      (main_a7ddrphy_bitslip151[3]),
	.Q6      (main_a7ddrphy_bitslip151[2]),
	.Q7      (main_a7ddrphy_bitslip151[1]),
	.Q8      (main_a7ddrphy_bitslip151[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_15 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_15 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay15),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed15)
);

//------------------------------------------------------------------------------
// Instance IOBUF_15 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_15(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay15),
	.T  (main_a7ddrphy_dq_t15),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay15),

	// InOuts.
	.IO (ddram_dq[15])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_50 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_50 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip160[0]),
	.D2     (main_a7ddrphy_bitslip160[1]),
	.D3     (main_a7ddrphy_bitslip160[2]),
	.D4     (main_a7ddrphy_bitslip160[3]),
	.D5     (main_a7ddrphy_bitslip160[4]),
	.D6     (main_a7ddrphy_bitslip160[5]),
	.D7     (main_a7ddrphy_bitslip160[6]),
	.D8     (main_a7ddrphy_bitslip160[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay16),
	.TQ     (main_a7ddrphy_dq_t16)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_16 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_16 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed16),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip161[7]),
	.Q2      (main_a7ddrphy_bitslip161[6]),
	.Q3      (main_a7ddrphy_bitslip161[5]),
	.Q4      (main_a7ddrphy_bitslip161[4]),
	.Q5      (main_a7ddrphy_bitslip161[3]),
	.Q6      (main_a7ddrphy_bitslip161[2]),
	.Q7      (main_a7ddrphy_bitslip161[1]),
	.Q8      (main_a7ddrphy_bitslip161[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_16 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_16 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay16),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed16)
);

//------------------------------------------------------------------------------
// Instance IOBUF_16 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_16(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay16),
	.T  (main_a7ddrphy_dq_t16),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay16),

	// InOuts.
	.IO (ddram_dq[16])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_51 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_51 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip170[0]),
	.D2     (main_a7ddrphy_bitslip170[1]),
	.D3     (main_a7ddrphy_bitslip170[2]),
	.D4     (main_a7ddrphy_bitslip170[3]),
	.D5     (main_a7ddrphy_bitslip170[4]),
	.D6     (main_a7ddrphy_bitslip170[5]),
	.D7     (main_a7ddrphy_bitslip170[6]),
	.D8     (main_a7ddrphy_bitslip170[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay17),
	.TQ     (main_a7ddrphy_dq_t17)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_17 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_17 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed17),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip171[7]),
	.Q2      (main_a7ddrphy_bitslip171[6]),
	.Q3      (main_a7ddrphy_bitslip171[5]),
	.Q4      (main_a7ddrphy_bitslip171[4]),
	.Q5      (main_a7ddrphy_bitslip171[3]),
	.Q6      (main_a7ddrphy_bitslip171[2]),
	.Q7      (main_a7ddrphy_bitslip171[1]),
	.Q8      (main_a7ddrphy_bitslip171[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_17 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_17 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay17),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed17)
);

//------------------------------------------------------------------------------
// Instance IOBUF_17 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_17(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay17),
	.T  (main_a7ddrphy_dq_t17),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay17),

	// InOuts.
	.IO (ddram_dq[17])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_52 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_52 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip180[0]),
	.D2     (main_a7ddrphy_bitslip180[1]),
	.D3     (main_a7ddrphy_bitslip180[2]),
	.D4     (main_a7ddrphy_bitslip180[3]),
	.D5     (main_a7ddrphy_bitslip180[4]),
	.D6     (main_a7ddrphy_bitslip180[5]),
	.D7     (main_a7ddrphy_bitslip180[6]),
	.D8     (main_a7ddrphy_bitslip180[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay18),
	.TQ     (main_a7ddrphy_dq_t18)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_18 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_18 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed18),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip181[7]),
	.Q2      (main_a7ddrphy_bitslip181[6]),
	.Q3      (main_a7ddrphy_bitslip181[5]),
	.Q4      (main_a7ddrphy_bitslip181[4]),
	.Q5      (main_a7ddrphy_bitslip181[3]),
	.Q6      (main_a7ddrphy_bitslip181[2]),
	.Q7      (main_a7ddrphy_bitslip181[1]),
	.Q8      (main_a7ddrphy_bitslip181[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_18 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_18 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay18),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed18)
);

//------------------------------------------------------------------------------
// Instance IOBUF_18 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_18(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay18),
	.T  (main_a7ddrphy_dq_t18),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay18),

	// InOuts.
	.IO (ddram_dq[18])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_53 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_53 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip190[0]),
	.D2     (main_a7ddrphy_bitslip190[1]),
	.D3     (main_a7ddrphy_bitslip190[2]),
	.D4     (main_a7ddrphy_bitslip190[3]),
	.D5     (main_a7ddrphy_bitslip190[4]),
	.D6     (main_a7ddrphy_bitslip190[5]),
	.D7     (main_a7ddrphy_bitslip190[6]),
	.D8     (main_a7ddrphy_bitslip190[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay19),
	.TQ     (main_a7ddrphy_dq_t19)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_19 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_19 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed19),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip191[7]),
	.Q2      (main_a7ddrphy_bitslip191[6]),
	.Q3      (main_a7ddrphy_bitslip191[5]),
	.Q4      (main_a7ddrphy_bitslip191[4]),
	.Q5      (main_a7ddrphy_bitslip191[3]),
	.Q6      (main_a7ddrphy_bitslip191[2]),
	.Q7      (main_a7ddrphy_bitslip191[1]),
	.Q8      (main_a7ddrphy_bitslip191[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_19 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_19 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay19),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed19)
);

//------------------------------------------------------------------------------
// Instance IOBUF_19 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_19(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay19),
	.T  (main_a7ddrphy_dq_t19),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay19),

	// InOuts.
	.IO (ddram_dq[19])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_54 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_54 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip200[0]),
	.D2     (main_a7ddrphy_bitslip200[1]),
	.D3     (main_a7ddrphy_bitslip200[2]),
	.D4     (main_a7ddrphy_bitslip200[3]),
	.D5     (main_a7ddrphy_bitslip200[4]),
	.D6     (main_a7ddrphy_bitslip200[5]),
	.D7     (main_a7ddrphy_bitslip200[6]),
	.D8     (main_a7ddrphy_bitslip200[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay20),
	.TQ     (main_a7ddrphy_dq_t20)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_20 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_20 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed20),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip201[7]),
	.Q2      (main_a7ddrphy_bitslip201[6]),
	.Q3      (main_a7ddrphy_bitslip201[5]),
	.Q4      (main_a7ddrphy_bitslip201[4]),
	.Q5      (main_a7ddrphy_bitslip201[3]),
	.Q6      (main_a7ddrphy_bitslip201[2]),
	.Q7      (main_a7ddrphy_bitslip201[1]),
	.Q8      (main_a7ddrphy_bitslip201[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_20 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_20 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay20),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed20)
);

//------------------------------------------------------------------------------
// Instance IOBUF_20 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_20(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay20),
	.T  (main_a7ddrphy_dq_t20),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay20),

	// InOuts.
	.IO (ddram_dq[20])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_55 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_55 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip210[0]),
	.D2     (main_a7ddrphy_bitslip210[1]),
	.D3     (main_a7ddrphy_bitslip210[2]),
	.D4     (main_a7ddrphy_bitslip210[3]),
	.D5     (main_a7ddrphy_bitslip210[4]),
	.D6     (main_a7ddrphy_bitslip210[5]),
	.D7     (main_a7ddrphy_bitslip210[6]),
	.D8     (main_a7ddrphy_bitslip210[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay21),
	.TQ     (main_a7ddrphy_dq_t21)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_21 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_21 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed21),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip211[7]),
	.Q2      (main_a7ddrphy_bitslip211[6]),
	.Q3      (main_a7ddrphy_bitslip211[5]),
	.Q4      (main_a7ddrphy_bitslip211[4]),
	.Q5      (main_a7ddrphy_bitslip211[3]),
	.Q6      (main_a7ddrphy_bitslip211[2]),
	.Q7      (main_a7ddrphy_bitslip211[1]),
	.Q8      (main_a7ddrphy_bitslip211[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_21 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_21 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay21),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed21)
);

//------------------------------------------------------------------------------
// Instance IOBUF_21 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_21(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay21),
	.T  (main_a7ddrphy_dq_t21),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay21),

	// InOuts.
	.IO (ddram_dq[21])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_56 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_56 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip220[0]),
	.D2     (main_a7ddrphy_bitslip220[1]),
	.D3     (main_a7ddrphy_bitslip220[2]),
	.D4     (main_a7ddrphy_bitslip220[3]),
	.D5     (main_a7ddrphy_bitslip220[4]),
	.D6     (main_a7ddrphy_bitslip220[5]),
	.D7     (main_a7ddrphy_bitslip220[6]),
	.D8     (main_a7ddrphy_bitslip220[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay22),
	.TQ     (main_a7ddrphy_dq_t22)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_22 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_22 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed22),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip221[7]),
	.Q2      (main_a7ddrphy_bitslip221[6]),
	.Q3      (main_a7ddrphy_bitslip221[5]),
	.Q4      (main_a7ddrphy_bitslip221[4]),
	.Q5      (main_a7ddrphy_bitslip221[3]),
	.Q6      (main_a7ddrphy_bitslip221[2]),
	.Q7      (main_a7ddrphy_bitslip221[1]),
	.Q8      (main_a7ddrphy_bitslip221[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_22 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_22 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay22),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed22)
);

//------------------------------------------------------------------------------
// Instance IOBUF_22 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_22(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay22),
	.T  (main_a7ddrphy_dq_t22),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay22),

	// InOuts.
	.IO (ddram_dq[22])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_57 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_57 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip230[0]),
	.D2     (main_a7ddrphy_bitslip230[1]),
	.D3     (main_a7ddrphy_bitslip230[2]),
	.D4     (main_a7ddrphy_bitslip230[3]),
	.D5     (main_a7ddrphy_bitslip230[4]),
	.D6     (main_a7ddrphy_bitslip230[5]),
	.D7     (main_a7ddrphy_bitslip230[6]),
	.D8     (main_a7ddrphy_bitslip230[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay23),
	.TQ     (main_a7ddrphy_dq_t23)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_23 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_23 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed23),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip231[7]),
	.Q2      (main_a7ddrphy_bitslip231[6]),
	.Q3      (main_a7ddrphy_bitslip231[5]),
	.Q4      (main_a7ddrphy_bitslip231[4]),
	.Q5      (main_a7ddrphy_bitslip231[3]),
	.Q6      (main_a7ddrphy_bitslip231[2]),
	.Q7      (main_a7ddrphy_bitslip231[1]),
	.Q8      (main_a7ddrphy_bitslip231[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_23 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_23 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay23),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[2] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed23)
);

//------------------------------------------------------------------------------
// Instance IOBUF_23 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_23(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay23),
	.T  (main_a7ddrphy_dq_t23),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay23),

	// InOuts.
	.IO (ddram_dq[23])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_58 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_58 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip240[0]),
	.D2     (main_a7ddrphy_bitslip240[1]),
	.D3     (main_a7ddrphy_bitslip240[2]),
	.D4     (main_a7ddrphy_bitslip240[3]),
	.D5     (main_a7ddrphy_bitslip240[4]),
	.D6     (main_a7ddrphy_bitslip240[5]),
	.D7     (main_a7ddrphy_bitslip240[6]),
	.D8     (main_a7ddrphy_bitslip240[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay24),
	.TQ     (main_a7ddrphy_dq_t24)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_24 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_24 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed24),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip241[7]),
	.Q2      (main_a7ddrphy_bitslip241[6]),
	.Q3      (main_a7ddrphy_bitslip241[5]),
	.Q4      (main_a7ddrphy_bitslip241[4]),
	.Q5      (main_a7ddrphy_bitslip241[3]),
	.Q6      (main_a7ddrphy_bitslip241[2]),
	.Q7      (main_a7ddrphy_bitslip241[1]),
	.Q8      (main_a7ddrphy_bitslip241[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_24 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_24 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay24),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed24)
);

//------------------------------------------------------------------------------
// Instance IOBUF_24 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_24(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay24),
	.T  (main_a7ddrphy_dq_t24),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay24),

	// InOuts.
	.IO (ddram_dq[24])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_59 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_59 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip250[0]),
	.D2     (main_a7ddrphy_bitslip250[1]),
	.D3     (main_a7ddrphy_bitslip250[2]),
	.D4     (main_a7ddrphy_bitslip250[3]),
	.D5     (main_a7ddrphy_bitslip250[4]),
	.D6     (main_a7ddrphy_bitslip250[5]),
	.D7     (main_a7ddrphy_bitslip250[6]),
	.D8     (main_a7ddrphy_bitslip250[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay25),
	.TQ     (main_a7ddrphy_dq_t25)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_25 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_25 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed25),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip251[7]),
	.Q2      (main_a7ddrphy_bitslip251[6]),
	.Q3      (main_a7ddrphy_bitslip251[5]),
	.Q4      (main_a7ddrphy_bitslip251[4]),
	.Q5      (main_a7ddrphy_bitslip251[3]),
	.Q6      (main_a7ddrphy_bitslip251[2]),
	.Q7      (main_a7ddrphy_bitslip251[1]),
	.Q8      (main_a7ddrphy_bitslip251[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_25 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_25 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay25),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed25)
);

//------------------------------------------------------------------------------
// Instance IOBUF_25 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_25(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay25),
	.T  (main_a7ddrphy_dq_t25),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay25),

	// InOuts.
	.IO (ddram_dq[25])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_60 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_60 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip260[0]),
	.D2     (main_a7ddrphy_bitslip260[1]),
	.D3     (main_a7ddrphy_bitslip260[2]),
	.D4     (main_a7ddrphy_bitslip260[3]),
	.D5     (main_a7ddrphy_bitslip260[4]),
	.D6     (main_a7ddrphy_bitslip260[5]),
	.D7     (main_a7ddrphy_bitslip260[6]),
	.D8     (main_a7ddrphy_bitslip260[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay26),
	.TQ     (main_a7ddrphy_dq_t26)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_26 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_26 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed26),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip261[7]),
	.Q2      (main_a7ddrphy_bitslip261[6]),
	.Q3      (main_a7ddrphy_bitslip261[5]),
	.Q4      (main_a7ddrphy_bitslip261[4]),
	.Q5      (main_a7ddrphy_bitslip261[3]),
	.Q6      (main_a7ddrphy_bitslip261[2]),
	.Q7      (main_a7ddrphy_bitslip261[1]),
	.Q8      (main_a7ddrphy_bitslip261[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_26 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_26 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay26),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed26)
);

//------------------------------------------------------------------------------
// Instance IOBUF_26 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_26(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay26),
	.T  (main_a7ddrphy_dq_t26),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay26),

	// InOuts.
	.IO (ddram_dq[26])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_61 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_61 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip270[0]),
	.D2     (main_a7ddrphy_bitslip270[1]),
	.D3     (main_a7ddrphy_bitslip270[2]),
	.D4     (main_a7ddrphy_bitslip270[3]),
	.D5     (main_a7ddrphy_bitslip270[4]),
	.D6     (main_a7ddrphy_bitslip270[5]),
	.D7     (main_a7ddrphy_bitslip270[6]),
	.D8     (main_a7ddrphy_bitslip270[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay27),
	.TQ     (main_a7ddrphy_dq_t27)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_27 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_27 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed27),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip271[7]),
	.Q2      (main_a7ddrphy_bitslip271[6]),
	.Q3      (main_a7ddrphy_bitslip271[5]),
	.Q4      (main_a7ddrphy_bitslip271[4]),
	.Q5      (main_a7ddrphy_bitslip271[3]),
	.Q6      (main_a7ddrphy_bitslip271[2]),
	.Q7      (main_a7ddrphy_bitslip271[1]),
	.Q8      (main_a7ddrphy_bitslip271[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_27 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_27 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay27),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed27)
);

//------------------------------------------------------------------------------
// Instance IOBUF_27 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_27(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay27),
	.T  (main_a7ddrphy_dq_t27),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay27),

	// InOuts.
	.IO (ddram_dq[27])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_62 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_62 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip280[0]),
	.D2     (main_a7ddrphy_bitslip280[1]),
	.D3     (main_a7ddrphy_bitslip280[2]),
	.D4     (main_a7ddrphy_bitslip280[3]),
	.D5     (main_a7ddrphy_bitslip280[4]),
	.D6     (main_a7ddrphy_bitslip280[5]),
	.D7     (main_a7ddrphy_bitslip280[6]),
	.D8     (main_a7ddrphy_bitslip280[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay28),
	.TQ     (main_a7ddrphy_dq_t28)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_28 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_28 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed28),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip281[7]),
	.Q2      (main_a7ddrphy_bitslip281[6]),
	.Q3      (main_a7ddrphy_bitslip281[5]),
	.Q4      (main_a7ddrphy_bitslip281[4]),
	.Q5      (main_a7ddrphy_bitslip281[3]),
	.Q6      (main_a7ddrphy_bitslip281[2]),
	.Q7      (main_a7ddrphy_bitslip281[1]),
	.Q8      (main_a7ddrphy_bitslip281[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_28 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_28 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay28),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed28)
);

//------------------------------------------------------------------------------
// Instance IOBUF_28 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_28(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay28),
	.T  (main_a7ddrphy_dq_t28),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay28),

	// InOuts.
	.IO (ddram_dq[28])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_63 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_63 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip290[0]),
	.D2     (main_a7ddrphy_bitslip290[1]),
	.D3     (main_a7ddrphy_bitslip290[2]),
	.D4     (main_a7ddrphy_bitslip290[3]),
	.D5     (main_a7ddrphy_bitslip290[4]),
	.D6     (main_a7ddrphy_bitslip290[5]),
	.D7     (main_a7ddrphy_bitslip290[6]),
	.D8     (main_a7ddrphy_bitslip290[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay29),
	.TQ     (main_a7ddrphy_dq_t29)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_29 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_29 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed29),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip291[7]),
	.Q2      (main_a7ddrphy_bitslip291[6]),
	.Q3      (main_a7ddrphy_bitslip291[5]),
	.Q4      (main_a7ddrphy_bitslip291[4]),
	.Q5      (main_a7ddrphy_bitslip291[3]),
	.Q6      (main_a7ddrphy_bitslip291[2]),
	.Q7      (main_a7ddrphy_bitslip291[1]),
	.Q8      (main_a7ddrphy_bitslip291[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_29 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_29 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay29),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed29)
);

//------------------------------------------------------------------------------
// Instance IOBUF_29 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_29(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay29),
	.T  (main_a7ddrphy_dq_t29),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay29),

	// InOuts.
	.IO (ddram_dq[29])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_64 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_64 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip300[0]),
	.D2     (main_a7ddrphy_bitslip300[1]),
	.D3     (main_a7ddrphy_bitslip300[2]),
	.D4     (main_a7ddrphy_bitslip300[3]),
	.D5     (main_a7ddrphy_bitslip300[4]),
	.D6     (main_a7ddrphy_bitslip300[5]),
	.D7     (main_a7ddrphy_bitslip300[6]),
	.D8     (main_a7ddrphy_bitslip300[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay30),
	.TQ     (main_a7ddrphy_dq_t30)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_30 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_30 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed30),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip301[7]),
	.Q2      (main_a7ddrphy_bitslip301[6]),
	.Q3      (main_a7ddrphy_bitslip301[5]),
	.Q4      (main_a7ddrphy_bitslip301[4]),
	.Q5      (main_a7ddrphy_bitslip301[3]),
	.Q6      (main_a7ddrphy_bitslip301[2]),
	.Q7      (main_a7ddrphy_bitslip301[1]),
	.Q8      (main_a7ddrphy_bitslip301[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_30 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_30 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay30),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed30)
);

//------------------------------------------------------------------------------
// Instance IOBUF_30 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_30(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay30),
	.T  (main_a7ddrphy_dq_t30),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay30),

	// InOuts.
	.IO (ddram_dq[30])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_65 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_65 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_a7ddrphy_bitslip310[0]),
	.D2     (main_a7ddrphy_bitslip310[1]),
	.D3     (main_a7ddrphy_bitslip310[2]),
	.D4     (main_a7ddrphy_bitslip310[3]),
	.D5     (main_a7ddrphy_bitslip310[4]),
	.D6     (main_a7ddrphy_bitslip310[5]),
	.D7     (main_a7ddrphy_bitslip310[6]),
	.D8     (main_a7ddrphy_bitslip310[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_a7ddrphy_rst_storage)),
	.T1     ((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_a7ddrphy_dq_o_nodelay31),
	.TQ     (main_a7ddrphy_dq_t31)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_31 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_31 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_a7ddrphy_dq_i_delayed31),
	.RST     ((sys_rst | main_a7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_a7ddrphy_bitslip311[7]),
	.Q2      (main_a7ddrphy_bitslip311[6]),
	.Q3      (main_a7ddrphy_bitslip311[5]),
	.Q4      (main_a7ddrphy_bitslip311[4]),
	.Q5      (main_a7ddrphy_bitslip311[3]),
	.Q6      (main_a7ddrphy_bitslip311[2]),
	.Q7      (main_a7ddrphy_bitslip311[1]),
	.Q8      (main_a7ddrphy_bitslip311[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_31 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_31 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_a7ddrphy_dq_i_nodelay31),
	.INC      (1'd1),
	.LD       (((main_a7ddrphy_dly_sel_storage[3] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_a7ddrphy_dq_i_delayed31)
);

//------------------------------------------------------------------------------
// Instance IOBUF_31 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_31(
	// Inputs.
	.I  (main_a7ddrphy_dq_o_nodelay31),
	.T  (main_a7ddrphy_dq_t31),

	// Outputs.
	.O  (main_a7ddrphy_dq_i_nodelay31),

	// InOuts.
	.IO (ddram_dq[31])
);

//------------------------------------------------------------------------------
// Memory storage_2: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_2[0:7];
reg [24:0] storage_2_dat0;
always @(posedge sys_clk) begin
	if (main_basesoc_sdram_bankmachine0_wrport_we)
		storage_2[main_basesoc_sdram_bankmachine0_wrport_adr] <= main_basesoc_sdram_bankmachine0_wrport_dat_w;
	storage_2_dat0 <= storage_2[main_basesoc_sdram_bankmachine0_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_basesoc_sdram_bankmachine0_wrport_dat_r = storage_2_dat0;
assign main_basesoc_sdram_bankmachine0_rdport_dat_r = storage_2[main_basesoc_sdram_bankmachine0_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_3: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_3[0:7];
reg [24:0] storage_3_dat0;
always @(posedge sys_clk) begin
	if (main_basesoc_sdram_bankmachine1_wrport_we)
		storage_3[main_basesoc_sdram_bankmachine1_wrport_adr] <= main_basesoc_sdram_bankmachine1_wrport_dat_w;
	storage_3_dat0 <= storage_3[main_basesoc_sdram_bankmachine1_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_basesoc_sdram_bankmachine1_wrport_dat_r = storage_3_dat0;
assign main_basesoc_sdram_bankmachine1_rdport_dat_r = storage_3[main_basesoc_sdram_bankmachine1_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_4: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_4[0:7];
reg [24:0] storage_4_dat0;
always @(posedge sys_clk) begin
	if (main_basesoc_sdram_bankmachine2_wrport_we)
		storage_4[main_basesoc_sdram_bankmachine2_wrport_adr] <= main_basesoc_sdram_bankmachine2_wrport_dat_w;
	storage_4_dat0 <= storage_4[main_basesoc_sdram_bankmachine2_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_basesoc_sdram_bankmachine2_wrport_dat_r = storage_4_dat0;
assign main_basesoc_sdram_bankmachine2_rdport_dat_r = storage_4[main_basesoc_sdram_bankmachine2_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_5: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_5[0:7];
reg [24:0] storage_5_dat0;
always @(posedge sys_clk) begin
	if (main_basesoc_sdram_bankmachine3_wrport_we)
		storage_5[main_basesoc_sdram_bankmachine3_wrport_adr] <= main_basesoc_sdram_bankmachine3_wrport_dat_w;
	storage_5_dat0 <= storage_5[main_basesoc_sdram_bankmachine3_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_basesoc_sdram_bankmachine3_wrport_dat_r = storage_5_dat0;
assign main_basesoc_sdram_bankmachine3_rdport_dat_r = storage_5[main_basesoc_sdram_bankmachine3_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_6: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_6[0:7];
reg [24:0] storage_6_dat0;
always @(posedge sys_clk) begin
	if (main_basesoc_sdram_bankmachine4_wrport_we)
		storage_6[main_basesoc_sdram_bankmachine4_wrport_adr] <= main_basesoc_sdram_bankmachine4_wrport_dat_w;
	storage_6_dat0 <= storage_6[main_basesoc_sdram_bankmachine4_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_basesoc_sdram_bankmachine4_wrport_dat_r = storage_6_dat0;
assign main_basesoc_sdram_bankmachine4_rdport_dat_r = storage_6[main_basesoc_sdram_bankmachine4_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_7: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_7[0:7];
reg [24:0] storage_7_dat0;
always @(posedge sys_clk) begin
	if (main_basesoc_sdram_bankmachine5_wrport_we)
		storage_7[main_basesoc_sdram_bankmachine5_wrport_adr] <= main_basesoc_sdram_bankmachine5_wrport_dat_w;
	storage_7_dat0 <= storage_7[main_basesoc_sdram_bankmachine5_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_basesoc_sdram_bankmachine5_wrport_dat_r = storage_7_dat0;
assign main_basesoc_sdram_bankmachine5_rdport_dat_r = storage_7[main_basesoc_sdram_bankmachine5_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_8: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_8[0:7];
reg [24:0] storage_8_dat0;
always @(posedge sys_clk) begin
	if (main_basesoc_sdram_bankmachine6_wrport_we)
		storage_8[main_basesoc_sdram_bankmachine6_wrport_adr] <= main_basesoc_sdram_bankmachine6_wrport_dat_w;
	storage_8_dat0 <= storage_8[main_basesoc_sdram_bankmachine6_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_basesoc_sdram_bankmachine6_wrport_dat_r = storage_8_dat0;
assign main_basesoc_sdram_bankmachine6_rdport_dat_r = storage_8[main_basesoc_sdram_bankmachine6_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_9: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_9[0:7];
reg [24:0] storage_9_dat0;
always @(posedge sys_clk) begin
	if (main_basesoc_sdram_bankmachine7_wrport_we)
		storage_9[main_basesoc_sdram_bankmachine7_wrport_adr] <= main_basesoc_sdram_bankmachine7_wrport_dat_w;
	storage_9_dat0 <= storage_9[main_basesoc_sdram_bankmachine7_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_basesoc_sdram_bankmachine7_wrport_dat_r = storage_9_dat0;
assign main_basesoc_sdram_bankmachine7_rdport_dat_r = storage_9[main_basesoc_sdram_bankmachine7_rdport_adr];


//------------------------------------------------------------------------------
// Memory tag_mem: 256-words x 23-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 23 
reg [22:0] tag_mem[0:255];
reg [7:0] tag_mem_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_tag_port_we)
		tag_mem[main_basesoc_tag_port_adr] <= main_basesoc_tag_port_dat_w;
	tag_mem_adr0 <= main_basesoc_tag_port_adr;
end
assign main_basesoc_tag_port_dat_r = tag_mem[tag_mem_adr0];


//------------------------------------------------------------------------------
// Instance IBUF of IBUF Module.
//------------------------------------------------------------------------------
IBUF IBUF(
	// Inputs.
	.I (eth_clocks_rx),

	// Outputs.
	.O (main_ethphy_eth_rx_clk_ibuf)
);

//------------------------------------------------------------------------------
// Instance BUFG_4 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_4(
	// Inputs.
	.I (main_ethphy_eth_rx_clk_ibuf),

	// Outputs.
	.O (eth_rx_clk)
);

//------------------------------------------------------------------------------
// Instance BUFG_5 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_5(
	// Inputs.
	.I (main_ethphy_clkout0),

	// Outputs.
	.O (main_ethphy_clkout_buf0)
);

//------------------------------------------------------------------------------
// Instance BUFG_6 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_6(
	// Inputs.
	.I (main_ethphy_clkout1),

	// Outputs.
	.O (main_ethphy_clkout_buf1)
);

//------------------------------------------------------------------------------
// Instance ODDR of ODDR Module.
//------------------------------------------------------------------------------
ODDR #(
	// Parameters.
	.DDR_CLK_EDGE ("SAME_EDGE")
) ODDR (
	// Inputs.
	.C  (eth_tx_delayed_clk),
	.CE (1'd1),
	.D1 (1'd1),
	.D2 (1'd0),
	.R  (1'd0),
	.S  (1'd0),

	// Outputs.
	.Q  (main_ethphy_eth_tx_clk_obuf)
);

//------------------------------------------------------------------------------
// Instance OBUF of OBUF Module.
//------------------------------------------------------------------------------
OBUF OBUF(
	// Inputs.
	.I (main_ethphy_eth_tx_clk_obuf),

	// Outputs.
	.O (eth_clocks_tx)
);

//------------------------------------------------------------------------------
// Instance ODDR_1 of ODDR Module.
//------------------------------------------------------------------------------
ODDR #(
	// Parameters.
	.DDR_CLK_EDGE ("SAME_EDGE")
) ODDR_1 (
	// Inputs.
	.C  (eth_tx_clk),
	.CE (1'd1),
	.D1 (main_ethphy_sink_valid),
	.D2 (main_ethphy_sink_valid),
	.R  (1'd0),
	.S  (1'd0),

	// Outputs.
	.Q  (main_ethphy_tx_ctl_obuf)
);

//------------------------------------------------------------------------------
// Instance OBUF_1 of OBUF Module.
//------------------------------------------------------------------------------
OBUF OBUF_1(
	// Inputs.
	.I (main_ethphy_tx_ctl_obuf),

	// Outputs.
	.O (eth_tx_ctl)
);

//------------------------------------------------------------------------------
// Instance ODDR_2 of ODDR Module.
//------------------------------------------------------------------------------
ODDR #(
	// Parameters.
	.DDR_CLK_EDGE ("SAME_EDGE")
) ODDR_2 (
	// Inputs.
	.C  (eth_tx_clk),
	.CE (1'd1),
	.D1 (main_ethphy_sink_payload_data[0]),
	.D2 (main_ethphy_sink_payload_data[4]),
	.R  (1'd0),
	.S  (1'd0),

	// Outputs.
	.Q  (main_ethphy_tx_data_obuf[0])
);

//------------------------------------------------------------------------------
// Instance OBUF_2 of OBUF Module.
//------------------------------------------------------------------------------
OBUF OBUF_2(
	// Inputs.
	.I (main_ethphy_tx_data_obuf[0]),

	// Outputs.
	.O (eth_tx_data[0])
);

//------------------------------------------------------------------------------
// Instance ODDR_3 of ODDR Module.
//------------------------------------------------------------------------------
ODDR #(
	// Parameters.
	.DDR_CLK_EDGE ("SAME_EDGE")
) ODDR_3 (
	// Inputs.
	.C  (eth_tx_clk),
	.CE (1'd1),
	.D1 (main_ethphy_sink_payload_data[1]),
	.D2 (main_ethphy_sink_payload_data[5]),
	.R  (1'd0),
	.S  (1'd0),

	// Outputs.
	.Q  (main_ethphy_tx_data_obuf[1])
);

//------------------------------------------------------------------------------
// Instance OBUF_3 of OBUF Module.
//------------------------------------------------------------------------------
OBUF OBUF_3(
	// Inputs.
	.I (main_ethphy_tx_data_obuf[1]),

	// Outputs.
	.O (eth_tx_data[1])
);

//------------------------------------------------------------------------------
// Instance ODDR_4 of ODDR Module.
//------------------------------------------------------------------------------
ODDR #(
	// Parameters.
	.DDR_CLK_EDGE ("SAME_EDGE")
) ODDR_4 (
	// Inputs.
	.C  (eth_tx_clk),
	.CE (1'd1),
	.D1 (main_ethphy_sink_payload_data[2]),
	.D2 (main_ethphy_sink_payload_data[6]),
	.R  (1'd0),
	.S  (1'd0),

	// Outputs.
	.Q  (main_ethphy_tx_data_obuf[2])
);

//------------------------------------------------------------------------------
// Instance OBUF_4 of OBUF Module.
//------------------------------------------------------------------------------
OBUF OBUF_4(
	// Inputs.
	.I (main_ethphy_tx_data_obuf[2]),

	// Outputs.
	.O (eth_tx_data[2])
);

//------------------------------------------------------------------------------
// Instance ODDR_5 of ODDR Module.
//------------------------------------------------------------------------------
ODDR #(
	// Parameters.
	.DDR_CLK_EDGE ("SAME_EDGE")
) ODDR_5 (
	// Inputs.
	.C  (eth_tx_clk),
	.CE (1'd1),
	.D1 (main_ethphy_sink_payload_data[3]),
	.D2 (main_ethphy_sink_payload_data[7]),
	.R  (1'd0),
	.S  (1'd0),

	// Outputs.
	.Q  (main_ethphy_tx_data_obuf[3])
);

//------------------------------------------------------------------------------
// Instance OBUF_5 of OBUF Module.
//------------------------------------------------------------------------------
OBUF OBUF_5(
	// Inputs.
	.I (main_ethphy_tx_data_obuf[3]),

	// Outputs.
	.O (eth_tx_data[3])
);

//------------------------------------------------------------------------------
// Instance IBUF_1 of IBUF Module.
//------------------------------------------------------------------------------
IBUF IBUF_1(
	// Inputs.
	.I (eth_rx_ctl),

	// Outputs.
	.O (main_ethphy_liteethphyrgmiirx_rx_ctl_ibuf)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_32 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.IDELAY_TYPE      ("FIXED"),
	.IDELAY_VALUE     (5'd26),
	.REFCLK_FREQUENCY (200.0)
) IDELAYE2_32 (
	// Inputs.
	.C        (1'd0),
	.CE       (1'd0),
	.IDATAIN  (main_ethphy_liteethphyrgmiirx_rx_ctl_ibuf),
	.INC      (1'd0),
	.LD       (1'd0),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_ethphy_liteethphyrgmiirx_rx_ctl_idelay)
);

//------------------------------------------------------------------------------
// Instance IDDR of IDDR Module.
//------------------------------------------------------------------------------
IDDR #(
	// Parameters.
	.DDR_CLK_EDGE ("SAME_EDGE_PIPELINED")
) IDDR (
	// Inputs.
	.C  (eth_rx_clk),
	.CE (1'd1),
	.D  (main_ethphy_liteethphyrgmiirx_rx_ctl_idelay),
	.R  (1'd0),
	.S  (1'd0),

	// Outputs.
	.Q1 (main_ethphy_liteethphyrgmiirx_rx_ctl),
	.Q2 (main_ethphy_liteethphyrgmiirx)
);

//------------------------------------------------------------------------------
// Instance IBUF_2 of IBUF Module.
//------------------------------------------------------------------------------
IBUF IBUF_2(
	// Inputs.
	.I (eth_rx_data[0]),

	// Outputs.
	.O (main_ethphy_liteethphyrgmiirx_rx_data_ibuf[0])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_33 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.IDELAY_TYPE      ("FIXED"),
	.IDELAY_VALUE     (5'd26),
	.REFCLK_FREQUENCY (200.0)
) IDELAYE2_33 (
	// Inputs.
	.C        (1'd0),
	.CE       (1'd0),
	.IDATAIN  (main_ethphy_liteethphyrgmiirx_rx_data_ibuf[0]),
	.INC      (1'd0),
	.LD       (1'd0),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_ethphy_liteethphyrgmiirx_rx_data_idelay[0])
);

//------------------------------------------------------------------------------
// Instance IDDR_1 of IDDR Module.
//------------------------------------------------------------------------------
IDDR #(
	// Parameters.
	.DDR_CLK_EDGE ("SAME_EDGE_PIPELINED")
) IDDR_1 (
	// Inputs.
	.C  (eth_rx_clk),
	.CE (1'd1),
	.D  (main_ethphy_liteethphyrgmiirx_rx_data_idelay[0]),
	.R  (1'd0),
	.S  (1'd0),

	// Outputs.
	.Q1 (main_ethphy_liteethphyrgmiirx_rx_data[0]),
	.Q2 (main_ethphy_liteethphyrgmiirx_rx_data[4])
);

//------------------------------------------------------------------------------
// Instance IBUF_3 of IBUF Module.
//------------------------------------------------------------------------------
IBUF IBUF_3(
	// Inputs.
	.I (eth_rx_data[1]),

	// Outputs.
	.O (main_ethphy_liteethphyrgmiirx_rx_data_ibuf[1])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_34 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.IDELAY_TYPE      ("FIXED"),
	.IDELAY_VALUE     (5'd26),
	.REFCLK_FREQUENCY (200.0)
) IDELAYE2_34 (
	// Inputs.
	.C        (1'd0),
	.CE       (1'd0),
	.IDATAIN  (main_ethphy_liteethphyrgmiirx_rx_data_ibuf[1]),
	.INC      (1'd0),
	.LD       (1'd0),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_ethphy_liteethphyrgmiirx_rx_data_idelay[1])
);

//------------------------------------------------------------------------------
// Instance IDDR_2 of IDDR Module.
//------------------------------------------------------------------------------
IDDR #(
	// Parameters.
	.DDR_CLK_EDGE ("SAME_EDGE_PIPELINED")
) IDDR_2 (
	// Inputs.
	.C  (eth_rx_clk),
	.CE (1'd1),
	.D  (main_ethphy_liteethphyrgmiirx_rx_data_idelay[1]),
	.R  (1'd0),
	.S  (1'd0),

	// Outputs.
	.Q1 (main_ethphy_liteethphyrgmiirx_rx_data[1]),
	.Q2 (main_ethphy_liteethphyrgmiirx_rx_data[5])
);

//------------------------------------------------------------------------------
// Instance IBUF_4 of IBUF Module.
//------------------------------------------------------------------------------
IBUF IBUF_4(
	// Inputs.
	.I (eth_rx_data[2]),

	// Outputs.
	.O (main_ethphy_liteethphyrgmiirx_rx_data_ibuf[2])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_35 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.IDELAY_TYPE      ("FIXED"),
	.IDELAY_VALUE     (5'd26),
	.REFCLK_FREQUENCY (200.0)
) IDELAYE2_35 (
	// Inputs.
	.C        (1'd0),
	.CE       (1'd0),
	.IDATAIN  (main_ethphy_liteethphyrgmiirx_rx_data_ibuf[2]),
	.INC      (1'd0),
	.LD       (1'd0),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_ethphy_liteethphyrgmiirx_rx_data_idelay[2])
);

//------------------------------------------------------------------------------
// Instance IDDR_3 of IDDR Module.
//------------------------------------------------------------------------------
IDDR #(
	// Parameters.
	.DDR_CLK_EDGE ("SAME_EDGE_PIPELINED")
) IDDR_3 (
	// Inputs.
	.C  (eth_rx_clk),
	.CE (1'd1),
	.D  (main_ethphy_liteethphyrgmiirx_rx_data_idelay[2]),
	.R  (1'd0),
	.S  (1'd0),

	// Outputs.
	.Q1 (main_ethphy_liteethphyrgmiirx_rx_data[2]),
	.Q2 (main_ethphy_liteethphyrgmiirx_rx_data[6])
);

//------------------------------------------------------------------------------
// Instance IBUF_5 of IBUF Module.
//------------------------------------------------------------------------------
IBUF IBUF_5(
	// Inputs.
	.I (eth_rx_data[3]),

	// Outputs.
	.O (main_ethphy_liteethphyrgmiirx_rx_data_ibuf[3])
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_36 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.IDELAY_TYPE      ("FIXED"),
	.IDELAY_VALUE     (5'd26),
	.REFCLK_FREQUENCY (200.0)
) IDELAYE2_36 (
	// Inputs.
	.C        (1'd0),
	.CE       (1'd0),
	.IDATAIN  (main_ethphy_liteethphyrgmiirx_rx_data_ibuf[3]),
	.INC      (1'd0),
	.LD       (1'd0),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_ethphy_liteethphyrgmiirx_rx_data_idelay[3])
);

//------------------------------------------------------------------------------
// Instance IDDR_4 of IDDR Module.
//------------------------------------------------------------------------------
IDDR #(
	// Parameters.
	.DDR_CLK_EDGE ("SAME_EDGE_PIPELINED")
) IDDR_4 (
	// Inputs.
	.C  (eth_rx_clk),
	.CE (1'd1),
	.D  (main_ethphy_liteethphyrgmiirx_rx_data_idelay[3]),
	.R  (1'd0),
	.S  (1'd0),

	// Outputs.
	.Q1 (main_ethphy_liteethphyrgmiirx_rx_data[3]),
	.Q2 (main_ethphy_liteethphyrgmiirx_rx_data[7])
);

assign eth_mdio = main_ethphy_data_oe ? main_ethphy_data_w : 1'bz;
assign main_ethphy_data_r = eth_mdio;

//------------------------------------------------------------------------------
// Memory storage_10: 32-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Sync  | Write: ---- | 
reg [11:0] storage_10[0:31];
reg [11:0] storage_10_dat0;
reg [11:0] storage_10_dat1;
always @(posedge eth_rx_clk) begin
	if (main_basesoc_ethcore_mac_core_tx_cdc_cdc_wrport_we)
		storage_10[main_basesoc_ethcore_mac_core_tx_cdc_cdc_wrport_adr] <= main_basesoc_ethcore_mac_core_tx_cdc_cdc_wrport_dat_w;
	storage_10_dat0 <= storage_10[main_basesoc_ethcore_mac_core_tx_cdc_cdc_wrport_adr];
end
always @(posedge eth_tx_clk) begin
	storage_10_dat1 <= storage_10[main_basesoc_ethcore_mac_core_tx_cdc_cdc_rdport_adr];
end
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_wrport_dat_r = storage_10_dat0;
assign main_basesoc_ethcore_mac_core_tx_cdc_cdc_rdport_dat_r = storage_10_dat1;


//------------------------------------------------------------------------------
// Memory storage_11: 5-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Async | Write: ---- | 
reg [11:0] storage_11[0:4];
reg [11:0] storage_11_dat0;
always @(posedge eth_rx_clk) begin
	if (main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_wrport_we)
		storage_11[main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_wrport_adr] <= main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_wrport_dat_w;
	storage_11_dat0 <= storage_11[main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_wrport_adr];
end
always @(posedge eth_rx_clk) begin
end
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_wrport_dat_r = storage_11_dat0;
assign main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_rdport_dat_r = storage_11[main_basesoc_ethcore_mac_core_liteethmaccrc32checker_syncfifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_12: 32-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 12 
// Port 1 | Read: Sync  | Write: ---- | 
reg [11:0] storage_12[0:31];
reg [4:0] storage_12_adr0;
reg [4:0] storage_12_adr1;
always @(posedge eth_rx_clk) begin
	if (main_basesoc_ethcore_mac_core_cdc_wrport_we)
		storage_12[main_basesoc_ethcore_mac_core_cdc_wrport_adr] <= main_basesoc_ethcore_mac_core_cdc_wrport_dat_w;
	storage_12_adr0 <= main_basesoc_ethcore_mac_core_cdc_wrport_adr;
end
always @(posedge eth_rx_clk) begin
	storage_12_adr1 <= main_basesoc_ethcore_mac_core_cdc_rdport_adr;
end
assign main_basesoc_ethcore_mac_core_cdc_wrport_dat_r = storage_12[storage_12_adr0];
assign main_basesoc_ethcore_mac_core_cdc_rdport_dat_r = storage_12[storage_12_adr1];


//------------------------------------------------------------------------------
// Memory mem_1: 2-words x 81-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 81 
// Port 1 | Read: Async | Write: ---- | 
reg [80:0] mem_1[0:1];
reg [0:0] mem_1_adr0;
always @(posedge eth_rx_clk) begin
	if (main_basesoc_ethcore_arp_table_cache_mem_wr_port_we)
		mem_1[main_basesoc_ethcore_arp_table_cache_mem_wr_port_adr] <= main_basesoc_ethcore_arp_table_cache_mem_wr_port_dat_w;
	mem_1_adr0 <= main_basesoc_ethcore_arp_table_cache_mem_wr_port_adr;
end
always @(posedge eth_rx_clk) begin
end
assign main_basesoc_ethcore_arp_table_cache_mem_wr_port_dat_r = mem_1[mem_1_adr0];
assign main_basesoc_ethcore_arp_table_cache_mem_rd_port_dat_r = mem_1[main_basesoc_ethcore_arp_table_cache_mem_rd_port_adr];


//------------------------------------------------------------------------------
// Memory storage_13: 128-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Sync  | Write: ---- | 
reg [11:0] storage_13[0:127];
reg [11:0] storage_13_dat0;
reg [11:0] storage_13_dat1;
always @(posedge eth_rx_clk) begin
	if (main_basesoc_ethcore_icmp_echo_payload_fifo_wrport_we)
		storage_13[main_basesoc_ethcore_icmp_echo_payload_fifo_wrport_adr] <= main_basesoc_ethcore_icmp_echo_payload_fifo_wrport_dat_w;
	storage_13_dat0 <= storage_13[main_basesoc_ethcore_icmp_echo_payload_fifo_wrport_adr];
end
always @(posedge eth_rx_clk) begin
	if (main_basesoc_ethcore_icmp_echo_payload_fifo_rdport_re)
		storage_13_dat1 <= storage_13[main_basesoc_ethcore_icmp_echo_payload_fifo_rdport_adr];
end
assign main_basesoc_ethcore_icmp_echo_payload_fifo_wrport_dat_r = storage_13_dat0;
assign main_basesoc_ethcore_icmp_echo_payload_fifo_rdport_dat_r = storage_13_dat1;


//------------------------------------------------------------------------------
// Memory storage_14: 2-words x 114-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 114 
// Port 1 | Read: Sync  | Write: ---- | 
reg [113:0] storage_14[0:1];
reg [113:0] storage_14_dat0;
reg [113:0] storage_14_dat1;
always @(posedge eth_rx_clk) begin
	if (main_basesoc_ethcore_icmp_echo_param_fifo_wrport_we)
		storage_14[main_basesoc_ethcore_icmp_echo_param_fifo_wrport_adr] <= main_basesoc_ethcore_icmp_echo_param_fifo_wrport_dat_w;
	storage_14_dat0 <= storage_14[main_basesoc_ethcore_icmp_echo_param_fifo_wrport_adr];
end
always @(posedge eth_rx_clk) begin
	if (main_basesoc_ethcore_icmp_echo_param_fifo_rdport_re)
		storage_14_dat1 <= storage_14[main_basesoc_ethcore_icmp_echo_param_fifo_rdport_adr];
end
assign main_basesoc_ethcore_icmp_echo_param_fifo_wrport_dat_r = storage_14_dat0;
assign main_basesoc_ethcore_icmp_echo_param_fifo_rdport_dat_r = storage_14_dat1;


//------------------------------------------------------------------------------
// Memory storage_15: 4-words x 122-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 122 
// Port 1 | Read: Sync  | Write: ---- | 
reg [121:0] storage_15[0:3];
reg [121:0] storage_15_dat0;
reg [121:0] storage_15_dat1;
always @(posedge etherbone_clk) begin
	if (main_basesoc_etherbone_tx_cdc_cdc_wrport_we)
		storage_15[main_basesoc_etherbone_tx_cdc_cdc_wrport_adr] <= main_basesoc_etherbone_tx_cdc_cdc_wrport_dat_w;
	storage_15_dat0 <= storage_15[main_basesoc_etherbone_tx_cdc_cdc_wrport_adr];
end
always @(posedge eth_rx_clk) begin
	storage_15_dat1 <= storage_15[main_basesoc_etherbone_tx_cdc_cdc_rdport_adr];
end
assign main_basesoc_etherbone_tx_cdc_cdc_wrport_dat_r = storage_15_dat0;
assign main_basesoc_etherbone_tx_cdc_cdc_rdport_dat_r = storage_15_dat1;


//------------------------------------------------------------------------------
// Memory storage_16: 4-words x 122-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 122 
// Port 1 | Read: Sync  | Write: ---- | 
reg [121:0] storage_16[0:3];
reg [121:0] storage_16_dat0;
reg [121:0] storage_16_dat1;
always @(posedge eth_rx_clk) begin
	if (main_basesoc_etherbone_rx_cdc_cdc_wrport_we)
		storage_16[main_basesoc_etherbone_rx_cdc_cdc_wrport_adr] <= main_basesoc_etherbone_rx_cdc_cdc_wrport_dat_w;
	storage_16_dat0 <= storage_16[main_basesoc_etherbone_rx_cdc_cdc_wrport_adr];
end
always @(posedge etherbone_clk) begin
	storage_16_dat1 <= storage_16[main_basesoc_etherbone_rx_cdc_cdc_rdport_adr];
end
assign main_basesoc_etherbone_rx_cdc_cdc_wrport_dat_r = storage_16_dat0;
assign main_basesoc_etherbone_rx_cdc_cdc_rdport_dat_r = storage_16_dat1;


//------------------------------------------------------------------------------
// Memory storage_17: 2-words x 93-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 93 
// Port 1 | Read: Async | Write: ---- | 
reg [92:0] storage_17[0:1];
reg [92:0] storage_17_dat0;
always @(posedge sys_clk) begin
	if (main_basesoc_etherbone_probe_param_fifo_wrport_we)
		storage_17[main_basesoc_etherbone_probe_param_fifo_wrport_adr] <= main_basesoc_etherbone_probe_param_fifo_wrport_dat_w;
	storage_17_dat0 <= storage_17[main_basesoc_etherbone_probe_param_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_basesoc_etherbone_probe_param_fifo_wrport_dat_r = storage_17_dat0;
assign main_basesoc_etherbone_probe_param_fifo_rdport_dat_r = storage_17[main_basesoc_etherbone_probe_param_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_18: 16-words x 42-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 42 
// Port 1 | Read: Sync  | Write: ---- | 
reg [41:0] storage_18[0:15];
reg [41:0] storage_18_dat0;
reg [41:0] storage_18_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_etherbone_record_receiver_payload_fifo_wrport_we)
		storage_18[main_basesoc_etherbone_record_receiver_payload_fifo_wrport_adr] <= main_basesoc_etherbone_record_receiver_payload_fifo_wrport_dat_w;
	storage_18_dat0 <= storage_18[main_basesoc_etherbone_record_receiver_payload_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_etherbone_record_receiver_payload_fifo_rdport_re)
		storage_18_dat1 <= storage_18[main_basesoc_etherbone_record_receiver_payload_fifo_rdport_adr];
end
assign main_basesoc_etherbone_record_receiver_payload_fifo_wrport_dat_r = storage_18_dat0;
assign main_basesoc_etherbone_record_receiver_payload_fifo_rdport_dat_r = storage_18_dat1;


//------------------------------------------------------------------------------
// Memory storage_19: 2-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 32 
// Port 1 | Read: Sync  | Write: ---- | 
reg [31:0] storage_19[0:1];
reg [31:0] storage_19_dat0;
reg [31:0] storage_19_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_etherbone_record_receiver_param_fifo_wrport_we)
		storage_19[main_basesoc_etherbone_record_receiver_param_fifo_wrport_adr] <= main_basesoc_etherbone_record_receiver_param_fifo_wrport_dat_w;
	storage_19_dat0 <= storage_19[main_basesoc_etherbone_record_receiver_param_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_etherbone_record_receiver_param_fifo_rdport_re)
		storage_19_dat1 <= storage_19[main_basesoc_etherbone_record_receiver_param_fifo_rdport_adr];
end
assign main_basesoc_etherbone_record_receiver_param_fifo_wrport_dat_r = storage_19_dat0;
assign main_basesoc_etherbone_record_receiver_param_fifo_rdport_dat_r = storage_19_dat1;


//------------------------------------------------------------------------------
// Memory storage_20: 16-words x 70-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 70 
// Port 1 | Read: Sync  | Write: ---- | 
reg [69:0] storage_20[0:15];
reg [69:0] storage_20_dat0;
reg [69:0] storage_20_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_etherbone_record_sender_payload_fifo_wrport_we)
		storage_20[main_basesoc_etherbone_record_sender_payload_fifo_wrport_adr] <= main_basesoc_etherbone_record_sender_payload_fifo_wrport_dat_w;
	storage_20_dat0 <= storage_20[main_basesoc_etherbone_record_sender_payload_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_etherbone_record_sender_payload_fifo_rdport_re)
		storage_20_dat1 <= storage_20[main_basesoc_etherbone_record_sender_payload_fifo_rdport_adr];
end
assign main_basesoc_etherbone_record_sender_payload_fifo_wrport_dat_r = storage_20_dat0;
assign main_basesoc_etherbone_record_sender_payload_fifo_rdport_dat_r = storage_20_dat1;


//------------------------------------------------------------------------------
// Memory storage_21: 2-words x 47-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 47 
// Port 1 | Read: Sync  | Write: ---- | 
reg [46:0] storage_21[0:1];
reg [46:0] storage_21_dat0;
reg [46:0] storage_21_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_etherbone_record_sender_param_fifo_wrport_we)
		storage_21[main_basesoc_etherbone_record_sender_param_fifo_wrport_adr] <= main_basesoc_etherbone_record_sender_param_fifo_wrport_dat_w;
	storage_21_dat0 <= storage_21[main_basesoc_etherbone_record_sender_param_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_etherbone_record_sender_param_fifo_rdport_re)
		storage_21_dat1 <= storage_21[main_basesoc_etherbone_record_sender_param_fifo_rdport_adr];
end
assign main_basesoc_etherbone_record_sender_param_fifo_wrport_dat_r = storage_21_dat0;
assign main_basesoc_etherbone_record_sender_param_fifo_rdport_dat_r = storage_21_dat1;


//------------------------------------------------------------------------------
// Instance cordic_dac of cordic_dac Module.
//------------------------------------------------------------------------------
cordic_dac cordic_dac(
	// Inputs.
	.phase_inc (main_phase_inc_storage),
	.rst_n     (sys_rst),
	.sys_clk   (sys_clk),

	// Outputs.
	.da1_clk   (da1_clk),
	.da1_data  (da1_data),
	.da1_wrt   (da1_wrt),
	.da2_clk   (da2_clk),
	.da2_data  (da2_data),
	.da2_wrt   (da2_wrt)
);

//------------------------------------------------------------------------------
// Instance FDCE of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (main_crg_reset),

	// Outputs.
	.Q   (builder_crg_reset0)
);

//------------------------------------------------------------------------------
// Instance FDCE_1 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_1(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_crg_reset0),

	// Outputs.
	.Q   (builder_crg_reset1)
);

//------------------------------------------------------------------------------
// Instance FDCE_2 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_2(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_crg_reset1),

	// Outputs.
	.Q   (builder_crg_reset2)
);

//------------------------------------------------------------------------------
// Instance FDCE_3 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_3(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_crg_reset2),

	// Outputs.
	.Q   (builder_crg_reset3)
);

//------------------------------------------------------------------------------
// Instance FDCE_4 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_4(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_crg_reset3),

	// Outputs.
	.Q   (builder_crg_reset4)
);

//------------------------------------------------------------------------------
// Instance FDCE_5 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_5(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_crg_reset4),

	// Outputs.
	.Q   (builder_crg_reset5)
);

//------------------------------------------------------------------------------
// Instance FDCE_6 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_6(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_crg_reset5),

	// Outputs.
	.Q   (builder_crg_reset6)
);

//------------------------------------------------------------------------------
// Instance FDCE_7 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_7(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_crg_reset6),

	// Outputs.
	.Q   (builder_crg_reset7)
);

//------------------------------------------------------------------------------
// Instance PLLE2_ADV of PLLE2_ADV Module.
//------------------------------------------------------------------------------
PLLE2_ADV #(
	// Parameters.
	.CLKFBOUT_MULT  (4'd9),
	.CLKIN1_PERIOD  (5.0),
	.CLKOUT0_DIVIDE (6'd36),
	.CLKOUT0_PHASE  (1'd0),
	.CLKOUT1_DIVIDE (4'd9),
	.CLKOUT1_PHASE  (1'd0),
	.CLKOUT2_DIVIDE (4'd9),
	.CLKOUT2_PHASE  (7'd90),
	.CLKOUT3_DIVIDE (4'd9),
	.CLKOUT3_PHASE  (1'd0),
	.DIVCLK_DIVIDE  (1'd1),
	.REF_JITTER1    (0.01),
	.STARTUP_WAIT   ("FALSE")
) PLLE2_ADV (
	// Inputs.
	.CLKFBIN  (builder_crg_pll_fb),
	.CLKIN1   (main_crg_clkin),
	.PWRDWN   (main_crg_power_down),
	.RST      (builder_crg_reset7),

	// Outputs.
	.CLKFBOUT (builder_crg_pll_fb),
	.CLKOUT0  (main_crg_clkout0),
	.CLKOUT1  (main_crg_clkout1),
	.CLKOUT2  (main_crg_clkout2),
	.CLKOUT3  (main_crg_clkout3),
	.LOCKED   (main_crg_locked)
);

//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk),
	.dBusWishbone_ACK       (main_basesoc_basesoc_dbus_ack),
	.dBusWishbone_DAT_MISO  (main_basesoc_basesoc_dbus_dat_r),
	.dBusWishbone_ERR       (main_basesoc_basesoc_dbus_err),
	.externalInterruptArray (main_basesoc_basesoc_interrupt),
	.externalResetVector    (main_basesoc_basesoc_vexriscv),
	.iBusWishbone_ACK       (main_basesoc_basesoc_ibus_ack),
	.iBusWishbone_DAT_MISO  (main_basesoc_basesoc_ibus_dat_r),
	.iBusWishbone_ERR       (main_basesoc_basesoc_ibus_err),
	.reset                  ((sys_rst | main_basesoc_basesoc_reset)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (main_basesoc_basesoc_dbus_adr),
	.dBusWishbone_BTE       (main_basesoc_basesoc_dbus_bte),
	.dBusWishbone_CTI       (main_basesoc_basesoc_dbus_cti),
	.dBusWishbone_CYC       (main_basesoc_basesoc_dbus_cyc),
	.dBusWishbone_DAT_MOSI  (main_basesoc_basesoc_dbus_dat_w),
	.dBusWishbone_SEL       (main_basesoc_basesoc_dbus_sel),
	.dBusWishbone_STB       (main_basesoc_basesoc_dbus_stb),
	.dBusWishbone_WE        (main_basesoc_basesoc_dbus_we),
	.iBusWishbone_ADR       (main_basesoc_basesoc_ibus_adr),
	.iBusWishbone_BTE       (main_basesoc_basesoc_ibus_bte),
	.iBusWishbone_CTI       (main_basesoc_basesoc_ibus_cti),
	.iBusWishbone_CYC       (main_basesoc_basesoc_ibus_cyc),
	.iBusWishbone_DAT_MOSI  (main_basesoc_basesoc_ibus_dat_w),
	.iBusWishbone_SEL       (main_basesoc_basesoc_ibus_sel),
	.iBusWishbone_STB       (main_basesoc_basesoc_ibus_stb),
	.iBusWishbone_WE        (main_basesoc_basesoc_ibus_we)
);

//------------------------------------------------------------------------------
// Memory data_mem_grain0: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain0[0:255];
reg [7:0] data_mem_grain0_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[0])
		data_mem_grain0[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[7:0];
	data_mem_grain0_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[7:0] = data_mem_grain0[data_mem_grain0_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain1: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain1[0:255];
reg [7:0] data_mem_grain1_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[1])
		data_mem_grain1[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[15:8];
	data_mem_grain1_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[15:8] = data_mem_grain1[data_mem_grain1_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain2: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain2[0:255];
reg [7:0] data_mem_grain2_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[2])
		data_mem_grain2[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[23:16];
	data_mem_grain2_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[23:16] = data_mem_grain2[data_mem_grain2_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain3: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain3[0:255];
reg [7:0] data_mem_grain3_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[3])
		data_mem_grain3[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[31:24];
	data_mem_grain3_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[31:24] = data_mem_grain3[data_mem_grain3_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain4: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain4[0:255];
reg [7:0] data_mem_grain4_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[4])
		data_mem_grain4[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[39:32];
	data_mem_grain4_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[39:32] = data_mem_grain4[data_mem_grain4_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain5: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain5[0:255];
reg [7:0] data_mem_grain5_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[5])
		data_mem_grain5[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[47:40];
	data_mem_grain5_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[47:40] = data_mem_grain5[data_mem_grain5_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain6: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain6[0:255];
reg [7:0] data_mem_grain6_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[6])
		data_mem_grain6[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[55:48];
	data_mem_grain6_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[55:48] = data_mem_grain6[data_mem_grain6_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain7: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain7[0:255];
reg [7:0] data_mem_grain7_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[7])
		data_mem_grain7[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[63:56];
	data_mem_grain7_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[63:56] = data_mem_grain7[data_mem_grain7_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain8: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain8[0:255];
reg [7:0] data_mem_grain8_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[8])
		data_mem_grain8[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[71:64];
	data_mem_grain8_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[71:64] = data_mem_grain8[data_mem_grain8_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain9: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain9[0:255];
reg [7:0] data_mem_grain9_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[9])
		data_mem_grain9[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[79:72];
	data_mem_grain9_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[79:72] = data_mem_grain9[data_mem_grain9_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain10: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain10[0:255];
reg [7:0] data_mem_grain10_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[10])
		data_mem_grain10[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[87:80];
	data_mem_grain10_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[87:80] = data_mem_grain10[data_mem_grain10_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain11: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain11[0:255];
reg [7:0] data_mem_grain11_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[11])
		data_mem_grain11[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[95:88];
	data_mem_grain11_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[95:88] = data_mem_grain11[data_mem_grain11_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain12: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain12[0:255];
reg [7:0] data_mem_grain12_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[12])
		data_mem_grain12[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[103:96];
	data_mem_grain12_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[103:96] = data_mem_grain12[data_mem_grain12_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain13: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain13[0:255];
reg [7:0] data_mem_grain13_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[13])
		data_mem_grain13[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[111:104];
	data_mem_grain13_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[111:104] = data_mem_grain13[data_mem_grain13_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain14: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain14[0:255];
reg [7:0] data_mem_grain14_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[14])
		data_mem_grain14[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[119:112];
	data_mem_grain14_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[119:112] = data_mem_grain14[data_mem_grain14_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain15: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain15[0:255];
reg [7:0] data_mem_grain15_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[15])
		data_mem_grain15[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[127:120];
	data_mem_grain15_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[127:120] = data_mem_grain15[data_mem_grain15_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain16: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain16[0:255];
reg [7:0] data_mem_grain16_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[16])
		data_mem_grain16[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[135:128];
	data_mem_grain16_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[135:128] = data_mem_grain16[data_mem_grain16_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain17: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain17[0:255];
reg [7:0] data_mem_grain17_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[17])
		data_mem_grain17[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[143:136];
	data_mem_grain17_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[143:136] = data_mem_grain17[data_mem_grain17_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain18: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain18[0:255];
reg [7:0] data_mem_grain18_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[18])
		data_mem_grain18[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[151:144];
	data_mem_grain18_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[151:144] = data_mem_grain18[data_mem_grain18_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain19: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain19[0:255];
reg [7:0] data_mem_grain19_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[19])
		data_mem_grain19[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[159:152];
	data_mem_grain19_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[159:152] = data_mem_grain19[data_mem_grain19_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain20: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain20[0:255];
reg [7:0] data_mem_grain20_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[20])
		data_mem_grain20[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[167:160];
	data_mem_grain20_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[167:160] = data_mem_grain20[data_mem_grain20_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain21: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain21[0:255];
reg [7:0] data_mem_grain21_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[21])
		data_mem_grain21[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[175:168];
	data_mem_grain21_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[175:168] = data_mem_grain21[data_mem_grain21_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain22: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain22[0:255];
reg [7:0] data_mem_grain22_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[22])
		data_mem_grain22[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[183:176];
	data_mem_grain22_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[183:176] = data_mem_grain22[data_mem_grain22_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain23: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain23[0:255];
reg [7:0] data_mem_grain23_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[23])
		data_mem_grain23[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[191:184];
	data_mem_grain23_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[191:184] = data_mem_grain23[data_mem_grain23_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain24: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain24[0:255];
reg [7:0] data_mem_grain24_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[24])
		data_mem_grain24[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[199:192];
	data_mem_grain24_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[199:192] = data_mem_grain24[data_mem_grain24_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain25: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain25[0:255];
reg [7:0] data_mem_grain25_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[25])
		data_mem_grain25[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[207:200];
	data_mem_grain25_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[207:200] = data_mem_grain25[data_mem_grain25_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain26: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain26[0:255];
reg [7:0] data_mem_grain26_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[26])
		data_mem_grain26[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[215:208];
	data_mem_grain26_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[215:208] = data_mem_grain26[data_mem_grain26_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain27: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain27[0:255];
reg [7:0] data_mem_grain27_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[27])
		data_mem_grain27[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[223:216];
	data_mem_grain27_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[223:216] = data_mem_grain27[data_mem_grain27_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain28: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain28[0:255];
reg [7:0] data_mem_grain28_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[28])
		data_mem_grain28[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[231:224];
	data_mem_grain28_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[231:224] = data_mem_grain28[data_mem_grain28_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain29: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain29[0:255];
reg [7:0] data_mem_grain29_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[29])
		data_mem_grain29[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[239:232];
	data_mem_grain29_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[239:232] = data_mem_grain29[data_mem_grain29_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain30: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain30[0:255];
reg [7:0] data_mem_grain30_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[30])
		data_mem_grain30[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[247:240];
	data_mem_grain30_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[247:240] = data_mem_grain30[data_mem_grain30_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain31: 256-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain31[0:255];
reg [7:0] data_mem_grain31_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_data_port_we[31])
		data_mem_grain31[main_basesoc_data_port_adr] <= main_basesoc_data_port_dat_w[255:248];
	data_mem_grain31_adr0 <= main_basesoc_data_port_adr;
end
assign main_basesoc_data_port_dat_r[255:248] = data_mem_grain31[data_mem_grain31_adr0];


//------------------------------------------------------------------------------
// Instance FDCE_8 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_8(
	// Inputs.
	.C   (main_ethphy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (main_ethphy_pll_reset),

	// Outputs.
	.Q   (builder_liteethphyrgmii_reset0)
);

//------------------------------------------------------------------------------
// Instance FDCE_9 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_9(
	// Inputs.
	.C   (main_ethphy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_liteethphyrgmii_reset0),

	// Outputs.
	.Q   (builder_liteethphyrgmii_reset1)
);

//------------------------------------------------------------------------------
// Instance FDCE_10 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_10(
	// Inputs.
	.C   (main_ethphy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_liteethphyrgmii_reset1),

	// Outputs.
	.Q   (builder_liteethphyrgmii_reset2)
);

//------------------------------------------------------------------------------
// Instance FDCE_11 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_11(
	// Inputs.
	.C   (main_ethphy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_liteethphyrgmii_reset2),

	// Outputs.
	.Q   (builder_liteethphyrgmii_reset3)
);

//------------------------------------------------------------------------------
// Instance FDCE_12 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_12(
	// Inputs.
	.C   (main_ethphy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_liteethphyrgmii_reset3),

	// Outputs.
	.Q   (builder_liteethphyrgmii_reset4)
);

//------------------------------------------------------------------------------
// Instance FDCE_13 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_13(
	// Inputs.
	.C   (main_ethphy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_liteethphyrgmii_reset4),

	// Outputs.
	.Q   (builder_liteethphyrgmii_reset5)
);

//------------------------------------------------------------------------------
// Instance FDCE_14 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_14(
	// Inputs.
	.C   (main_ethphy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_liteethphyrgmii_reset5),

	// Outputs.
	.Q   (builder_liteethphyrgmii_reset6)
);

//------------------------------------------------------------------------------
// Instance FDCE_15 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_15(
	// Inputs.
	.C   (main_ethphy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_liteethphyrgmii_reset6),

	// Outputs.
	.Q   (builder_liteethphyrgmii_reset7)
);

//------------------------------------------------------------------------------
// Instance PLLE2_ADV_1 of PLLE2_ADV Module.
//------------------------------------------------------------------------------
PLLE2_ADV #(
	// Parameters.
	.CLKFBOUT_MULT  (4'd12),
	.CLKIN1_PERIOD  (8.0),
	.CLKOUT0_DIVIDE (4'd12),
	.CLKOUT0_PHASE  (1'd0),
	.CLKOUT1_DIVIDE (4'd12),
	.CLKOUT1_PHASE  (90.0),
	.DIVCLK_DIVIDE  (1'd1),
	.REF_JITTER1    (0.01),
	.STARTUP_WAIT   ("FALSE")
) PLLE2_ADV_1 (
	// Inputs.
	.CLKFBIN  (builder_liteethphyrgmii_pll_fb),
	.CLKIN1   (main_ethphy_clkin),
	.PWRDWN   (main_ethphy_pll_power_down),
	.RST      (builder_liteethphyrgmii_reset7),

	// Outputs.
	.CLKFBOUT (builder_liteethphyrgmii_pll_fb),
	.CLKOUT0  (main_ethphy_clkout0),
	.CLKOUT1  (main_ethphy_clkout1),
	.LOCKED   (main_ethphy_pll_locked)
);

//------------------------------------------------------------------------------
// Instance IBUFDS of IBUFDS Module.
//------------------------------------------------------------------------------
IBUFDS IBUFDS(
	// Inputs.
	.I  (clk200_p),
	.IB (clk200_n),

	// Outputs.
	.O  (main_crg_clkin)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE (
	// Inputs.
	.C   (sys_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (builder_xilinxasyncresetsynchronizerimpl0),

	// Outputs.
	.Q   (builder_xilinxasyncresetsynchronizerimpl0_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_1 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_1 (
	// Inputs.
	.C   (sys_clk),
	.CE  (1'd1),
	.D   (builder_xilinxasyncresetsynchronizerimpl0_rst_meta),
	.PRE (builder_xilinxasyncresetsynchronizerimpl0),

	// Outputs.
	.Q   (sys_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_2 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_2 (
	// Inputs.
	.C   (sys4x_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (builder_xilinxasyncresetsynchronizerimpl1),

	// Outputs.
	.Q   (builder_xilinxasyncresetsynchronizerimpl1_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_3 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_3 (
	// Inputs.
	.C   (sys4x_clk),
	.CE  (1'd1),
	.D   (builder_xilinxasyncresetsynchronizerimpl1_rst_meta),
	.PRE (builder_xilinxasyncresetsynchronizerimpl1),

	// Outputs.
	.Q   (sys4x_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_4 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_4 (
	// Inputs.
	.C   (sys4x_dqs_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (builder_xilinxasyncresetsynchronizerimpl2),

	// Outputs.
	.Q   (builder_xilinxasyncresetsynchronizerimpl2_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_5 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_5 (
	// Inputs.
	.C   (sys4x_dqs_clk),
	.CE  (1'd1),
	.D   (builder_xilinxasyncresetsynchronizerimpl2_rst_meta),
	.PRE (builder_xilinxasyncresetsynchronizerimpl2),

	// Outputs.
	.Q   (sys4x_dqs_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_6 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_6 (
	// Inputs.
	.C   (idelay_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (builder_xilinxasyncresetsynchronizerimpl3),

	// Outputs.
	.Q   (builder_xilinxasyncresetsynchronizerimpl3_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_7 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_7 (
	// Inputs.
	.C   (idelay_clk),
	.CE  (1'd1),
	.D   (builder_xilinxasyncresetsynchronizerimpl3_rst_meta),
	.PRE (builder_xilinxasyncresetsynchronizerimpl3),

	// Outputs.
	.Q   (idelay_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_8 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_8 (
	// Inputs.
	.C   (eth_tx_delayed_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (builder_xilinxasyncresetsynchronizerimpl4),

	// Outputs.
	.Q   (builder_xilinxasyncresetsynchronizerimpl4_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_9 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_9 (
	// Inputs.
	.C   (eth_tx_delayed_clk),
	.CE  (1'd1),
	.D   (builder_xilinxasyncresetsynchronizerimpl4_rst_meta),
	.PRE (builder_xilinxasyncresetsynchronizerimpl4),

	// Outputs.
	.Q   (builder_xilinxasyncresetsynchronizerimpl4_expr)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_10 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_10 (
	// Inputs.
	.C   (eth_tx_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (main_ethphy_reset),

	// Outputs.
	.Q   (builder_xilinxasyncresetsynchronizerimpl5_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_11 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_11 (
	// Inputs.
	.C   (eth_tx_clk),
	.CE  (1'd1),
	.D   (builder_xilinxasyncresetsynchronizerimpl5_rst_meta),
	.PRE (main_ethphy_reset),

	// Outputs.
	.Q   (eth_tx_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_12 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_12 (
	// Inputs.
	.C   (eth_rx_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (main_ethphy_reset),

	// Outputs.
	.Q   (builder_xilinxasyncresetsynchronizerimpl6_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_13 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_13 (
	// Inputs.
	.C   (eth_rx_clk),
	.CE  (1'd1),
	.D   (builder_xilinxasyncresetsynchronizerimpl6_rst_meta),
	.PRE (main_ethphy_reset),

	// Outputs.
	.Q   (eth_rx_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-05-27 13:34:46.
//------------------------------------------------------------------------------
