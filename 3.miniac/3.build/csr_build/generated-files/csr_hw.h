// ----------------------------------------------------------------------
// Auto-generated by sysrdl_cosim. *** DO NOT EDIT! ***
// Common WireGuard HAL header for both platform and co-simulation
//
// Copyright (C) 2025 Chili.CHIPS*ba
//
// ----------------------------------------------------------------------

#ifndef _CSR_BUILD_GENERATED_FILES_CSR_HW_H_ 
#define _CSR_BUILD_GENERATED_FILES_CSR_HW_H_

#include "csr.h"

#define WGMAIN          main

// -----------------------------------------------------
class imem_vp_t {
public:

    imem_vp_t(uint32_t* base_addr = (uint32_t*)0x0)
    {
    };

} ;

// -----------------------------------------------------
class dmem_vp_t {
public:

    dmem_vp_t(uint32_t* base_addr = (uint32_t*)0x10000000)
    {
    };

} ;

// -----------------------------------------------------
//
class csr__uart__rx_vp_t {
public:
    csr__uart__rx_vp_t (uint32_t* reg_addr = 0) : reg((csr__uart__rx_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     data(const uint32_t data) {reg->f.data = data;};
    inline uint32_t data()                    {return reg->f.data;};
    inline void     oflow(const uint32_t data) {reg->f.oflow = data;};
    inline uint32_t oflow()                    {return reg->f.oflow;};
    inline void     valid(const uint32_t data) {reg->f.valid = data;};
    inline uint32_t valid()                    {return reg->f.valid;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__uart__rx_t* reg;
};

// -----------------------------------------------------
//
class csr__uart__rx_trigger_read_2925067f_vp_t {
public:
    csr__uart__rx_trigger_read_2925067f_vp_t (uint32_t* reg_addr = 0) : reg((csr__uart__rx_trigger_read_2925067f_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     read(const uint32_t data) {reg->f.read = data;};
    inline uint32_t read()                    {return reg->f.read;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__uart__rx_trigger_read_2925067f_t* reg;
};

// -----------------------------------------------------
//
class csr__uart__tx_vp_t {
public:
    csr__uart__tx_vp_t (uint32_t* reg_addr = 0) : reg((csr__uart__tx_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     data(const uint32_t data) {reg->f.data = data;};
    inline uint32_t data()                    {return reg->f.data;};
    inline void     busy(const uint32_t data) {reg->f.busy = data;};
    inline uint32_t busy()                    {return reg->f.busy;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__uart__tx_t* reg;
};

// -----------------------------------------------------
//
class csr__uart__tx_trigger_write_d2a2fe0e_vp_t {
public:
    csr__uart__tx_trigger_write_d2a2fe0e_vp_t (uint32_t* reg_addr = 0) : reg((csr__uart__tx_trigger_write_d2a2fe0e_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     write(const uint32_t data) {reg->f.write = data;};
    inline uint32_t write()                    {return reg->f.write;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__uart__tx_trigger_write_d2a2fe0e_t* reg;
};

// -----------------------------------------------------
class csr__uart_vp_t {
public:

    csr__uart_vp_t(uint32_t* base_addr)
    {
        rx = new csr__uart__rx_vp_t (base_addr);
        rx_trigger = new csr__uart__rx_trigger_read_2925067f_vp_t (base_addr +
                                                                                   sizeof(csr__uart__rx_t)/4
                                                                                    );
        tx = new csr__uart__tx_vp_t (base_addr +
                                                                                   sizeof(csr__uart__rx_t)/4 + 
                                                                                   sizeof(csr__uart__rx_trigger_read_2925067f_t)/4
                                                                                    );
        tx_trigger = new csr__uart__tx_trigger_write_d2a2fe0e_vp_t (base_addr +
                                                                                   sizeof(csr__uart__rx_t)/4 + 
                                                                                   sizeof(csr__uart__rx_trigger_read_2925067f_t)/4 + 
                                                                                   sizeof(csr__uart__tx_t)/4
                                                                                    );
    };

    csr__uart__rx_vp_t* rx;
    csr__uart__rx_trigger_read_2925067f_vp_t* rx_trigger;
    csr__uart__tx_vp_t* tx;
    csr__uart__tx_trigger_write_d2a2fe0e_vp_t* tx_trigger;
} ;

// -----------------------------------------------------
//
class csr__gpio_vp_t {
public:
    csr__gpio_vp_t (uint32_t* reg_addr = 0) : reg((csr__gpio_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     key1(const uint32_t data) {reg->f.key1 = data;};
    inline uint32_t key1()                    {return reg->f.key1;};
    inline void     key2(const uint32_t data) {reg->f.key2 = data;};
    inline uint32_t key2()                    {return reg->f.key2;};
    inline void     led1(const uint32_t data) {reg->f.led1 = data;};
    inline uint32_t led1()                    {return reg->f.led1;};
    inline void     led2(const uint32_t data) {reg->f.led2 = data;};
    inline uint32_t led2()                    {return reg->f.led2;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__gpio_t* reg;
};

// -----------------------------------------------------
//
class csr__hw_id_vp_t {
public:
    csr__hw_id_vp_t (uint32_t* reg_addr = 0) : reg((csr__hw_id_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     PRODUCT(const uint32_t data) {reg->f.PRODUCT = data;};
    inline uint32_t PRODUCT()                    {return reg->f.PRODUCT;};
    inline void     VENDOR(const uint32_t data) {reg->f.VENDOR = data;};
    inline uint32_t VENDOR()                    {return reg->f.VENDOR;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__hw_id_t* reg;
};

// -----------------------------------------------------
//
class csr__adc_vp_t {
public:
    csr__adc_vp_t (uint32_t* reg_addr = 0) : reg((csr__adc_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     ch2(const uint32_t data) {reg->f.ch2 = data;};
    inline uint32_t ch2()                    {return reg->f.ch2;};
    inline void     ch1(const uint32_t data) {reg->f.ch1 = data;};
    inline uint32_t ch1()                    {return reg->f.ch1;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__adc_t* reg;
};

// -----------------------------------------------------
//
class csr__dac_vp_t {
public:
    csr__dac_vp_t (uint32_t* reg_addr = 0) : reg((csr__dac_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     ch2(const uint32_t data) {reg->f.ch2 = data;};
    inline uint32_t ch2()                    {return reg->f.ch2;};
    inline void     ch1(const uint32_t data) {reg->f.ch1 = data;};
    inline uint32_t ch1()                    {return reg->f.ch1;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__dac_t* reg;
};

// -----------------------------------------------------
//
class csr__hw_version_vp_t {
public:
    csr__hw_version_vp_t (uint32_t* reg_addr = 0) : reg((csr__hw_version_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     PATCH(const uint32_t data) {reg->f.PATCH = data;};
    inline uint32_t PATCH()                    {return reg->f.PATCH;};
    inline void     MINOR(const uint32_t data) {reg->f.MINOR = data;};
    inline uint32_t MINOR()                    {return reg->f.MINOR;};
    inline void     MAJOR(const uint32_t data) {reg->f.MAJOR = data;};
    inline uint32_t MAJOR()                    {return reg->f.MAJOR;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__hw_version_t* reg;
};

// -----------------------------------------------------
class csr_vp_t {
public:

    csr_vp_t(uint32_t* base_addr = (uint32_t*)0x20000000)
    {
        uart = new csr__uart_vp_t (base_addr);
        gpio = new csr__gpio_vp_t (base_addr +
                                                                                   sizeof(csr__uart_t)/4
                                                                                    );
        hw_id = new csr__hw_id_vp_t (base_addr +
                                                                                   sizeof(csr__uart_t)/4 + 
                                                                                   sizeof(csr__gpio_t)/4
                                                                                    );
        adc = new csr__adc_vp_t (base_addr +
                                                                                   sizeof(csr__uart_t)/4 + 
                                                                                   sizeof(csr__gpio_t)/4 + 
                                                                                   sizeof(csr__hw_id_t)/4
                                                                                    );
        dac = new csr__dac_vp_t (base_addr +
                                                                                   sizeof(csr__uart_t)/4 + 
                                                                                   sizeof(csr__gpio_t)/4 + 
                                                                                   sizeof(csr__hw_id_t)/4 + 
                                                                                   sizeof(csr__adc_t)/4
                                                                                    );
        hw_version = new csr__hw_version_vp_t (base_addr +
                                                                                   sizeof(csr__uart_t)/4 + 
                                                                                   sizeof(csr__gpio_t)/4 + 
                                                                                   sizeof(csr__hw_id_t)/4 + 
                                                                                   sizeof(csr__adc_t)/4 + 
                                                                                   sizeof(csr__dac_t)/4
                                                                                    );
    };

    csr__uart_vp_t* uart;
    csr__gpio_vp_t* gpio;
    csr__hw_id_vp_t* hw_id;
    csr__adc_vp_t* adc;
    csr__dac_vp_t* dac;
    csr__hw_version_vp_t* hw_version;
} ;


#endif
