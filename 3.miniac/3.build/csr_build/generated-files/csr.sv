// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module csr (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [5:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        input wire [31:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input csr_pkg::csr__in_t hwif_in,
        output csr_pkg::csr__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [5:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign cpuif_wr_biten = s_cpuif_wr_biten;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            logic rx;
            logic rx_trigger;
            logic tx;
            logic tx_trigger;
        } uart;
        logic gpio;
        logic hw_id;
        logic adc;
        logic dac;
        logic hw_version;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        decoded_reg_strb.uart.rx = cpuif_req_masked & (cpuif_addr == 6'h0);
        decoded_reg_strb.uart.rx_trigger = cpuif_req_masked & (cpuif_addr == 6'h4);
        decoded_reg_strb.uart.tx = cpuif_req_masked & (cpuif_addr == 6'h8);
        decoded_reg_strb.uart.tx_trigger = cpuif_req_masked & (cpuif_addr == 6'hc);
        decoded_reg_strb.gpio = cpuif_req_masked & (cpuif_addr == 6'h10);
        decoded_reg_strb.hw_id = cpuif_req_masked & (cpuif_addr == 6'h14);
        decoded_reg_strb.adc = cpuif_req_masked & (cpuif_addr == 6'h18);
        decoded_reg_strb.dac = cpuif_req_masked & (cpuif_addr == 6'h1c);
        decoded_reg_strb.hw_version = cpuif_req_masked & (cpuif_addr == 6'h20);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                struct {
                    logic next;
                    logic load_next;
                } read;
            } rx_trigger;
            struct {
                struct {
                    logic [7:0] next;
                    logic load_next;
                } data;
            } tx;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } write;
            } tx_trigger;
        } uart;
        struct {
            struct {
                logic next;
                logic load_next;
            } led1;
            struct {
                logic next;
                logic load_next;
            } led2;
        } gpio;
        struct {
            struct {
                logic [13:0] next;
                logic load_next;
            } ch2;
            struct {
                logic [13:0] next;
                logic load_next;
            } ch1;
        } dac;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                struct {
                    logic value;
                } read;
            } rx_trigger;
            struct {
                struct {
                    logic [7:0] value;
                } data;
            } tx;
            struct {
                struct {
                    logic value;
                } write;
            } tx_trigger;
        } uart;
        struct {
            struct {
                logic value;
            } led1;
            struct {
                logic value;
            } led2;
        } gpio;
        struct {
            struct {
                logic [13:0] value;
            } ch2;
            struct {
                logic [13:0] value;
            } ch1;
        } dac;
    } field_storage_t;
    field_storage_t field_storage;

    assign hwif_out.uart.rx.data.swacc = decoded_reg_strb.uart.rx;
    // Field: csr.uart.rx_trigger.read
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.uart.rx_trigger.read.value;
        load_next_c = '0;
        if(decoded_reg_strb.uart.rx_trigger && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.uart.rx_trigger.read.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = decoded_reg_strb.uart.rx;
            load_next_c = '1;
        end
        field_combo.uart.rx_trigger.read.next = next_c;
        field_combo.uart.rx_trigger.read.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.uart.rx_trigger.read.value <= 1'h0;
        end else begin
            if(field_combo.uart.rx_trigger.read.load_next) begin
                field_storage.uart.rx_trigger.read.value <= field_combo.uart.rx_trigger.read.next;
            end
        end
    end
    assign hwif_out.uart.rx_trigger.read.value = field_storage.uart.rx_trigger.read.value;
    // Field: csr.uart.tx.data
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.uart.tx.data.value;
        load_next_c = '0;
        if(decoded_reg_strb.uart.tx && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.uart.tx.data.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo.uart.tx.data.next = next_c;
        field_combo.uart.tx.data.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.uart.tx.data.value <= 8'h0;
        end else begin
            if(field_combo.uart.tx.data.load_next) begin
                field_storage.uart.tx.data.value <= field_combo.uart.tx.data.next;
            end
        end
    end
    assign hwif_out.uart.tx.data.value = field_storage.uart.tx.data.value;
    assign hwif_out.uart.tx.data.swmod = decoded_reg_strb.uart.tx && decoded_req_is_wr && |(decoded_wr_biten[7:0]);
    // Field: csr.uart.tx_trigger.write
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.uart.tx_trigger.write.value;
        load_next_c = '0;
        if(decoded_reg_strb.uart.tx_trigger && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.uart.tx_trigger.write.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = decoded_reg_strb.uart.tx && decoded_req_is_wr && |(decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo.uart.tx_trigger.write.next = next_c;
        field_combo.uart.tx_trigger.write.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.uart.tx_trigger.write.value <= 1'h0;
        end else begin
            if(field_combo.uart.tx_trigger.write.load_next) begin
                field_storage.uart.tx_trigger.write.value <= field_combo.uart.tx_trigger.write.next;
            end
        end
    end
    assign hwif_out.uart.tx_trigger.write.value = field_storage.uart.tx_trigger.write.value;
    // Field: csr.gpio.led1
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.gpio.led1.value;
        load_next_c = '0;
        if(decoded_reg_strb.gpio && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.gpio.led1.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.gpio.led1.next = next_c;
        field_combo.gpio.led1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.gpio.led1.value <= 1'h0;
        end else begin
            if(field_combo.gpio.led1.load_next) begin
                field_storage.gpio.led1.value <= field_combo.gpio.led1.next;
            end
        end
    end
    assign hwif_out.gpio.led1.value = field_storage.gpio.led1.value;
    // Field: csr.gpio.led2
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.gpio.led2.value;
        load_next_c = '0;
        if(decoded_reg_strb.gpio && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.gpio.led2.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.gpio.led2.next = next_c;
        field_combo.gpio.led2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.gpio.led2.value <= 1'h0;
        end else begin
            if(field_combo.gpio.led2.load_next) begin
                field_storage.gpio.led2.value <= field_combo.gpio.led2.next;
            end
        end
    end
    assign hwif_out.gpio.led2.value = field_storage.gpio.led2.value;
    assign hwif_out.hw_id.PRODUCT.value = 16'hc10c;
    assign hwif_out.hw_id.VENDOR.value = 16'hccae;
    // Field: csr.dac.ch2
    always_comb begin
        automatic logic [13:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.dac.ch2.value;
        load_next_c = '0;
        if(decoded_reg_strb.dac && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.dac.ch2.value & ~decoded_wr_biten[13:0]) | (decoded_wr_data[13:0] & decoded_wr_biten[13:0]);
            load_next_c = '1;
        end
        field_combo.dac.ch2.next = next_c;
        field_combo.dac.ch2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.dac.ch2.value <= 14'h0;
        end else begin
            if(field_combo.dac.ch2.load_next) begin
                field_storage.dac.ch2.value <= field_combo.dac.ch2.next;
            end
        end
    end
    assign hwif_out.dac.ch2.value = field_storage.dac.ch2.value;
    // Field: csr.dac.ch1
    always_comb begin
        automatic logic [13:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.dac.ch1.value;
        load_next_c = '0;
        if(decoded_reg_strb.dac && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.dac.ch1.value & ~decoded_wr_biten[29:16]) | (decoded_wr_data[29:16] & decoded_wr_biten[29:16]);
            load_next_c = '1;
        end
        field_combo.dac.ch1.next = next_c;
        field_combo.dac.ch1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.dac.ch1.value <= 14'h0;
        end else begin
            if(field_combo.dac.ch1.load_next) begin
                field_storage.dac.ch1.value <= field_combo.dac.ch1.next;
            end
        end
    end
    assign hwif_out.dac.ch1.value = field_storage.dac.ch1.value;
    assign hwif_out.hw_version.PATCH.value = 16'h0;
    assign hwif_out.hw_version.MINOR.value = 8'h1;
    assign hwif_out.hw_version.MAJOR.value = 8'h0;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[9];
    assign readback_array[0][7:0] = (decoded_reg_strb.uart.rx && !decoded_req_is_wr) ? hwif_in.uart.rx.data.next : '0;
    assign readback_array[0][29:8] = '0;
    assign readback_array[0][30:30] = (decoded_reg_strb.uart.rx && !decoded_req_is_wr) ? hwif_in.uart.rx.oflow.next : '0;
    assign readback_array[0][31:31] = (decoded_reg_strb.uart.rx && !decoded_req_is_wr) ? hwif_in.uart.rx.valid.next : '0;
    assign readback_array[1][0:0] = (decoded_reg_strb.uart.rx_trigger && !decoded_req_is_wr) ? field_storage.uart.rx_trigger.read.value : '0;
    assign readback_array[1][31:1] = '0;
    assign readback_array[2][7:0] = (decoded_reg_strb.uart.tx && !decoded_req_is_wr) ? field_storage.uart.tx.data.value : '0;
    assign readback_array[2][30:8] = '0;
    assign readback_array[2][31:31] = (decoded_reg_strb.uart.tx && !decoded_req_is_wr) ? hwif_in.uart.tx.busy.next : '0;
    assign readback_array[3][0:0] = (decoded_reg_strb.uart.tx_trigger && !decoded_req_is_wr) ? field_storage.uart.tx_trigger.write.value : '0;
    assign readback_array[3][31:1] = '0;
    assign readback_array[4][0:0] = (decoded_reg_strb.gpio && !decoded_req_is_wr) ? hwif_in.gpio.key1.next : '0;
    assign readback_array[4][1:1] = (decoded_reg_strb.gpio && !decoded_req_is_wr) ? hwif_in.gpio.key2.next : '0;
    assign readback_array[4][7:2] = '0;
    assign readback_array[4][8:8] = (decoded_reg_strb.gpio && !decoded_req_is_wr) ? field_storage.gpio.led1.value : '0;
    assign readback_array[4][9:9] = (decoded_reg_strb.gpio && !decoded_req_is_wr) ? field_storage.gpio.led2.value : '0;
    assign readback_array[4][31:10] = '0;
    assign readback_array[5][15:0] = (decoded_reg_strb.hw_id && !decoded_req_is_wr) ? 16'hc10c : '0;
    assign readback_array[5][31:16] = (decoded_reg_strb.hw_id && !decoded_req_is_wr) ? 16'hccae : '0;
    assign readback_array[6][11:0] = (decoded_reg_strb.adc && !decoded_req_is_wr) ? hwif_in.adc.ch2.next : '0;
    assign readback_array[6][15:12] = '0;
    assign readback_array[6][27:16] = (decoded_reg_strb.adc && !decoded_req_is_wr) ? hwif_in.adc.ch1.next : '0;
    assign readback_array[6][31:28] = '0;
    assign readback_array[7][13:0] = (decoded_reg_strb.dac && !decoded_req_is_wr) ? field_storage.dac.ch2.value : '0;
    assign readback_array[7][15:14] = '0;
    assign readback_array[7][29:16] = (decoded_reg_strb.dac && !decoded_req_is_wr) ? field_storage.dac.ch1.value : '0;
    assign readback_array[7][31:30] = '0;
    assign readback_array[8][15:0] = (decoded_reg_strb.hw_version && !decoded_req_is_wr) ? 16'h0 : '0;
    assign readback_array[8][23:16] = (decoded_reg_strb.hw_version && !decoded_req_is_wr) ? 8'h1 : '0;
    assign readback_array[8][31:24] = (decoded_reg_strb.hw_version && !decoded_req_is_wr) ? 8'h0 : '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<9; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
